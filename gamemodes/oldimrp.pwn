/*
--------------------------------------------------------------------------------
				 ___   _____            ____________________
				|   | /     \           \______   \______   \
				|   |/  \ /  \   ______  |       _/|     ___/
				|   /    Y    \ /_____/  |    |   \|    |
				|___\____|__  /          |____|_  /|____|
				            \/                  \/
--------------------------------------------------------------------------------
			 __________________________________________________
			|												   |
			|              Imperious Roleplay          		   |
			|              ------------------              	   |
			|          Created by: aeronix and Vishnu     	   |
			|     Copyright © 2013, Imperious Roleplay	       |
			|__________________________________________________|
*/
//------------------------------------------------------------------------------
// SERVER CONFIGURATION
//------------------------------------------------------------------------------
#define         SERVER_NAME			"Imperious Roleplay"
#define         SERVER_RCON			"imrpgeek"
#define         SERVER_PASSWORD		"0"
#define         SERVER_VERSION		"IM:RP v2.0.1"
#define         SERVER_MAP			"Los Santos"
#define         SERVER_WEBSITE		"www.im-rp.net"
#define         SERVER_TEAMSPEAK	"N/A"

#define 		MYSQL_HOST  		"localhost"
#define 		MYSQL_USERNAME  	"root"
#define 		MYSQL_PASSWORD  	"password"
#define 		MYSQL_DATABASE  	"wasteland"
#define 		MYSQL_DEBUG_MODE	false
//------------------------------------------------------------------------------
// PREPROCESSOR DIRECTIVES
//------------------------------------------------------------------------------
#include <a_samp>
#include <a_mysql>
#include <a_zones>
#include <foreach>
#include <streamer>
#include <sscanf2>
#include <zcmd>
#include <YSI\y_timers>
#include <YSI\y_hooks>
#include <YSI\y_flooding>
//------------------------------------------------------------------------------
// MACROS
//------------------------------------------------------------------------------

#define TAX_PERCENTAGE              (25)
#define FUEL_COST           		(2)

#define MAX_FACTIONS    			(7)
#define MAX_FAMILIES    			(6)
#define MAX_WAYPOINTS   			(1000)
#define MAX_BUSINESSES				(1000)
#define MAX_HOUSES      			(1000)
#define MAX_PH						(100000)
#define MAX_PLAYEROWNED_VEHICLES    (3)
#define MAX_ACCENTS				    (13)
#define MAX_GATES 					(100)
#define MAX_HITMAN_BOMBS            (5)
#define MAX_LOGIN_ATTEMPTS  		(5)

#define ALERT_GLOBAL    			(1)
#define ALERT_ADMINS    			(2)

#define ADMIN_LEVEL_MODERATOR       (1)
#define ADMIN_LEVEL_TRIALADMIN      (2)
#define ADMIN_LEVEL_JUNIORADMIN   	(3)
#define ADMIN_LEVEL_SENIORADMIN     (4)
#define ADMIN_LEVEL_LEADADMIN       (5)

#define WEAPON_TYPE_NONE 			(0)
#define WEAPON_TYPE_HEAVY   		(1)
#define WEAPON_TYPE_LIGHT   		(2)
#define WEAPON_TYPE_MELEE   		(3)

// Color codes
#define COLOR_WHITE 		0xFFFFFFAA
#define COLOR_GREY			0xB4B5B7FF
#define COLOR_LIGHTYELLOW   0xFFF480AA
#define COLOR_TEAL          0x008080AA
#define COLOR_YELLOW 		0xFFFF00AA
#define COLOR_RED 			0xAA3333AA
#define COLOR_ORANGE 		0xF69521AA
#define COLOR_GREEN 		0x33AA33AA
#define COLOR_GOLD	 		0xFFD700FF
#define COLOR_LIME 			0x00FF00FF
#define COLOR_HOTPINK 		0xFF69B4FF
#define COLOR_CYAN 			0x00FFFFFF
#define COLOR_BLACK 		0x000000FF
#define COLOR_LAVENDER 		0xE6E6FAFF
#define COLOR_LIGHTRED 		0xFF6347AA
#define COLOR_CYANBLUE 		0x01FCFFC8
#define COLOR_LIGHTBLUE 	0x33CCFFAA
#define COLOR_PURPLE 		0xC2A2DAAA
#define COLOR_FADE1 		0xE6E6E6E6
#define COLOR_FADE2 		0xC8C8C8C8
#define COLOR_FADE3 		0xAAAAAAAA
#define COLOR_FADE4 		0x8C8C8C8C
#define COLOR_FADE5 		0x6E6E6E6E
#define COLOR_RADIO			0x8D8DFFFF
#define RADIO_DEPT			0xFFD7004A

#define TEAM_COLOR_LSPD		0x33CCFFAA
#define TEAM_COLOR_LSFMD	0xFF828200
#define TEAM_COLOR_GOV		0xB4B5B7FF
#define TEAM_COLOR_FBI		0x8D8DFFFF
#define TEAM_COLOR_NEWS     0x008080AA
#define TEAM_COLOR_DOC		0x993300AA

// Constants, DO NOT TOUCH BELOW UNLESS NECESSARY
#define THREAD_ACCOUNT_LOOKUP       (1)
#define THREAD_ACCOUNT_REGISTER     (2)
#define THREAD_REGISTER_SPAWN       (3)
#define THREAD_NO_RESULT         	(4)
#define THREAD_LOG_RESULT           (5)
#define THREAD_IP_LOOKUP            (6)

#define BAN_TEMPORARY	            (0)
#define BAN_PERMANENT	            (1)

#define BUSINESS_TYPE_UNDEFINED     (0)
#define BUSINESS_TYPE_STORE         (1)
#define BUSINESS_TYPE_CLOTHING      (2)
#define BUSINESS_TYPE_CLUB          (3)
#define BUSINESS_TYPE_HORSEBET      (4)
#define BUSINESS_TYPE_SEXSTORE      (5)
#define BUSINESS_TYPE_PIZZA		    (6)
#define BUSINESS_TYPE_DONUTS	    (7)
#define	BUSINESS_TYPE_AMMUNATION	(8)
#define	BUSINESS_TYPE_GYM			(9)
#define	BUSINESS_TYPE_BURGERSHOT	(10)
#define	BUSINESS_TYPE_CLUCKINGBELL	(11)

// Dialog IDs
#define DIALOG_NO_RESULT 			(0)
#define DIALOG_REGISTER 			(1)
#define DIALOG_LOGIN    			(2)
#define DIALOG_GENDER   			(3)
#define DIALOG_AGE   				(4)
#define DIALOG_ARRIVAL 				(5)
#define DIALOG_SKIN 				(6)

#define DIALOG_LOCKER_MAIN     		(1101)
#define DIALOG_LOCKER_LSPD          (1111)
#define DIALOG_LOCKER_GOV	        (1112)
#define DIALOG_LOCKER_FBI          	(1113)
#define DIALOG_LOCKER_LSFMD         (1114)

#define DIALOG_CITY_HALL_MENU       (4010)
#define DIALOG_CITY_HALL_NC			(4011)

#define DIALOG_STORE_BUY            (200)
#define DIALOG_CLUB_BUY	            (201)
#define DIALOG_CLOTHES_BUY          (202)
#define DIALOG_SEXSTORE_BUY         (203)
#define DIALOG_AMMUNATION_BUY       (204)

#define	DIALOG_WAYPOINT_EDIT    	(100)
#define	DIALOG_WAYPOINT_SUBMIT  	(101)
#define	DIALOG_BUSINESS_EDIT    	(110)
#define	DIALOG_BUSINESS_SUBMIT  	(111)
#define	DIALOG_BUSINESS_ADMIN 		(112)
#define	DIALOG_BUSINESS_ADMIN_EDIT	(113)
#define	DIALOG_FAMILY_ADMIN 		(114)
#define	DIALOG_FAMILY_ADMIN_EDIT	(115)
#define	DIALOG_HOUSE_ADMIN 			(116)
#define	DIALOG_HOUSE_ADMIN_EDIT		(117)
#define DIALOG_GATE_EDIT            (118)
#define DIALOG_GATE_SUBMIT          (119)

#define DIALOG_DEALERSHIP_BUY       (300)
#define DIALOG_COLLECT_PLANT        (301)
#define DIALOG_DELETE_CAR           (302)
#define DIALOG_TRACK_CAR            (303)
#define DIALOG_RECEIVE_CAR          (304)
#define DIALOG_TELEPORT_CAR         (305)
#define DIALOG_CHANGE_PASSWORD      (306)
#define DIALOG_BRING_CAR  	        (307)
#define DIALOG_DMV_IMPOUND   	    (308)

#define VEHICLE_RESPAWN 			-1
#define INVALID_WAYPOINT_ID     	-1
#define INVALID_BUSINESS_ID     	-1
#define INVALID_HOUSE_ID     		-1
#define INVALID_GATE_ID             -1
#define INVALID_DEALERSHIP_ID       -1
#define INVALID_SLOT_ID             -1

#define IsPlayerTabbed(%0) gettime() > (LastUpdate[%0] + 2)

forward OnPlayerChangeWeapon(playerid, weapon);
forward OnQueryFinish(query[], resultid, extraid, connectionHandle);
forward ConsumeGlobalFuel();
forward PayDay();
forward MySQL_Change_Name(playerid, newname[], connectionHandle);
forward MySQL_Offline_Ban(name[], reason[], days, adminid, connectionHandle);
forward SetServerToRestart();
forward ResetLSPDDoors();
forward BackupTimer(playerid);
forward MySQL_Delete_Number(number, playerid, connectionHandle);
forward MySQL_Unban_Player(name[], adminid, connectionHandle);
forward MySQL_Unban_Ip(ip[], adminid, connectionHandle);
forward MySQL_ConnectionCheck();
forward MySQL_Family_Load(connectionHandle);
forward MySQL_Business_Load(connectionHandle);
forward MySQL_Vault_Load(connectionHandle);
forward MySQL_House_Load(connectionHandle);
forward MySQL_Waypoint_Load(connectionHandle);
forward MySQL_Gates_Load(connectionHandle);
forward LoadPlayerAccount(playerid, connectionHandle);
forward SavePlayerAccount(playerid, connectionHandle);
forward SetPlayerToTeamColor(playerid);

native IsValidVehicle(vehicleid);
native WP_Hash(buffer[], len, const str []);

encode_tires(tire1, tire2, tire3, tire4) return tire1 | (tire2 << 1) | (tire3 << 2) | (tire4 << 3);
encode_panels(flp, frp, rlp, rrp, windshield, front_bumper, rear_bumper)
{
    return flp | (frp << 4) | (rlp << 8) | (rrp << 12) | (windshield << 16) | (front_bumper << 20) | (rear_bumper << 24);
}
encode_doors(bonnet, boot, driver_door, passenger_door, behind_driver_door, behind_passenger_door)
{
    #pragma unused behind_driver_door
    #pragma unused behind_passenger_door
    return bonnet | (boot << 8) | (driver_door << 16) | (passenger_door << 24);
}
encode_lights(light1, light2, light3, light4)
{
    return light1 | (light2 << 1) | (light3 << 2) | (light4 << 3);
}


new mConnectionHandle, mReconnectAttempts;

enum ePlayerData
{
	pId,
	pUsername[MAX_PLAYER_NAME],
	pPassword[128],
	pBanned,
	pTutorial,
	pGender,
	pAge,
	pArrival,
	pAdminLevel,
	pMoney,
	pSkin,
	pLevel,
	pExperience,
	pPlayingHours,
	Float:pPositionX,
	Float:pPositionY,
	Float:pPositionZ,
	Float:pFacingAngle,
	Float:pHealth,
	Float:pArmour,
	pInterior,
	pVirtualWorld,
	pHunger,
	pHydration,
	pReportMute,
	pAdMute,
	pWeapons[12],
	pJailTime,
	pJob,
	pFaction,
	pFamily,
	pLeadership,
	pRank,
	pDivision,
	pWantedLevel,
	pDuty,
	pMedicalBill,
	pBankBalance,
	pDriverLicense,
	pJackedCar,
	pWalkieTalkie,
	pChannel,
	pPhoneToggled,
	pPhoneNumber,
	pPhonebook,
	pSprayCan,
	pBombs,
	pGps,
	pPhonebookRemoval,
	pGunLicense,
	pSeeds,
	pWeed,
	Float:pPlantPosition[5],
	pPlantGrowth,
	pGasCans,
	pFish[5],
	pFishedAlready,
	pHitman,
	pContractPrice,
	pContractReason[33],
	pContractBy[MAX_PLAYER_NAME],
	pPaycheck,
	pSecondaryTask,
	pAccent,
	pCompletedHits,
	pReports,
	pTogPM,
	pReloadingTaser
}
new PlayerInfo[MAX_PLAYERS][ePlayerData];

enum ePlayerVehicleData
{
	pvHandleId,
	pvModelId,
	Float:pvPosition[4],
	pvLocked,
	pvPaintJob,
	pvCarColor[2],
	pvImpounded,
	pvTicketPrice
}
new PlayerVehicleInfo[MAX_PLAYERS][MAX_PLAYEROWNED_VEHICLES][ePlayerVehicleData];

enum eVehicleData
{
	vStarted,
	vTotalled,
	vEngine,
	vLights,
	vAlarm,
	vDoors,
	vBonnet,
	vBoot,
	vObjective,
	vFuel,
	vLocked
}
new VehicleInfo[MAX_VEHICLES][eVehicleData];

enum eWaypointData
{
	wExistant,
	wTextDisplay[65],
	wPassword[9],
	wLocked,
	Float:wPosition[3],
	wInterior,
	wVirtualWorld,
	Float:wFacingAngle,
	wLoadingTime,
	Float:wDestPosition[3],
	wDestInterior,
	wDestVirtualWorld,
	Float:wDestFacingAngle,
	wDestLoadingTime,
	wFactionRestriction,
	Text3D:wTextLabel
}
new WaypointInfo[MAX_WAYPOINTS+1][eWaypointData];

enum eBusinessData
{
	bExistant,
	bName[17],
	bOwner[MAX_PLAYER_NAME],
	Float:bPosition[3],
	Float:bFacingAngle,
	bInterior,
	bEarnings,
	bVirtualWorld,
	bOpen,
	bBuyPrice,
	bMapIcon,
	Text3D:bTextLabel
}
new BusinessInfo[MAX_BUSINESSES+1][eBusinessData];

enum eHouseData
{
	hExistant,
	hOwner[MAX_PLAYER_NAME],
	Float:hPosition[3],
	Float:hFacingAngle,
	hInterior,
	hVirtualWorld,
	hBuyPrice,
	hOpen,
	Text3D:hTextLabel,
	hPickupIcon
}
new HouseInfo[MAX_HOUSES+1][eHouseData];

enum eFamilyData
{
	fName[25],
	fMotd[129],
	fRank1[13],
	fRank2[13],
	fRank3[13],
	fRank4[13],
	fRank5[13],
	fRank6[13],
	Float:fSafePosition[3],
	fSafeItems[2],
	Text3D:fSafeDisplay
}
new FamilyInfo[MAX_FAMILIES+1][eFamilyData];

#define MAX_CAR_DEALERSHIPS 		10
#define MAX_DEALERSHIP_VEHICLES     12

enum eCarDealershipData
{
	Float:dPosition[3],
	dvHandle[MAX_DEALERSHIP_VEHICLES],
	Text3D:dvLabel[MAX_DEALERSHIP_VEHICLES],
	dvModel[MAX_DEALERSHIP_VEHICLES],
	dvPrice[MAX_DEALERSHIP_VEHICLES],
	Float:dvPosX[MAX_DEALERSHIP_VEHICLES],
	Float:dvPosY[MAX_DEALERSHIP_VEHICLES],
	Float:dvPosZ[MAX_DEALERSHIP_VEHICLES],
	Float:dvAngle[MAX_DEALERSHIP_VEHICLES]
}
new DealershipInfo[MAX_CAR_DEALERSHIPS][eCarDealershipData];

enum eGateData
{
	gPassword[13],
	gModel,
	gObjectHandle,
	Text3D:gTextDisplay,
	gSpeed,
	gState,
	Float:gPosition[3],
	Float:gRotation[3],
	Float:gDestPosition[3],
	Float:gDestRotation[3]
}
new GateInfo[MAX_GATES][eGateData];

enum eVaultData
{
	Float:vPosition[3],
	vMoney,
	Text3D:vTextDisplay
}
new VaultInfo[MAX_FACTIONS+1][eVaultData];

new Float:WeedPlants[20][3] =
{
	{168.02, 2328.90, 17.27},
	{408.24, 2427.03, 16.49},
	{818.53, 2775.44, 75.78},
	{503.45, 1974.67, 54.39},
	{-630.38, 1511.52, 30.03},
	{-631.772, 1544.705, 32.027},
	{-689.887, 1598.577, 25.642},
	{-689.887, 1598.577, 25.642},
	{-1023.69, 2055.43, 103.49},
	{-919.529, 1867.488, 116.117},
	{-554.47, 1745.72, 110.79},
	{-199.21, 1779.56, 99.14},
	{-345.58, 2787.37, 91.91},
	{252.94, 2625.21, 16.48},
	{173.90, 2587.18, 17.68},
	{-861.85, 2427.81, 84.24},
	{-810.99, 2429.23, 156.96},
	{-772.31, 2423.40, 157.09},
	{-145.77, 1639.42, 16.26},
	{-424.38, 1383.17, 14.24}
};

/*new fine_weather_ids[] = {1,2,3,4,5,6,7,12,13,14,15,17,18,24,25,26,27,28,29,30,40};
new foggy_weather_ids[] = {9,19,20,31,32};
new wet_weather_ids[] = {8};*/

new FireObject, SmokeObject, FireHealth, Text3D:FireText;

enum eWeedData
{
	wpObjectHandle
}
new PlantData[sizeof(WeedPlants)][eWeedData];

new VehicleNames[212][] = {
	{"Landstalker"},{"Bravura"},{"Buffalo"},{"Linerunner"},{"Perrenial"},{"Sentinel"},{"Dumper"},
	{"Firetruck"},{"Trashmaster"},{"Stretch"},{"Manana"},{"Infernus"},{"Voodoo"},{"Pony"},{"Mule"},
	{"Cheetah"},{"Ambulance"},{"Leviathan"},{"Moonbeam"},{"Esperanto"},{"Taxi"},{"Washington"},
	{"Bobcat"},{"Mr Whoopee"},{"BF Injection"},{"Hunter"},{"Premier"},{"Enforcer"},{"Securicar"},
	{"Banshee"},{"Predator"},{"Bus"},{"Rhino"},{"Barracks"},{"Hotknife"},{"Trailer 1"},{"Previon"},
	{"Coach"},{"Cabbie"},{"Stallion"},{"Rumpo"},{"RC Bandit"},{"Romero"},{"Packer"},{"Monster"},
	{"Admiral"},{"Squalo"},{"Seasparrow"},{"Pizzaboy"},{"Tram"},{"Trailer 2"},{"Turismo"},
	{"Speeder"},{"Reefer"},{"Tropic"},{"Flatbed"},{"Yankee"},{"Caddy"},{"Solair"},{"Berkley's RC Van"},
	{"Skimmer"},{"PCJ-600"},{"Faggio"},{"Freeway"},{"RC Baron"},{"RC Raider"},{"Glendale"},{"Oceanic"},
	{"Sanchez"},{"Sparrow"},{"Patriot"},{"Quad"},{"Coastguard"},{"Dinghy"},{"Hermes"},{"Sabre"},
	{"Rustler"},{"ZR-350"},{"Walton"},{"Regina"},{"Comet"},{"BMX"},{"Burrito"},{"Camper"},{"Marquis"},
	{"Baggage"},{"Dozer"},{"Maverick"},{"News Chopper"},{"Rancher"},{"FBI Rancher"},{"Virgo"},{"Greenwood"},
	{"Jetmax"},{"Hotring"},{"Sandking"},{"Blista Compact"},{"Police Maverick"},{"Boxville"},{"Benson"},
	{"Mesa"},{"RC Goblin"},{"Hotring Racer A"},{"Hotring Racer B"},{"Bloodring Banger"},{"Rancher"},
	{"Super GT"},{"Elegant"},{"Journey"},{"Bike"},{"Mountain Bike"},{"Beagle"},{"Cropdust"},{"Stunt"},
	{"Tanker"}, {"Roadtrain"},{"Nebula"},{"Majestic"},{"Buccaneer"},{"Shamal"},{"Hydra"},{"FCR-900"},
	{"NRG-500"},{"HPV1000"},{"Cement Truck"},{"Tow Truck"},{"Fortune"},{"Cadrona"},{"FBI Truck"},
	{"Willard"},{"Forklift"},{"Tractor"},{"Combine"},{"Feltzer"},{"Remington"},{"Slamvan"},
	{"Blade"},{"Freight"},{"Streak"},{"Vortex"},{"Vincent"},{"Bullet"},{"Clover"},{"Sadler"},
	{"Firetruck LA"},{"Hustler"},{"Intruder"},{"Primo"},{"Cargobob"},{"Tampa"},{"Sunrise"},{"Merit"},
	{"Utility"},{"Nevada"},{"Yosemite"},{"Windsor"},{"Monster A"},{"Monster B"},{"Uranus"},{"Jester"},
	{"Sultan"},{"Stratum"},{"Elegy"},{"Raindance"},{"RC Tiger"},{"Flash"},{"Tahoma"},{"Savanna"},
	{"Bandito"},{"Freight Flat"},{"Streak Carriage"},{"Kart"},{"Mower"},{"Duneride"},{"Sweeper"},
	{"Broadway"},{"Tornado"},{"AT-400"},{"DFT-30"},{"Huntley"},{"Stafford"},{"BF-400"},{"Newsvan"},
	{"Tug"},{"Trailer 3"},{"Emperor"},{"Wayfarer"},{"Euros"},{"Hotdog"},{"Club"},{"Freight Carriage"},
	{"Trailer 3"},{"Andromada"},{"Dodo"},{"RC Cam"},{"Launch"},{"Police Car (LSPD)"},{"Police Car (SFPD)"},
	{"Police Car (LVPD)"},{"Police Ranger"},{"Picador"},{"S.W.A.T. Van"},{"Alpha"},{"Phoenix"},{"Glendale"},
	{"Sadler"},{"Luggage Trailer A"},{"Luggage Trailer B"},{"Stair Trailer"},{"Boxville"},{"Farm Plow"},
	{"Utility Trailer"}
};

new Float:JailPositions[12][3] =
{
	{1827.8192,-1732.0103,5202.5860},
	{1831.1414,-1731.7429,5202.5860},
	{1833.8763,-1731.8950,5202.5860},
	{1837.5924,-1732.0557,5202.5860},
	{1840.4893,-1731.1014,5202.5860},
	{1843.9679,-1731.6101,5202.5860},
	{1843.8910,-1711.8413,5202.5860},
	{1840.3875,-1712.3840,5202.5860},
	{1837.4028,-1711.9944,5202.5860},
	{1834.0612,-1711.8357,5202.5860},
	{1830.8110,-1712.3029,5202.5860},
	{1827.6277,-1712.2239,5202.5860}
};

new Float:PizzaDeliveryLocations[10][3] =
{
	{1939.0840, -1114.4823, 27.4523},
	{2808.0171, -1190.8864, 25.3426},
	{2472.3416, -962.0449, 80.5255},
	{2439.5901, -1357.1626, 24.1006},
	{2550.1792, -1209.0493, 54.5409},
	{1440.6385, -926.1325, 39.6477},
	{2073.3784, -965.1572, 49.3899},
	{2850.9460, -1532.4747, 11.0991},
	{2851.8508, -1366.0016, 14.1708},
	{2438.7085, -1105.7909, 43.0816}
};

new Float:TruckRouteLocations[13][3] =
{
	{1087.011, -1379.902, 13.781},
	{1445.39, -1155.37, 23.76},
	{1988.65, -1081.47, 24.75},
	{2414.29, -1251.06, 23.80},
	{2412.958, -1486.592, 23.817},
	{2302.23, -1638.32, 14.60},
	{2245.00, -1661.10, 15.36},
	{1922.97, -1789.60, 13.37},
	{1826.70, -1842.57, 13.48},
	{1632.05, -1684.68, 13.44},
	{2756.13, -2465.27, 13.50},
	{1993.35, -1279.54, 23.81},
	{1723.44, 711.07, 10.81}
};

new Float:DMVCheckpoints[10][3] =
{
	{1117.269653, -1216.519042, 17.815765},
	{1079.206909, -1207.890747, 17.759998},
	{1056.198364, -1300.060424, 13.419418},
	{924.628906, -1321.412597, 13.321738},
	{915.450012, -1385.711914, 13.151903},
	{1060.888183, -1381.276367, 13.367445},
	{1060.050048, -1287.214599, 13.620586},
	{1206.831787, -1283.635009, 13.246459},
	{1218.769653, -1219.289550, 17.783643},
	{1130.717041, -1207.904174, 18.110500}
};

new Float:SweeperRoutes[2][10][3] =
{
	// Route #1
	{{1013.184082,-1328.971557,13.149881},
	{1056.030639,-1382.181640,13.255521},
	{1048.002075,-1490.977539,13.154969},
	{931.346374,-1487.185302,13.143348},
	{914.965515,-1559.106201,13.141556},
	{808.294311,-1659.823364,13.144604},
	{653.546752,-1670.177124,14.169066},
	{639.602600,-1328.576416,13.155508},
	{782.280395,-1323.618408,13.155263},
	{1006.129089,-1342.890502,13.126988}},
	// Route #2
	{{981.65, -1318.99, 13.10},
	{799.75, -1304.98, 13.11},
	{807.31, -1055.32, 24.54},
	{960.76, -988.04, 37.85},
	{975.60, -1148.44, 23.73},
	{1340.53, -1164.05, 23.47},
	{1330.66, -1277.67, 13.11},
	{1195.10, -1381.75, 13.03},
	{1060.47, -1382.36, 13.22},
	{1006.12, -1342.89, 13.12}}
};

// X:Y:Z:FacingAngle:Interior
new Float:BusinessInterior[30][5] = {
	{	834.340, 	7.44, 		1004.187, 	88.029, 3.0		}, 	//1 Horse Betting Place
	{	1212.127, 	-26.215, 	1000.953, 	180.00, 3.0		}, 	//2 Small Size Strip Club
	{	418.644, 	-84.143, 	1001.804, 	0.0, 	3.0		}, 	//3 Modern barber shop
	{	206.966, 	-139.892, 	1003.507, 	0.0, 	3.0		}, 	//4 ProLaps Store
	{	-100.297, 	-24.759, 	1000.718, 	0.0, 	3.0		}, 	//5 Sex Store
	{	-204.373, 	-44.028, 	1002.273, 	0.0, 	3.0		}, 	//6 Tiny Barber Shop
	{	373.326, 	-133.234, 	1001.492, 	0.0, 	5.0		}, 	//7 Pizza Stack Co
	{	377.204, 	-193.019, 	1000.640, 	0.0, 	17.0	}, 	//8 Rusty Brown Donuts
	{	226.831, 	-8.191, 	1002.210, 	90.0, 	5.0		}, 	//9 Victim Clothing Store
	{	315.786, 	-143.406, 	999.601, 	360.0, 	7.0		}, 	//10 Ammunation Interior
	{	773.862, 	-78.419, 	1000.662, 	0.0, 	7.0		}, 	//11 LV Gym Interior
	{	285.742, 	-41.487, 	1001.515, 	0.0, 	1.0		}, 	//12 Medium Ammunation
	{	203.783, 	-50.361, 	1001.804, 	354.70, 1.0		}, 	//13 Urban Clothing Store
	{	1204.833, 	-13.524, 	1000.921, 	0.0, 	2.0		}, 	//14 The Pig Pen
	{	363.068, 	-74.919, 	1001.507, 	318.14, 10.0	}, 	//15 Burger Shot
	{	411.631, 	-22.824, 	1001.804, 	356.0, 	2.0		}, 	//16 Reeces Barber Shop
	{	161.399, 	-96.461, 	1001.804, 	0.0, 	18.0	}, 	//17 Zip Clothing Store
	{	204.372, 	-168.549, 	1000.523, 	0.0, 	14.0	}, 	//18 Didier Sachs
	{	493.340, 	-24.416, 	1000.679, 	0.0, 	17.0	}, 	//19 Club Interior
	{	-25.943, 	-141.057, 	1003.546, 	0.0, 	16.0	}, 	//20 24/7 (Version 4)
	{	207.614, 	-110.704, 	1005.132, 	0.0, 	15.0	}, 	//21 Binco Store
	{	-228.941, 	1401.137, 	27.765, 	270.0, 	18.0	}, 	//22 Lil Probe Inn
	{	460.022, 	-88.648, 	999.554, 	90.0, 	4.0		}, 	//23 Jay's Diner
	{	412.042, 	-54.243, 	1001.898, 	0.0, 	12.0	}, 	//24 Modern Barber Store #2
	{	774.105, 	-49.940, 	1000.585, 	0.0, 	6.0		}, 	//25 SF Cobra Gym
	{	-2240.356, 	137.191, 	1035.414, 	270.0, 	6.0		}, 	//26 Zero's RC Store
	{	296.915, 	-111.586, 	1001.515, 	0.0, 	6.0		}, 	//27 Ammunation (Version 4)
	{	316.338, 	-169.920, 	999.601, 	0.0, 	6.0		}, 	//28 Ammunation (Version 5)
	{	364.913, 	-11.085, 	1001.851, 	0.0, 	9.0		}, 	//29 Clucking Bell
	{   501.859, 	-67.912, 	998.757, 	177.49, 11.0	} 	//30 Ten Green Bottles Bar
};

// X:Y:Z:FacingAngle:Interior
new Float:HouseInterior[21][5] = {
    {	243.819, 	304.995, 	999.148, 	265.25, 1.0		}, // 1 Denise's Room
	{	2468.731, 	-1698.267, 	1013.507, 	83.90, 	2.0		}, // 2 Ryder's House
	{	2495.979, 	-1692.197, 	1014.742, 	174.5, 	3.0		}, // 3 The Johnson House
	{	266.611, 	305.011, 	999.148, 	267.1, 	2.0		}, // 4 Katie's Lovenest
	{	1260.749, 	-785.410, 	1091.906, 	266.5, 	5.0		}, // 5 Madd Dogg's Mansion
	{	422.469, 	2536.560, 	10.000, 	86.43, 	10.0	}, // 6 Abandoned AC Tower
	{	2233.693, 	-1115.155, 	1050.882, 	357.2, 	5.0		}, // 7 Safe House 1
	{	2317.802, 	-1026.669, 	1050.217, 	357.53, 9.0		}, // 8 Safe House 3
	{	223.179, 	1287.189, 	1082.140, 	356.95, 1.0		}, // 9 Burglary House X3
	{	226.381, 	1114.203, 	1080.993, 	270.0,	5.0		}, // 10 Burglary House X4
	{	295.174, 	1472.370, 	1080.257, 	355.9, 	15.0	}, // 11 Burglary houses
	{	446.799, 	506.432, 	1001.419, 	357.2, 	12.0	}, // 12 Budget Inn Motel Room
	{	447.076, 	1397.180, 	1084.304, 	356.66, 2.0		}, // 13 Pair of Burglary Houses
	{	226.384, 	1114.271, 	1080.993, 	266.5, 	5.0		}, // 14 Crack Den
	{	23.986, 	1340.279, 	1084.375, 	356.98,	10.0	}, // 15 Unused Safe House
	{	23.986, 	1340.279, 	1084.375, 	356.98,	10.0	}, // 16 Burglary House X14
	{	22.843, 	1403.439, 	1084.437, 	353.65,	5.0		}, // 17 Burglary House X16
	{	140.318, 	1366.030, 	1083.859, 	359.03,	5.0		}, // 18 Burglary House X17
	{	234.110, 	1063.830, 	1084.212, 	356.53,	6.0		}, // 19 Burglary House X18
	{	2807.645, 	-1174.645, 	1025.570, 	356.54,	8.0		}, // 20 Colonel Furhberger's
	{	2365.261, 	-1135.479, 	1050.882, 	355.34,	8.0		} // 21 Verdant Bluffs Safehouse
};

// Vehicle Handles
new
	LSPDVehicles[34],
	LSFMDVehicles[10],
	FBIVehicles[13],
	PAVehicles[11],
	TaxiVehicles[4],
	PizzaVehicles[12],
	LSPDGates[3],
	FBIGates[2],
	DMVVehicles[5],
	TruckerVehicles[6],
	SweeperVehicles[8],
	RentableVehicles[14]
;

// TextDraws
new
	Text:JailTimerTD[MAX_PLAYERS],
	Text:LoadingObjectTextDraw,
	Text:LoadingObjectBox,
	Text:StopAnim,
	Text:Blood[3]
;

// Timers
new
	Timer:JailTimerEx[MAX_PLAYERS],
	Timer:RefuelTimer[MAX_PLAYERS],
//	Timer:TutorialTimerEx[MAX_PLAYERS],
	Timer:TaxiRouteTimerEx[MAX_PLAYERS],
	Timer:BackupTimerEx[MAX_PLAYERS]
;

// Player Arrays
new
	CurrentDialog[MAX_PLAYERS],
	RefillAmount[MAX_PLAYERS],
	WeedPlant[MAX_PLAYERS],
    gLoginAttempts[MAX_PLAYERS],
	pCurrentWeapon[MAX_PLAYERS],
	LastGun[MAX_PLAYERS],
	gLastCar[MAX_PLAYERS],
	oTimeLeft[MAX_PLAYERS],
	nTimeLeft[MAX_PLAYERS],
	rTimeLeft[MAX_PLAYERS],
	sTimeLeft[MAX_PLAYERS],
	commandAttempts[MAX_PLAYERS],
	commandTime[MAX_PLAYERS],
	LicenseTestAC[MAX_PLAYERS],
	PlayerCall[MAX_PLAYERS],
	CallingTo[MAX_PLAYERS],
	PhoneState[MAX_PLAYERS],
	WaypointEditing[MAX_PLAYERS],
	WaypointEditOption[MAX_PLAYERS],
	BusinessEdit[MAX_PLAYERS],
	BusinessEditOption[MAX_PLAYERS],
	FamilyEdit[MAX_PLAYERS],
	FamilyEditOption[MAX_PLAYERS],
	HouseEdit[MAX_PLAYERS],
	HouseEditOption[MAX_PLAYERS],
	GateEdit[MAX_PLAYERS],
	GateEditOption[MAX_PLAYERS],
	gTaxiFareAmount[MAX_PLAYERS],
	gTaxiFareEarnings[MAX_PLAYERS],
	SpectatingPlayer[MAX_PLAYERS],
	SpectatingAdmin[MAX_PLAYERS],
	TaxiSeconds[MAX_PLAYERS],
	Float:WeaponDamage[MAX_PLAYERS],
	LastUpdate[MAX_PLAYERS],
	HitmanTarget[MAX_PLAYERS],
	HitmanBombObject[MAX_PLAYERS][MAX_HITMAN_BOMBS],
	Float:HitmanBombs[MAX_PLAYERS][MAX_HITMAN_BOMBS][3],
    PlayerAnimLibsPreloaded[MAX_PLAYERS],
    gPlayerUsingLoopingAnim[MAX_PLAYERS]
;

// Global Variables
new
	LSPDDoorInUse,
	LSPDGateInUse,
	FBIGateInUse[2],
	PrisonDoorInUse[4],
	bool:CellState,
	WorldTime[3],
	gAdvertisementTime,
	gCurrentTaxiCall
;
new
    door1,
    door2,
    door3,
    door4;

new cell0, cell1, cell2,
    cell3, cell4, cell5,
    cell6, cell7, cell8,
    cell9, cell10, cell11,
    cell12, cell13, cell14,
    cell15, cell16, cell17,
    cell18, cell19, cell20,
    cell21, cell22, cell23,
    cell24, cell25, cell26,
    cell27, cell28, cell29,
    cell30, cell31, cell32,
    cell33, cell34, cell35;

new fence0, fence1, fence2,
    fence3, fence4, fence5,
    fence6, fence7, fence8,
    fence9, fence10, fence11,
    fence12, fence13, fence14,
    fence15, fence16, fence17,
    fence18, fence19, fence20,
    fence21, fence22, fence23,
    fence24, fence25, fence26,
    fence27, fence28, fence29,
    fence30, fence31, fence32,
    fence33, fence34, fence35;

new stair0, stair1, stair2;

//------------------------------------------------
// Skin selection menu
#define SKIN_DIALOG_BASE_X   	75.0
#define SKIN_DIALOG_BASE_Y   	130.0
#define SKIN_DIALOG_WIDTH    	550.0
#define SKIN_DIALOG_HEIGHT   	180.0
#define SKIN_SPRITE_DIM_X    	60.0
#define SKIN_SPRITE_DIM_Y    	70.0

new gTotalItems = 300;
new PlayerText:gCurrentPageTextDrawId[MAX_PLAYERS];
new PlayerText:gHeaderTextDrawId[MAX_PLAYERS];
new PlayerText:gBackgroundTextDrawId[MAX_PLAYERS];
new PlayerText:gNextButtonTextDrawId[MAX_PLAYERS];
new PlayerText:gPrevButtonTextDrawId[MAX_PLAYERS];
new PlayerText:gSelectionItems[MAX_PLAYERS][21];
new gSelectionItemsTag[MAX_PLAYERS][21];
new gItemAt[MAX_PLAYERS];

new gItemList[300] = {
0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,
50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,
97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,
132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,
167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,
202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,
237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,
272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299};
//------------------------------------------------

// Callbacks
main()
{
	SendRconCommand("hostname "SERVER_NAME);
    SendRconCommand("rcon_password "SERVER_RCON);
    SendRconCommand("gamemodetext "SERVER_VERSION);
	SendRconCommand("mapname "SERVER_MAP);
	SendRconCommand("weburl "SERVER_WEBSITE);
	SendRconCommand("password "SERVER_PASSWORD);
	printf(""SERVER_NAME" ("SERVER_VERSION"), has been loaded successfully.");
}
public OnGameModeInit()
{
	AntiDeAMX();
    if(!fexist("numbers_used.txt"))
    {
        new File:nf = fopen("numbers_used.txt", io_write);
        fclose(nf);
    }
	MySQL_Initialize();
	MySQL_Load_Waypoints();
	MySQL_Load_Businesses();
	MySQL_Load_Houses();
	MySQL_Load_Families();
    MySQL_Load_Vaults();
    MySQL_Load_Gates();
	Streamer_VisibleItems(STREAMER_TYPE_OBJECT, 1000);
	LoadDealerships();
	PlantMarijuanaPlant();
	EnableStuntBonusForAll(0);
	SetNameTagDrawDistance(15.0);
    LimitPlayerMarkerRadius(100.0);
	UsePlayerPedAnims();
	ShowPlayerMarkers(0);
	DisableInteriorEnterExits();
	SetMaxConnections(3);
	gettime(WorldTime[0], WorldTime[1], WorldTime[2]);
	SetWorldTime(WorldTime[0]);
	AddPlayerClass(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
	
	// Contract Mailbox 3DTextLabel
	CreateDynamic3DTextLabel("An Ordinary Mailbox\nType /contract here to send a mail to an unknown address.", COLOR_YELLOW, 1510.8628, -1606.6337, 14.0469, 8.0);
	
	// DMV 3DTextLabel
	CreateDynamic3DTextLabel("License Center\nType /licensetest to buy a license.", COLOR_YELLOW, 1490.652, 1305.725, 1093.296, 8.0);
	CreateDynamic3DTextLabel("DMV Menu\nType /dmvmenu to manage your vehicles' legal status.", COLOR_YELLOW, 1491.242, 1307.601, 1093.289, 8.0);

	// Drink 3DTextLabel
	CreateDynamic3DTextLabel("Drinks\nType /buy to buy a drink.", COLOR_YELLOW, 499.8070, -20.6264, 1000.6797, 8.0);
	
	// Pizza Boy Job
	CreateDynamic3DTextLabel("Pizza Boy Job\nType /join to become a Pizza Boy.", COLOR_YELLOW, 377.84, -114.93, 1001.49, 8.0);
	CreateDynamicPickup(1239, 1, 377.84, -114.93, 1001.49);

	// Trucker Job
	CreateDynamic3DTextLabel("Trucker Job\nType /join to become a Trucker.", COLOR_YELLOW, -77.998, -1135.989, 1.078, 8.0);
	CreateDynamicPickup(1239, 1, -77.998, -1135.989, 1.078);

	// Street Sweeper Job
	CreateDynamic3DTextLabel("Street Sweeper Job\nType /join to become a Street Sweeper.", COLOR_YELLOW, 1009.46, -1366.93, 13.34, 8.0);
	CreateDynamicPickup(1239, 1, 1009.46, -1366.93, 13.34);
	
	// Mechanic Job
	CreateDynamic3DTextLabel("Mechanic Job\nType /join to become a Mechanic.", COLOR_YELLOW, 1083.84, -1231.75, 15.82, 8.0);
	CreateDynamicPickup(1239, 1, 1083.84, -1231.75, 15.82);
	
	// Taxi Driver Job
	CreateDynamic3DTextLabel("Taxi Driver Job\nType /join to become a Taxi Driver.", COLOR_YELLOW, 1741.5199, -1863.4615, 13.5750, 8.0);
	CreateDynamicPickup(1239, 1, 1741.5199, -1863.4615, 13.5750);

	// LSPD Arrest Point
	CreateDynamic3DTextLabel("Arrest Point\nType /arrest to arrest detained suspects.", COLOR_YELLOW, 1528.71, -1678.06, 5.89, 8.0);
	CreateDynamicPickup(1247, 1, 1528.71, -1678.06, 5.89);

	// Gun Runners
	CreateDynamic3DTextLabel("Create Gun\nType /creategun to create a gun.", COLOR_YELLOW, 2543.16, -1296.00, 1044.13, 8.0);

	//  Faction Lockers
	CreateDynamic3DTextLabel("LSPD Locker\nType /locker to access the locker.", COLOR_YELLOW, 254.90, 74.74, 1003.64, 8.0);
	CreateDynamic3DTextLabel("Executive Branch Locker\nType /locker to access the locker.", COLOR_YELLOW, 1292.3789, -986.0073, 6645.7319, 8.0);
	CreateDynamic3DTextLabel("LSFMD Locker\nType /locker to access the locker.", COLOR_YELLOW, 1179.6155, -1329.2679, 1349.3860, 8.0);
//	CreateDynamic3DTextLabel("FBI Locker\nType /locker to access the locker.", COLOR_YELLOW, 925.130, -1269.433, 959.415, 8.0); Pending
	CreateDynamic3DTextLabel("DoC Locker\nType /locker to access the locker.", COLOR_YELLOW, 1862.2954, -1720.2153, 5206.3486, 8.0);
	
	CreateDynamic3DTextLabel("City Hall\nType /hallmenu to organize your citizenship.", COLOR_YELLOW, 362.305, 173.687, 1008.382, 8.0);
	CreateDynamic3DTextLabel("Bank\nType /bank to view your bank account.", COLOR_YELLOW, 2310.30, -8.22, 26.74, 8.0);
	CreateDynamic3DTextLabel("Buy Clothes\nType /buy to purchase some new clothes.", COLOR_YELLOW, 207.694, -102.273, 1005.257, 8.0);
	CreateDynamic3DTextLabel("Buy Guns\nType /buy to purchase a gun (license required).", COLOR_YELLOW, 312.224, -165.032, 999.601, 8.0);
	CreateDynamic3DTextLabel("Delivery Point\nType /deliverpt to deliver your patient.", COLOR_YELLOW, 1140.42, -1330.39, 13.66, 40.0);
	CreateDynamic3DTextLabel("Delivery Point\nType /deliverpt to deliver your patient.", COLOR_YELLOW, 2026.96, -1410.91, 16.99, 40.0);
	CreateDynamic3DTextLabel("Gas Station\nType /car refuel to refill your vehicle.", COLOR_GOLD, 1945.066, -1772.607, 13.227, 20.0); // idlewood
	CreateDynamic3DTextLabel("Gas Station\nType /car refuel to refill your vehicle.", COLOR_GOLD, 1938.694, -1771.986, 13.222, 20.0); // idlewood

	CreateDynamic3DTextLabel("Impound Warehouse\nType /impound to process a vehicle.", COLOR_LIGHTBLUE, 1866.447, -1793.340, 13.546, 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID);
	CreateDynamicPickup(1239, 1, 1866.447, -1793.340, 13.546);
	
	CreateDynamicPickup(1239, 1, -118.190, -322.395, 1.421);

	LSPDVehicles[0] = AddStaticVehicleEx(596,1602.0660,-1683.9678,5.6124,90.3080,79,1, VEHICLE_RESPAWN); // Cruiser
	LSPDVehicles[1] = AddStaticVehicleEx(596,1602.1194,-1687.9663,5.6107,90.5233,79,1, VEHICLE_RESPAWN); // Cruiser
	LSPDVehicles[2] = AddStaticVehicleEx(596,1602.1680,-1692.0110,5.6113,89.5516,79,1, VEHICLE_RESPAWN); // Cruiser
	LSPDVehicles[3] = AddStaticVehicleEx(596,1602.1666,-1696.1469,5.6123,90.4002,79,1, VEHICLE_RESPAWN); // Cruiser
	LSPDVehicles[4] = AddStaticVehicleEx(596,1602.1936,-1700.1580,5.6113,89.7974,79,1, VEHICLE_RESPAWN); // Cruiser
	LSPDVehicles[5] = AddStaticVehicleEx(596,1602.1382,-1704.3373,5.6118,88.9091,79,1, VEHICLE_RESPAWN); // Cruiser
	LSPDVehicles[6] = AddStaticVehicleEx(596,1595.5073,-1710.6666,5.6109,0.1711,79,1, VEHICLE_RESPAWN); // Cruiser
	LSPDVehicles[7] = AddStaticVehicleEx(596,1591.3687,-1710.6256,5.6119,358.8773,79,1, VEHICLE_RESPAWN); // Cruiser
	LSPDVehicles[8] = AddStaticVehicleEx(596,1587.3217,-1710.6517,5.6118,0.3150,79,1, VEHICLE_RESPAWN); // Cruiser
	LSPDVehicles[9] = AddStaticVehicleEx(596,1583.3668,-1710.7098,5.6118,0.0238,79,1, VEHICLE_RESPAWN); // Cruiser
	LSPDVehicles[10] = AddStaticVehicleEx(596,1578.5643,-1710.6968,5.6112,0.0933,79,1, VEHICLE_RESPAWN); // Cruiser
	LSPDVehicles[11] = AddStaticVehicleEx(596,1574.3217,-1710.7924,5.6117,0.8341,79,1, VEHICLE_RESPAWN); // Cruiser
	LSPDVehicles[12] = AddStaticVehicleEx(596,1570.1368,-1710.8009,5.6125,359.6031,79,1, VEHICLE_RESPAWN); // Cruiser
	LSPDVehicles[13] = AddStaticVehicleEx(596,1566.3741,-1710.8361,5.6117,359.9903,79,1, VEHICLE_RESPAWN); // Cruiser
	LSPDVehicles[14] = AddStaticVehicleEx(596,1562.8647,-1710.8783,5.6113,1.0617,79,1, VEHICLE_RESPAWN); // Cruiser
	LSPDVehicles[15] = AddStaticVehicleEx(596,1558.8057,-1710.9646,5.6118,1.0914,79,1, VEHICLE_RESPAWN); // Cruiser
	LSPDVehicles[16] = AddStaticVehicleEx(525,1545.7345,-1684.5334,5.6118,88.7117,1,79, VEHICLE_RESPAWN); // Tow Truck
	LSPDVehicles[17] = AddStaticVehicleEx(554,1545.7180,-1680.3646,5.6114,90.5986,1,1, VEHICLE_RESPAWN); // Yosemite
	LSPDVehicles[18] = AddStaticVehicleEx(490,1545.6267,-1676.1566,5.6106,90.8251,0,0, VEHICLE_RESPAWN); // Fbi Rancher
	LSPDVehicles[19] = AddStaticVehicleEx(490,1545.6517,-1672.0327,5.6126,90.0201,0,0, VEHICLE_RESPAWN); // Fbi Rancher
	LSPDVehicles[20] = AddStaticVehicleEx(560,1545.5695,-1667.9900,5.6103,90.8492,0,0, VEHICLE_RESPAWN); // Sultan
	LSPDVehicles[21] = AddStaticVehicleEx(560,1545.4932,-1663.0547,5.6117,90.1325,0,0, VEHICLE_RESPAWN); // Sultan
	LSPDVehicles[22] = AddStaticVehicleEx(599,1545.4108,-1659.0442,5.6115,91.3012,0,1, VEHICLE_RESPAWN); // Rancher
	LSPDVehicles[23] = AddStaticVehicleEx(599,1545.7213,-1655.0195,6.0814,90.4218,0,1, VEHICLE_RESPAWN); // Rancher
	LSPDVehicles[24] = AddStaticVehicleEx(599,1545.8069,-1651.1516,6.0790,88.2897,0,1, VEHICLE_RESPAWN); // Rancher
	LSPDVehicles[25] = AddStaticVehicleEx(601,1526.5850,-1644.1801,5.6494,180.3210,1,1, VEHICLE_RESPAWN); // Splashy
	LSPDVehicles[26] = AddStaticVehicleEx(601,1530.7244,-1644.2538,5.6494,179.6148,1,1, VEHICLE_RESPAWN); // Splashy
	LSPDVehicles[27] = AddStaticVehicleEx(427,1534.8553,-1644.8682,6.0226,180.7921,0,1, VEHICLE_RESPAWN); // Enforcer
	LSPDVehicles[28] = AddStaticVehicleEx(427,1538.9325,-1644.9508,6.0226,179.5991,0,1, VEHICLE_RESPAWN); // Enforcer
	LSPDVehicles[29] = AddStaticVehicleEx(596,1584.7515,-1667.5281,5.5974,270.7136,0,0, VEHICLE_RESPAWN); // Cruiser
	LSPDVehicles[30] = AddStaticVehicleEx(596,1584.7291,-1671.6987,5.5982,268.7675,0,0, VEHICLE_RESPAWN); // Cruiser
	LSPDVehicles[31] = AddStaticVehicleEx(523,1584.7783,-1675.3850,5.4639,270.6620,0,0, VEHICLE_RESPAWN); // Police Bike
	LSPDVehicles[32] = AddStaticVehicleEx(523,1585.0814,-1680.4186,5.4661,272.0062,0,0, VEHICLE_RESPAWN); // Police Bike
	LSPDVehicles[33] = AddStaticVehicleEx(497,1569.1587,-1641.0361,28.5788,89.5537,79,1, VEHICLE_RESPAWN); // Maverick
	
	LSFMDVehicles[0] = AddStaticVehicleEx(416,2032.50000000,-1439.59997559,17.50000000,180.00000000,1,117,VEHICLE_RESPAWN); //Ambulance
	LSFMDVehicles[1] = AddStaticVehicleEx(416,1179.19921875,-1339.19921875,14.19999981,270.00000000,1,117,VEHICLE_RESPAWN); //Ambulance
	LSFMDVehicles[2] = AddStaticVehicleEx(416,1178.50000000,-1308.59960938,14.10000038,270.00000000,1,117,VEHICLE_RESPAWN); //Ambulance
	LSFMDVehicles[3] = AddStaticVehicleEx(416,1190.09997559,-1304.80004883,13.89999962,180.00000000,1,117,VEHICLE_RESPAWN); //Ambulance
	LSFMDVehicles[4] = AddStaticVehicleEx(416,1191.00000000,-1325.50000000,13.69999981,180.00000000,1,117,VEHICLE_RESPAWN); //Ambulance
	LSFMDVehicles[5] = AddStaticVehicleEx(416,1191.50000000,-1347.00000000,13.69999981,180.00000000,1,117,VEHICLE_RESPAWN); //Ambulance
	LSFMDVehicles[6] = AddStaticVehicleEx(416,1191.29980469,-1366.00000000,13.69999981,180.00000000,1,117,VEHICLE_RESPAWN); //Ambulance
	LSFMDVehicles[7] = AddStaticVehicleEx(416,2032.19995117,-1427.69995117,17.29999924,180.00000000,1,117,VEHICLE_RESPAWN); //Ambulance
	LSFMDVehicles[8] = AddStaticVehicleEx(416,2012.90002441,-1414.50000000,17.29999924,90.00000000,1,117,VEHICLE_RESPAWN); //Ambulance
	LSFMDVehicles[9] = AddStaticVehicleEx(416,2002.59997559,-1428.50000000,15.89999962,180.00000000,1,117,VEHICLE_RESPAWN); //Ambulance
	
	FBIVehicles[0] = AddStaticVehicleEx(490,278.2950,-1535.1125,24.7221,234.8203,0,0,2000); // FBI Rancher
	FBIVehicles[1] = AddStaticVehicleEx(490,281.3488,-1531.0051,24.7211,234.4913,0,0,2000); // FBI Rancher
	FBIVehicles[2] = AddStaticVehicleEx(490,284.1479,-1526.7838,24.7219,235.9317,0,0,2000); // FBI Rancher
	FBIVehicles[3] = AddStaticVehicleEx(402,287.9204,-1522.4076,24.4254,233.3578,0,0,2000); // FBI car 4
	FBIVehicles[4] = AddStaticVehicleEx(402,291.0083,-1518.0157,24.4255,235.8604,0,0,2000); // FBI car 5
	FBIVehicles[5] = AddStaticVehicleEx(426,294.4281,-1513.3267,24.3367,233.7115,0,0,2000); // FBI car 6
	FBIVehicles[6] = AddStaticVehicleEx(426,297.6391,-1508.7694,24.3367,233.2394,0,0,2000); // FBI car 7
	FBIVehicles[7] = AddStaticVehicleEx(482,301.1381,-1504.8762,24.7139,233.2884,0,0,2000); // FBI Car 8
	FBIVehicles[8] = AddStaticVehicleEx(415,304.2608,-1486.6423,24.2188,235.1092,0,0,2000); // FBI Car 9
	FBIVehicles[9] = AddStaticVehicleEx(415,307.1080,-1482.1565,24.2188,234.6429,0,0,2000); // FBI Car 10
	FBIVehicles[10] = AddStaticVehicleEx(487, 316.47, -1516.18, 77.24, 228.39, 0, 79, 2000); //  Levithian - FBI Roof
	FBIVehicles[11] = AddStaticVehicleEx(487, 329.79, -1500.35, 77.24, 222.55, 0, 79, 2000); //  Levithian - FBI Roof
	FBIVehicles[12] = AddStaticVehicleEx(427, 300.645629, -1490.589233, 24.723447, 233.09, 0, 0, 2000); //  FBI
	
    PAVehicles[0] = AddStaticVehicleEx(426, 1246.4022, -2010.0, 59.6422, 270, 0, 0, VEHICLE_RESPAWN); // premier
	PAVehicles[1] = AddStaticVehicleEx(426, 1246.4022, -2014.0, 59.6422, 270, 0, 0, VEHICLE_RESPAWN); // premier
	PAVehicles[2] = AddStaticVehicleEx(426, 1246.4022, -2018.0, 59.6422, 270, 0, 0, VEHICLE_RESPAWN); // premier
	PAVehicles[3] = AddStaticVehicleEx(426, 1246.4022, -2022.0, 59.6422, 270, 0, 0, VEHICLE_RESPAWN); // premier
	PAVehicles[4] = AddStaticVehicleEx(421, 1246.4022, -2026.0, 59.6422, 270, 0, 0, VEHICLE_RESPAWN); // washington
	PAVehicles[5] = AddStaticVehicleEx(421, 1246.4022, -2030.0, 59.6422, 270, 0, 0, VEHICLE_RESPAWN); // washington
	PAVehicles[6] = AddStaticVehicleEx(490, 1246.4022, -2034.0, 59.6422, 270, 0, 0, VEHICLE_RESPAWN); // fbi rancher
	PAVehicles[7] = AddStaticVehicleEx(490, 1246.4022, -2038.0, 59.6422, 270, 0, 0, VEHICLE_RESPAWN); // fbi rancher
	PAVehicles[8] = AddStaticVehicleEx(490, 1246.4022, -2042.0, 59.6422, 270, 0, 0, VEHICLE_RESPAWN); // fbi rancher
	PAVehicles[9] = AddStaticVehicleEx(409, 1277.945, -2014.656, 58.715, 180, 0, 0, VEHICLE_RESPAWN); // stretcher
	PAVehicles[10] = AddStaticVehicleEx(409, 1277.945, -2034.928, 58.788, 180, 0, 0, VEHICLE_RESPAWN); // stretcher
	
 	TaxiVehicles[0] = AddStaticVehicleEx(420,1775.6141,-1860.0100,13.2745,269.2006,6,1, VEHICLE_RESPAWN);
    TaxiVehicles[1] = AddStaticVehicleEx(420,1763.0121,-1860.0037,13.2723,271.2998,6,1, VEHICLE_RESPAWN);
    TaxiVehicles[2] = AddStaticVehicleEx(420,1748.9358,-1859.9502,13.2721,270.3943,6,1, VEHICLE_RESPAWN);
    TaxiVehicles[3] = AddStaticVehicleEx(420,1734.6754,-1859.9305,13.2740,270.5646,6,1, VEHICLE_RESPAWN);
	for (new i=0; i < 4; i++) SetVehicleNumberPlate(TaxiVehicles[i], "Taxi Company");

    PizzaVehicles[0] = AddStaticVehicleEx(448,2122,-1784.1558,12.9844,0.9122,3,6,120); // PizzaBoy
    PizzaVehicles[1] = AddStaticVehicleEx(448,2120,-1784.1558,12.9844,0.9122,3,6,120); // PizzaBoy
    PizzaVehicles[2] = AddStaticVehicleEx(448,2118,-1784.1558,12.9844,0.9122,3,6,120); // PizzaBoy
    PizzaVehicles[3] = AddStaticVehicleEx(448,2116,-1784.1558,12.9844,0.9122,3,6,120); // PizzaBoy
    PizzaVehicles[4] = AddStaticVehicleEx(448,2114,-1784.1558,12.9844,0.9122,3,6,120); // PizzaBoy
    PizzaVehicles[5] = AddStaticVehicleEx(448,2112,-1784.1558,12.9844,0.9122,3,6,120); // PizzaBoy
    PizzaVehicles[6] = AddStaticVehicleEx(448,2110,-1784.1558,12.9844,0.9122,3,6,120); // PizzaBoy
    PizzaVehicles[7] = AddStaticVehicleEx(448,2108,-1784.1558,12.9844,0.9122,3,6,120); // PizzaBoy
    PizzaVehicles[8] = AddStaticVehicleEx(448,2106,-1784.1558,12.9844,0.9122,3,6,120); // PizzaBoy
    PizzaVehicles[9] = AddStaticVehicleEx(448,2104,-1784.1558,12.9844,0.9122,3,6,120); // PizzaBoy
    PizzaVehicles[10] = AddStaticVehicleEx(448,2102,-1784.1558,12.9844,0.9122,3,6,120); // PizzaBoy
    PizzaVehicles[11] = AddStaticVehicleEx(448,2100,-1784.1558,12.9844,0.9122,3,6,120); // PizzaBoy
    
    DMVVehicles[0] = AddStaticVehicleEx(405,1110.40002441,-1227.00000000,15.80000019,180.00000000,118,1,15); //Sentinel
	DMVVehicles[1] = AddStaticVehicleEx(405,1106.00000000,-1227.00000000,15.80000019,180.00000000,118,1,15); //Sentinel
	DMVVehicles[2] = AddStaticVehicleEx(405,1098.00000000,-1227.00000000,15.80000019,180.00000000,118,1,15); //Sentinel
	DMVVehicles[3] = AddStaticVehicleEx(405,1102.00000000,-1227.00000000,15.80000019,180.00000000,118,1,15); //Sentinel
	DMVVehicles[4] = AddStaticVehicleEx(405,1094.00000000,-1227.00000000,15.80000019,180.00000000,118,1,15); //Sentinel

    TruckerVehicles[0] = AddStaticVehicleEx(499, -65.685, -1144.930, 0.794, 333, 118, 1, VEHICLE_RESPAWN); //Benson
    TruckerVehicles[1] = AddStaticVehicleEx(499, -61.685, -1146.930, 1.06, 333, 118, 1, VEHICLE_RESPAWN); //Benson
    TruckerVehicles[2] = AddStaticVehicleEx(499, -57.875, -1148.400, 1.066, 335, 118, 1, VEHICLE_RESPAWN); //Benson
    TruckerVehicles[3] = AddStaticVehicleEx(499, -54.263, -1150.058, 1.067, 335, 118, 1, VEHICLE_RESPAWN); //Benson
    TruckerVehicles[4] = AddStaticVehicleEx(499, -50.301, -1151.881, 1.067, 335, 118, 1, VEHICLE_RESPAWN); //Benson
    TruckerVehicles[5] = AddStaticVehicleEx(499, -46.761, -1153.530, 1.068, 333, 118, 1, VEHICLE_RESPAWN); //Benson
    
    RentableVehicles[0] = AddStaticVehicleEx(410, 2052.5706, -1903.8778, 13.2029, 179.8972, 0, 0, VEHICLE_RESPAWN);
	RentableVehicles[1] = AddStaticVehicleEx(410, 2056.0046, -1903.8778, 13.2029, 179.5398, 0, 0, VEHICLE_RESPAWN);
	RentableVehicles[2] = AddStaticVehicleEx(410, 2059.2131, -1903.8778, 13.2029, 179.8335, 0, 0, VEHICLE_RESPAWN);
	RentableVehicles[3] = AddStaticVehicleEx(410, 2062.4717, -1903.8778, 13.2020, 180.8771, 0, 0, VEHICLE_RESPAWN);
	RentableVehicles[4] = AddStaticVehicleEx(410, 2065.6953, -1903.8778, 13.2029, 180.6317, 0, 0, VEHICLE_RESPAWN);
	RentableVehicles[5] = AddStaticVehicleEx(401, 1560.6393, -2312.1858, 13.3258, 90.3802, 0, 0, VEHICLE_RESPAWN);
	RentableVehicles[6]	= AddStaticVehicleEx(401, 1560.6393, -2315.4346, 13.3272, 90.9125, 0, 0, VEHICLE_RESPAWN);
	RentableVehicles[7]	= AddStaticVehicleEx(401, 1560.6393, -2318.8015, 13.3286, 91.1141, 0, 0, VEHICLE_RESPAWN);
	RentableVehicles[8]	= AddStaticVehicleEx(401, 1560.6393, -2322.0068, 13.3287, 91.4089, 0, 0, VEHICLE_RESPAWN);
	RentableVehicles[9]	= AddStaticVehicleEx(401, 1560.6393, -2325.2380, 13.3282, 90.5539, 0, 0, VEHICLE_RESPAWN);
	RentableVehicles[10] = AddStaticVehicleEx(401, 1560.6393, -2328.5327, 13.3285, 90.4718, 0, 0, VEHICLE_RESPAWN);
	RentableVehicles[11] = AddStaticVehicleEx(401, 1560.6393, -2331.8311, 13.3268, 90.1882, 0, 0, VEHICLE_RESPAWN);
	RentableVehicles[12] = AddStaticVehicleEx(401, 1560.6393, -2335.0430, 13.3264, 90.2742, 0, 0, VEHICLE_RESPAWN);
	RentableVehicles[13] = AddStaticVehicleEx(401, 1560.6393, -2338.3716, 13.3258, 90.6186, 0, 0, VEHICLE_RESPAWN);
	for (new i=0; i < sizeof(RentableVehicles); i++) SetVehicleNumberPlate(RentableVehicles[i], "Rent A Car");

	FBIGates[0] = CreateDynamicObject(971,364.486,-1469.28,31.2701,0.00000000,0.00000000,37.9);
	FBIGates[1] = CreateDynamicObject(971,310.649,-1555.13,31.2596,0.00000000,0.00000000,146.0);

	LSPDGates[0] = CreateDynamicObject(1536,244.87800598,72.50000000,1002.59997559,0.00000000,0.00000000,0.00000000); //object(gen_doorext15) (1)
	LSPDGates[1] = CreateDynamicObject(1536,247.89500427,72.54000092,1002.59997559,0.00000000,0.00000000,180.00000000); //object(gen_doorext15) (2)
	LSPDGates[2] = CreateDynamicObject(971,1589.00000000,-1638.09997559,15.00000000,0.00000000,0.00000000,180.00000000); //object(subwaygate) (1)
	CreateDynamicObject(2886,245.00000000,72.30000305,1003.90002441,0.00000000,0.00000000,0.00000000); //object(sec_keypad) (1)
	CreateDynamicObject(2886,244.89999390,73.40000153,1004.00000000,0.00000000,0.00000000,90.00000000); //object(sec_keypad) (3)
	CreateDynamicObject(1497,1582.61999512,-1638.00000000,12.39999962,0.00000000,0.00000000,0.00000000); //object(gen_doorext02) (1)
	CreateDynamicObject(1497,1582.59997559,-1638.00000000,14.69999981,0.00000000,0.00000000,0.00000000); //object(gen_doorext02) (2)
	
	SweeperVehicles[0] = AddStaticVehicleEx(574,1015.00000000,-1346.00000000,13.19999981,90.00000000,-1,-1,15); //Sweeper
	SweeperVehicles[1] = AddStaticVehicleEx(574,1015.00000000,-1366.00000000,13.19999981,90.00000000,-1,-1,15); //Sweeper
	SweeperVehicles[2] = AddStaticVehicleEx(574,1015.00000000,-1362.00000000,13.19999981,90.00000000,-1,-1,15); //Sweeper
	SweeperVehicles[3] = AddStaticVehicleEx(574,1015.00000000,-1358.00000000,13.19999981,90.00000000,-1,-1,15); //Sweeper
	SweeperVehicles[4] = AddStaticVehicleEx(574,1015.00000000,-1354.00000000,13.19999981,90.00000000,-1,-1,15); //Sweeper
	SweeperVehicles[5] = AddStaticVehicleEx(574,1015.00000000,-1350.00000000,13.19999981,90.00000000,-1,-1,15); //Sweeper
	SweeperVehicles[6] = AddStaticVehicleEx(574,991.09997559,-1362.00000000,13.19999981,270.00000000,-1,-1,15); //Sweeper
	SweeperVehicles[7] = AddStaticVehicleEx(574,991.09960938,-1365.00000000,13.19999981,270.00000000,-1,-1,15); //Sweeper
	

	StopAnim = TextDrawCreate(610.0, 400.0,	"~r~~k~~PED_SPRINT~ ~w~to stop the animation");
	TextDrawUseBox(StopAnim, 0);
	TextDrawFont(StopAnim, 2);
	TextDrawSetShadow(StopAnim,0);
    TextDrawSetOutline(StopAnim,1);
    TextDrawBackgroundColor(StopAnim,0x000000FF);
    TextDrawColor(StopAnim,0xFFFFFFFF);
    TextDrawAlignment(StopAnim,3);

	Blood[0] = TextDrawCreate(-364.000000, 136.639923, "ld_dual:ex4");
	TextDrawLetterSize(Blood[0], 0.000000, 0.000000);
	TextDrawTextSize(Blood[0], 895.200012, 598.826843);
	TextDrawAlignment(Blood[0], 1);
	TextDrawColor(Blood[0], -1);
	TextDrawSetShadow(Blood[0], 0);
	TextDrawSetOutline(Blood[0], 0);
	TextDrawFont(Blood[0], 4);

	Blood[1] = TextDrawCreate(190.400024, 116.479957, "ld_dual:ex4");
	TextDrawLetterSize(Blood[1], 0.000000, 0.000000);
	TextDrawTextSize(Blood[1], 737.599975, 518.186523);
	TextDrawAlignment(Blood[1], 1);
	TextDrawColor(Blood[1], -1);
	TextDrawSetShadow(Blood[1], 0);
	TextDrawSetOutline(Blood[1], 0);
	TextDrawFont(Blood[1], 4);

	Blood[2] = TextDrawCreate(-53.599975, -11.946651, "ld_dual:ex4");
	TextDrawLetterSize(Blood[2], 0.000000, 0.000000);
	TextDrawTextSize(Blood[2], 799.200012, 618.239929);
	TextDrawAlignment(Blood[2], 2);
	TextDrawColor(Blood[2], -1);
	TextDrawSetShadow(Blood[2], 0);
	TextDrawSetOutline(Blood[2], 0);
	TextDrawFont(Blood[2], 4);

	LoadingObjectTextDraw = TextDrawCreate(326.000000, 131.000000, "Loading...");
	TextDrawAlignment(LoadingObjectTextDraw, 2);
	TextDrawBackgroundColor(LoadingObjectTextDraw, 255);
	TextDrawFont(LoadingObjectTextDraw, 2);
	TextDrawLetterSize(LoadingObjectTextDraw, 0.540000, 3.400000);
	TextDrawColor(LoadingObjectTextDraw, -1);
	TextDrawSetOutline(LoadingObjectTextDraw, 0);
	TextDrawSetProportional(LoadingObjectTextDraw, 1);
	TextDrawSetShadow(LoadingObjectTextDraw, 1);
	TextDrawUseBox(LoadingObjectTextDraw, 1);
	TextDrawBoxColor(LoadingObjectTextDraw, 255);
	TextDrawTextSize(LoadingObjectTextDraw, 0.000000, 0.000000);

	LoadingObjectBox = TextDrawCreate(431.000000, 118.000000, "~n~~n~~n~~n~~n~~n~~n~~n~~n~");
	TextDrawBackgroundColor(LoadingObjectBox, 255);
	TextDrawFont(LoadingObjectBox, 1);
	TextDrawLetterSize(LoadingObjectBox, -1.610000, 0.800000);
	TextDrawColor(LoadingObjectBox, 255);
	TextDrawSetOutline(LoadingObjectBox, 0);
	TextDrawSetProportional(LoadingObjectBox, 1);
	TextDrawSetShadow(LoadingObjectBox, 1);
	TextDrawUseBox(LoadingObjectBox, 1);
	TextDrawBoxColor(LoadingObjectBox, 255);
	TextDrawTextSize(LoadingObjectBox, 217.000000, 0.000000);

	ConsumeGlobalFuel();
	LoadObjects();
	return 1;
}

MySQL_Initialize()
{
    mysql_debug(MYSQL_DEBUG_MODE);
	mConnectionHandle = mysql_connect(MYSQL_HOST, MYSQL_USERNAME, MYSQL_DATABASE, MYSQL_PASSWORD);

	printf("[MySQL]: Attempting to make a connection to %s with username %s to database %s through port 3306.", MYSQL_HOST, MYSQL_USERNAME, MYSQL_DATABASE);
	if(mysql_ping(mConnectionHandle) == -1)
	{
	    printf("[MySQL Error]: The script was unable to connect to the MySQL server, please check whether if the credentials are correct.");
	    SendRconCommand("exit");
	}
	else printf("[MySQL]: The script has successfully established the connection to the MySQL Database.");
	SetTimer("MySQL_ConnectionCheck", 15000, true);
}

public MySQL_ConnectionCheck()
{
	if(mysql_ping(mConnectionHandle) == -1) {
		printf("[MySQL]: The connection to %s was lost, attempting to re-establish the connection. (%d attempt)", MYSQL_HOST, ++mReconnectAttempts);
		mysql_reconnect(mConnectionHandle);
	} else {
	    if(mReconnectAttempts > 0) {
	        mReconnectAttempts = 0;
		}
	}
}

MySQL_Exit()
{
	mysql_close(mConnectionHandle);
}

public OnGameModeExit()
{
    MySQL_Exit();
	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
	if(GetPVarInt(playerid, "gPlayerLogged") == 0) return 0;
    defer SpawnTimer(playerid);
	return 1;
}

timer KickTimer[1000](playerid)
{
	Kick(playerid);
}

timer SpawnTimer[150](playerid)
{
	SetSpawnInfo(playerid, NO_TEAM, PlayerInfo[playerid][pSkin], PlayerInfo[playerid][pPositionX], PlayerInfo[playerid][pPositionY], PlayerInfo[playerid][pPositionZ], PlayerInfo[playerid][pFacingAngle], 0, 0, 0, 0, 0, 0);
	SpawnPlayer(playerid);
	SetCameraBehindPlayer(playerid);
}

public OnPlayerConnect(playerid)
{
	SetPlayerColor(playerid, COLOR_WHITE);
	ResetPlayerWeapons(playerid);
    TogglePlayerSpectating(playerid, true);
    TogglePlayerControllable(playerid, false);
    
    for(new i; ePlayerData:i < ePlayerData; i++)
	{
	    PlayerInfo[playerid][ePlayerData:i] = 0;
	}
	
	for (new s=0; s < MAX_PLAYEROWNED_VEHICLES; s++)
 	{
	 	for (new i; ePlayerVehicleData:i < ePlayerVehicleData; i++)
	 	{
	 	    PlayerVehicleInfo[playerid][s][ePlayerVehicleData:i] = 0;
	 	}
 	}
	//-------------------------------------------
	LastGun[playerid] = 0; pCurrentWeapon[playerid] = 0; gLastCar[playerid] = 0; SetPVarInt(playerid, "SobeitCheck", 0);
	LicenseTestAC[playerid] = 0; PlayerCall[playerid] = 0; CallingTo[playerid] = INVALID_PLAYER_ID;
	PhoneState[playerid] = 0; oTimeLeft[playerid] = 0; nTimeLeft[playerid] = 0; rTimeLeft[playerid] = 0;
	WaypointEditing[playerid] = 0; WaypointEditOption[playerid] = 0; CurrentDialog[playerid] = 0;
	SpectatingPlayer[playerid] = INVALID_PLAYER_ID; SpectatingAdmin[playerid] = INVALID_PLAYER_ID;
	HitmanTarget[playerid] = INVALID_PLAYER_ID; PlayerInfo[playerid][pTogPM] = 1;
    gHeaderTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;
    gBackgroundTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;
    gCurrentPageTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;
    gNextButtonTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;
    gPrevButtonTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;
    for(new x=0; x < 21; x++) gSelectionItems[playerid][x] = PlayerText:INVALID_TEXT_DRAW;
	gItemAt[playerid] = 0;
	//-------------------------------------------

	RemoveBuildingForPlayer(playerid, 14843, 266.3516, 81.1953, 1001.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 937, 2551.1016, -1282.8125, 1043.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 937, 2551.1016, -1284.7500, 1043.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 936, 2551.1016, -1286.3125, 1043.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 14853, 265.2109, 168.1250, 1007.1719, 0.25);

	JailTimerTD[playerid] = TextDrawCreate(255,20 , "Time Remaining~n~  - Seconds");
	TextDrawFont(JailTimerTD[playerid], 1);
	TextDrawLetterSize(JailTimerTD[playerid], 0.570000, 1.799999);
	TextDrawColor(JailTimerTD[playerid], COLOR_WHITE);
	TextDrawSetOutline(JailTimerTD[playerid], true);
	TextDrawSetProportional(JailTimerTD[playerid] , true);
	TextDrawSetShadow(JailTimerTD[playerid] , 1);

	// Global Sprunk/Vending machine removal
	RemoveBuildingForPlayer(playerid, 955, 0, 0, 0, 25000);
 	RemoveBuildingForPlayer(playerid, 956, 0, 0, 0, 25000);
    RemoveBuildingForPlayer(playerid, 1209, 0, 0, 0, 25000);
    RemoveBuildingForPlayer(playerid, 1302, 0, 0, 0, 25000);
    RemoveBuildingForPlayer(playerid, 1775, 0, 0, 0, 25000);
    RemoveBuildingForPlayer(playerid, 1776, 0, 0, 0, 25000);
    
   	SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 0);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 0);

	GetPlayerName(playerid, PlayerInfo[playerid][pUsername], MAX_PLAYER_NAME);
	mysql_real_escape_string(PlayerInfo[playerid][pUsername], PlayerInfo[playerid][pUsername], mConnectionHandle, MAX_PLAYER_NAME);
	SendClientMessage(playerid, COLOR_ORANGE, "SERVER:{FFFFFF} Welcome to "SERVER_NAME".");
	defer OnPlayerConnected(playerid);
	return 1;
}

timer OnPlayerConnected[1000](playerid)
{
	if(!IsPlayerConnected(playerid)) return 1;
	
    for(new i=0; i < 20; i++) SendClientMessage(playerid, COLOR_WHITE, "");

	SetPlayerCameraPos(playerid, 1797.23, -1314.48, 62.98);
	SetPlayerCameraLookAt(playerid, 1773.80, -1358.02, 44.50);
	SetPlayerPos(playerid, 1797.23, -1314.48, 7.0);
	
	SetPlayerToTeamColor(playerid);
 	SetPlayerTime(playerid, WorldTime[0], WorldTime[1]);
 	
	new szQuery[128];
	format(szQuery, sizeof(szQuery), "SELECT * FROM `bans` WHERE `IP_Address` = '%s' LIMIT 0, 1", GetPlayerIPAddress(playerid));
	mysql_query(szQuery, THREAD_IP_LOOKUP, playerid, mConnectionHandle);
	return 1;
}

public OnQueryFinish(query[], resultid, extraid, connectionHandle)
{
	new
		rowCount,
		fieldCount;
	cache_get_data(rowCount, fieldCount, connectionHandle);
	switch (resultid)
	{
	    case THREAD_IP_LOOKUP:
	    {
	        new
         		szQuery[128];
	        if(rowCount > 0)
	        {
	            mysql_retrieve_row(connectionHandle);

	            new
	                szString[512],
	                szValue[64],
	                bUsername[MAX_PLAYER_NAME],
	                bReason[64],
	                bExpiryDate,
	                bType;

				cache_get_field_content(0, "Username", bUsername, connectionHandle);
				cache_get_field_content(0, "Reason", bReason, connectionHandle);
				cache_get_field_content(0, "Expiry_Date", szValue, connectionHandle); bExpiryDate = strval(szValue);
				cache_get_field_content(0, "Ban_Type", szValue, connectionHandle); bType = strval(szValue);

				if(gettime() - bExpiryDate > 0 && bType == BAN_TEMPORARY)
				{
				    SendClientMessage(extraid, COLOR_WHITE, "Your ban date has passed and you have been unbanned from the server.");
					format(szString, sizeof(szString), "DELETE FROM `bans` WHERE `IP_Address` = '%s'", GetPlayerIPAddress(extraid));
					mysql_query(szString, THREAD_LOG_RESULT, extraid, connectionHandle);
					format(szString, sizeof(szString), "UPDATE `accounts` SET `Banned` = '0' WHERE `Username` = '%s'", bUsername);
					mysql_query(szString, THREAD_LOG_RESULT, extraid, connectionHandle);
					format(szString, sizeof(szString), "SELECT * FROM `accounts` WHERE `Username` = '%s' LIMIT 0, 1", PlayerInfo[extraid][pUsername]);
					mysql_query(szString, THREAD_ACCOUNT_LOOKUP, extraid, connectionHandle);
				}
				else
				{
				   	format(szString, sizeof(szString), "{FFFFFF}Your IP address has been banned from %s, ban information below:\n{FFD700}IP:{FFFFFF} %s\n{FFD700}Username:{FFFFFF} %s\n{FFD700}Reason:{FFFFFF} %s\n{FFD700}Expiry Date:{FFFFFF} %s\n{FFD700}Type of Ban:{FFFFFF} %s", SERVER_NAME, GetPlayerIPAddress(extraid), bUsername, bReason, gettimestamp(bExpiryDate, 3), GetBanType(bType));
					ShowPlayerDialogEx(extraid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}"SERVER_NAME" - Ban Information", szString, "Close", "");
					Kick(extraid);
    		    }
			}
	        else
	        {
				format(szQuery, sizeof(szQuery), "SELECT * FROM `accounts` WHERE `Username` = '%s' LIMIT 0, 1", PlayerInfo[extraid][pUsername]);
				mysql_query(szQuery, THREAD_ACCOUNT_LOOKUP, extraid, connectionHandle);
	        }
	    }

	    case THREAD_ACCOUNT_LOOKUP:
	    {
	        new szValue[256];
	        if(rowCount > 0)
	        {
	            mysql_retrieve_row(connectionHandle);
                cache_get_field_content(0, "Password", PlayerInfo[extraid][pPassword], connectionHandle);
               	LoadPlayerAccount(extraid, connectionHandle);
               	format(szValue, sizeof(szValue), "{FFFFFF}Hello %s, this account appears to be {FF0000}registered!\n{FFFFFF}Please type in the correct password to access this account:", PlayerInfo[extraid][pUsername]);
	            ShowPlayerDialogEx(extraid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, SERVER_NAME" - Login", szValue, "Login", "Exit");
	        }
			else
			{
	        	if(!IsRPNameText(PlayerInfo[extraid][pUsername]))
				{
				    SendClientMessage(extraid, COLOR_YELLOW, "You have joined the server with an invalid roleplay name.");
				    SendClientMessage(extraid, COLOR_YELLOW, "Please choose a valid name such as: John_Doe.");
				    defer KickTimer(extraid);
				}
				else
				{
					format(szValue, sizeof(szValue), "{FFFFFF}Hello %s, this account appears to be {00FF1E}available!\n{FFFFFF}Please type in a valid password to register this account:", PlayerInfo[extraid][pUsername]);
		            ShowPlayerDialogEx(extraid, DIALOG_REGISTER, DIALOG_STYLE_PASSWORD, SERVER_NAME" - Registration", szValue, "Register", "Exit");
				}
	        }
	    }

	    case THREAD_NO_RESULT:
		{
		
		}
		
		case THREAD_LOG_RESULT:
		{
		    printf("(MySQL) Query: %s | ResultID: %d ", query, resultid);
		}

	    case THREAD_ACCOUNT_REGISTER:
	    {
	        new szQuery[128];
	        PlayerInfo[extraid][pId] = mysql_insert_id(mConnectionHandle);
			format(szQuery, sizeof(szQuery), "SELECT * FROM `accounts` WHERE `Username` = '%s' LIMIT 0, 1", PlayerInfo[extraid][pUsername]);
	        mysql_query(szQuery, THREAD_REGISTER_SPAWN, extraid, mConnectionHandle);
	    }

		case THREAD_REGISTER_SPAWN:
		{
			mysql_retrieve_row();
			LoadPlayerAccount(extraid, connectionHandle);
	        ShowPlayerDialogEx(extraid, DIALOG_GENDER, DIALOG_STYLE_LIST, "{FFFFFF}"SERVER_NAME" - Character Setup", "Male\r\n{F593BA}Female", "Select", "Exit");
		}

	}
}

public OnQueryError(errorid, error[], callback[], query[], connectionHandle)
{
	if(errorid == ER_SYNTAX_ERROR)
	{
	    printf("You have an error in your SQL syntax; %s", query);
	}
	else
	{
	    printf("There was an error executing the following query, (%d) %s was returned by query: (%s)", errorid, error, query);
	}
}

stock IsVehicleDrivingBackwards(vehicleid)
{
	static Float:Float[3];
	if(GetVehicleVelocity(vehicleid, Float[1], Float[2], Float[0]))
	{
		GetVehicleZAngle(vehicleid, Float[0]);
		if(Float[0] < 90)
		{
			if(Float[1] > 0 && Float[2] < 0) return true;
		}
		else if(Float[0] < 180)
		{
			if(Float[1] > 0 && Float[2] > 0) return true;
		}
		else if(Float[0] < 270)
		{
			if(Float[1] < 0 && Float[2] > 0) return true;
		}
		else if(Float[1] < 0 && Float[2] < 0) return true;
	}
	return false;
}

////////////////////////////////////////////////////////////////////////////////////////////////

CMD:id(playerid, params[])
{
	if(sscanf(params, "{u}")) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /id <playerid/name>");
	new
		string[128];
	if(IsNumeric(params) && IsPlayerConnectedEx(strval(params)))
	{
        format(string, sizeof(string), "(ID: %i) - (Name: %s) - (Level: %i) - (Ping: %i)", strval(params), GetPlayerNameEx(strval(params)), PlayerInfo[strval(params)][pLevel], GetPlayerPing(strval(params)));
		SendClientMessageEx(playerid, COLOR_WHITE, string);
	}
	else if(strlen(params) < 3) return SendClientMessageEx(playerid, COLOR_GREY, "You must enter at least three characters to search for a player.");
	else
	{
        foreach(new i: Player)
        {
            if(strfind(PlayerInfo[i][pUsername], params, true) != -1)
            {
                format(string, sizeof(string), "(ID: %i) - (Name: %s) - (Level: %i) - (Ping: %i)", i, GetPlayerNameEx(i), PlayerInfo[i][pLevel], GetPlayerPing(i));
				SendClientMessageEx(playerid, COLOR_WHITE, string);
			}
        }
	}
	return 1;
}


CMD:setfuel(playerid, params[])
{
	if(IsAdmin(playerid, ADMIN_LEVEL_TRIALADMIN))
	{
	    new
	        fuelamount,
			string[128];
		if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You must be inside a vehicle to use this command.");
		else if(sscanf(params, "i", fuelamount)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /setfuel <amount>");
		VehicleInfo[GetPlayerVehicleID(playerid)][vFuel] = fuelamount;
		format(string, sizeof(string), "You have set your car's fuel level to %d.", fuelamount);
	    SendClientMessageEx(playerid, COLOR_WHITE, string);
	}
	return 1;
}

CMD:colorcar(playerid, params[])
{
	new color[2], string[128];
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You are not driving a vehicle.");
	else if(PlayerInfo[playerid][pSprayCan] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "You do not have a spraycan.");
    else if(sscanf(params, "ii", color[0], color[1])) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /colorcar [colorid] [colorid]");
	else if(color[0] < 0 || color[0] > 255 || color[1] < 0 || color[1] > 255) return SendClientMessageEx(playerid, COLOR_GREY, "You must enter a valid color id between 1-255.");
	new vehicleid = GetPlayerVehicleID(playerid);
	for(new i=0; i < MAX_PLAYEROWNED_VEHICLES; i++)
    {
        if(vehicleid == PlayerVehicleInfo[playerid][i][pvHandleId])
		{
		    PlayerVehicleInfo[playerid][i][pvCarColor][0] = color[0];
		    PlayerVehicleInfo[playerid][i][pvCarColor][1] = color[1];
		    MySQL_Save_Player_Vehicle(playerid, i);
		    break;
		}
	}
	format(string, sizeof(string), "You have changed your vehicle colors changed to: %i and %i.", color[0], color[1]);
    SendClientMessageEx(playerid, COLOR_WHITE, string);
    ChangeVehicleColor(vehicleid, color[0], color[1]);
    PlayerInfo[playerid][pSprayCan]--;
    return 1;
}

CMD:respawnvehicles(playerid, params[])
{
	if(IsAdmin(playerid, ADMIN_LEVEL_SENIORADMIN))
	{
	    for(new i=1; i<MAX_VEHICLES; i++)
		{
			if(IsVehicleOccupied(i) == 0)
			{
	    		SetVehicleToRespawn(i);
			}
		}
		SendClientMessageToAllEx(COLOR_GREY, "All unoccupied vehicles have been respawned.");
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	return 1;
}

CMD:kill(playerid, params[])
{
	if(IsPlayerRestricted(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this at this time.");
	SetPlayerHealthEx(playerid, 0);
	return 1;
}

CMD:hallmenu(playerid, params[])
{
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 362.305, 173.687, 1008.382)) ShowPlayerDialogEx(playerid, DIALOG_CITY_HALL_MENU, DIALOG_STYLE_LIST, "Citizenship Properties", "Change Name\r\nRemoval from Phonebook ($300)\r\nAdd Phone Listing into Phonebook", "Select", "Cancel");
	else SendClientMessageEx(playerid, COLOR_GREY, "You are not at the City Hall.");
	return 1;
}

CMD:buy(playerid, params[])
{
	if(IsPlayerRestricted(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this at this time.");
	if(GetPlayerInterior(playerid) == 0) return 1;
	switch (GetBusinessType(GetPlayerBusiness(playerid)))
	{
	    case BUSINESS_TYPE_STORE: ShowPlayerDialogEx(playerid, DIALOG_STORE_BUY, DIALOG_STYLE_LIST, "Store Items","Cellphone ($100)\r\nWalkie Talkie ($250)\r\nPhonebook ($50)\r\nSpraycan ($10)\r\nGPS ($35)\r\nBaseball Bat ($85)\r\nGas Can ($100)", "Purchase", "Cancel");
	    case BUSINESS_TYPE_CLUB: ShowPlayerDialogEx(playerid, DIALOG_CLUB_BUY, DIALOG_STYLE_LIST, "Drinks", "Beer ($15)\r\nWine ($25)\r\nSprunk ($5)", "Purchase", "Cancel");
	    case BUSINESS_TYPE_CLOTHING:
		{
			//ShowPlayerDialogEx(playerid, DIALOG_CLOTHES_BUY, DIALOG_STYLE_INPUT, "Clothes", "Welcome to Binco!\nPlease enter a skin id in the field below to purchase it!\nA skin change costs $250.", "Purchase", "Cancel");
			if(PlayerInfo[playerid][pMoney] < 100) return SendClientMessageEx(playerid, COLOR_GREY, "You do not have enough money ($100) to purchase this skin.");
			SendClientMessageEx(playerid, COLOR_YELLOW, "Please note that purchasing a new skin will cost $100.");
			DestroySelectionMenu(playerid);
		    SetPVarInt(playerid, "skinc_active", 1);
		    CreateSelectionMenu(playerid);
		    SelectTextDraw(playerid, 0xACCBF1FF);
		}
	    case BUSINESS_TYPE_SEXSTORE: ShowPlayerDialogEx(playerid, DIALOG_SEXSTORE_BUY, DIALOG_STYLE_LIST, "Sex Toys", "Double-End Dildo ($20)\r\nDildo ($10)\r\nVibrator ($15)\r\nSilver Vibrator ($30)", "Purchase", "Cancel");
	    case BUSINESS_TYPE_AMMUNATION:
		{
			if(PlayerInfo[playerid][pGunLicense] == 1) ShowPlayerDialogEx(playerid, DIALOG_AMMUNATION_BUY, DIALOG_STYLE_LIST, "Ammunation - Weapons", "Colt-45 ($150)\r\nShotgun ($350)\r\nRifle ($400)\r\nShovel ($50)", "Purchase", "Cancel");
			else SendClientMessageEx(playerid, COLOR_GREY, "You must own a gun license to purchase weapons from this store.");
		}
	}
	return 1;
}

public OnPlayerCommandReceived(playerid, cmdtext[])
{
	if(GetPVarInt(playerid, "gPlayerLogged") == 0 || !IsPlayerConnectedEx(playerid) || PlayerInfo[playerid][pTutorial] != 1) return 0;
	else if(gettime() - commandTime[playerid] < 0)
	{
	    SendClientMessageEx(playerid, COLOR_WHITE, "You are muted from submitting commands right now.");
	    return 0;
	}
	else if(commandAttempts[playerid] >= 5)
	{
		commandTime[playerid] = gettime() + 10;
		SendClientMessageEx(playerid, COLOR_YELLOW, "You have been muted automatically for spamming. Please wait 10 seconds and try again.");
		return 0;
	}
	commandAttempts[playerid]++;
	return 1;
}


public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
	if(!success) return SendClientMessageEx(playerid, COLOR_WHITE, "You have entered an invalid command, please type /help for a list of valid commands.");
	return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	if(CurrentDialog[playerid] != dialogid && !IsPlayerAdmin(playerid)) //Dialog Spoofing
	{
	    printf("[DIALOG]: %s may have attempted to spoof dialog id %d.", PlayerInfo[playerid][pUsername], dialogid);
	    return Kick(playerid); // no time for spoofers
	}
	
	switch(dialogid)
	{
		case DIALOG_NO_RESULT:
		{

		}
	    case DIALOG_REGISTER:
	    {
	    	new szQuery[256];
			if(!response) return Kick(playerid);
			else if(strlen(inputtext) < 4 || strlen(inputtext) > 32)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Please enter a valid password that is over 4 characters and under 32.");
				format(szQuery, sizeof(szQuery), "Welcome to %s!\nPlease enter a password to register the selected account.", SERVER_NAME);
				return ShowPlayerDialogEx(playerid, 1001, DIALOG_STYLE_PASSWORD, "Registration", szQuery, "Register", "Cancel");
			}
			WP_Hash(PlayerInfo[playerid][pPassword], 129, inputtext);
			format(szQuery, sizeof(szQuery), "INSERT INTO `accounts` (`Username`, `Password`) VALUES ('%s', '%s')", PlayerInfo[playerid][pUsername], PlayerInfo[playerid][pPassword]);
			mysql_query(szQuery, THREAD_ACCOUNT_REGISTER, playerid, mConnectionHandle);
	    }
	    
	    case DIALOG_LOGIN:
	    {
	    	new szString[256];

			if(!response) return Kick(playerid);
			WP_Hash(szString, sizeof(szString), inputtext);
			if(!strcmp(szString, PlayerInfo[playerid][pPassword], true, 128))
			{
			    if(PlayerInfo[playerid][pBanned])
			    {
			        SendClientMessage(playerid, COLOR_YELLOW, "This account is currently banned from the server, please post a ban appeal on the forums ("SERVER_WEBSITE")");
			        return Kick(playerid);
			    }
			    if(!PlayerInfo[playerid][pTutorial])
			    {
			    	SendClientMessage(playerid, COLOR_WHITE, "It appears that you have not yet finished the Character Setup yet, redirecting you to it.");
	        		ShowPlayerDialogEx(playerid, DIALOG_GENDER, DIALOG_STYLE_LIST, "{FFFFFF}"SERVER_NAME" - Character Setup", "Male\r\n{F593BA}Female", "Select", "Exit");
			    }
			    else
			    {
  		    		SetPVarInt(playerid, "gPlayerLogged", 1);
			    	SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);
		    		TogglePlayerSpectating(playerid, false);
    				TogglePlayerControllable(playerid, true);
					if(PlayerInfo[playerid][pAdminLevel] >= 1)
					{
					    format(szString, sizeof(szString), "SERVER:{FFFFFF} You have logged in as a %s.", GetAdministratorRank(playerid));
						SendClientMessageEx(playerid, COLOR_ORANGE, szString);
					    format(szString, sizeof(szString), "SERVER: %s has logged in as a %s.", GetPlayerNameEx(playerid), GetAdministratorRank(playerid));
						AdminAlert(szString, ALERT_ADMINS);
					}
			    }
			    
			}
			else
			{
			    if(MAX_LOGIN_ATTEMPTS - ++gLoginAttempts[playerid] == 0)
			    {
			    	SendClientMessage(playerid, COLOR_WHITE, "You have been kicked for exceeding the maximum amount of login attempts.");
					return Kick(playerid);
			    }
   				format(szString, sizeof(szString), "{FFFFFF}Hello %s, this account appears to be {FF0000}registered!\n{FFFFFF}Please type in the correct password to access this account:", PlayerInfo[playerid][pUsername]);
	            ShowPlayerDialogEx(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, "Roleplay - Login", szString, "Login", "Exit");
   				format(szString, sizeof(szString), "You have entered an invalid password, you have %d attempts left.", MAX_LOGIN_ATTEMPTS - gLoginAttempts[playerid]);
			    SendClientMessage(playerid, COLOR_WHITE, szString);
			}
	    }
	    
		case DIALOG_GENDER:
		{
		    if(!response || (listitem < 0 || listitem > 1)) return Kick(playerid);
			switch(listitem)
			{
				case 0:
				{
					PlayerInfo[playerid][pGender] = 1;
				    for(new i=0; i < 20; i++) SendClientMessage(playerid, COLOR_WHITE, "");
					SendClientMessage(playerid, COLOR_WHITE, "Alright, so your character's gender is Male. How old is your character going to be?");
				}
			    case 1:
				{
					PlayerInfo[playerid][pGender] = 2;
				    for(new i=0; i < 20; i++) SendClientMessage(playerid, COLOR_WHITE, "");
					SendClientMessage(playerid, COLOR_WHITE, "Alright, so your character's gender is Female. How old is your character going to be?");
				}
			    default: return ShowPlayerDialogEx(playerid, DIALOG_GENDER, DIALOG_STYLE_LIST, "{FFFFFF}"SERVER_NAME" - Character Setup", "Male\r\n{F593BA}Female", "Select", "Exit");
			}
			new szString[256], buffer[4];
			for (new i=18; i <= 80; i++)
			{
			    format(buffer, 4, "%d\n", i);
			    strcat(szString, buffer);
			}
			ShowPlayerDialogEx(playerid, DIALOG_AGE, DIALOG_STYLE_LIST, "{FFFFFF}"SERVER_NAME" - Character Setup", szString, "Submit", "Exit");
		}
		case DIALOG_AGE:
		{
			if(!response || (listitem < 0 || listitem > 80)) return Kick(playerid);

			PlayerInfo[playerid][pAge] = 18 + listitem;
		    new string[128];
		    for(new i=0; i < 20; i++) SendClientMessage(playerid, COLOR_WHITE, "");
			format(string, sizeof(string), "Your character is aged %d years old, how did you arrive in "SERVER_MAP"?", PlayerInfo[playerid][pAge]);
			SendClientMessage(playerid, COLOR_WHITE, string);

			ShowPlayerDialogEx(playerid, DIALOG_ARRIVAL, DIALOG_STYLE_LIST, "{FFFFFF}"SERVER_NAME" - Character Setup", "Plane\nTrain", "Submit", "Exit");
		}
		case DIALOG_ARRIVAL:
		{
			if(!response || (listitem < 0 || listitem > 1)) return Kick(playerid);
			PlayerInfo[playerid][pArrival] = listitem;
		    for(new i=0; i < 20; i++) SendClientMessage(playerid, COLOR_WHITE, "");
			switch(listitem)
			{
			    case 0: SendClientMessage(playerid, COLOR_WHITE, "Your character will be arriving to "SERVER_MAP" by a train. Please specify how your character looks like.");
			    case 1: SendClientMessage(playerid, COLOR_WHITE, "Your character will be arriving to "SERVER_MAP" by a plane. Please specify how your character looks like.");
				default: return Kick(playerid);
			}
			ShowPlayerDialogEx(playerid, DIALOG_SKIN, DIALOG_STYLE_INPUT, "{FFFFFF}"SERVER_NAME" - Character Setup", "Please enter a skin ID to specify how your character looks like.\nNote: Use one within the range 0 to 299. {FF0000}Faction skins are restricted.", "Submit", "Exit");
		}

		case DIALOG_SKIN:
		{
			if(!response) return Kick(playerid);
			if(isnull(inputtext)) return ShowPlayerDialogEx(playerid, DIALOG_SKIN, DIALOG_STYLE_INPUT, "{FFFFFF}"SERVER_NAME" - Character Setup", "Please enter a skin ID to specify how your character looks like.\nNote: Use one within the range 0 to 299. {FF0000}Faction skins are restricted.", "Submit", "Exit");
			if(!IsAValidSkin(strval(inputtext)))
			{
			    SendClientMessageEx(playerid, COLOR_WHITE, "You have entered an invalid or restricted (faction) skin ID. Please try another one.");
		 		return ShowPlayerDialogEx(playerid, DIALOG_SKIN, DIALOG_STYLE_INPUT, "{FFFFFF}"SERVER_NAME" - Character Setup", "Please enter a skin ID to specify how your character looks like.\nNote: Use one within the range 0 to 299. Faction skins are restricted.", "Submit", "");
			}
			PlayerInfo[playerid][pSkin] = strval(inputtext);
			
			for(new i=0; i < 20; i++) SendClientMessage(playerid, COLOR_WHITE, "");
	        SendClientMessage(playerid, COLOR_ORANGE, "---------------------------------------------------");
	    	SendClientMessage(playerid, COLOR_WHITE, "Welcome to "SERVER_NAME".");
			SendClientMessage(playerid, COLOR_WHITE, "There are many things to do, ranging from applying to a faction to becoming the richest person in San Andreas.");
			SendClientMessage(playerid, COLOR_WHITE, "We believe here that everyone should play legitimately, including our staff members along with others.");
			SendClientMessage(playerid, COLOR_WHITE, "You can find out more information about our server on our site (/information), or ask on /helpme for help.");
			SendClientMessage(playerid, COLOR_ORANGE, "---------------------------------------------------");
	        SetDefaultRegisterStatistics(playerid);
/*
			SetPVarInt(playerid, "TutorialStage", 1);
			SetPlayerPos(playerid, 1797.23, -1314.48, 7.0);
			SetPlayerCameraPos(playerid, 1797.23, -1314.48, 62.98);
			SetPlayerCameraLookAt(playerid, 1773.80, -1358.02, 44.50);

			for(new i = 0; i < 20; i++) SendClientMessage(playerid, COLOR_WHITE, "");
			SendClientMessage(playerid, COLOR_ORANGE, "---------------------------------------------------");
	        SendClientMessage(playerid, COLOR_ORANGE, "Welcome to "SERVER_NAME", this script was created by Aleks & Vishnu.");
	        SendClientMessage(playerid, COLOR_WHITE, "This servers expected roleplay standard is high.");
	        SendClientMessage(playerid, COLOR_WHITE, "If you require any additional assistance, please use the /n(ewbie) channel, or /o(oc).");
	        SendClientMessage(playerid, COLOR_WHITE, "We hope you enjoy the tutorial as well as the server, and stay with us.");
			SendClientMessage(playerid, COLOR_ORANGE, "---------------------------------------------------");

			TutorialTimerEx[playerid] = repeat TutorialTimer(playerid);
*/
		}
		
		case DIALOG_DEALERSHIP_BUY:
		{
		    if(!response)
		    {
		        RemovePlayerFromVehicleEx(playerid);
		        return 0;
		    }
		    else if(GetPVarInt(playerid, "DealershipId") == INVALID_VEHICLE_ID || GetPVarInt(playerid, "DealershipId") == INVALID_DEALERSHIP_ID) return 0;
		    else
		    {
			    new
					dId = GetPVarInt(playerid, "DealershipId"),
			    	dCar = GetPVarInt(playerid, "DealershipCar"),
			    	i = GetAvailableVehicleSlot(playerid),
					string[128];
					
				if(PlayerInfo[playerid][pMoney] < DealershipInfo[dId][dvPrice][dCar])
				{
					SendClientMessageEx(playerid, COLOR_GREY, "You do not have enough money to purchase this car.");
					RemovePlayerFromVehicleEx(playerid);
			        return 0;
				}
				else if(i == INVALID_SLOT_ID)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "You do not have any vehicle slots available for this car.");
					RemovePlayerFromVehicleEx(playerid);
			        return 0;
				}
                PlayerVehicleInfo[playerid][i][pvModelId] = DealershipInfo[dId][dvModel][dCar];
                
                switch (dId)
                {
                    case 0:
                    {
                        PlayerVehicleInfo[playerid][i][pvPosition][0] = 2126.142;
						PlayerVehicleInfo[playerid][i][pvPosition][1] = -1125.192;
						PlayerVehicleInfo[playerid][i][pvPosition][2] = 25.579;
						PlayerVehicleInfo[playerid][i][pvPosition][3] = 352.556;
                    }
                    
                    case 1:
					{
                        PlayerVehicleInfo[playerid][i][pvPosition][0] = 1654.645;
						PlayerVehicleInfo[playerid][i][pvPosition][1] = -1887.126;
						PlayerVehicleInfo[playerid][i][pvPosition][2] = 13.250;
						PlayerVehicleInfo[playerid][i][pvPosition][3] = 9.99;
					}
                }
                
				GivePlayerCash(playerid, -DealershipInfo[dId][dvPrice][dCar]);
    	    	PlayerVehicleInfo[playerid][i][pvHandleId] = CreateVehicle(PlayerVehicleInfo[playerid][i][pvModelId], PlayerVehicleInfo[playerid][i][pvPosition][0], PlayerVehicleInfo[playerid][i][pvPosition][1], PlayerVehicleInfo[playerid][i][pvPosition][2], PlayerVehicleInfo[playerid][i][pvPosition][3], PlayerVehicleInfo[playerid][i][pvCarColor][0], PlayerVehicleInfo[playerid][i][pvCarColor][1], VEHICLE_RESPAWN);
                VehicleInfo[PlayerVehicleInfo[playerid][i][pvHandleId]][vLocked] = 0;
				RemovePlayerFromVehicleEx(playerid);
				PutPlayerInVehicle(playerid, PlayerVehicleInfo[playerid][i][pvHandleId], 0);
				format(string, sizeof(string), "You have purchased a %s for $%d, it has been added into your inventory.", VehicleNames[DealershipInfo[dId][dvModel][dCar] - 400], DealershipInfo[dId][dvPrice][dCar]);
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				MySQL_Save_Player_Vehicle(playerid, i);
			}
			DeletePVar(playerid, "DealershipId");
			DeletePVar(playerid, "DealershipCar");
		}
		
		case DIALOG_DELETE_CAR:
		{
		    if(!response) return 0;
		    else if(PlayerVehicleInfo[playerid][listitem][pvModelId] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot delete the car in that slot because it is empty.");
			VehicleInfo[PlayerVehicleInfo[playerid][listitem][pvHandleId]][vLocked] = 0;
			DestroyVehicle(PlayerVehicleInfo[playerid][listitem][pvHandleId]);
		 	for (new i; ePlayerVehicleData:i < ePlayerVehicleData; i++)
		 	{
    			PlayerVehicleInfo[playerid][listitem][ePlayerVehicleData:i] = 0;
		 	}
		 	SendClientMessageEx(playerid, COLOR_GREY, "You have successfully deleted your vehicle in the specified slot.");
			MySQL_Save_Player_Vehicle(playerid, listitem);
		}
		
		case DIALOG_DMV_IMPOUND:
		{
		    if(!response) return 0;
		    else if(PlayerVehicleInfo[playerid][listitem][pvModelId] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot select the car in that slot because it is empty.");
			new
			    string[128];
		    if(PlayerVehicleInfo[playerid][listitem][pvImpounded] == 1)
			{
                if(PlayerInfo[playerid][pMoney] < 1000) return SendClientMessageEx(playerid, COLOR_WHITE, "You cannot afford to pay the total sum of $1,000.");
                PlayerVehicleInfo[playerid][listitem][pvImpounded] = 0;
				GivePlayerCash(playerid, -1000);
				AddVaultMoney(2, 1000);
				format(string, sizeof(string), "You have released your %s from the impound for $1,000.", VehicleNames[PlayerVehicleInfo[playerid][listitem][pvModelId] - 400]);
	    	    PlayerVehicleInfo[playerid][listitem][pvHandleId] = CreateVehicle(PlayerVehicleInfo[playerid][listitem][pvModelId], PlayerVehicleInfo[playerid][listitem][pvPosition][0], PlayerVehicleInfo[playerid][listitem][pvPosition][1], PlayerVehicleInfo[playerid][listitem][pvPosition][2], PlayerVehicleInfo[playerid][listitem][pvPosition][3], PlayerVehicleInfo[playerid][listitem][pvCarColor][0], PlayerVehicleInfo[playerid][listitem][pvCarColor][1], VEHICLE_RESPAWN);
				VehicleInfo[PlayerVehicleInfo[playerid][listitem][pvHandleId]][vLocked] = PlayerVehicleInfo[playerid][listitem][pvLocked];
			}
			else if(PlayerVehicleInfo[playerid][listitem][pvTicketPrice] > 0)
			{
                if(PlayerInfo[playerid][pMoney] < PlayerVehicleInfo[playerid][listitem][pvTicketPrice]) return SendClientMessageEx(playerid, COLOR_WHITE, "You cannot afford to pay the total sum of tickets.");
                GivePlayerCash(playerid, -PlayerVehicleInfo[playerid][listitem][pvTicketPrice]);
   				AddVaultMoney(2, PlayerVehicleInfo[playerid][listitem][pvTicketPrice]);
		        format(string, sizeof(string), "You have paid the total amount of $%d in tickets for your vehicle.", PlayerVehicleInfo[playerid][listitem][pvTicketPrice]);
                PlayerVehicleInfo[playerid][listitem][pvTicketPrice] = 0;
			}
			else format(string, sizeof(string), "No legal notices are bound to this vehicle, it may be legally driven without hassle.");
		 	SendClientMessageEx(playerid, COLOR_WHITE, string);
			MySQL_Save_Player_Vehicle(playerid, listitem);
		}
		
		case DIALOG_TRACK_CAR:
		{
		    if(!response) return 0;
		    else if(PlayerVehicleInfo[playerid][listitem][pvModelId] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot track the car in that slot because it is empty.");
			else if(HasActiveCheckpoint(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You already have an existing checkpoint, type /killcheckpoint to delete it.");
		    else if(PlayerVehicleInfo[playerid][listitem][pvImpounded]) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot track the car in that slot because it is impounded.");
			new Float:tmpFloats[3];
			GetVehiclePos(PlayerVehicleInfo[playerid][listitem][pvHandleId], tmpFloats[0], tmpFloats[1], tmpFloats[2]);
			SetPlayerCheckpoint(playerid, tmpFloats[0], tmpFloats[1], tmpFloats[2], 4.0);
			SetPVarInt(playerid, "TrackingCar", 1);
			SendClientMessageEx(playerid, COLOR_WHITE, "Hint: Make your way to the checkpoint to find your vehicle.");
		}
		
		case DIALOG_TELEPORT_CAR:
		{
		    if(!response) return 0;
		    else if(!IsPlayerConnectedEx(GetPVarInt(playerid, "PlayerCarId")) || PlayerVehicleInfo[GetPVarInt(playerid, "PlayerCarId")][listitem][pvHandleId] == 0) return 0;
		    else if(PlayerVehicleInfo[GetPVarInt(playerid, "PlayerCarId")][listitem][pvHandleId] == 0 || !IsValidVehicle(PlayerVehicleInfo[GetPVarInt(playerid, "PlayerCarId")][listitem][pvHandleId])) return 0;
			new
			    Float:tmpFloats[3],
				targetid = GetPVarInt(playerid, "PlayerCarId");
			GetVehiclePos(PlayerVehicleInfo[targetid][listitem][pvHandleId], tmpFloats[0], tmpFloats[1], tmpFloats[2]);
			SetPlayerPos(playerid, tmpFloats[0], tmpFloats[1], tmpFloats[2]);
			SendClientMessageEx(playerid, COLOR_FADE1, "You have been teleported to the specified player's vehicle.");
			DeletePVar(playerid, "PlayerCarId");
		}
		
		case DIALOG_BRING_CAR:
		{
		    if(!response) return 0;
		    else if(!IsPlayerConnectedEx(GetPVarInt(playerid, "PlayerCarId")) || PlayerVehicleInfo[GetPVarInt(playerid, "PlayerCarId")][listitem][pvHandleId] == 0) return 0;
		    else if(PlayerVehicleInfo[GetPVarInt(playerid, "PlayerCarId")][listitem][pvHandleId] == 0 || !IsValidVehicle(PlayerVehicleInfo[GetPVarInt(playerid, "PlayerCarId")][listitem][pvHandleId])) return 0;
			new
			    Float:tmpFloats[4],
				targetid = GetPVarInt(playerid, "PlayerCarId");
			GetPlayerPos(playerid, tmpFloats[0], tmpFloats[1], tmpFloats[2]);
			GetPlayerFacingAngle(playerid, tmpFloats[3]);
			SetVehiclePos(PlayerVehicleInfo[targetid][listitem][pvHandleId], tmpFloats[0], tmpFloats[1], tmpFloats[2]);
			SetVehicleZAngle(PlayerVehicleInfo[targetid][listitem][pvHandleId], tmpFloats[3]);
			PutPlayerInVehicle(playerid, PlayerVehicleInfo[targetid][listitem][pvHandleId], 0);
			SendClientMessageEx(playerid, COLOR_FADE1, "You have been teleported to the specified player's vehicle.");
			DeletePVar(playerid, "PlayerCarId");
		}

		case DIALOG_CHANGE_PASSWORD:
		{
		    new string[400];
			if(!response) return SendClientMessageEx(playerid, COLOR_WHITE, "You have cancelled the password change request.");
			else if(strlen(inputtext) < 4 || strlen(inputtext) > 32)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Please enter a valid password that is over 4 characters and under 32.");
				return ShowPlayerDialogEx(playerid, DIALOG_CHANGE_PASSWORD, DIALOG_STYLE_PASSWORD, "Change Password", "You are about to change your password!\nPlease enter a new password to continue:", "Enter", "Cancel");
			}
			WP_Hash(string, sizeof(string), inputtext);
			format(PlayerInfo[playerid][pPassword], 129, "%s", string);
			format(string, sizeof(string), "UPDATE `accounts` SET `Password`='%s' WHERE `Id` = '%d'", PlayerInfo[playerid][pPassword], PlayerInfo[playerid][pId]);
			mysql_query(string, THREAD_NO_RESULT, playerid, mConnectionHandle);
			format(string, sizeof(string), "You have successfully changed your password to %s.", inputtext);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		
		
		case DIALOG_WAYPOINT_EDIT:
		{
		    if(!response) return 0;
		    else if(WaypointEditing[playerid] == 0) return 0;

		    new
		        string[256];
		    
		    switch (listitem)
		    {
				case 0:
				{
				    WaypointEditOption[playerid] = 1;
				    format(string, sizeof(string), "{FFFFFF}You are currently editing the title of Waypoint %d.\nCurrent title: %s", WaypointEditing[playerid], WaypointInfo[WaypointEditing[playerid]][wTextDisplay]);
				    ShowPlayerDialogEx(playerid, DIALOG_WAYPOINT_SUBMIT, DIALOG_STYLE_INPUT, "{FFFFFF}Waypoint Editor - Title", string, "Submit", "Cancel");
				}
				
				case 1:
				{
				    WaypointEditOption[playerid] = 2;
					format(string, sizeof(string), "{FFFFFF}You are currently editing Waypoint %d's Entrance Position X.\nCurrent PositionX: %f", WaypointEditing[playerid], WaypointInfo[WaypointEditing[playerid]][wPosition][0]);
				    ShowPlayerDialogEx(playerid, DIALOG_WAYPOINT_SUBMIT, DIALOG_STYLE_INPUT, "{FFFFFF}Waypoint Editor - Position X", string, "Submit", "Cancel");
				}

				case 2:
				{
				    WaypointEditOption[playerid] = 3;
					format(string, sizeof(string), "{FFFFFF}You are currently editing Waypoint %d's Entrance Position Y.\nCurrent PositionY: %f", WaypointEditing[playerid], WaypointInfo[WaypointEditing[playerid]][wPosition][1]);
				    ShowPlayerDialogEx(playerid, DIALOG_WAYPOINT_SUBMIT, DIALOG_STYLE_INPUT, "{FFFFFF}Waypoint Editor - Position Y", string, "Submit", "Cancel");
				}
				
				case 3:
				{
				    WaypointEditOption[playerid] = 4;
					format(string, sizeof(string), "{FFFFFF}You are currently editing Waypoint %d's Entrance Position Z.\nCurrent PositionZ: %f", WaypointEditing[playerid], WaypointInfo[WaypointEditing[playerid]][wPosition][2]);
				    ShowPlayerDialogEx(playerid, DIALOG_WAYPOINT_SUBMIT, DIALOG_STYLE_INPUT, "{FFFFFF}Waypoint Editor - Position Z", string, "Submit", "Cancel");
				}

				case 4:
				{
				    WaypointEditOption[playerid] = 5;
					format(string, sizeof(string), "{FFFFFF}You are currently editing Waypoint %d's Entrance Interior ID (0-18).\nCurrent Interior ID: %d", WaypointEditing[playerid], WaypointInfo[WaypointEditing[playerid]][wInterior]);
				    ShowPlayerDialogEx(playerid, DIALOG_WAYPOINT_SUBMIT, DIALOG_STYLE_INPUT, "{FFFFFF}Waypoint Editor - Interior", string, "Submit", "Cancel");
				}

				case 5:
				{
				    WaypointEditOption[playerid] = 6;
					format(string, sizeof(string), "{FFFFFF}You are currently editing Waypoint %d's Virtual World.\nCurrent Virtual World: %d", WaypointEditing[playerid], WaypointInfo[WaypointEditing[playerid]][wVirtualWorld]);
				    ShowPlayerDialogEx(playerid, DIALOG_WAYPOINT_SUBMIT, DIALOG_STYLE_INPUT, "{FFFFFF}Waypoint Editor - Virtual World", string, "Submit", "Cancel");
				}
				
				case 6:
				{
				    WaypointEditOption[playerid] = 7;
					format(string, sizeof(string), "{FFFFFF}You are currently editing Waypoint %d's Destination Position X.\nCurrent PositionX: %f", WaypointEditing[playerid], WaypointInfo[WaypointEditing[playerid]][wDestPosition][0]);
				    ShowPlayerDialogEx(playerid, DIALOG_WAYPOINT_SUBMIT, DIALOG_STYLE_INPUT, "{FFFFFF}Waypoint Editor - Position X", string, "Submit", "Cancel");
				}

				case 7:
				{
				    WaypointEditOption[playerid] = 8;
					format(string, sizeof(string), "{FFFFFF}You are currently editing Waypoint %d's Destination Position Y.\nCurrent PositionY: %f", WaypointEditing[playerid], WaypointInfo[WaypointEditing[playerid]][wDestPosition][1]);
				    ShowPlayerDialogEx(playerid, DIALOG_WAYPOINT_SUBMIT, DIALOG_STYLE_INPUT, "{FFFFFF}Waypoint Editor - Position Y", string, "Submit", "Cancel");
				}

				case 8:
				{
				    WaypointEditOption[playerid] = 9;
					format(string, sizeof(string), "{FFFFFF}You are currently editing Waypoint %d's Destination Position Z.\nCurrent PositionZ: %f", WaypointEditing[playerid], WaypointInfo[WaypointEditing[playerid]][wDestPosition][2]);
				    ShowPlayerDialogEx(playerid, DIALOG_WAYPOINT_SUBMIT, DIALOG_STYLE_INPUT, "{FFFFFF}Waypoint Editor - Position Z", string, "Submit", "Cancel");
				}

				case 9:
				{
				    WaypointEditOption[playerid] = 10;
					format(string, sizeof(string), "{FFFFFF}You are currently editing Waypoint %d's Destination Interior ID (0-18).\nCurrent Interior ID: %d", WaypointEditing[playerid], WaypointInfo[WaypointEditing[playerid]][wDestInterior]);
				    ShowPlayerDialogEx(playerid, DIALOG_WAYPOINT_SUBMIT, DIALOG_STYLE_INPUT, "{FFFFFF}Waypoint Editor - Interior", string, "Submit", "Cancel");
				}

				case 10:
				{
				    WaypointEditOption[playerid] = 11;
					format(string, sizeof(string), "{FFFFFF}You are currently editing Waypoint %d's Destination World.\nCurrent Virtual World: %d", WaypointEditing[playerid], WaypointInfo[WaypointEditing[playerid]][wDestVirtualWorld]);
				    ShowPlayerDialogEx(playerid, DIALOG_WAYPOINT_SUBMIT, DIALOG_STYLE_INPUT, "{FFFFFF}Waypoint Editor - Virtual World", string, "Submit", "Cancel");
				}
				
				case 11:
				{
				    WaypointEditOption[playerid] = 12;
					format(string, sizeof(string), "{FFFFFF}You are about to delete Waypoint %d.\nPlease type in 'confirm' to confirm deletion.", WaypointEditing[playerid]);
				    ShowPlayerDialogEx(playerid, DIALOG_WAYPOINT_SUBMIT, DIALOG_STYLE_INPUT, "{FFFFFF}Waypoint Editor - Deletion", string, "Submit", "Cancel");
				}
				
				case 12:
				{
				    SetPlayerInteriorEx(playerid, WaypointInfo[WaypointEditing[playerid]][wInterior]);
				    SetPlayerVirtualWorldEx(playerid, WaypointInfo[WaypointEditing[playerid]][wVirtualWorld]);
				    SetPlayerPos(playerid, WaypointInfo[WaypointEditing[playerid]][wPosition][0], WaypointInfo[WaypointEditing[playerid]][wPosition][1], WaypointInfo[WaypointEditing[playerid]][wPosition][2]);
				}
				
				case 13:
				{
				    SetPlayerInteriorEx(playerid, WaypointInfo[WaypointEditing[playerid]][wDestInterior]);
				    SetPlayerVirtualWorldEx(playerid, WaypointInfo[WaypointEditing[playerid]][wDestVirtualWorld]);
				    SetPlayerPos(playerid, WaypointInfo[WaypointEditing[playerid]][wDestPosition][0], WaypointInfo[WaypointEditing[playerid]][wDestPosition][1], WaypointInfo[WaypointEditing[playerid]][wDestPosition][2]);
				}
				
				case 14:
				{
		            format(string, sizeof(string), "You have successfully changed Waypoint %d's entrance to your current location.", WaypointEditing[playerid]);
		            SendClientMessageEx(playerid, COLOR_WHITE, string);
					GetPlayerFacingAngle(playerid, WaypointInfo[WaypointEditing[playerid]][wFacingAngle]);
					GetPlayerPos(playerid, WaypointInfo[WaypointEditing[playerid]][wPosition][0], WaypointInfo[WaypointEditing[playerid]][wPosition][1], WaypointInfo[WaypointEditing[playerid]][wPosition][2]);
             	 	WaypointInfo[WaypointEditing[playerid]][wInterior] = GetPlayerInterior(playerid);
             	 	WaypointInfo[WaypointEditing[playerid]][wVirtualWorld] = GetPlayerVirtualWorld(playerid);
             	 	
		            format(string, sizeof(string), "UPDATE `waypoints` SET `wPosX`='%f',`wPosY`='%f',`wPosZ`='%f',`wInterior`='%d',`wVirtualWorld`='%d',", WaypointInfo[WaypointEditing[playerid]][wPosition][0], WaypointInfo[WaypointEditing[playerid]][wPosition][1], WaypointInfo[WaypointEditing[playerid]][wPosition][2], WaypointInfo[WaypointEditing[playerid]][wInterior], WaypointInfo[WaypointEditing[playerid]][wVirtualWorld]);
					format(string, sizeof(string), "%s`wFacingAngle`='%f' WHERE `Id` = '%d'", string, WaypointInfo[WaypointEditing[playerid]][wFacingAngle], WaypointEditing[playerid]);
					mysql_query(string, THREAD_NO_RESULT, playerid, mConnectionHandle);
                    RecreateWaypointText(WaypointEditing[playerid]);
				}
				
				case 15:
				{
		            format(string, sizeof(string), "You have successfully changed Waypoint %d's destination to your current location.", WaypointEditing[playerid]);
		            SendClientMessageEx(playerid, COLOR_YELLOW, string);
					GetPlayerFacingAngle(playerid, WaypointInfo[WaypointEditing[playerid]][wDestFacingAngle]);
             	 	GetPlayerPos(playerid, WaypointInfo[WaypointEditing[playerid]][wDestPosition][0], WaypointInfo[WaypointEditing[playerid]][wDestPosition][1], WaypointInfo[WaypointEditing[playerid]][wDestPosition][2]);
                    WaypointInfo[WaypointEditing[playerid]][wDestInterior] = GetPlayerInterior(playerid);
             	 	WaypointInfo[WaypointEditing[playerid]][wDestVirtualWorld] = GetPlayerVirtualWorld(playerid);
					format(string, sizeof(string), "UPDATE `waypoints` SET `dPosX`='%f',`dPosY`='%f',`dPosZ`='%f',`dInterior`='%d',`dVirtualWorld`='%d',", WaypointInfo[WaypointEditing[playerid]][wDestPosition][0], WaypointInfo[WaypointEditing[playerid]][wDestPosition][1], WaypointInfo[WaypointEditing[playerid]][wDestPosition][2], WaypointInfo[WaypointEditing[playerid]][wDestInterior], WaypointInfo[WaypointEditing[playerid]][wDestVirtualWorld]);
					format(string, sizeof(string), "%s`dFacingAngle`='%f' WHERE `Id` = '%d'", string, WaypointInfo[WaypointEditing[playerid]][wDestFacingAngle], WaypointEditing[playerid]);
					mysql_query(string, THREAD_NO_RESULT, playerid, mConnectionHandle);
				}
				
				case 16:
				{
				    WaypointEditOption[playerid] = 17;
					format(string, sizeof(string), "{FFFFFF}You are currently editing Waypoint %d's Entrance Load Time (0-10).\nCurrent Value: %d", WaypointEditing[playerid], WaypointInfo[WaypointEditing[playerid]][wLoadingTime]);
				    ShowPlayerDialogEx(playerid, DIALOG_WAYPOINT_SUBMIT, DIALOG_STYLE_INPUT, "{FFFFFF}Waypoint Editor - Entrance Loading Time", string, "Submit", "Cancel");
				}
				
				case 17:
				{
				    WaypointEditOption[playerid] = 18;
					format(string, sizeof(string), "{FFFFFF}You are currently editing Waypoint %d's Destination Load Time (0-10).\nCurrent Value: %d", WaypointEditing[playerid], WaypointInfo[WaypointEditing[playerid]][wDestLoadingTime]);
				    ShowPlayerDialogEx(playerid, DIALOG_WAYPOINT_SUBMIT, DIALOG_STYLE_INPUT, "{FFFFFF}Waypoint Editor - Destination Loading Time", string, "Submit", "Cancel");
				}
				
				case 18:
				{
				    WaypointEditOption[playerid] = 19;
					format(string, sizeof(string), "{FFFFFF}You are currently editing Waypoint %d's Password (8 max chars).\nCurrent Value: %s", WaypointEditing[playerid], WaypointInfo[WaypointEditing[playerid]][wPassword]);
				    ShowPlayerDialogEx(playerid, DIALOG_WAYPOINT_SUBMIT, DIALOG_STYLE_INPUT, "{FFFFFF}Waypoint Editor - Password", string, "Submit", "Cancel");
				}
				
				case 19:
				{
				    if(WaypointInfo[WaypointEditing[playerid]][wLocked] == 1) {
				        SendClientMessageEx(playerid, COLOR_WHITE, "You have unlocked the waypoint, everyone will now be able to access it.");
				        WaypointInfo[WaypointEditing[playerid]][wLocked] = 0;
				    } else {
				        SendClientMessageEx(playerid, COLOR_WHITE, "You have locked the waypoint, no one will now be able to access it.");
				        WaypointInfo[WaypointEditing[playerid]][wLocked] = 1;
				    }
		            format(string, sizeof(string), "UPDATE `waypoints` SET `Locked` = '%d' WHERE `Id` = '%d'", WaypointInfo[WaypointEditing[playerid]][wLocked], WaypointEditing[playerid]);
					mysql_query(string, THREAD_NO_RESULT, playerid, mConnectionHandle);
				}
				
				case 20:
				{
				    WaypointEditOption[playerid] = 21;
					format(string, sizeof(string), "{FFFFFF}You are currently restricting Waypoint %d to a faction.\nCurrent Value: %d", WaypointEditing[playerid], WaypointInfo[WaypointEditing[playerid]][wFactionRestriction]);
				    ShowPlayerDialogEx(playerid, DIALOG_WAYPOINT_SUBMIT, DIALOG_STYLE_INPUT, "{FFFFFF}Waypoint Editor - Faction Restriction", string, "Submit", "Cancel");
				}
		    }
		}
		
		case DIALOG_WAYPOINT_SUBMIT:
		{
		    if(!response) return 0;
		    else if(WaypointEditOption[playerid] == 0) return 0;
		    else if(WaypointInfo[WaypointEditing[playerid]][wExistant] == 0) return 0;
		    
		    new
		        string[256],
				i = WaypointEditing[playerid];
		    
		    switch (WaypointEditOption[playerid])
		    {
		        case 1:
		        {
					if(strlen(inputtext) < 5 || strlen(inputtext) > 64)
					{
	    				format(string, sizeof(string), "{FFFFFF}You are currently editing the title of Waypoint %d.\nCurrent title: %s", WaypointEditing[playerid], WaypointInfo[WaypointEditing[playerid]][wTextDisplay]);
				    	ShowPlayerDialogEx(playerid, DIALOG_WAYPOINT_SUBMIT, DIALOG_STYLE_INPUT, "{FFFFFF}Waypoint Editor - Title", string, "Submit", "Cancel");
				    	return 1;
					}
		            new
		                wEscapedText[65];
					mysql_real_escape_string(inputtext, wEscapedText, mConnectionHandle, 64);
		            format(string, sizeof(string), "You have successfully changed Waypoint %d's title from %s to %s.", i, WaypointInfo[i][wTextDisplay], inputtext);
		            format(WaypointInfo[i][wTextDisplay], 64, "%s", wEscapedText);
		            SendClientMessageEx(playerid, COLOR_WHITE, string);
		            format(string, sizeof(string), "UPDATE `waypoints` SET `TextDisplay` = '%s' WHERE `Id` = '%d'", WaypointInfo[i][wTextDisplay], i);
					mysql_query(string, THREAD_NO_RESULT, playerid, mConnectionHandle);
                    RecreateWaypointText(i);
					return 1;
		        }
		        
		        case 2:
		        {
		            format(string, sizeof(string), "You have successfully changed Waypoint %d's Position X from %f to %f.", i, WaypointInfo[i][wPosition][0], floatstr(inputtext));
             	 	WaypointInfo[i][wPosition][0] = floatstr(inputtext);
		            SendClientMessageEx(playerid, COLOR_WHITE, string);
		            format(string, sizeof(string), "UPDATE `waypoints` SET `wPosX` = '%f' WHERE `Id` = '%d'", WaypointInfo[i][wPosition][0], i);
					mysql_query(string, THREAD_NO_RESULT, playerid, mConnectionHandle);
                    RecreateWaypointText(i);
		        }
		        
		        case 3:
		        {
		            format(string, sizeof(string), "You have successfully changed Waypoint %d's Position Y from %f to %f.", i, WaypointInfo[i][wPosition][1], floatstr(inputtext));
             	 	WaypointInfo[i][wPosition][1] = floatstr(inputtext);
		            SendClientMessageEx(playerid, COLOR_WHITE, string);
		            format(string, sizeof(string), "UPDATE `waypoints` SET `wPosY` = '%f' WHERE `Id` = '%d'", WaypointInfo[i][wPosition][1], i);
					mysql_query(string, THREAD_NO_RESULT, playerid, mConnectionHandle);
                    RecreateWaypointText(i);
		        }

		        case 4:
		        {
		            format(string, sizeof(string), "You have successfully changed Waypoint %d's Position Z from %f to %f.", i, WaypointInfo[i][wPosition][2], floatstr(inputtext));
             	 	WaypointInfo[i][wPosition][2] = floatstr(inputtext);
		            SendClientMessageEx(playerid, COLOR_WHITE, string);
		            format(string, sizeof(string), "UPDATE `waypoints` SET `wPosZ` = '%f' WHERE `Id` = '%d'", WaypointInfo[i][wPosition][2], i);
					mysql_query(string, THREAD_NO_RESULT, playerid, mConnectionHandle);
                    RecreateWaypointText(i);
		        }
		        
		        case 5:
		        {
		            if(strval(inputtext) < 0 || strval(inputtext) > 18)
		            {
						format(string, sizeof(string), "{FFFFFF}You are currently editing Waypoint %d's Entrance Interior ID (0-18).\nCurrent Interior ID: %d", WaypointEditing[playerid], WaypointInfo[WaypointEditing[playerid]][wInterior]);
				    	ShowPlayerDialogEx(playerid, DIALOG_WAYPOINT_SUBMIT, DIALOG_STYLE_INPUT, "{FFFFFF}Waypoint Editor - Title", string, "Submit", "Cancel");
		                return 1;
		            }
		            format(string, sizeof(string), "You have successfully changed Waypoint %d's Interior ID from %d to %d.", i, WaypointInfo[i][wInterior], strval(inputtext));
             	 	WaypointInfo[i][wInterior] = strval(inputtext);
		            SendClientMessageEx(playerid, COLOR_WHITE, string);
		            format(string, sizeof(string), "UPDATE `waypoints` SET `wInterior` = '%d' WHERE `Id` = '%d'", WaypointInfo[i][wInterior], i);
					mysql_query(string, THREAD_NO_RESULT, playerid, mConnectionHandle);
		        }
		        
		        case 6:
		        {
		        	format(string, sizeof(string), "You have successfully changed Waypoint %d's Virtual World from %d to %d.", i, WaypointInfo[i][wVirtualWorld], strval(inputtext));
             	 	WaypointInfo[i][wVirtualWorld] = strval(inputtext);
		            SendClientMessageEx(playerid, COLOR_WHITE, string);
		            format(string, sizeof(string), "UPDATE `waypoints` SET `wVirtualWorld` = '%d' WHERE `Id` = '%d'", WaypointInfo[i][wVirtualWorld], i);
					mysql_query(string, THREAD_NO_RESULT, playerid, mConnectionHandle);
		        }
		        
		        case 7:
		        {
		            format(string, sizeof(string), "You have successfully changed Waypoint %d's Destination X from %f to %f.", i, WaypointInfo[i][wDestPosition][0], floatstr(inputtext));
             	 	WaypointInfo[i][wDestPosition][0] = floatstr(inputtext);
		            SendClientMessageEx(playerid, COLOR_WHITE, string);
		            format(string, sizeof(string), "UPDATE `waypoints` SET `dPosX` = '%f' WHERE `Id` = '%d'", WaypointInfo[i][wDestPosition][0], i);
					mysql_query(string, THREAD_NO_RESULT, playerid, mConnectionHandle);
		        }

		        case 8:
		        {
		            format(string, sizeof(string), "You have successfully changed Waypoint %d's Destination Y from %f to %f.", i, WaypointInfo[i][wDestPosition][1], floatstr(inputtext));
             	 	WaypointInfo[i][wDestPosition][1] = floatstr(inputtext);
		            SendClientMessageEx(playerid, COLOR_WHITE, string);
		            format(string, sizeof(string), "UPDATE `waypoints` SET `dPosY` = '%f' WHERE `Id` = '%d'", WaypointInfo[i][wDestPosition][1], i);
					mysql_query(string, THREAD_NO_RESULT, playerid, mConnectionHandle);
		        }

		        case 9:
		        {
		            format(string, sizeof(string), "You have successfully changed Waypoint %d's Destination Z from %f to %f.", i, WaypointInfo[i][wDestPosition][2], floatstr(inputtext));
             	 	WaypointInfo[i][wDestPosition][2] = floatstr(inputtext);
		            SendClientMessageEx(playerid, COLOR_WHITE, string);
		            format(string, sizeof(string), "UPDATE `waypoints` SET `dPosZ` = '%f' WHERE `Id` = '%d'", WaypointInfo[i][wDestPosition][2], i);
					mysql_query(string, THREAD_NO_RESULT, playerid, mConnectionHandle);
		        }

		        case 10:
		        {
		            if(strval(inputtext) < 0 || strval(inputtext) > 18)
		            {
						format(string, sizeof(string), "{FFFFFF}You are currently editing Waypoint %d's Destination Interior ID (0-18).\nCurrent Interior ID: %d", WaypointEditing[playerid], WaypointInfo[WaypointEditing[playerid]][wDestInterior]);
				    	ShowPlayerDialogEx(playerid, DIALOG_WAYPOINT_SUBMIT, DIALOG_STYLE_INPUT, "{FFFFFF}Waypoint Editor - Interior", string, "Submit", "Cancel");
		                return 1;
		            }
		            format(string, sizeof(string), "You have successfully changed Waypoint %d's Interior ID from %d to %d.", i, WaypointInfo[i][wDestInterior], strval(inputtext));
             	 	WaypointInfo[i][wDestInterior] = strval(inputtext);
		            SendClientMessageEx(playerid, COLOR_WHITE, string);
		            format(string, sizeof(string), "UPDATE `waypoints` SET `dInterior` = '%d' WHERE `Id` = '%d'", WaypointInfo[i][wDestInterior], i);
					mysql_query(string, THREAD_NO_RESULT, playerid, mConnectionHandle);
		        }

		        case 11:
		        {
		        	format(string, sizeof(string), "You have successfully changed Waypoint %d's Virtual World from %d to %d.", i, WaypointInfo[i][wDestVirtualWorld], strval(inputtext));
             	 	WaypointInfo[i][wDestVirtualWorld] = strval(inputtext);
		            SendClientMessageEx(playerid, COLOR_WHITE, string);
		            format(string, sizeof(string), "UPDATE `waypoints` SET `dVirtualWorld` = '%d' WHERE `Id` = '%d'", WaypointInfo[i][wDestVirtualWorld], i);
					mysql_query(string, THREAD_NO_RESULT, playerid, mConnectionHandle);
		        }
		        
		        case 12:
		        {
		            if(!strcmp(inputtext, "confirm", true))
		            {
		            	format(string, sizeof(string), "DELETE FROM `waypoints` WHERE `Id` = '%d'", i);
						mysql_query(string, THREAD_NO_RESULT, playerid, mConnectionHandle);
						DestroyDynamic3DTextLabel(WaypointInfo[i][wTextLabel]);
		                for (new eWaypointData:w; w < eWaypointData; w++)
		                {
		                    WaypointInfo[i][eWaypointData:w] = 0;
		                }
		                format(string, sizeof(string), "You have successfully deleted Waypoint %d from the database.", i);
		                SendClientMessageEx(playerid, COLOR_WHITE, string);
		            }
		            else
		            {
						format(string, sizeof(string), "{FFFFFF}You are about to delete Waypoint %d.\nPlease type in 'confirm' to confirm deletion.", WaypointEditing[playerid]);
				    	ShowPlayerDialogEx(playerid, DIALOG_WAYPOINT_SUBMIT, DIALOG_STYLE_INPUT, "{FFFFFF}Waypoint Editor - Deletion", string, "Submit", "Cancel");
		            }
		        }
		        
		        case 17:
		        {
		        	if(strval(inputtext) < 0 || strval(inputtext) > 10)
		            {
						format(string, sizeof(string), "{FFFFFF}You are currently editing Waypoint %d's Entrance Load Time (0-10).\nCurrent Value: %d", i, WaypointInfo[i][wLoadingTime]);
				    	ShowPlayerDialogEx(playerid, DIALOG_WAYPOINT_SUBMIT, DIALOG_STYLE_INPUT, "{FFFFFF}Waypoint Editor - Entrance Loading Time", string, "Submit", "Cancel");
		                return 1;
		            }
		        	format(string, sizeof(string), "You have successfully changed Waypoint %d's Entrance Loading Time from %d to %d.", i, WaypointInfo[i][wLoadingTime], strval(inputtext));
             	 	WaypointInfo[i][wLoadingTime] = strval(inputtext);
		            SendClientMessageEx(playerid, COLOR_WHITE, string);
		            format(string, sizeof(string), "UPDATE `waypoints` SET `wLoadTime` = '%d' WHERE `Id` = '%d'", WaypointInfo[i][wLoadingTime], i);
					mysql_query(string, THREAD_NO_RESULT, playerid, mConnectionHandle);
		        }
		        
		        case 18:
		        {
		        	if(strval(inputtext) < 0 || strval(inputtext) > 10)
		            {
						format(string, sizeof(string), "{FFFFFF}You are currently editing Waypoint %d's Destination Load Time (0-10).\nCurrent Value: %d", i, WaypointInfo[i][wDestLoadingTime]);
				    	ShowPlayerDialogEx(playerid, DIALOG_WAYPOINT_SUBMIT, DIALOG_STYLE_INPUT, "{FFFFFF}Waypoint Editor - Destination Loading Time", string, "Submit", "Cancel");
		                return 1;
		            }
		        	format(string, sizeof(string), "You have successfully changed Waypoint %d's Destination Loading Time from %d to %d.", i, WaypointInfo[i][wDestLoadingTime], strval(inputtext));
             	 	WaypointInfo[i][wDestLoadingTime] = strval(inputtext);
		            SendClientMessageEx(playerid, COLOR_WHITE, string);
		            format(string, sizeof(string), "UPDATE `waypoints` SET `dLoadTime` = '%d' WHERE `Id` = '%d'", WaypointInfo[i][wDestLoadingTime], i);
					mysql_query(string, THREAD_NO_RESULT, playerid, mConnectionHandle);
		        }
		        
		        case 19:
		        {
		        	if(strlen(inputtext) < 1 || strlen(inputtext) > 8)
		            {
						format(string, sizeof(string), "{FFFFFF}You are currently editing Waypoint %d's Password (8 max chars).\nCurrent Value: %s", WaypointEditing[playerid], WaypointInfo[WaypointEditing[playerid]][wPassword]);
				    	ShowPlayerDialogEx(playerid, DIALOG_WAYPOINT_SUBMIT, DIALOG_STYLE_INPUT, "{FFFFFF}Waypoint Editor - Password", string, "Submit", "Cancel");
		                return 1;
		            }
					new
						waypointPass[9];
					mysql_real_escape_string(inputtext, waypointPass, mConnectionHandle, 8);
		        	format(string, sizeof(string), "You have successfully changed Waypoint %d's Password from %s to %s.", i, WaypointInfo[i][wPassword], waypointPass);
					format(WaypointInfo[i][wPassword], 8, "%s", waypointPass);
		            SendClientMessageEx(playerid, COLOR_WHITE, string);
		            format(string, sizeof(string), "UPDATE `waypoints` SET `Password` = '%s' WHERE `Id` = '%d'", WaypointInfo[i][wPassword], i);
					mysql_query(string, THREAD_LOG_RESULT, playerid, mConnectionHandle);
		        }
		        
		        case 21:
		        {
		            if(strval(inputtext) < 0 || strval(inputtext) > MAX_FACTIONS)
		            {
						format(string, sizeof(string), "{FFFFFF}You are currently restricting Waypoint %d to a faction.\nCurrent Value: %d", i, WaypointInfo[i][wFactionRestriction]);
					    ShowPlayerDialogEx(playerid, DIALOG_WAYPOINT_SUBMIT, DIALOG_STYLE_INPUT, "{FFFFFF}Waypoint Editor - Faction Restriction", string, "Submit", "Cancel");
					    return 1;
		            }
					WaypointInfo[i][wFactionRestriction] = strval(inputtext);
		        	format(string, sizeof(string), "You have successfully restricted Waypoint %d to faction %d.", i, WaypointInfo[i][wFactionRestriction]);
		            SendClientMessageEx(playerid, COLOR_WHITE, string);
		            format(string, sizeof(string), "UPDATE `waypoints` SET `FactionRestriction` = '%d' WHERE `Id` = '%d'", WaypointInfo[i][wFactionRestriction], i);
					mysql_query(string, THREAD_LOG_RESULT, playerid, mConnectionHandle);
		        }
		    }
		}
		
		case DIALOG_BUSINESS_EDIT:
		{
		    if(!response) return 0;
		    else if(BusinessEdit[playerid] == 0) return 0;
		    else if(!IsBusinessOwner(BusinessEdit[playerid], playerid)) return 0;
		    
		    new
		        string[256],
				b = BusinessEdit[playerid];
		    
		    switch (listitem)
		    {
		        case 0:
		        {
		            BusinessEditOption[playerid] = 1;
		            format(string, sizeof(string), "You are about to modify your business's name.\nCurrent Name: %s", BusinessInfo[b][bName]);
		            ShowPlayerDialogEx(playerid, DIALOG_BUSINESS_SUBMIT, DIALOG_STYLE_INPUT, "{FFFFFF}Business - Name", string, "Submit", "Cancel");
		        }
		        
		        case 1:
		        {
		            switch(BusinessInfo[b][bOpen])
		            {
		                case 0:
		                {
				            SendClientMessageEx(playerid, COLOR_WHITE, "You have opened your business to public, others will be able to access your store.");
				            BusinessInfo[b][bOpen] = 1;
		                }
		                
		                case 1:
		                {
				            SendClientMessageEx(playerid, COLOR_WHITE, "You have closed your business, others will NOT be able to access your store.");
				            BusinessInfo[b][bOpen] = 0;
		                }
		            }
				    format(string, sizeof(string), "UPDATE `businesses` SET `Open` = '%i' WHERE `Id` = '%d'", BusinessInfo[b][bOpen], b);
					mysql_query(string, THREAD_NO_RESULT, playerid, mConnectionHandle);
                    RecreateBusinessText(b);
		        }
		        
		        case 2:
		        {
		            if(BusinessInfo[b][bEarnings] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Your business has not earned anything yet, there is nothing to claim.");
					GivePlayerCash(playerid, BusinessInfo[b][bEarnings]);
					format(string, sizeof(string), "You have collected $%d off your business profits.", BusinessInfo[b][bEarnings]);
     				SendClientMessageEx(playerid, COLOR_WHITE, string);
					BusinessInfo[b][bEarnings] = 0;
					format(string, sizeof(string), "UPDATE `businesses` SET `Earnings` = '%d' WHERE `Id` = '%d'", BusinessInfo[b][bEarnings], b);
					mysql_query(string, THREAD_LOG_RESULT, INVALID_PLAYER_ID, mConnectionHandle);
		        }
		    }
		}
		
		case DIALOG_BUSINESS_SUBMIT:
		{
		    if(!response) return ShowPlayerDialogEx(playerid, DIALOG_BUSINESS_EDIT, DIALOG_STYLE_LIST, "{FFFFFF}Business - Management", "{FFFFFF}Rename\nOpen/Close", "Select", "Cancel");
		    else if(!BusinessEdit[playerid]) return 0;
		    else if(!IsBusinessOwner(BusinessEdit[playerid], playerid)) return 0;

			new
			    string[256],
				b = BusinessEdit[playerid];

		    switch (BusinessEditOption[playerid])
		    {
		        case 1:
		        {
		            if(strlen(inputtext) < 3 || strlen(inputtext) > 16)
		            {
		            	format(string, sizeof(string), "You are about to modify your business's name.\nCurrent Name: %s", BusinessInfo[b][bName]);
		            	ShowPlayerDialogEx(playerid, DIALOG_BUSINESS_SUBMIT, DIALOG_STYLE_INPUT, "{FFFFFF}Business - Name", string, "Submit", "Cancel");
		            	return 1;
					}
		        	format(string, sizeof(string), "You have successfully changed your business's name from %s to %s.", BusinessInfo[b][bName], inputtext);
		        	new bizName[17];
             	 	mysql_real_escape_string(inputtext, bizName, mConnectionHandle, 16);
             	 	format(BusinessInfo[b][bName], 16, "%s", bizName);
		            SendClientMessageEx(playerid, COLOR_WHITE, string);
		            format(string, sizeof(string), "UPDATE `businesses` SET `Name` = '%s' WHERE `Id` = '%d'", BusinessInfo[b][bName], b);
					mysql_query(string, THREAD_LOG_RESULT, playerid, mConnectionHandle);
                    RecreateBusinessText(b);
		        }
		    }
		}
		
		case DIALOG_BUSINESS_ADMIN:
		{
		    if(!response) return 0;
		    else if(!BusinessEdit[playerid]) return 0;

			new
			    string[256];

			switch (listitem)
			{
			    case 0:
			    {
			        BusinessEditOption[playerid] = 1;
    				format(string, sizeof(string), "{FFFFFF}You are currently editing the title of Business %d (3-16 chars).\nCurrent title: %s", BusinessEdit[playerid], BusinessInfo[BusinessEdit[playerid]][bName]);
			    	ShowPlayerDialogEx(playerid, DIALOG_BUSINESS_ADMIN_EDIT, DIALOG_STYLE_INPUT, "{FFFFFF}Business Editor - Title", string, "Submit", "Cancel");
			    }

			    case 1:
			    {
			        BusinessEditOption[playerid] = 2;
   					format(string, sizeof(string), "{FFFFFF}You are currently editing the Position X of Business %d.\nCurrent Value: %f", BusinessEdit[playerid], BusinessInfo[BusinessEdit[playerid]][bPosition][0]);
				    ShowPlayerDialogEx(playerid, DIALOG_BUSINESS_ADMIN_EDIT, DIALOG_STYLE_INPUT, "{FFFFFF}Business Editor - Position X", string, "Submit", "Cancel");
			    }
			    
			    case 2:
			    {
			        BusinessEditOption[playerid] = 3;
   					format(string, sizeof(string), "{FFFFFF}You are currently editing the Position Y of Business %d.\nCurrent Value: %f", BusinessEdit[playerid], BusinessInfo[BusinessEdit[playerid]][bPosition][1]);
				    ShowPlayerDialogEx(playerid, DIALOG_BUSINESS_ADMIN_EDIT, DIALOG_STYLE_INPUT, "{FFFFFF}Business Editor - Position X", string, "Submit", "Cancel");
			    }
			    
			    case 3:
			    {
			        BusinessEditOption[playerid] = 4;
   					format(string, sizeof(string), "{FFFFFF}You are currently editing the Position Z of Business %d.\nCurrent Value: %f", BusinessEdit[playerid], BusinessInfo[BusinessEdit[playerid]][bPosition][2]);
				    ShowPlayerDialogEx(playerid, DIALOG_BUSINESS_ADMIN_EDIT, DIALOG_STYLE_INPUT, "{FFFFFF}Business Editor - Position X", string, "Submit", "Cancel");
			    }
			    
			    case 4:
			    {
			        BusinessEditOption[playerid] = 5;
   					format(string, sizeof(string), "{FFFFFF}You are currently editing the Interior of Business %d (1-30).\nCurrent Value: %d", BusinessEdit[playerid], BusinessInfo[BusinessEdit[playerid]][bInterior]);
				    ShowPlayerDialogEx(playerid, DIALOG_BUSINESS_ADMIN_EDIT, DIALOG_STYLE_INPUT, "{FFFFFF}Business Editor - Interior", string, "Submit", "Cancel");
			    }
			    
			    case 5:
			    {
			        BusinessEditOption[playerid] = 6;
   					format(string, sizeof(string), "{FFFFFF}You are currently editing the Virtual World of Business %d.\nCurrent Value: %d", BusinessEdit[playerid], BusinessInfo[BusinessEdit[playerid]][bVirtualWorld]);
				    ShowPlayerDialogEx(playerid, DIALOG_BUSINESS_ADMIN_EDIT, DIALOG_STYLE_INPUT, "{FFFFFF}Business Editor - Interior", string, "Submit", "Cancel");
			    }
			    
			    case 6:
			    {
			        BusinessEditOption[playerid] = 7;
					format(string, sizeof(string), "{FFFFFF}You are about to delete Business %d.\nPlease type in 'confirm' to confirm deletion.", BusinessEdit[playerid]);
				    ShowPlayerDialogEx(playerid, DIALOG_BUSINESS_ADMIN_EDIT, DIALOG_STYLE_INPUT, "{FFFFFF}Business Editor - Deletion", string, "Submit", "Cancel");
			    }
			    
			    case 7:
			    {
					SetPlayerInteriorEx(playerid, 0);
					SetPlayerVirtualWorldEx(playerid, 0);
					SetPlayerPos(playerid, BusinessInfo[BusinessEdit[playerid]][bPosition][0], BusinessInfo[BusinessEdit[playerid]][bPosition][1], BusinessInfo[BusinessEdit[playerid]][bPosition][2]);
					SetPlayerFacingAngle(playerid, BusinessInfo[BusinessEdit[playerid]][bFacingAngle]);
					SetCameraBehindPlayer(playerid);
			    }
			    
			    case 8:
			    {
			   		new
						i = BusinessInfo[BusinessEdit[playerid]][bInterior] - 1;
					SetPlayerInteriorEx(playerid, floatround(BusinessInterior[i][4]));
					SetPlayerVirtualWorldEx(playerid, GetAvailableVirtualWorld());
					SetPlayerPos(playerid, BusinessInterior[i][0], BusinessInterior[i][1], BusinessInterior[i][2]);
					SetPlayerFacingAngle(playerid, BusinessInterior[i][3]);
					SetCameraBehindPlayer(playerid);
			    }
			    
			    case 9:
			    {
			        format(string, sizeof(string), "You have successfully placed Business %d at your current location.", BusinessEdit[playerid]);
             	 	GetPlayerPos(playerid, BusinessInfo[BusinessEdit[playerid]][bPosition][0], BusinessInfo[BusinessEdit[playerid]][bPosition][1], BusinessInfo[BusinessEdit[playerid]][bPosition][2]);
             	 	GetPlayerFacingAngle(playerid, BusinessInfo[BusinessEdit[playerid]][bFacingAngle]);
		            SendClientMessageEx(playerid, COLOR_WHITE, string);
		            format(string, sizeof(string), "UPDATE `businesses` SET `PosX`='%f',`PosY`='%f',`PosZ`='%f',`FacingAngle`='%f' WHERE `Id` = '%d'", BusinessInfo[BusinessEdit[playerid]][bPosition][0], BusinessInfo[BusinessEdit[playerid]][bPosition][1], BusinessInfo[BusinessEdit[playerid]][bPosition][2], BusinessInfo[BusinessEdit[playerid]][bFacingAngle], BusinessEdit[playerid]);
					mysql_query(string, THREAD_NO_RESULT, playerid, mConnectionHandle);
                    RecreateBusinessText(BusinessEdit[playerid]);
			    }
			    
			    case 10:
			    {
			        BusinessEditOption[playerid] = 11;
					format(string, sizeof(string), "{FFFFFF}You are about to set Business %d's Owner (3-%d chars).\nCurrent Value: %s", BusinessEdit[playerid], MAX_PLAYER_NAME, BusinessInfo[BusinessEdit[playerid]][bOwner]);
				    ShowPlayerDialogEx(playerid, DIALOG_BUSINESS_ADMIN_EDIT, DIALOG_STYLE_INPUT, "{FFFFFF}Business Editor - Ownership", string, "Submit", "Cancel");
			    }
			    
			    case 11:
			    {
			        BusinessEditOption[playerid] = 12;
					format(string, sizeof(string), "{FFFFFF}You are about to set Business %d's Buy Price.\nCurrent Value: %d", BusinessEdit[playerid], BusinessInfo[BusinessEdit[playerid]][bBuyPrice]);
				    ShowPlayerDialogEx(playerid, DIALOG_BUSINESS_ADMIN_EDIT, DIALOG_STYLE_INPUT, "{FFFFFF}Business Editor - Buying Price", string, "Submit", "Cancel");
			    }
			}
		}

		case DIALOG_BUSINESS_ADMIN_EDIT:
		{
		    if(!BusinessEdit[playerid]) return 0;
		    else if(!BusinessInfo[BusinessEdit[playerid]][bExistant]) return 0;
		    else if(!response) return 0;
		    
		    new
		        b = BusinessEdit[playerid],
		        string[256];

			switch (BusinessEditOption[playerid])
			{
			    case 1:
			    {
			        if(strlen(inputtext) < 3 || strlen(inputtext) > 16)
					{
	    				format(string, sizeof(string), "{FFFFFF}You are currently editing the title of Business %d (3-16 chars).\nCurrent title: %s", b, BusinessInfo[b][bName]);
				    	ShowPlayerDialogEx(playerid, DIALOG_BUSINESS_ADMIN_EDIT, DIALOG_STYLE_INPUT, "{FFFFFF}Business Editor - Title", string, "Submit", "Cancel");
				    	return 1;
					}
		            format(string, sizeof(string), "You have successfully changed Business %d's title from %s to %s.", b, BusinessInfo[b][bName], inputtext);
		        	new bizName[17];
             	 	mysql_real_escape_string(inputtext, bizName, mConnectionHandle, 16);
             	 	format(BusinessInfo[b][bName], 16, "%s", bizName);
		            SendClientMessageEx(playerid, COLOR_WHITE, string);
		            format(string, sizeof(string), "UPDATE `businesses` SET `Name` = '%s' WHERE `Id` = '%d'", BusinessInfo[b][bName], b);
					mysql_query(string, THREAD_LOG_RESULT, playerid, mConnectionHandle);
                    RecreateBusinessText(b);
					return 1;
			    }
			    
			    case 2:
			    {
			        format(string, sizeof(string), "You have successfully changed Business %d's Position X from %f to %f.", b, BusinessInfo[b][bPosition][0], floatstr(inputtext));
             	 	BusinessInfo[b][bPosition][0] = floatstr(inputtext);
		            SendClientMessageEx(playerid, COLOR_WHITE, string);
		            format(string, sizeof(string), "UPDATE `businesses` SET `PosX` = '%f' WHERE `Id` = '%d'", BusinessInfo[b][bPosition][0], b);
					mysql_query(string, THREAD_NO_RESULT, playerid, mConnectionHandle);
                    RecreateBusinessText(b);
			    }
			    
			    case 3:
			    {
			        format(string, sizeof(string), "You have successfully changed Business %d's Position Y from %f to %f.", b, BusinessInfo[b][bPosition][1], floatstr(inputtext));
             	 	BusinessInfo[b][bPosition][1] = floatstr(inputtext);
		            SendClientMessageEx(playerid, COLOR_WHITE, string);
		            format(string, sizeof(string), "UPDATE `businesses` SET `PosY` = '%f' WHERE `Id` = '%d'", BusinessInfo[b][bPosition][1], b);
					mysql_query(string, THREAD_NO_RESULT, playerid, mConnectionHandle);
                    RecreateBusinessText(b);
			    }
			    
			    case 4:
			    {
			        format(string, sizeof(string), "You have successfully changed Business %d's Position Z from %f to %f.", b, BusinessInfo[b][bPosition][2], floatstr(inputtext));
             	 	BusinessInfo[b][bPosition][2] = floatstr(inputtext);
		            SendClientMessageEx(playerid, COLOR_WHITE, string);
		            format(string, sizeof(string), "UPDATE `businesses` SET `PosZ` = '%f' WHERE `Id` = '%d'", BusinessInfo[b][bPosition][2], b);
					mysql_query(string, THREAD_NO_RESULT, playerid, mConnectionHandle);
                    RecreateBusinessText(b);
			    }
			    
			    case 5:
			    {
			        if(strval(inputtext) < 1 || strval(inputtext) > 30)
			        {
   						format(string, sizeof(string), "{FFFFFF}You are currently editing the Interior of Business %d (1-30).\nCurrent Value: %d", b, BusinessInfo[b][bInterior]);
				    	ShowPlayerDialogEx(playerid, DIALOG_BUSINESS_ADMIN_EDIT, DIALOG_STYLE_INPUT, "{FFFFFF}Business Editor - Interior", string, "Submit", "Cancel");
						return 1;
			        }
			        format(string, sizeof(string), "You have successfully changed Business %d's Interior from %d to %d.", b, BusinessInfo[b][bInterior], strval(inputtext));
             	 	BusinessInfo[b][bInterior] = strval(inputtext);
		            SendClientMessageEx(playerid, COLOR_WHITE, string);
		            format(string, sizeof(string), "UPDATE `businesses` SET `Interior` = '%d' WHERE `Id` = '%d'", BusinessInfo[b][bInterior], b);
					mysql_query(string, THREAD_NO_RESULT, playerid, mConnectionHandle);
			    }
			    
			    case 6:
			    {
			        if(!IsVirtualWorldAvailable(strval(inputtext))) return SendClientMessageEx(playerid, COLOR_GREY, "The specified virtual world is not available.");
			        format(string, sizeof(string), "You have successfully changed Business %d's Virtual World from %d to %d.", b, BusinessInfo[b][bVirtualWorld], strval(inputtext));
             	 	BusinessInfo[b][bVirtualWorld] = strval(inputtext);
		            SendClientMessageEx(playerid, COLOR_WHITE, string);
		            format(string, sizeof(string), "UPDATE `businesses` SET `VirtualWorld` = '%d' WHERE `Id` = '%d'", BusinessInfo[b][bVirtualWorld], b);
					mysql_query(string, THREAD_NO_RESULT, playerid, mConnectionHandle);
			    }
			    
			    case 7:
			    {
		            if(!strcmp(inputtext, "confirm", true))
		            {
		            	format(string, sizeof(string), "DELETE FROM `businesses` WHERE `Id` = '%d'", b);
						mysql_query(string, THREAD_NO_RESULT, playerid, mConnectionHandle);
						DestroyDynamic3DTextLabel(BusinessInfo[b][bTextLabel]);
		                for (new eBusinessData:i; i < eBusinessData; i++)
		                {
		                    BusinessInfo[b][eBusinessData:i] = 0;
		                }
		                format(string, sizeof(string), "You have successfully deleted Business %d from the database.", b);
		                SendClientMessageEx(playerid, COLOR_WHITE, string);
		            }
		            else
		            {
						format(string, sizeof(string), "{FFFFFF}You are about to delete Business %d.\nPlease type in 'confirm' to confirm deletion.", BusinessEdit[playerid]);
				    	ShowPlayerDialogEx(playerid, DIALOG_BUSINESS_ADMIN_EDIT, DIALOG_STYLE_INPUT, "{FFFFFF}Business Editor - Deletion", string, "Submit", "Cancel");
		            }
			    }
			    
			    case 11:
			    {
					if(strlen(inputtext) < 3 || strlen(inputtext) > MAX_PLAYER_NAME)
					{
						format(string, sizeof(string), "{FFFFFF}You are about to set Business %d's Owner (3-%d chars).\nCurrent Value: %s", b, MAX_PLAYER_NAME, BusinessInfo[b][bOwner]);
				    	ShowPlayerDialogEx(playerid, DIALOG_BUSINESS_ADMIN_EDIT, DIALOG_STYLE_INPUT, "{FFFFFF}Business Editor - Ownership", string, "Submit", "Cancel");
					    return 1;
					}
			        format(string, sizeof(string), "You have successfully changed Business %d's Ownership from %s to %s.", b, BusinessInfo[b][bOwner], inputtext);
             	 	format(BusinessInfo[b][bOwner], MAX_PLAYER_NAME, inputtext);
		            SendClientMessageEx(playerid, COLOR_WHITE, string);
		            format(string, sizeof(string), "UPDATE `businesses` SET `Owner` = '%s' WHERE `Id` = '%d'", BusinessInfo[b][bOwner], b);
					mysql_query(string, THREAD_NO_RESULT, playerid, mConnectionHandle);
                    RecreateBusinessText(b);
			    }
			    
			    case 12:
			    {
			        format(string, sizeof(string), "You have successfully changed Business %d's Buy Price from %d to %d.", b, BusinessInfo[b][bBuyPrice], strval(inputtext));
                    BusinessInfo[b][bBuyPrice] = strval(inputtext);
		            SendClientMessageEx(playerid, COLOR_WHITE, string);
		            format(string, sizeof(string), "UPDATE `businesses` SET `BuyPrice` = '%d' WHERE `Id` = '%d'", BusinessInfo[b][bBuyPrice], b);
					mysql_query(string, THREAD_NO_RESULT, playerid, mConnectionHandle);
                    RecreateBusinessText(b);
			    }
			}
		}
		
		case DIALOG_FAMILY_ADMIN:
		{
		    if(!FamilyEdit[playerid]) return 0;
		    else if(FamilyEdit[playerid] < 0 || FamilyEdit[playerid] > MAX_FAMILIES) return 0;
		    else if(!response) return 0;
		
		    new
		        string[256],
				f = FamilyEdit[playerid];

			FamilyEditOption[playerid] = listitem + 1;
		    switch (listitem)
		    {
		        case 0:
		        {
   					format(string, sizeof(string), "{FFFFFF}You are currently renaming Family %d.\nCurrent Value: %s", f, FamilyInfo[f][fName]);
				    ShowPlayerDialogEx(playerid, DIALOG_FAMILY_ADMIN_EDIT, DIALOG_STYLE_INPUT, "{FFFFFF}Family Editor - Rename", string, "Submit", "Cancel");
		        }
		        
		        case 1:
		        {
   					format(string, sizeof(string), "{FFFFFF}You are currently changing Family %d's Motd.\nCurrent Value: %s", f, FamilyInfo[f][fMotd]);
				    ShowPlayerDialogEx(playerid, DIALOG_FAMILY_ADMIN_EDIT, DIALOG_STYLE_INPUT, "{FFFFFF}Family Editor - Motd", string, "Submit", "Cancel");
		        }
		        
		        case 2:
		        {
   					format(string, sizeof(string), "{FFFFFF}You are currently changing Family %d's Rank 1.\nCurrent Value: %s", f, FamilyInfo[f][fRank1]);
				    ShowPlayerDialogEx(playerid, DIALOG_FAMILY_ADMIN_EDIT, DIALOG_STYLE_INPUT, "{FFFFFF}Family Editor - Rank 1", string, "Submit", "Cancel");
		        }
		        
		        case 3:
		        {
   					format(string, sizeof(string), "{FFFFFF}You are currently changing Family %d's Rank 2.\nCurrent Value: %s", f, FamilyInfo[f][fRank2]);
				    ShowPlayerDialogEx(playerid, DIALOG_FAMILY_ADMIN_EDIT, DIALOG_STYLE_INPUT, "{FFFFFF}Family Editor - Rank 2", string, "Submit", "Cancel");
		        }
		        
		        case 4:
		        {
   					format(string, sizeof(string), "{FFFFFF}You are currently changing Family %d's Rank 3.\nCurrent Value: %s", f, FamilyInfo[f][fRank3]);
				    ShowPlayerDialogEx(playerid, DIALOG_FAMILY_ADMIN_EDIT, DIALOG_STYLE_INPUT, "{FFFFFF}Family Editor - Rank 3", string, "Submit", "Cancel");
		        }
		        
		        case 5:
          		{
   					format(string, sizeof(string), "{FFFFFF}You are currently changing Family %d's Rank 4.\nCurrent Value: %s", f, FamilyInfo[f][fRank4]);
				    ShowPlayerDialogEx(playerid, DIALOG_FAMILY_ADMIN_EDIT, DIALOG_STYLE_INPUT, "{FFFFFF}Family Editor - Rank 4", string, "Submit", "Cancel");
		        }
		        
		        case 6:
		        {
   					format(string, sizeof(string), "{FFFFFF}You are currently changing Family %d's Rank 5.\nCurrent Value: %s", f, FamilyInfo[f][fRank5]);
				    ShowPlayerDialogEx(playerid, DIALOG_FAMILY_ADMIN_EDIT, DIALOG_STYLE_INPUT, "{FFFFFF}Family Editor - Rank 5", string, "Submit", "Cancel");
		        }
		        
		        case 7:
		        {
   					format(string, sizeof(string), "{FFFFFF}You are currently changing Family %d's Rank 6.\nCurrent Value: %s", f, FamilyInfo[f][fRank6]);
				    ShowPlayerDialogEx(playerid, DIALOG_FAMILY_ADMIN_EDIT, DIALOG_STYLE_INPUT, "{FFFFFF}Family Editor - Rank 6", string, "Submit", "Cancel");
		        }
		        
		        case 8:
		        {
		            GetPlayerPos(playerid, FamilyInfo[f][fSafePosition][0], FamilyInfo[f][fSafePosition][1], FamilyInfo[f][fSafePosition][2]);
		            format(string, sizeof(string), "You have successfully changed Family %d's Safe Spot to (X: %f, Y: %f, Z: %f).", f, FamilyInfo[f][fSafePosition][0], FamilyInfo[f][fSafePosition][1], FamilyInfo[f][fSafePosition][2]);
		            SendClientMessageEx(playerid, COLOR_WHITE, string);
		            format(string, sizeof(string), "UPDATE `families` SET `SafeX`='%f',`SafeY`='%f',`SafeZ`='%f' WHERE `Id` = '%d'", FamilyInfo[f][fSafePosition][0], FamilyInfo[f][fSafePosition][1], FamilyInfo[f][fSafePosition][2], f);
					mysql_query(string, THREAD_LOG_RESULT, playerid, mConnectionHandle);
					RecreateGangSafeText(f);
		        }
		        
				case 9:
				{
        			foreach(new i: Player)
		            {
		                if(PlayerInfo[i][pFamily] == f)
		                {
							PlayerInfo[i][pFamily] = 0;
							PlayerInfo[i][pRank] = 0;
						}
		            }
		            format(string, sizeof(string), "UPDATE `families` SET `Rank1`='',\
						`Rank2`='',\
						`Rank3`='',\
						`Rank4`='',\
						`Rank5`='',\
						`Rank6`='',\
						`Name`='None',\
						`Motd`=''\
						WHERE `Id` = '%d'", f);
					mysql_query(string, THREAD_LOG_RESULT, playerid, mConnectionHandle);
		            format(string, sizeof(string), "UPDATE `accounts` SET `Family`='0',`Rank`='0' WHERE `Family` = '%d'", f);
					mysql_query(string, THREAD_LOG_RESULT, playerid, mConnectionHandle);
		            for (new eFamilyData:i; i < eFamilyData; i++)
		            {
						FamilyInfo[f][eFamilyData:i] = 0;
		            }
		            format(string, sizeof(string), "You have successfully cleared family %d's members and properties.", f);
		            SendClientMessageEx(playerid, COLOR_WHITE, string);
				}
		    }
		}
		
		case DIALOG_FAMILY_ADMIN_EDIT:
		{
		    if(!FamilyEdit[playerid]) return 0;
		    else if(!FamilyEditOption[playerid]) return 0;
		    else if(FamilyEdit[playerid] < 0 || FamilyEdit[playerid] > MAX_FAMILIES) return 0;
		    else if(!response) return 0;

		    new
		        string[256],
				f = FamilyEdit[playerid];

		    switch (FamilyEditOption[playerid])
		    {
		        case 1:
		        {
			        if(strlen(inputtext) < 3 || strlen(inputtext) > 24)
					{
					    SendClientMessageEx(playerid, COLOR_WHITE, "The text must be under 3 characters and no longer than 24.");
	   					format(string, sizeof(string), "{FFFFFF}You are currently renaming Family %d.\nCurrent Value: %s", FamilyEdit[playerid], FamilyInfo[f][fName]);
					    ShowPlayerDialogEx(playerid, DIALOG_FAMILY_ADMIN_EDIT, DIALOG_STYLE_INPUT, "{FFFFFF}Family Editor - Rename", string, "Submit", "Cancel");
				    	return 1;
					}
		            format(string, sizeof(string), "You have successfully changed Family %d's name from %s to %s.", f, FamilyInfo[f][fName], inputtext);
		        	new familyName[25];
             	 	mysql_real_escape_string(inputtext, familyName, mConnectionHandle, 24);
             	 	format(FamilyInfo[f][fName], 24, "%s", familyName);
		            SendClientMessageEx(playerid, COLOR_WHITE, string);
		            format(string, sizeof(string), "UPDATE `families` SET `Name` = '%s' WHERE `Id` = '%d'", FamilyInfo[f][fName], f);
					mysql_query(string, THREAD_LOG_RESULT, playerid, mConnectionHandle);
		        }
		        
		        case 2:
		        {
			        if(strlen(inputtext) < 3 || strlen(inputtext) > 96)
					{
					    SendClientMessageEx(playerid, COLOR_WHITE, "The text must be under 3 characters and no longer than 96.");
	   					format(string, sizeof(string), "{FFFFFF}You are currently changing Family %d's Motd.\nCurrent Value: %s", FamilyEdit[playerid], FamilyInfo[f][fMotd]);
					    ShowPlayerDialogEx(playerid, DIALOG_FAMILY_ADMIN_EDIT, DIALOG_STYLE_INPUT, "{FFFFFF}Family Editor - Motd", string, "Submit", "Cancel");
				    	return 1;
					}
		            format(string, sizeof(string), "You have successfully changed Family %d's Motd from %s to %s.", f, FamilyInfo[f][fMotd], inputtext);
		        	new familyMotd[97];
             	 	mysql_real_escape_string(inputtext, familyMotd, mConnectionHandle, 96);
             	 	format(FamilyInfo[f][fMotd], 96, "%s", familyMotd);
		            SendClientMessageEx(playerid, COLOR_WHITE, string);
		            format(string, sizeof(string), "UPDATE `families` SET `Motd` = '%s' WHERE `Id` = '%d'", FamilyInfo[f][fMotd], f);
					mysql_query(string, THREAD_LOG_RESULT, playerid, mConnectionHandle);
				}
				
		        case 3:
		        {
			        if(strlen(inputtext) < 3 || strlen(inputtext) > 12)
					{
					    SendClientMessageEx(playerid, COLOR_WHITE, "The text must be under 3 characters and no longer than 12.");
	   					format(string, sizeof(string), "{FFFFFF}You are currently changing Family %d's Rank 1.\nCurrent Value: %s", FamilyEdit[playerid], FamilyInfo[f][fRank1]);
					    ShowPlayerDialogEx(playerid, DIALOG_FAMILY_ADMIN_EDIT, DIALOG_STYLE_INPUT, "{FFFFFF}Family Editor - Rank 1", string, "Submit", "Cancel");
				    	return 1;
					}
		            format(string, sizeof(string), "You have successfully changed Family %d's Rank 1 from %s to %s.", f, FamilyInfo[f][fRank1], inputtext);
		        	new familyRank[13];
             	 	mysql_real_escape_string(inputtext, familyRank, mConnectionHandle, 12);
             	 	format(FamilyInfo[f][fRank1], 12, "%s", familyRank);
		            SendClientMessageEx(playerid, COLOR_WHITE, string);
		            format(string, sizeof(string), "UPDATE `families` SET `Rank1` = '%s' WHERE `Id` = '%d'", FamilyInfo[f][fRank1], f);
					mysql_query(string, THREAD_LOG_RESULT, playerid, mConnectionHandle);
				}
				
		        case 4:
		        {
			        if(strlen(inputtext) < 3 || strlen(inputtext) > 12)
					{
					    SendClientMessageEx(playerid, COLOR_WHITE, "The text must be under 3 characters and no longer than 12.");
	   					format(string, sizeof(string), "{FFFFFF}You are currently changing Family %d's Rank 2.\nCurrent Value: %s", FamilyEdit[playerid], FamilyInfo[f][fRank2]);
					    ShowPlayerDialogEx(playerid, DIALOG_FAMILY_ADMIN_EDIT, DIALOG_STYLE_INPUT, "{FFFFFF}Family Editor - Rank 2", string, "Submit", "Cancel");
				    	return 1;
					}
		            format(string, sizeof(string), "You have successfully changed Family %d's Rank 2 from %s to %s.", f, FamilyInfo[f][fRank2], inputtext);
		        	new familyRank[13];
             	 	mysql_real_escape_string(inputtext, familyRank, mConnectionHandle, 12);
             	 	format(FamilyInfo[f][fRank2], 12, "%s", familyRank);
		            SendClientMessageEx(playerid, COLOR_WHITE, string);
		            format(string, sizeof(string), "UPDATE `families` SET `Rank2` = '%s' WHERE `Id` = '%d'", FamilyInfo[f][fRank2], f);
					mysql_query(string, THREAD_LOG_RESULT, playerid, mConnectionHandle);
				}
				
		        case 5:
		        {
			        if(strlen(inputtext) < 3 || strlen(inputtext) > 12)
					{
					    SendClientMessageEx(playerid, COLOR_WHITE, "The text must be under 3 characters and no longer than 12.");
	   					format(string, sizeof(string), "{FFFFFF}You are currently changing Family %d's Rank 3.\nCurrent Value: %s", FamilyEdit[playerid], FamilyInfo[f][fRank3]);
					    ShowPlayerDialogEx(playerid, DIALOG_FAMILY_ADMIN_EDIT, DIALOG_STYLE_INPUT, "{FFFFFF}Family Editor - Rank 3", string, "Submit", "Cancel");
				    	return 1;
					}
		            format(string, sizeof(string), "You have successfully changed Family %d's Rank 3 from %s to %s.", f, FamilyInfo[f][fRank3], inputtext);
		        	new familyRank[13];
             	 	mysql_real_escape_string(inputtext, familyRank, mConnectionHandle, 12);
             	 	format(FamilyInfo[f][fRank3], 12, "%s", familyRank);
		            SendClientMessageEx(playerid, COLOR_WHITE, string);
		            format(string, sizeof(string), "UPDATE `families` SET `Rank3` = '%s' WHERE `Id` = '%d'", FamilyInfo[f][fRank3], f);
					mysql_query(string, THREAD_LOG_RESULT, playerid, mConnectionHandle);
				}

		        case 6:
		        {
			        if(strlen(inputtext) < 3 || strlen(inputtext) > 12)
					{
					    SendClientMessageEx(playerid, COLOR_WHITE, "The text must be under 3 characters and no longer than 12.");
	   					format(string, sizeof(string), "{FFFFFF}You are currently changing Family %d's Rank 4.\nCurrent Value: %s", FamilyEdit[playerid], FamilyInfo[f][fRank4]);
					    ShowPlayerDialogEx(playerid, DIALOG_FAMILY_ADMIN_EDIT, DIALOG_STYLE_INPUT, "{FFFFFF}Family Editor - Rank 4", string, "Submit", "Cancel");
				    	return 1;
					}
		            format(string, sizeof(string), "You have successfully changed Family %d's Rank 4 from %s to %s.", f, FamilyInfo[f][fRank4], inputtext);
		        	new familyRank[13];
             	 	mysql_real_escape_string(inputtext, familyRank, mConnectionHandle, 12);
             	 	format(FamilyInfo[f][fRank4], 12, "%s", familyRank);
		            SendClientMessageEx(playerid, COLOR_WHITE, string);
		            format(string, sizeof(string), "UPDATE `families` SET `Rank4` = '%s' WHERE `Id` = '%d'", FamilyInfo[f][fRank4], f);
					mysql_query(string, THREAD_LOG_RESULT, playerid, mConnectionHandle);
				}
				
		        case 7:
		        {
			        if(strlen(inputtext) < 3 || strlen(inputtext) > 12)
					{
					    SendClientMessageEx(playerid, COLOR_WHITE, "The text must be under 3 characters and no longer than 12.");
	   					format(string, sizeof(string), "{FFFFFF}You are currently changing Family %d's Rank 5.\nCurrent Value: %s", FamilyEdit[playerid], FamilyInfo[f][fRank5]);
					    ShowPlayerDialogEx(playerid, DIALOG_FAMILY_ADMIN_EDIT, DIALOG_STYLE_INPUT, "{FFFFFF}Family Editor - Rank 5", string, "Submit", "Cancel");
				    	return 1;
					}
		            format(string, sizeof(string), "You have successfully changed Family %d's Rank 5 from %s to %s.", f, FamilyInfo[f][fRank5], inputtext);
		        	new familyRank[13];
             	 	mysql_real_escape_string(inputtext, familyRank, mConnectionHandle, 12);
             	 	format(FamilyInfo[f][fRank5], 12, "%s", familyRank);
		            SendClientMessageEx(playerid, COLOR_WHITE, string);
		            format(string, sizeof(string), "UPDATE `families` SET `Rank5` = '%s' WHERE `Id` = '%d'", FamilyInfo[f][fRank5], f);
					mysql_query(string, THREAD_LOG_RESULT, playerid, mConnectionHandle);
				}
				
		        case 8:
		        {
			        if(strlen(inputtext) < 3 || strlen(inputtext) > 12)
					{
					    SendClientMessageEx(playerid, COLOR_WHITE, "The text must be under 3 characters and no longer than 12.");
	   					format(string, sizeof(string), "{FFFFFF}You are currently changing Family %d's Rank 6.\nCurrent Value: %s", FamilyEdit[playerid], FamilyInfo[f][fRank6]);
					    ShowPlayerDialogEx(playerid, DIALOG_FAMILY_ADMIN_EDIT, DIALOG_STYLE_INPUT, "{FFFFFF}Family Editor - Rank 6", string, "Submit", "Cancel");
				    	return 1;
					}
		            format(string, sizeof(string), "You have successfully changed Family %d's Rank 6 from %s to %s.", f, FamilyInfo[f][fRank6], inputtext);
		        	new familyRank[13];
             	 	mysql_real_escape_string(inputtext, familyRank, mConnectionHandle, 12);
             	 	format(FamilyInfo[f][fRank6], 12, "%s", familyRank);
		            SendClientMessageEx(playerid, COLOR_WHITE, string);
		            format(string, sizeof(string), "UPDATE `families` SET `Rank6` = '%s' WHERE `Id` = '%d'", FamilyInfo[f][fRank6], f);
					mysql_query(string, THREAD_LOG_RESULT, playerid, mConnectionHandle);
				}
		    }
		}
		
	case DIALOG_HOUSE_ADMIN:
	{
		if(!response) return 0;
		else if(!HouseEdit[playerid]) return 0;

		new
		    string[256];

		switch (listitem)
		{
			case 0:
			{
			    HouseEditOption[playerid] = 1;
   				format(string, sizeof(string), "{FFFFFF}You are currently editing the Position X of House %d.\nCurrent Value: %f", HouseEdit[playerid], HouseInfo[HouseEdit[playerid]][hPosition][0]);
				ShowPlayerDialogEx(playerid, DIALOG_HOUSE_ADMIN_EDIT, DIALOG_STYLE_INPUT, "{FFFFFF}House Editor - Position X", string, "Submit", "Cancel");
			}

			case 1:
			{
			    HouseEditOption[playerid] = 2;
   				format(string, sizeof(string), "{FFFFFF}You are currently editing the Position Y of House %d.\nCurrent Value: %f", HouseEdit[playerid], HouseInfo[HouseEdit[playerid]][hPosition][1]);
				ShowPlayerDialogEx(playerid, DIALOG_HOUSE_ADMIN_EDIT, DIALOG_STYLE_INPUT, "{FFFFFF}House Editor - Position Y", string, "Submit", "Cancel");
			}

			case 2:
			{
			    HouseEditOption[playerid] = 3;
   				format(string, sizeof(string), "{FFFFFF}You are currently editing the Position Z of House %d.\nCurrent Value: %f", HouseEdit[playerid], HouseInfo[HouseEdit[playerid]][hPosition][2]);
				ShowPlayerDialogEx(playerid, DIALOG_HOUSE_ADMIN_EDIT, DIALOG_STYLE_INPUT, "{FFFFFF}House Editor - Position Z", string, "Submit", "Cancel");
			}

			case 3:
			{
			    HouseEditOption[playerid] = 4;
   				format(string, sizeof(string), "{FFFFFF}You are currently editing the Interior of House %d (1-21).\nCurrent Value: %d", HouseEdit[playerid], HouseInfo[HouseEdit[playerid]][hInterior]);
				ShowPlayerDialogEx(playerid, DIALOG_HOUSE_ADMIN_EDIT, DIALOG_STYLE_INPUT, "{FFFFFF}House Editor - Interior", string, "Submit", "Cancel");
			}

			case 4:
			{
			    HouseEditOption[playerid] = 5;
   				format(string, sizeof(string), "{FFFFFF}You are currently editing the Virtual World of House %d.\nCurrent Value: %d", HouseEdit[playerid], HouseInfo[HouseEdit[playerid]][hVirtualWorld]);
				ShowPlayerDialogEx(playerid, DIALOG_HOUSE_ADMIN_EDIT, DIALOG_STYLE_INPUT, "{FFFFFF}House Editor - Interior", string, "Submit", "Cancel");
			}

			case 5:
			{
			    HouseEditOption[playerid] = 6;
				format(string, sizeof(string), "{FFFFFF}You are about to delete House %d.\nPlease type in 'confirm' to confirm deletion.", HouseEdit[playerid]);
				ShowPlayerDialogEx(playerid, DIALOG_HOUSE_ADMIN_EDIT, DIALOG_STYLE_INPUT, "{FFFFFF}House Editor - Deletion", string, "Submit", "Cancel");
			}

			case 6:
			{
				SetPlayerInteriorEx(playerid, 0);
				SetPlayerVirtualWorldEx(playerid, 0);
				SetPlayerPos(playerid, HouseInfo[HouseEdit[playerid]][hPosition][0], HouseInfo[HouseEdit[playerid]][hPosition][1], HouseInfo[HouseEdit[playerid]][hPosition][2]);
				SetPlayerFacingAngle(playerid, HouseInfo[HouseEdit[playerid]][hFacingAngle]);
				SetCameraBehindPlayer(playerid);
			}

			case 7:
			{
				new
					i = HouseInfo[HouseEdit[playerid]][hInterior] - 1;
				SetPlayerInteriorEx(playerid, floatround(HouseInterior[i][4]));
				SetPlayerVirtualWorldEx(playerid, GetAvailableVirtualWorld());
				SetPlayerPos(playerid, HouseInterior[i][0], HouseInterior[i][1], HouseInterior[i][2]);
				SetPlayerFacingAngle(playerid, HouseInterior[i][3]);
				SetCameraBehindPlayer(playerid);
			}

			case 8:
			{
			    format(string, sizeof(string), "You have successfully placed House %d at your current location.", HouseEdit[playerid]);
             	GetPlayerPos(playerid, HouseInfo[HouseEdit[playerid]][hPosition][0], HouseInfo[HouseEdit[playerid]][hPosition][1], HouseInfo[HouseEdit[playerid]][hPosition][2]);
             	GetPlayerFacingAngle(playerid, HouseInfo[HouseEdit[playerid]][hFacingAngle]);
		        SendClientMessageEx(playerid, COLOR_WHITE, string);
		        format(string, sizeof(string), "UPDATE `houses` SET `PosX`='%f',`PosY`='%f',`PosZ`='%f',`FacingAngle`='%f' WHERE `Id` = '%d'", HouseInfo[HouseEdit[playerid]][hPosition][0], HouseInfo[HouseEdit[playerid]][hPosition][1], HouseInfo[HouseEdit[playerid]][hPosition][2], HouseInfo[HouseEdit[playerid]][hFacingAngle], HouseEdit[playerid]);
				mysql_query(string, THREAD_NO_RESULT, playerid, mConnectionHandle);
				RecreateHouseText(HouseEdit[playerid]);
		    }

		    case 9:
		    {
		        HouseEditOption[playerid] = 10;
				format(string, sizeof(string), "{FFFFFF}You are about to set House %d's Owner (3-%d chars).\nCurrent Value: %s", HouseEdit[playerid], MAX_PLAYER_NAME, HouseInfo[HouseEdit[playerid]][hOwner]);
			    ShowPlayerDialogEx(playerid, DIALOG_HOUSE_ADMIN_EDIT, DIALOG_STYLE_INPUT, "{FFFFFF}House Editor - Ownership", string, "Submit", "Cancel");
		    }

			case 10:
			{
				HouseEditOption[playerid] = 11;
				format(string, sizeof(string), "{FFFFFF}You are about to set House %d's Buy Price.\nCurrent Value: %d", HouseEdit[playerid], HouseInfo[HouseEdit[playerid]][hBuyPrice]);
				ShowPlayerDialogEx(playerid, DIALOG_HOUSE_ADMIN_EDIT, DIALOG_STYLE_INPUT, "{FFFFFF}House Editor - Buying Price", string, "Submit", "Cancel");
 			}
		}
	}

	case DIALOG_HOUSE_ADMIN_EDIT:
	{
		if(!HouseEdit[playerid]) return 0;
		else if(!HouseInfo[HouseEdit[playerid]][hExistant]) return 0;
		else if(!response) return 0;

		new
		    h = HouseEdit[playerid],
		    string[256];

		switch (HouseEditOption[playerid])
		{
			case 1:
			{
			    format(string, sizeof(string), "You have successfully changed House %d's Position X from %f to %f.", h, HouseInfo[h][hPosition][0], floatstr(inputtext));
             	HouseInfo[h][hPosition][0] = floatstr(inputtext);
		        SendClientMessageEx(playerid, COLOR_WHITE, string);
		        format(string, sizeof(string), "UPDATE `houses` SET `PosX` = '%f' WHERE `Id` = '%d'", HouseInfo[h][hPosition][0], h);
				mysql_query(string, THREAD_NO_RESULT, playerid, mConnectionHandle);
                RecreateHouseText(h);
			}

			case 2:
			{
			    format(string, sizeof(string), "You have successfully changed House %d's Position Y from %f to %f.", h, HouseInfo[h][hPosition][1], floatstr(inputtext));
             	HouseInfo[h][hPosition][1] = floatstr(inputtext);
		        SendClientMessageEx(playerid, COLOR_WHITE, string);
		        format(string, sizeof(string), "UPDATE `houses` SET `PosY` = '%f' WHERE `Id` = '%d'", HouseInfo[h][hPosition][1], h);
				mysql_query(string, THREAD_NO_RESULT, playerid, mConnectionHandle);
                RecreateHouseText(h);
			}

			case 3:
			{
			    format(string, sizeof(string), "You have successfully changed House %d's Position Z from %f to %f.", h, HouseInfo[h][hPosition][2], floatstr(inputtext));
             	HouseInfo[h][hPosition][2] = floatstr(inputtext);
		        SendClientMessageEx(playerid, COLOR_WHITE, string);
		        format(string, sizeof(string), "UPDATE `houses` SET `PosZ` = '%f' WHERE `Id` = '%d'", HouseInfo[h][hPosition][2], h);
				mysql_query(string, THREAD_NO_RESULT, playerid, mConnectionHandle);
                RecreateHouseText(h);
			}

			case 4:
			{
			    if(strval(inputtext) < 1 || strval(inputtext) > 21)
			    {
   					format(string, sizeof(string), "{FFFFFF}You are currently editing the Interior of House %d (1-21).\nCurrent Value: %d", h, HouseInfo[h][hInterior]);
				    ShowPlayerDialogEx(playerid, DIALOG_HOUSE_ADMIN_EDIT, DIALOG_STYLE_INPUT, "{FFFFFF}House Editor - Interior", string, "Submit", "Cancel");
					return 1;
			    }
			    format(string, sizeof(string), "You have successfully changed House %d's Interior from %d to %d.", h, HouseInfo[h][hInterior], strval(inputtext));
            	HouseInfo[h][hInterior] = strval(inputtext);
		        SendClientMessageEx(playerid, COLOR_WHITE, string);
		        format(string, sizeof(string), "UPDATE `houses` SET `Interior` = '%d' WHERE `Id` = '%d'", HouseInfo[h][hInterior], h);
				mysql_query(string, THREAD_NO_RESULT, playerid, mConnectionHandle);
			}

			case 5:
			{
			    if(!IsVirtualWorldAvailable(strval(inputtext))) return SendClientMessageEx(playerid, COLOR_GREY, "The specified virtual world is not available.");
			    format(string, sizeof(string), "You have successfully changed House %d's Virtual World from %d to %d.", h, HouseInfo[h][hVirtualWorld], strval(inputtext));
            	HouseInfo[h][hVirtualWorld] = strval(inputtext);
		        SendClientMessageEx(playerid, COLOR_WHITE, string);
		        format(string, sizeof(string), "UPDATE `houses` SET `VirtualWorld` = '%d' WHERE `Id` = '%d'", HouseInfo[h][hVirtualWorld], h);
				mysql_query(string, THREAD_NO_RESULT, playerid, mConnectionHandle);
			}

			case 6:
			{
		        if(!strcmp(inputtext, "confirm", true))
		        {
		            format(string, sizeof(string), "DELETE FROM `houses` WHERE `Id` = '%d'", h);
					mysql_query(string, THREAD_NO_RESULT, playerid, mConnectionHandle);
					DestroyDynamic3DTextLabel(HouseInfo[h][hTextLabel]);
					DestroyDynamicPickup(HouseInfo[h][hPickupIcon]);
		            for (new eHouseData:i; i < eHouseData; i++)
		            {
						HouseInfo[h][eHouseData:i] = 0;
		            }
		            format(string, sizeof(string), "You have successfully deleted House %d from the database.", h);
		            SendClientMessageEx(playerid, COLOR_WHITE, string);
		        }
		        else
		        {
					format(string, sizeof(string), "{FFFFFF}You are about to delete House %d.\nPlease type in 'confirm' to confirm deletion.", HouseEdit[playerid]);
				   	ShowPlayerDialogEx(playerid, DIALOG_HOUSE_ADMIN_EDIT, DIALOG_STYLE_INPUT, "{FFFFFF}House Editor - Deletion", string, "Submit", "Cancel");
				}
			}

			case 10:
			{
				if(strlen(inputtext) < 3 || strlen(inputtext) > MAX_PLAYER_NAME)
				{
					format(string, sizeof(string), "{FFFFFF}You are about to set House %d's Owner (3-%d chars).\nCurrent Value: %s", h, MAX_PLAYER_NAME, HouseInfo[h][hOwner]);
				   	ShowPlayerDialogEx(playerid, DIALOG_HOUSE_ADMIN_EDIT, DIALOG_STYLE_INPUT, "{FFFFFF}House Editor - Ownership", string, "Submit", "Cancel");
				    return 1;
				}
		        format(string, sizeof(string), "You have successfully changed House %d's Ownership from %s to %s.", h, HouseInfo[h][hOwner], inputtext);
           	 	format(HouseInfo[h][hOwner], MAX_PLAYER_NAME, inputtext);
		        SendClientMessageEx(playerid, COLOR_WHITE, string);
		        format(string, sizeof(string), "UPDATE `houses` SET `Owner` = '%s' WHERE `Id` = '%d'", HouseInfo[h][hOwner], h);
				mysql_query(string, THREAD_NO_RESULT, playerid, mConnectionHandle);
				RecreateHouseText(h);
		    }

			case 11:
			{
				format(string, sizeof(string), "You have successfully changed House %d's Buy Price from %d to %d.", h, HouseInfo[h][hBuyPrice], strval(inputtext));
                HouseInfo[h][hBuyPrice] = strval(inputtext);
		        SendClientMessageEx(playerid, COLOR_WHITE, string);
		        format(string, sizeof(string), "UPDATE `houses` SET `BuyPrice` = '%d' WHERE `Id` = '%d'", HouseInfo[h][hBuyPrice], h);
				mysql_query(string, THREAD_NO_RESULT, playerid, mConnectionHandle);
                RecreateHouseText(h);
    		}
		}
	}
	
	case DIALOG_GATE_EDIT:
	{
		if(!response) return 0;
		else if(!GateEdit[playerid]) return 0;

		new
		    string[256];

		switch (listitem)
		{
			case 0:
			{
			    GateEditOption[playerid] = 1;
   				format(string, sizeof(string), "{FFFFFF}You are currently editing the Password of Gate %d.\nCurrent Value: %s", GateEdit[playerid], GateInfo[GateEdit[playerid]][gPassword]);
				ShowPlayerDialogEx(playerid, DIALOG_GATE_SUBMIT, DIALOG_STYLE_INPUT, "{FFFFFF}Gate Editor - Password", string, "Submit", "Cancel");
			}
			
			case 1:
			{
			    GateEditOption[playerid] = 2;
   				format(string, sizeof(string), "{FFFFFF}You are currently editing the Model Id of Gate %d.\nCurrent Value: %d", GateEdit[playerid], GateInfo[GateEdit[playerid]][gModel]);
				ShowPlayerDialogEx(playerid, DIALOG_GATE_SUBMIT, DIALOG_STYLE_INPUT, "{FFFFFF}Gate Editor - Model", string, "Submit", "Cancel");
			}
			
			case 2:
			{
				EditDynamicObject(playerid, GateInfo[GateEdit[playerid]][gObjectHandle]);
				SetPVarInt(playerid, "GateMethod", 1);
 				SendClientMessageEx(playerid, COLOR_WHITE, "You have are now editing the position of the gate.");
			}
			
			case 3:
			{
				GetPlayerPos(playerid, GateInfo[GateEdit[playerid]][gPosition][0], GateInfo[GateEdit[playerid]][gPosition][1], GateInfo[GateEdit[playerid]][gPosition][2]);
				SetDynamicObjectPos(GateInfo[GateEdit[playerid]][gObjectHandle], GateInfo[GateEdit[playerid]][gPosition][0], GateInfo[GateEdit[playerid]][gPosition][1], GateInfo[GateEdit[playerid]][gPosition][2]);
				SetDynamicObjectRot(GateInfo[GateEdit[playerid]][gObjectHandle], GateInfo[GateEdit[playerid]][gRotation][0], GateInfo[GateEdit[playerid]][gRotation][1], GateInfo[GateEdit[playerid]][gRotation][2]);
    			GateInfo[GateEdit[playerid]][gState] = 0;
				format(string, sizeof(string), "You have brought gate id %d to your location, it has automatically been saved.", GateEdit[playerid]);
				SendClientMessageEx(playerid, COLOR_WHITE, string);
			 	MySQL_Update_Gate(GateEdit[playerid]);
			 	RecreateGateText(GateEdit[playerid]);
			}

			case 4:
			{
				EditDynamicObject(playerid, GateInfo[GateEdit[playerid]][gObjectHandle]);
				SetPVarInt(playerid, "GateMethod", 2);
 				SendClientMessageEx(playerid, COLOR_WHITE, "You have are now editing the destination of the gate, it will move to the destination when /hgate is used.");
			}
			
			case 5:
			{
			    DestroyDynamic3DTextLabel(GateInfo[GateEdit[playerid]][gTextDisplay]);
   				DestroyDynamicObject(GateInfo[GateEdit[playerid]][gObjectHandle]);
			    for (new eGateData:i; i < eGateData; i++)
			    {
			        GateInfo[GateEdit[playerid]][eGateData:i] = 0;
				}
		        format(string, sizeof(string), "DELETE FROM `gates` WHERE `Id` = '%d'", GateEdit[playerid]);
				mysql_query(string, THREAD_NO_RESULT, playerid, mConnectionHandle);
		        format(string, sizeof(string), "You have successfully deleted gate %d from the database.", GateEdit[playerid]);
				SendClientMessageEx(playerid, COLOR_WHITE, string);
			}
			
			case 6:
			{
			    GateEditOption[playerid] = 7;
       			SendClientMessageEx(playerid, COLOR_WHITE, "The speed can be no longer than 10 and smaller than 0.");
	   			format(string, sizeof(string), "{FFFFFF}You are currently editing the Speed of Gate %d (1-10).\nCurrent Value: %d", GateEdit[playerid], GateInfo[GateEdit[playerid]][gSpeed]);
				ShowPlayerDialogEx(playerid, DIALOG_GATE_SUBMIT, DIALOG_STYLE_INPUT, "{FFFFFF}Gate Editor - Speed", string, "Submit", "Cancel");
			}
		}
	}
	
	case DIALOG_GATE_SUBMIT:
	{
		if(!GateEdit[playerid]) return 0;
		else if(!IsValidDynamicObject(GateInfo[GateEdit[playerid]][gObjectHandle])) return 0;
		else if(!response) return 0;

		new
		    g = GateEdit[playerid],
		    string[256];

		switch (GateEditOption[playerid])
		{
			case 1:
			{
			    format(GateInfo[g][gPassword], 12, "%s", inputtext);
			    format(string, sizeof(string), "You have changed gate id %d's password to %s.", g, GateInfo[g][gPassword]);
			    SendClientMessageEx(playerid, COLOR_WHITE, string);
		        format(string, sizeof(string), "UPDATE `gates` SET `Password` = '%s' WHERE `Id` = '%d'", GateInfo[g][gPassword], g);
				mysql_query(string, THREAD_NO_RESULT, playerid, mConnectionHandle);
			}

			case 2:
			{
			    if(strval(inputtext) < 1)
			    {
	   				format(string, sizeof(string), "{FFFFFF}You are currently editing the Model Id of Gate %d.\nCurrent Value: %d", GateEdit[playerid], GateInfo[GateEdit[playerid]][gModel]);
					ShowPlayerDialogEx(playerid, DIALOG_GATE_SUBMIT, DIALOG_STYLE_INPUT, "{FFFFFF}Gate Editor - Model", string, "Submit", "Cancel");
					return 1;
			    }
			    GateInfo[g][gModel] = strval(inputtext);
			    DestroyDynamicObject(GateInfo[g][gObjectHandle]);
        		GateInfo[g][gObjectHandle] = CreateDynamicObject(GateInfo[g][gModel], GateInfo[g][gPosition][0], GateInfo[g][gPosition][1], GateInfo[g][gPosition][2], GateInfo[g][gRotation][0], GateInfo[g][gRotation][1], GateInfo[g][gRotation][2]);
			    format(string, sizeof(string), "You have changed gate id %d's model to %d.", g, GateInfo[g][gModel]);
			    SendClientMessageEx(playerid, COLOR_WHITE, string);
		        format(string, sizeof(string), "UPDATE `gates` SET `Model` = '%d' WHERE `Id` = '%d'", GateInfo[g][gModel], g);
				mysql_query(string, THREAD_NO_RESULT, playerid, mConnectionHandle);
			}
			
			case 7:
			{
			    if(strval(inputtext) < 0 || strval(inputtext) > 10)
			    {
			        SendClientMessageEx(playerid, COLOR_WHITE, "The speed can be no longer than 10 and smaller than 0.");
	   				format(string, sizeof(string), "{FFFFFF}You are currently editing the Speed of Gate %d (1-10).\nCurrent Value: %d", GateEdit[playerid], GateInfo[GateEdit[playerid]][gSpeed]);
					ShowPlayerDialogEx(playerid, DIALOG_GATE_SUBMIT, DIALOG_STYLE_INPUT, "{FFFFFF}Gate Editor - Speed", string, "Submit", "Cancel");
					return 1;
			    }
			    GateInfo[g][gSpeed] = strval(inputtext);
			    format(string, sizeof(string), "You have changed gate id %d's speed to %d.", g, GateInfo[g][gSpeed]);
			    SendClientMessageEx(playerid, COLOR_WHITE, string);
		        format(string, sizeof(string), "UPDATE `gates` SET `Speed` = '%d' WHERE `Id` = '%d'", GateInfo[g][gSpeed], g);
				mysql_query(string, THREAD_NO_RESULT, playerid, mConnectionHandle);
			
			}
		}
	}
	
	case DIALOG_LOCKER_MAIN:
	{
	        if(PlayerInfo[playerid][pFaction] == 0 || !response) return 0;
			switch(listitem)
			{
			    case 0:
			    {
					new ChatString[128];
					switch(PlayerInfo[playerid][pDuty])
					{
					    case 1:
					    {
		                    PlayerInfo[playerid][pDuty] = 0;
							format(ChatString, sizeof(ChatString), "* %s opens their locker, depositing their badge and equipment.", GetPlayerNameEx(playerid));
							ProxDetector(20.0, playerid, ChatString, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
							SetPlayerHealthEx(playerid, 100);
							SetPlayerArmourEx(playerid, 0);
		                    SetPlayerToTeamColor(playerid);
					    }
					    default:
					    {
		                    PlayerInfo[playerid][pDuty] = 1;
							format(ChatString, sizeof(ChatString), "* %s opens their locker, withdrawing their badge and equipment.", GetPlayerNameEx(playerid));
							ProxDetector(20.0, playerid, ChatString, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
							SetPlayerHealthEx(playerid, 100);
							SetPlayerArmourEx(playerid, 100);
		                    SetPlayerToTeamColor(playerid);
					    }
					}
			    }
			    case 1:
			    {
			        if(PlayerInfo[playerid][pFaction] == 1) return ShowPlayerDialogEx(playerid, DIALOG_LOCKER_LSPD, DIALOG_STYLE_LIST, "Equipment", "First Aid\r\nKevlar Vest\r\nDeagle\r\nShotgun\r\nMP5\r\nM4\r\nNightstick\r\nTeargas\r\nMace\r\nSPAS-12", "Purchase", "Cancel");
			        if(PlayerInfo[playerid][pFaction] == 2) return ShowPlayerDialogEx(playerid, DIALOG_LOCKER_GOV, DIALOG_STYLE_LIST, "Equipment", "First Aid\r\nKevlar Vest\r\nDeagle\r\nShotgun\r\nMP5", "Purchase", "Cancel");
			        if(PlayerInfo[playerid][pFaction] == 3) return ShowPlayerDialogEx(playerid, DIALOG_LOCKER_LSFMD, DIALOG_STYLE_LIST, "Equipment", "First Aid\r\nKevlar Vest\r\nShotgun\r\nChainsaw\r\nFire Extinguisher\r\nCamera", "Purchase", "Cancel");
			        if(PlayerInfo[playerid][pFaction] == 6) return ShowPlayerDialogEx(playerid, DIALOG_LOCKER_FBI, DIALOG_STYLE_LIST, "Equipment", "First Aid\r\nKevlar Vest\r\nDeagle\r\nShotgun\r\nMP5\r\nM4\r\nSPAS-12\r\nSniper", "Purchase", "Cancel");
			        if(PlayerInfo[playerid][pFaction] == 7) return ShowPlayerDialogEx(playerid, DIALOG_LOCKER_LSPD, DIALOG_STYLE_LIST, "Equipment", "First Aid\r\nKevlar Vest\r\nDeagle\r\nShotgun\r\nMP5\r\nM4\r\nNightstick\r\nTeargas\r\nMace\r\nSPAS-12", "Purchase", "Cancel");
			    }
			    case 2:
			    {
			    	return ShowPlayerDialogEx(playerid, 1102, DIALOG_STYLE_INPUT, "Uniform", "For reference to the skin ID's used by each rank, please check out the forums.\nPlease enter a valid skin ID ranging (1-299) below:","Select", "Cancel");
			    }
			}
	    }
	    
	    case 1102:
	    {
			if(!response) return 0;
			if(strval(inputtext) < 0 || strval(inputtext) > 299)
			{
			    SendClientMessageEx(playerid, COLOR_GREY, "You have entered an invalid skin ID.");
			    return ShowPlayerDialogEx(playerid, 1102, DIALOG_STYLE_INPUT, "Undercover", "This is only meant to be used for going undercover in situations.\nPlease enter a valid skin ID ranging (1-299) below:", "Submit", "Cancel");
			}
			SetPlayerSkinEx(playerid, strval(inputtext));
	    }
	    
	    case DIALOG_LOCKER_LSPD:
	    {
			if(!response) return 0;
			new factionid = PlayerInfo[playerid][pFaction];
	        switch(listitem)
	        {
	            case 0:
	            {
					SetPlayerHealthEx(playerid, 100); // First Aid
	            }
	            case 1:
	            {
					if(VaultInfo[factionid][vMoney] < 250) return SendClientMessageEx(playerid, COLOR_YELLOW, "Your faction vault does not have the sufficient funds, you cannot obtain this item.");
					SetPlayerArmourEx(playerid, 100); // Kevlar Vest
		    		AddVaultMoney(factionid, -250);
	            }
	            case 2:
	            {
					if(VaultInfo[factionid][vMoney] < 600) return SendClientMessageEx(playerid, COLOR_YELLOW, "Your faction vault does not have the sufficient funds, you cannot obtain this item.");
                    GivePlayerWeaponEx(playerid, 24); // Deagle
		    		AddVaultMoney(factionid, -600);
	            }
	            case 3:
	            {
					if(VaultInfo[factionid][vMoney] < 300) return SendClientMessageEx(playerid, COLOR_YELLOW, "Your faction vault does not have the sufficient funds, you cannot obtain this item.");
		        	GivePlayerWeaponEx(playerid, 25); // Shotgun
					AddVaultMoney(factionid, -300);
	            }
	            case 4:
	            {
					if(VaultInfo[factionid][vMoney] < 400) return SendClientMessageEx(playerid, COLOR_YELLOW, "Your faction vault does not have the sufficient funds, you cannot obtain this item.");
		        	GivePlayerWeaponEx(playerid, 29); // MP5
		    		AddVaultMoney(factionid, -400);
	            }
	            case 5:
	            {
					if(VaultInfo[factionid][vMoney] < 800) return SendClientMessageEx(playerid, COLOR_YELLOW, "Your faction vault does not have the sufficient funds, you cannot obtain this item.");
					else if(PlayerInfo[playerid][pDivision] != 2 && PlayerInfo[playerid][pRank] < 4) return SendClientMessageEx(playerid, COLOR_GREY, "You must be in the SWAT Division or Rank 4+ to obtain this item.");
					GivePlayerWeaponEx(playerid, 31); // M4
		    		AddVaultMoney(factionid, -800);
	            }
	            case 6:
	            {
	                GivePlayerWeaponEx(playerid, 3); // NIGHTSTICK
	            }
	            case 7:
	            {
					if(VaultInfo[factionid][vMoney] < 1000) return SendClientMessageEx(playerid, COLOR_YELLOW, "Your faction vault does not have the sufficient funds, you cannot obtain this item.");
					else if(PlayerInfo[playerid][pDivision] != 2 && PlayerInfo[playerid][pRank] < 4) return SendClientMessageEx(playerid, COLOR_GREY, "You must be in the SWAT Division or Rank 4+ to obtain this item.");
	                GivePlayerWeaponEx(playerid, 17); // TEAR GAS
		    		AddVaultMoney(factionid, -1000);
	            }
	            case 8:
	            {
	                GivePlayerWeaponEx(playerid, 41); // MACE
	            }
	            case 9:
	            {
					if(VaultInfo[factionid][vMoney] < 1250) return SendClientMessageEx(playerid, COLOR_YELLOW, "Your faction vault does not have the sufficient funds, you cannot obtain this item.");
					else if(PlayerInfo[playerid][pDivision] != 2 && PlayerInfo[playerid][pRank] < 4) return SendClientMessageEx(playerid, COLOR_GREY, "You must be in the SWAT Division or Rank 4+ to obtain this item.");
	                GivePlayerWeaponEx(playerid, 27); // SPAS12
		    		AddVaultMoney(factionid, -1250);
	            }
	        }
   			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	    }
	    
	    case DIALOG_LOCKER_GOV:
	    {
			if(!response) return 0;
			new factionid = PlayerInfo[playerid][pFaction];
	        switch(listitem)
	        {
	            case 0:
	            {
					SetPlayerHealthEx(playerid, 100); // First Aid
	            }
	            case 1:
	            {
					if(VaultInfo[factionid][vMoney] < 250) return SendClientMessageEx(playerid, COLOR_YELLOW, "Your faction vault does not have the sufficient funds, you cannot obtain this item.");
					SetPlayerArmourEx(playerid, 100); // Kevlar Vest
		    		AddVaultMoney(factionid, -250);
	            }
	            case 2:
	            {
					if(VaultInfo[factionid][vMoney] < 600) return SendClientMessageEx(playerid, COLOR_YELLOW, "Your faction vault does not have the sufficient funds, you cannot obtain this item.");
                    GivePlayerWeaponEx(playerid, 24); // Deagle
		    		AddVaultMoney(factionid, -600);
	            }
	            case 3:
	            {
					if(VaultInfo[factionid][vMoney] < 300) return SendClientMessageEx(playerid, COLOR_YELLOW, "Your faction vault does not have the sufficient funds, you cannot obtain this item.");
		        	GivePlayerWeaponEx(playerid, 25); // Shotgun
					AddVaultMoney(factionid, -300);
	            }
	            case 4:
	            {
					if(VaultInfo[factionid][vMoney] < 400) return SendClientMessageEx(playerid, COLOR_YELLOW, "Your faction vault does not have the sufficient funds, you cannot obtain this item.");
		        	GivePlayerWeaponEx(playerid, 29); // MP5
		    		AddVaultMoney(factionid, -400);
	            }
	        }
   			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	    }
	    
	    case DIALOG_LOCKER_FBI:
	    {
			if(!response) return 0;
			new factionid = PlayerInfo[playerid][pFaction];
	        switch(listitem)
	        {
	            case 0:
	            {
					SetPlayerHealthEx(playerid, 100); // First Aid
	            }
	            case 1:
	            {
					if(VaultInfo[factionid][vMoney] < 250) return SendClientMessageEx(playerid, COLOR_YELLOW, "Your faction vault does not have the sufficient funds, you cannot obtain this item.");
					SetPlayerArmourEx(playerid, 100); // Kevlar Vest
		    		AddVaultMoney(factionid, -250);
	            }
	            case 2:
	            {
					if(VaultInfo[factionid][vMoney] < 600) return SendClientMessageEx(playerid, COLOR_YELLOW, "Your faction vault does not have the sufficient funds, you cannot obtain this item.");
                    GivePlayerWeaponEx(playerid, 24); // Deagle
		    		AddVaultMoney(factionid, -600);
	            }
	            case 3:
	            {
					if(VaultInfo[factionid][vMoney] < 300) return SendClientMessageEx(playerid, COLOR_YELLOW, "Your faction vault does not have the sufficient funds, you cannot obtain this item.");
		        	GivePlayerWeaponEx(playerid, 25); // Shotgun
					AddVaultMoney(factionid, -300);
	            }
	            case 4:
	            {
					if(VaultInfo[factionid][vMoney] < 400) return SendClientMessageEx(playerid, COLOR_YELLOW, "Your faction vault does not have the sufficient funds, you cannot obtain this item.");
		        	GivePlayerWeaponEx(playerid, 29); // MP5
		    		AddVaultMoney(factionid, -400);
	            }
	            case 5:
	            {
					if(VaultInfo[factionid][vMoney] < 800) return SendClientMessageEx(playerid, COLOR_YELLOW, "Your faction vault does not have the sufficient funds, you cannot obtain this item.");
		        	GivePlayerWeaponEx(playerid, 31); // M4
		    		AddVaultMoney(factionid, -800);
	            }
	            case 6:
	            {
					if(VaultInfo[factionid][vMoney] < 1500) return SendClientMessageEx(playerid, COLOR_YELLOW, "Your faction vault does not have the sufficient funds, you cannot obtain this item.");
		        	GivePlayerWeaponEx(playerid, 27); // SPAS-12
		    		AddVaultMoney(factionid, -1500);
	            }
	            case 7:
	            {
					if(VaultInfo[factionid][vMoney] < 2000) return SendClientMessageEx(playerid, COLOR_YELLOW, "Your faction vault does not have the sufficient funds, you cannot obtain this item.");
		        	GivePlayerWeaponEx(playerid, 34); // Sniper
		    		AddVaultMoney(factionid, -2000);
	            }
	        }
   			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	    }
	    
	    case DIALOG_LOCKER_LSFMD:
	    {
			if(!response) return 0;
			new factionid = PlayerInfo[playerid][pFaction];
	        switch(listitem)
	        {
	            case 0:
	            {
					SetPlayerHealthEx(playerid, 100); // First Aid
	            }
	            case 1:
	            {
					if(VaultInfo[factionid][vMoney] < 250) return SendClientMessageEx(playerid, COLOR_YELLOW, "Your faction vault does not have the sufficient funds, you cannot obtain this item.");
					SetPlayerArmourEx(playerid, 100); // Kevlar Vest
		    		AddVaultMoney(factionid, -250);
	            }
	            case 2:
	            {
					if(VaultInfo[factionid][vMoney] < 300) return SendClientMessageEx(playerid, COLOR_YELLOW, "Your faction vault does not have the sufficient funds, you cannot obtain this item.");
		        	GivePlayerWeaponEx(playerid, 25); // Shotgun
					AddVaultMoney(factionid, -300);
	            }
	            case 3:
	            {
					if(VaultInfo[factionid][vMoney] < 400) return SendClientMessageEx(playerid, COLOR_YELLOW, "Your faction vault does not have the sufficient funds, you cannot obtain this item.");
		        	GivePlayerWeaponEx(playerid, 9); // Chainsaw
		    		AddVaultMoney(factionid, -400);
	            }
	            case 4:
	            {
					if(VaultInfo[factionid][vMoney] < 400) return SendClientMessageEx(playerid, COLOR_YELLOW, "Your faction vault does not have the sufficient funds, you cannot obtain this item.");
		        	GivePlayerWeaponEx(playerid, 42); // Extinguisher
		    		AddVaultMoney(factionid, -400);
	            }
	            case 5:
	            {
					if(VaultInfo[factionid][vMoney] < 35) return SendClientMessageEx(playerid, COLOR_YELLOW, "Your faction vault does not have the sufficient funds, you cannot obtain this item.");
		        	GivePlayerWeaponEx(playerid, 43); // Camera
		    		AddVaultMoney(factionid, -35);
	            }
	        }
   			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	    }
	    
	    case DIALOG_COLLECT_PLANT:
	    {
			if(!response) return 0;
	    	new string[128], randSeeds = random(4) + 2, foundPlant = 0;

			foreach (new i: Player)
			{
				if(IsPlayerInRangeOfPoint(playerid, 4.0, PlayerInfo[i][pPlantPosition][0], PlayerInfo[i][pPlantPosition][1], PlayerInfo[i][pPlantPosition][2]))
				{
				    if(GetPlayerInterior(playerid) == PlayerInfo[i][pPlantPosition][3] && GetPlayerVirtualWorld(playerid) == PlayerInfo[i][pPlantPosition][4])
				    {
		                PlayerInfo[i][pPlantPosition][0] = 0;
						PlayerInfo[i][pPlantPosition][1] = 0;
						PlayerInfo[i][pPlantPosition][2] = 0;
						PlayerInfo[i][pPlantPosition][3] = 0;
						PlayerInfo[i][pPlantPosition][4] = 0;
						PlayerInfo[i][pPlantGrowth] = 0;
						DestroyDynamicObject(WeedPlant[i]);
						WeedPlant[i] = 0;
						foundPlant = 1;
						break;
				    }
				}
			}
				
			for (new i=0; i < sizeof(WeedPlants); i++)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 15.0, WeedPlants[i][0], WeedPlants[i][1], WeedPlants[i][2]))
			    {
			    	if(IsPlayerInRangeOfPoint(playerid, 4.0, WeedPlants[i][0], WeedPlants[i][1], WeedPlants[i][2]))
			    	{
			    	    if(PlantData[i][wpObjectHandle] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "You must be near a plant to use this command.");
		    			DestroyDynamicObject(PlantData[i][wpObjectHandle]);
		    			PlantData[i][wpObjectHandle] = 0;
						foundPlant = 1;
		    			break;
			    	}
				}
			}
			
			if(foundPlant == 0) return SendClientMessageEx(playerid, COLOR_GREY, "You must be near a plant to use this command.");
			
			switch (listitem)
			{
			    case 0:
			    {
	    			PlayerInfo[playerid][pSeeds] += randSeeds;
	    			format(string, sizeof(string), "You have managed to successfully collect %d seeds in total, you can use them by typing /plantseeds.", randSeeds);
			    }

			    case 1:
			    {
    				PlayerInfo[playerid][pWeed] += randSeeds * 4;
    				format(string, sizeof(string), "You have managed to successfully collect %d grams of weed in total.", randSeeds * 4);
			    }
			}
    		SendClientMessageEx(playerid, COLOR_WHITE, string);
    		ApplyAnimation(playerid,"BOMBER","BOM_Plant_Crouch_In", 4.0, 0, 0, 0, 0, 0, 1);
	    }

/*	    case DIALOG_CLOTHES_BUY:
	    {
	        new b = GetPlayerBusiness(playerid);

			if(!IsInsideBusiness(playerid, BUSINESS_TYPE_CLOTHING)) return SendClientMessageEx(playerid, COLOR_GREY, "You are not inside a business.");
	        else if(!response) return 0;
			else if(strval(inputtext) < 1 || strval(inputtext) > 299) return SendClientMessageEx(playerid, COLOR_GREY, "You have entered an invalid skin id.");
			else if(!IsAValidSkin(strval(inputtext))) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot purchase restricted skins.");
			else if(PlayerInfo[playerid][pMoney] < 100) return SendClientMessageEx(playerid, COLOR_GREY, "You do not have enough money ($250) to purchase this skin.");
			PlayerInfo[playerid][pSkin] = strval(inputtext);
			AddBusinessSale(b, 100, playerid);
			SetPlayerSkinEx(playerid, PlayerInfo[playerid][pSkin]);
   			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			SendClientMessageEx(playerid, COLOR_YELLOW, "You have purchased a new selection of clothes.");
	    }
*/
	    case DIALOG_AMMUNATION_BUY:
	    {
			new b = GetPlayerBusiness(playerid);
			if(PlayerInfo[playerid][pGunLicense] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "You must own a gun license to purchase weapons from this store.");
			else if(!response) return 0;
			else if(!IsInsideBusiness(playerid, BUSINESS_TYPE_AMMUNATION)) return SendClientMessageEx(playerid, COLOR_GREY, "You are not inside a business.");
	            
			switch(listitem)
			{
			    case 0:
			    {
			   		if(PlayerInfo[playerid][pMoney] < 150) return SendClientMessageEx(playerid, COLOR_YELLOW, "You do not have enough money for this item.");
			        GivePlayerWeaponEx(playerid, 22);
					AddBusinessSale(b, 150, playerid);
			    }

				case 1:
			    {
		    		if(PlayerInfo[playerid][pMoney] < 350) return SendClientMessageEx(playerid, COLOR_YELLOW, "You do not have enough money for this item.");
			        GivePlayerWeaponEx(playerid, 25);
					AddBusinessSale(b, 350, playerid);
			    }

				case 2:
				{
			    	if(PlayerInfo[playerid][pMoney] < 400) return SendClientMessageEx(playerid, COLOR_YELLOW, "You do not have enough money for this item.");
					GivePlayerWeaponEx(playerid, 33);
					AddBusinessSale(b, 400, playerid);
				}

				case 3:
				{
			 		if(PlayerInfo[playerid][pMoney] < 50) return SendClientMessageEx(playerid, COLOR_YELLOW, "You do not have enough money for this item.");
					GivePlayerWeaponEx(playerid, 6);
					AddBusinessSale(b, 50, playerid);
	    		}
			}
   			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	    }
	    
	    case DIALOG_SEXSTORE_BUY:
	    {
	        new b = GetPlayerBusiness(playerid);
	        if(!response) return 0;
			else if(!IsInsideBusiness(playerid, BUSINESS_TYPE_SEXSTORE)) return SendClientMessageEx(playerid, COLOR_GREY, "You are not inside a business.");

	        switch (listitem)
	        {
	            case 0:
	            {
		    		if(PlayerInfo[playerid][pMoney] < 20) return SendClientMessageEx(playerid, COLOR_YELLOW, "You do not have enough money for this item.");
		        	GivePlayerWeaponEx(playerid, 10); // Double End Dildo
					AddBusinessSale(b, 20, playerid);
	            }
	            case 1:
	            {
	                if(PlayerInfo[playerid][pMoney] < 10) return SendClientMessageEx(playerid, COLOR_YELLOW, "You do not have enough money for this item.");
		        	GivePlayerWeaponEx(playerid, 11); // Dildo
					AddBusinessSale(b, 10, playerid);
	            }
	            case 2:
	            {
	                if(PlayerInfo[playerid][pMoney] < 15) return SendClientMessageEx(playerid, COLOR_YELLOW, "You do not have enough money for this item.");
		        	GivePlayerWeaponEx(playerid, 12); // Vibrator
					AddBusinessSale(b, 15, playerid);
	            }
	            case 3:
	            {
	                if(PlayerInfo[playerid][pMoney] < 30) return SendClientMessageEx(playerid, COLOR_YELLOW, "You do not have enough money for this item.");
		        	GivePlayerWeaponEx(playerid, 13); // Silver Vibrator
					AddBusinessSale(b, 30, playerid);
	            }
	        }
   			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	    }

	    case DIALOG_CLUB_BUY:
	    {
            if(response)
            {
		        new b = GetPlayerBusiness(playerid);
	            
	        	switch(listitem)
	        	{
					case 0:
					{
						if(!IsInsideBusiness(playerid, BUSINESS_TYPE_CLUB)) return SendClientMessageEx(playerid, COLOR_GREY, "You are not inside a business.");
					    else if(PlayerInfo[playerid][pMoney] < 15) return SendClientMessageEx(playerid, COLOR_GREY, "You don't have that much.");
					    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_BEER);
						AddBusinessSale(b, 15, playerid);
					}
					
					case 1:
					{
						if(!IsInsideBusiness(playerid, BUSINESS_TYPE_CLUB)) return SendClientMessageEx(playerid, COLOR_GREY, "You are not inside a business.");
					    else if(PlayerInfo[playerid][pMoney] < 25) return SendClientMessageEx(playerid, COLOR_GREY, "You don't have that much.");
					    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_WINE);
						AddBusinessSale(b, 25, playerid);
					}
					
					case 2:
					{
						if(!IsInsideBusiness(playerid, BUSINESS_TYPE_CLUB)) return SendClientMessageEx(playerid, COLOR_GREY, "You are not inside a business.");
					    else if(PlayerInfo[playerid][pMoney] < 5) return SendClientMessageEx(playerid, COLOR_GREY, "You don't have that much.");
					    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_SPRUNK);
						AddBusinessSale(b, 5, playerid);
					}
				}
   				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			}
		}
		
		case DIALOG_STORE_BUY:
		{
		    if(response)
		    {
				if(!IsInsideBusiness(playerid, BUSINESS_TYPE_STORE)) return SendClientMessageEx(playerid, COLOR_GREY, "You are not inside a business.");
		        new b = GetPlayerBusiness(playerid);
		            
		        switch(listitem)
		        {
					case 0:
					{
					    if(PlayerInfo[playerid][pMoney] < 100) return SendClientMessageEx(playerid, COLOR_GREY, "You do not have enough cash ($100) to purchase the cellphone.");
					    new string[128], randPhone = random(MAX_PH);
					    do randPhone = random(MAX_PH);
					    while(!IsNumberAvailable(randPhone));
						AddBusinessSale(b, 100, playerid);
						if(PlayerInfo[playerid][pPhoneNumber] != 0)
						{
					    	DeletePhoneNumber(PlayerInfo[playerid][pPhoneNumber]);
					    }
					    AddPhoneNumber(randPhone);
					    PlayerInfo[playerid][pPhoneNumber] = randPhone;
					    format(string, sizeof(string), "You have purchased a new cellphone with the number: %d", randPhone);
						SendClientMessageEx(playerid, COLOR_WHITE, string);
					}
		            case 1:
		            {
		                if(PlayerInfo[playerid][pWalkieTalkie] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "You already own a walkie talkie.");
                        else if(PlayerInfo[playerid][pMoney] < 250) return SendClientMessageEx(playerid, COLOR_GREY, "You don't have enough cash ($250) to purchase a walkie talkie.");
						AddBusinessSale(b, 250, playerid);
						PlayerInfo[playerid][pWalkieTalkie] = 1;
					}

					case 2:
					{
		                if(PlayerInfo[playerid][pPhonebook] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "You already own a phone book.");
		                else if(PlayerInfo[playerid][pMoney] < 50) return SendClientMessageEx(playerid, COLOR_GREY, "You do not have enough cash ($50) to purchase a phonebook.");
						AddBusinessSale(b, 50, playerid);
					    PlayerInfo[playerid][pPhonebook] = 1;
						SendClientMessageEx(playerid, COLOR_WHITE, "You have purchased a phonebook, type /number <player> to retrieve players numbers.");
					}
					case 3:
					{
		                if(PlayerInfo[playerid][pMoney] < 7) return SendClientMessageEx(playerid, COLOR_GREY, "You do not have enough cash ($10) to purchase a Spray Can.");
					    else if(PlayerInfo[playerid][pSprayCan] + 1 > 20) return SendClientMessageEx(playerid, COLOR_GREY, "You have reached the maximum amount of spray cans in your inventory.");
						AddBusinessSale(b, 10, playerid);
					    PlayerInfo[playerid][pSprayCan]++;
					    SendClientMessageEx(playerid, COLOR_WHITE, "You have purchased a spraycan, type /colorcar <color 1> <color 2> to change your vehicles color.");
					}
					case 4:
					{
		                if(PlayerInfo[playerid][pGps] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "You already own a GPS.");
					    else if(PlayerInfo[playerid][pMoney] < 35) return SendClientMessageEx(playerid, COLOR_GREY, "You do not have $35 to purchase a GPS.");
						AddBusinessSale(b, 35, playerid);
					    PlayerInfo[playerid][pGps] = 1;
						SendClientMessageEx(playerid, COLOR_WHITE, "You have purchased a GPS, type /gps for more information.");
					}
					case 5:
					{
					    if(PlayerInfo[playerid][pMoney] < 85) return SendClientMessageEx(playerid, COLOR_GREY, "You do not have $85 to purchase a baseball bat.");
						AddBusinessSale(b, 85, playerid);
						GivePlayerWeaponEx(playerid, 5);
						SendClientMessageEx(playerid, COLOR_WHITE, "You have purchased a baseball bat, it cost you $85.");
					}
					case 6:
					{
					    if(PlayerInfo[playerid][pMoney] < 100) return SendClientMessageEx(playerid, COLOR_GREY, "You do not have $100 to purchase a gas can.");
					    else if(PlayerInfo[playerid][pGasCans] >= 2) return SendClientMessageEx(playerid, COLOR_GREY, "You do not have $100 to purchase a gas can.");
						AddBusinessSale(b, 100, playerid);
						PlayerInfo[playerid][pGasCans] += 1;
						SendClientMessageEx(playerid, COLOR_WHITE, "You have purchased a gas can, you can type /refill while inside a vehicle to add 20 percent more fuel.");
					}
				}
   				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			}
		}
		case 2011:
		{
		    if(!response)
			{
				SendClientMessageEx(playerid, COLOR_GREY, "You just canceled your drivers license test.");
            	LicenseTestAC[playerid] = 0;
				return 1;
			}
			LicenseTestAC[playerid] = 0;
			switch(listitem)
			{
                case 0:
                {
                    ShowPlayerDialogEx(playerid,2011,DIALOG_STYLE_LIST,"Written Exam","What should you do when you are driving at night?\r\n1) Make sure you are driving slow enough incase of an emergency.\r\n2) Roll down your window so that the fresh air will help keep you awake.\r\n3) If you are sleepy, drink coffee or other caffeine products.","Answer", "Cancel");
				}
			    case 1:
			    {
                    LicenseTestAC[playerid]++;
			        ShowPlayerDialogEx(playerid, 2012, DIALOG_STYLE_LIST, "Written Exam", "On what side of the road are you supposed to drive on?\r\n1) Left\r\n2) Right\r\n3) Middle", "Answer", "Cancel");
				}
				case 2, 3:
				{
   			        ShowPlayerDialogEx(playerid, 2012, DIALOG_STYLE_LIST, "Written Exam", "On what side of the road are you supposed to drive on?\r\n1) Left\r\n2) Right\r\n3) Middle", "Answer", "Cancel");
				}
			}
		}
		
		case 2012:
		{
		    if(!response)
			{
				SendClientMessageEx(playerid, COLOR_GREY, "You just canceled your drivers license test.");
				LicenseTestAC[playerid] = 0;
				return 1;
			}
			switch(listitem)
			{
			    case 0:
			    {
                    ShowPlayerDialogEx(playerid, 2012, DIALOG_STYLE_LIST, "Written Exam", "On what side of the road are you supposed to drive on?\r\n1) Left\r\n2) Right\r\n3) Middle", "Answer", "Cancel");
				}
			    case 1, 3:
			    {
				    ShowPlayerDialogEx(playerid, 2013, DIALOG_STYLE_LIST, "Written Exam", "A pre-trip inspection should be completed:\r\n1) At least once a week.\r\n2) If any problems occurred the last the time the vehicle was operated\r\n3) Before operating the vehicle", "Answer", "Cancel");
				}
				case 2:
				{
				    LicenseTestAC[playerid]++;
				    ShowPlayerDialogEx(playerid, 2013, DIALOG_STYLE_LIST, "Written Exam", "A pre-trip inspection should be completed:\r\n1) At least once a week.\r\n2) If any problems occurred the last the time the vehicle was operated\r\n3) Before operating the vehicle", "Answer", "Cancel");
				}
			}
		}
		case 2013:
		{
		    if(!response)
		    {
		        SendClientMessageEx(playerid, COLOR_GREY, "You just cancelled your drivers license test.");
		        LicenseTestAC[playerid] = 0;
		        return 1;
			}
			switch(listitem)
			{
				case 0: ShowPlayerDialogEx(playerid, 2013, DIALOG_STYLE_LIST, "Written Exam", "A pre-trip inspection should be completed:\r\n1) at least once a week.\r\n2) if any problems occurred the last the time the vehicle was operated\r\n3) before operating the vehicle", "Answer", "Cancel");
//				case 1, 3: return;
				case 2: LicenseTestAC[playerid]++;
			}
			new string[64];
	        format(string, sizeof(string), "Examiner: You have correctly answered %i/3 questions.", LicenseTestAC[playerid]);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			if(LicenseTestAC[playerid] >= 2)
			{
			    SendClientMessageEx(playerid, COLOR_WHITE, "Examiner: Congratulations! Your have passed your written exam. Get inside a vehicle outside to do the driving portion.");
			    LicenseTestAC[playerid] = 4;
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "Examiner: You did not pass the written portion of the test.  Feel free to try again.");
				LicenseTestAC[playerid] = 0;
			}
   		}

		case DIALOG_CITY_HALL_MENU:
		{
		    if(!response) return 0;
		    switch(listitem)
		    {
		        case 0:
		        {
		            ShowPlayerDialogEx(playerid, DIALOG_CITY_HALL_NC, DIALOG_STYLE_INPUT, "{FFFFFF}Character Renaming", "{FFFFFF}You have selected to change your characters full name.\nYou cannot name your character whatever is of your preference, it must be approved by an Administrator.\nA valid roleplay name: John_West", "Change", "Cancel");
		        }
		        
		        case 1:
		        {
		            if(PlayerInfo[playerid][pPhonebookRemoval] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "You already have your name removed from the phonebook, to read it contact the desk.");
		            PlayerInfo[playerid][pPhonebookRemoval] = 1;
		            GivePlayerCash(playerid, -300);
		            SendClientMessageEx(playerid, COLOR_GREY, "You have purchased phonebook removal, your name will now not be enlisted on there.");
		        }
		        
		        case 2:
		        {
		            PlayerInfo[playerid][pPhonebookRemoval] = 0;
		            SendClientMessageEx(playerid, COLOR_GREY, "You have have re-added your name to the phonebook, your name will now be enlisted on it.");
		        }
		    }
		}
		
		case DIALOG_CITY_HALL_NC:
		{
		    if(!response) return 0;
		    else if(!IsRPNameText(inputtext))
		    {
		        SendClientMessage(playerid, COLOR_GREY, "You must enter a valid roleplay name containing an underscore and formal name capitilization.");
  				return ShowPlayerDialogEx(playerid, DIALOG_CITY_HALL_NC, DIALOG_STYLE_INPUT, "{FFFFFF}Character Renaming", "{FFFFFF}You have selected to change your characters full name.\nYou cannot name your character whatever is of your preference, it must be approved by an Administrator.\nA valid roleplay name: John_West", "Change", "Cancel");
		    }
		    else if(PlayerInfo[playerid][pMoney] < 2000 && (PlayerInfo[playerid][pFaction] != 6 && PlayerInfo[playerid][pHitman] == 0)) return SendClientMessage(playerid, COLOR_GREY, "You must have at least $2,000 to change your name.");

			new string[160];
			mysql_real_escape_string(inputtext, string, mConnectionHandle, MAX_PLAYER_NAME);
			SetPVarString(playerid, "CharacterName", string);
			format(string, sizeof(string), "{FF6347}AdmWarning:{FFFF00} %s wants to change their name to %s. (/approvename %d or /denyname %d)", PlayerInfo[playerid][pUsername], string, playerid, playerid);
			AdminAlert(string, ALERT_ADMINS);
			SendClientMessage(playerid, COLOR_YELLOW, "Your name change request has been sent to the administrators, please wait for approval.");
		}
	}
	return 1;
}

public MySQL_Change_Name(playerid, newname[], connectionHandle)
{
	new string[256], rowCount, fieldCount;
	cache_get_data(rowCount, fieldCount, connectionHandle);
	if(rowCount == 0)
	{
		/*new File:nclog = fopen("logs/namechange.log", io_append);
		format(string, sizeof(string), "[Namechange]: %s has changed their name to %s.\n", PlayerInfo[playerid][pUsername], newname);
		fwrite(nclog, string);
		fclose(nclog);*/
		format(string, sizeof(string), "%s has changed their name to %s.", PlayerInfo[playerid][pUsername], newname);
		Log("logs/namechange.log", string);
		
		if(!GetPVarInt(playerid, "FreeNamechange") && (PlayerInfo[playerid][pFaction] != 6 && PlayerInfo[playerid][pHitman] == 0)) GivePlayerCash(playerid, -2000);

		format(string, sizeof(string), "UPDATE `businesses` SET `Owner` = '%s' WHERE `Owner` = '%s'", newname, PlayerInfo[playerid][pUsername]);
		mysql_query(string, THREAD_LOG_RESULT, playerid, connectionHandle);
		for (new b=1; b < MAX_BUSINESSES; b++)
		{
		    if(!strcmp(BusinessInfo[b][bOwner], PlayerInfo[playerid][pUsername], true))
		    {
		        format(BusinessInfo[b][bOwner], MAX_PLAYER_NAME, "%s", newname);
		        RecreateBusinessText(b);
		    }
		}
		format(string, sizeof(string), "UPDATE `houses` SET `Owner` = '%s' WHERE `Owner` = '%s'", newname, PlayerInfo[playerid][pUsername]);
		mysql_query(string, THREAD_LOG_RESULT, playerid, connectionHandle);
		for (new h=1; h < MAX_HOUSES; h++)
		{
		    if(!strcmp(HouseInfo[h][hOwner], PlayerInfo[playerid][pUsername], true))
		    {
		        format(HouseInfo[h][hOwner], MAX_PLAYER_NAME, "%s", newname);
		        RecreateHouseText(h);
		    }
		}
		DeletePVar(playerid, "FreeNamechange");
		format(string, sizeof(string), "UPDATE `accounts` SET `Username` = '%s' WHERE `Id` = '%d'", newname, PlayerInfo[playerid][pId]);
		mysql_query(string, THREAD_LOG_RESULT, playerid, connectionHandle);
		format(PlayerInfo[playerid][pUsername], MAX_PLAYER_NAME, "%s", newname);
		SetPlayerName(playerid, newname);
		format(string, sizeof(string), "Your name has been successfully changed to %s.", PlayerInfo[playerid][pUsername]);
		SendClientMessageEx(playerid, COLOR_YELLOW, string);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "The specified name is currently unavailable, please choose another name.");
	}
}

CMD:approvename(playerid, params[])
{
	if(IsAdmin(playerid, ADMIN_LEVEL_JUNIORADMIN))
	{
		new targetid, pName[MAX_PLAYER_NAME], string[128];
		if(sscanf(params, "u", targetid)) return SendClientMessage(playerid, COLOR_GREY, "Usage: /approvename <playerid>");
		else if(GetPVarInt(targetid, "gPlayerLogged") == 0) return SendClientMessage(playerid, COLOR_GREY, "Invalid player specified.");
		else if(GetPVarString(targetid, "CharacterName", pName, MAX_PLAYER_NAME) == 0) return SendClientMessage(playerid, COLOR_GREY, "The specified player does not need a name change.");
		format(string, sizeof(string), "{FF6347}AdmWarning:{FFFF00} %s has approved player %s's name change request to %s.", PlayerInfo[playerid][pUsername], PlayerInfo[targetid][pUsername], pName);
		AdminAlert(string, ALERT_ADMINS);
		format(string, sizeof(string), "SELECT * FROM `accounts` WHERE `Username` = '%s'", pName);
		mysql_function_query(mConnectionHandle, string, true, "MySQL_Change_Name", "isi", targetid, pName, mConnectionHandle);
	}
	return 1;
}

CMD:setname(playerid, params[])
{
	if(IsAdmin(playerid, ADMIN_LEVEL_LEADADMIN))
	{
	    new targetid, pName[MAX_PLAYER_NAME], string[128];
	    if(sscanf(params, "us[24]", targetid, pName)) return SendClientMessage(playerid, COLOR_GREY, "Usage: /setname <playerid> <name>");
		else if(GetPVarInt(targetid, "gPlayerLogged") == 0) return SendClientMessage(playerid, COLOR_GREY, "Invalid player specified.");
		format(string, sizeof(string), "{FF6347}AdmWarning:{FFFF00} %s has changed %s's name to %s.", PlayerInfo[playerid][pUsername], PlayerInfo[targetid][pUsername], pName);
		AdminAlert(string, ALERT_ADMINS);
		SetPVarInt(targetid, "FreeNamechange", 1);
		format(string, sizeof(string), "SELECT * FROM `accounts` WHERE `Username` = '%s'", pName);
		mysql_function_query(mConnectionHandle, string, true, "MySQL_Change_Name", "isi", targetid, pName, mConnectionHandle);
	}
	return 1;
}

CMD:denyname(playerid, params[])
{
	if(IsAdmin(playerid, ADMIN_LEVEL_JUNIORADMIN))
	{
		new
		    targetid,
		    pName[MAX_PLAYER_NAME],
			string[128];
		if(sscanf(params, "u", targetid)) return SendClientMessage(playerid, COLOR_GREY, "Usage: /denyname <playerid>");
		else if(GetPVarInt(targetid, "gPlayerLogged") == 0) return SendClientMessage(playerid, COLOR_GREY, "Invalid player specified.");
		else if(GetPVarString(targetid, "CharacterName", pName, MAX_PLAYER_NAME) == 0) return SendClientMessage(playerid, COLOR_GREY, "The specified player does not need a name change.");
		DeletePVar(targetid, "CharacterName");
		format(string, sizeof(string), "{FF6347}AdmWarning:{FFFF00} %s has denied player %s's name change request to %s.", PlayerInfo[playerid][pUsername], PlayerInfo[targetid][pUsername], pName);
		AdminAlert(string, ALERT_ADMINS);
		SendClientMessageEx(targetid, COLOR_YELLOW, "Your name change request was denied by an Administrator.");
	}
	return 1;
}

/*
timer TutorialTimer[15000](playerid)
{
	if(!IsPlayerConnected(playerid) || GetPVarInt(playerid, "TutorialStage") == 0) stop TutorialTimerEx[playerid];

	for(new i = 0; i < 20; i++) SendClientMessage(playerid, COLOR_WHITE, "");

	SendClientMessage(playerid, COLOR_ORANGE, "---------------------------------------------------");
	switch(GetPVarInt(playerid, "TutorialStage"))
	{
	    case 1:
	    {
			SetPlayerPos(playerid, 1515.92, -1675.36, 0.0);
	        SetPlayerCameraPos(playerid, 1515.92, -1675.36, 23.89);
	        SetPlayerCameraLookAt(playerid, 1555.42, -1675.54, 16.20);

	        SendClientMessage(playerid, COLOR_LIGHTBLUE, "Los Santos Police Department");
	        SendClientMessage(playerid, COLOR_WHITE, "The Los Santos Police Department are sworn to protect and fight crime all across the city of Los Santos.");
	        SendClientMessage(playerid, COLOR_WHITE, "They are an experienced force dedicated to protecting the city of Los Santos.");
	        SendClientMessage(playerid, COLOR_WHITE, "If you require emergency support, please call 911 (/call 911) to report any suspicious behaviour/crime.");
	        SendClientMessage(playerid, COLOR_ORANGE, "NOTE: Abuse of the 911 emergency system can lead to imprisonment or heavy fines.");
	    }

	    case 2:
	    {
			SetPlayerPos(playerid, 1116.20, -1250.19, 0.0);
			SetPlayerCameraPos(playerid, 1116.20, -1250.19, 24.12);
			SetPlayerCameraLookAt(playerid, 1083.14, -1226.22, 15.82);

	        SendClientMessage(playerid, COLOR_GREY, "Department of Motor Vehicles");
	        SendClientMessage(playerid, COLOR_WHITE, "Every citizen inside the nation of San Andreas requires a drivers license to drive on the roads.");
	        SendClientMessage(playerid, COLOR_WHITE, "You can visit the DMV to obtain a drivers license, and hit the road as soon as possible.");
	        SendClientMessage(playerid, COLOR_WHITE, "Go inside one of the silver vehicles after passing the drivers test, and we'll get you started.");
	        SendClientMessage(playerid, COLOR_ORANGE, "HINT: If you are having trouble finding the building, you can look for our address on our site (/gps 7).");
	    }

	    case 3:
	    {
			SetPlayerPos(playerid, 1014.79, -1332.43, 0.0);
			SetPlayerCameraPos(playerid, 1014.79, -1332.43, 20.24);
			SetPlayerCameraLookAt(playerid, 1003.28, -1358.53, 13.32);

	        SendClientMessage(playerid, COLOR_GREY, "Department of Sanitation");
	        SendClientMessage(playerid, COLOR_WHITE, "Every day, the streets of Los Santos are trashed by our troublesome citizens.");
	        SendClientMessage(playerid, COLOR_WHITE, "The Department of Sanitation are always seeking new employees to run sweep routes around San Andreas.");
	        SendClientMessage(playerid, COLOR_WHITE, "Please visit our building which is located at Market, and fill out a few forms to get started.");
	        SendClientMessage(playerid, COLOR_ORANGE, "HINT: If you are having trouble finding the department, you can look for our address on our site (/gps 9).");
	    }

	    case 4:
	    {
			SetPlayerPos(playerid, 2085.64, -1761.09, 0.0);
			SetPlayerCameraPos(playerid, 2073.839, -1821.484, 19.891);
			SetPlayerCameraLookAt(playerid, 2101.31, -1786.23, 13.56);

	        SendClientMessage(playerid, COLOR_ORANGE, "Well Stacked Pizza Co.");
	        SendClientMessage(playerid, COLOR_WHITE, "The Well Stacked Pizza Co. is one of the most famous pizza restaurants across San Andreas.");
	        SendClientMessage(playerid, COLOR_WHITE, "Every day, the order queue stacks and we struggle to complete orders on time.");
	        SendClientMessage(playerid, COLOR_WHITE, "We are always looking for new employees, please visit our store and ask our store manager to get started.");
	        SendClientMessage(playerid, COLOR_WHITE, "It's as easy as a few text fields filled, and you can get started on your first delivery the first day.");
	        SendClientMessage(playerid, COLOR_ORANGE, "HINT: If you are having trouble finding the department, you can look for our address on our site (/gps 3).");
	    }

	    case 5:
	    {
			SetPlayerPos(playerid, 1964.15, -1748.97, 0.0);
			SetPlayerCameraPos(playerid, 1964.15, -1748.97, 26.67);
			SetPlayerCameraLookAt(playerid, 1941.25, -1772.37, 19.53);

	        SendClientMessage(playerid, COLOR_ORANGE, "Idlewood Gas Station");
	        SendClientMessage(playerid, COLOR_WHITE, "Be sure to always check your fuel indicator (/car status) because it should be always taken care of.");
	        SendClientMessage(playerid, COLOR_WHITE, "Visit the Idlewood Gas Station to refuel your vehicle, our fuel tanks are refilled daily.");
	        SendClientMessage(playerid, COLOR_WHITE, "You can only refuel your vehicle if it is at or under 65 percent of fuel.");
	        SendClientMessage(playerid, COLOR_WHITE, "You will also need to a buy a GPS at a local 24/7 to use it for navigation.");
	        SendClientMessage(playerid, COLOR_WHITE, "You also might want to browse (/buy) our new 24/7 convinience store that has opened recently.");
	    }

	    case 6:
	    {
			SetPlayerPos(playerid, 2248.48, -1651.59, 0.0);
			SetPlayerCameraPos(playerid, 2248.48, -1651.59, 22.82);
			SetPlayerCameraLookAt(playerid, 2244.46, -1665.06, 15.48);

	        SendClientMessage(playerid, COLOR_ORANGE, "Binco Clothing");
	        SendClientMessage(playerid, COLOR_WHITE, "Everyone needs a change of clothes once in a while.");
	        SendClientMessage(playerid, COLOR_WHITE, "Binco offers clothing at an extremely low and affordable price.");
	        SendClientMessage(playerid, COLOR_WHITE, "Our store is located in Ganton, right on Grove Street.");
	        SendClientMessage(playerid, COLOR_ORANGE, "Our catelogue can be found online (list of skins can be found at: http://wiki.sa-mp.com/wiki/Skins).");
	        SendClientMessage(playerid, COLOR_ORANGE, "HINT: When inside a clothing store, type /buy to purchase some new clothes.");
	    }
	    
	    case 7:
	    {
			SetPlayerPos(playerid, 414.70, -2097.67, 0);
			SetPlayerCameraPos(playerid, 414.70, -2097.67, 22.71);
			SetPlayerCameraLookAt(playerid, 379.488, -2066.207, 7.835);
			
	        SendClientMessage(playerid, COLOR_ORANGE, "Santa Maria Pier");
	        SendClientMessage(playerid, COLOR_WHITE, "Everybody likes to eat fish and some may as well like to fish.");
	        SendClientMessage(playerid, COLOR_WHITE, "If you visit the Santa Maria Pier, you can fish for small fish and treasures.");
	        SendClientMessage(playerid, COLOR_WHITE, "You can only fish once every five minutes and if you log out your fish inventory will be reset (so be careful).");
	        SendClientMessage(playerid, COLOR_ORANGE, "To sell your fish, visit a 24/7 store and type /sellfish.");
	        SendClientMessage(playerid, COLOR_ORANGE, "HINT: When at the docks, make sure to be near a fishing rod and type /fish.");
	    }
	    
	    case 8:
	    {
			SetPlayerPos(playerid, 2633.82, -2180.81, -5);
			SetPlayerCameraPos(playerid, 2633.82, -2180.81, 45.80);
			SetPlayerCameraLookAt(playerid, 2672.13, -2243.46, 18.91);

	        SendClientMessage(playerid, COLOR_ORANGE, "The Docks");
	        SendClientMessage(playerid, COLOR_WHITE, "This is one of the hotspot locations on the server, the docks have a large amount of industries settled there.");
	        SendClientMessage(playerid, COLOR_WHITE, "When inside a vehicle, you can type /dropcar and bring the vehicle to this very location.");
	        SendClientMessage(playerid, COLOR_WHITE, "You will be paid a large some of money for the vehicle however, you will have to walk back to Los Santos on foot.");
	        SendClientMessage(playerid, COLOR_ORANGE, "HINT: Type /dropcar while inside a vehicle then deliver it to the red checkpoint.");
	    }
	    
	    case 9:
	    {
			SetPlayerPos(playerid, -83.24, -1110.36, -5);
			SetPlayerCameraPos(playerid, -83.24, -1110.36, 10.72);
			SetPlayerCameraLookAt(playerid, -69.26, -1141.79, 4.65);
			
	        SendClientMessage(playerid, COLOR_ORANGE, "Goods Co. Factory");
	        SendClientMessage(playerid, COLOR_WHITE, "Inside this small area, you can find the trucker job.");
	        SendClientMessage(playerid, COLOR_WHITE, "Truckers are responsible for delivering goods to certain locations, once you have a job head inside a truck.");
	        SendClientMessage(playerid, COLOR_WHITE, "You will be paid according to the length of the route, if the route is far you will be paid heaps of money.");
	        SendClientMessage(playerid, COLOR_ORANGE, "HINT: Type /join when near the 'i' icon to get the trucker job.");
	    }
	    
	    case 10:
	    {
			SetPlayerPos(playerid, 1797.23, -1314.48, 7.0);
			SetPlayerCameraPos(playerid, 1797.23, -1314.48, 62.98);
			SetPlayerCameraLookAt(playerid, 1773.80, -1358.02, 44.50);

	        SendClientMessage(playerid, COLOR_ORANGE, "Tutorial: Ending");
	        SendClientMessage(playerid, COLOR_WHITE, "We'd like to thank you for taking your time to view our magnificent tutorial.");
	        SendClientMessage(playerid, COLOR_WHITE, "As a reminder, you can use /n(ewbie) to ask server related questions, and /o(oc) for global conversation amongst other players.");
	        SendClientMessage(playerid, COLOR_WHITE, "If you'd like to apply for any faction, please visit the forums (/information)");
	        SendClientMessage(playerid, COLOR_ORANGE, "HINT: We suggest that you try to meet with other players and ask around for directions.");
	    }

	    case 11:
	    {
	        DeletePVar(playerid, "TutorialStage");
	        stop TutorialTimerEx[playerid];
            SendClientMessage(playerid, COLOR_ORANGE, "---------------------------------------------------");
    	    SendClientMessage(playerid, COLOR_WHITE, "Welcome to "SERVER_NAME".");
			SendClientMessage(playerid, COLOR_WHITE, "There are many things to do, ranging from applying to a faction to becoming the richest person in San Andreas.");
			SendClientMessage(playerid, COLOR_WHITE, "We believe here that everyone should play legitimately, including our staff members along with others.");
			SendClientMessage(playerid, COLOR_WHITE, "You can find out more information about our server on our site (/information), or ask on /n(ewbie) for help.");
			SendClientMessage(playerid, COLOR_ORANGE, "---------------------------------------------------");
            SetDefaultRegisterStatistics(playerid);
	    }
	}
	SendClientMessage(playerid, COLOR_ORANGE, "---------------------------------------------------");

	SetPVarInt(playerid, "TutorialStage", GetPVarInt(playerid, "TutorialStage") + 1);
	return 1;
}
*/

stock SetDefaultRegisterStatistics(playerid)
{
	SetPVarInt(playerid, "gPlayerLogged", 1);
	PlayerInfo[playerid][pTutorial] = 1;
	
  	switch (PlayerInfo[playerid][pArrival])
	{
	    case 0: { PlayerInfo[playerid][pPositionX] = 1642.167; PlayerInfo[playerid][pPositionY] = -2334.568; PlayerInfo[playerid][pPositionZ] = 13.546; PlayerInfo[playerid][pFacingAngle] = 0; } //Plane
	    case 1: { PlayerInfo[playerid][pPositionX] = 1734.563; PlayerInfo[playerid][pPositionY] = -1951.414; PlayerInfo[playerid][pPositionZ] = 14.117; PlayerInfo[playerid][pFacingAngle] = 0; } //Train
	}
	
	// Customize default player statistics below:
	PlayerInfo[playerid][pHealth] = 100;
	PlayerInfo[playerid][pMoney] = 100;
	PlayerInfo[playerid][pBankBalance] = 200;
	PlayerInfo[playerid][pLevel] = 1;

	SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);
	
	TogglePlayerSpectating(playerid, false);
	TogglePlayerControllable(playerid, true);
}

//////////////////////////////[MAIN LOOP]///////////////////////////

task SyncServer[60000]() // SyncServer() executes every minute
{
	ConsumeGlobalFuel();
	PayDay();

	foreach(new i: Player)
	{
	    if(GetPVarInt(i, "gPlayerLogged") == 1)
	    {

			SavePlayerAccount(i, mConnectionHandle);
		    SetPlayerTime(i, WorldTime[0], WorldTime[1]);
		}
	}
}

task Heartbeat[1000]() // HeartBeat() executes every second
{
	foreach(new i: Player)
	{
	    if(GetPVarInt(i, "gPlayerLogged") == 1 && IsPlayerTabbed(i) == false)
	    {
			if(commandAttempts[i] != 0) commandAttempts[i] -= 1;

			if(GetPVarInt(i, "MechTime") > 0)
			{
				SetPVarInt(i, "MechTime", GetPVarInt(i, "MechTime") - 1);
				if(GetPVarInt(i, "MechTime") == 0) DeletePVar(i, "MechTime");
			}

			if(PlayerInfo[i][pMoney] != GetPlayerMoney(i))
			{
				ResetPlayerMoney(i);
				GivePlayerMoney(i, PlayerInfo[i][pMoney]);
			}

			if(!IsAdmin(i, ADMIN_LEVEL_TRIALADMIN))
			{
				new weaponData[2];
				GetPlayerWeaponData(i, GetWeaponSlotFromId(GetPlayerWeapon(i)), weaponData[0], weaponData[1]);
				if(pCurrentWeapon[i] != weaponData[0])
				{
				    if(GetPlayerState(i) != PLAYER_STATE_WASTED)
				    {
					    OnPlayerChangeWeapon(i, weaponData[0]);
					    pCurrentWeapon[i] = weaponData[0];
				    }
				}
				if(GetPlayerSpecialAction(i) == SPECIAL_ACTION_USEJETPACK)
				{
				    if(GetPVarInt(i, "JetpackAuthorized") == 0)
				    {
						new reason[128];
						format(reason, sizeof(reason), "AdmCmd: %s was banned from the server, reason: Jetpack Hacking", GetPlayerNameEx(i));
						AdminAlert(reason, ALERT_GLOBAL);
						BanPlayerEx(i, "Jetpack Hacking", BAN_PERMANENT, 0);
					}
				}
				new Float:armour, Float:health, string[128];
				GetPlayerArmour(i, armour);
				GetPlayerHealth(i, health);
				if(armour > PlayerInfo[i][pArmour] + WeaponDamage[i] && armour > 0 && GetPlayerState(i) != PLAYER_STATE_WASTED)
				{
					format(string, sizeof(string), "{FF6347}AdmWarning:{FFFF00} (ID: %d) %s may be armour hacking, %f armour was found while they have %f.", i, GetPlayerNameEx(i), armour, PlayerInfo[i][pArmour]);
					AdminAlert(string, ALERT_ADMINS);
			        SetPlayerArmour(i, PlayerInfo[i][pArmour]);
				}
				if(health > PlayerInfo[i][pHealth] + WeaponDamage[i] && health > 0 && GetPlayerState(i) != PLAYER_STATE_WASTED)
				{
					format(string, sizeof(string), "{FF6347}AdmWarning:{FFFF00} (ID: %d) %s may be health hacking, %f health was found while they have %f.", i, GetPlayerNameEx(i), health, PlayerInfo[i][pHealth]);
					AdminAlert(string, ALERT_ADMINS);
			        SetPlayerHealth(i, PlayerInfo[i][pHealth]);
				}
			}
		}
	}
}

task StartRandomFire[21600000]() // StartRandomFire() executes 15 minutes
{
	new b = random(MAX_BUSINESSES), string[128];
	DestroyDynamicObject(FireObject);
	DestroyDynamicObject(SmokeObject);
	Delete3DTextLabel(FireText);
	if(BusinessInfo[b][bExistant])
	{
		FireObject = CreateDynamicObject(18691, BusinessInfo[b][bPosition][0], BusinessInfo[b][bPosition][1], BusinessInfo[b][bPosition][2], 0, 0, 0.0);
		SmokeObject = CreateDynamicObject(18723, BusinessInfo[b][bPosition][0], BusinessInfo[b][bPosition][1], BusinessInfo[b][bPosition][2], 0, 0, 0.0);
		FireHealth = 100;
		FireText = Create3DTextLabel("100%", COLOR_GREEN, BusinessInfo[b][bPosition][0], BusinessInfo[b][bPosition][1], BusinessInfo[b][bPosition][2]+1, 20.0, 0, 0);
		foreach(new i: Player)
		{
			if(IsPlayerConnectedEx(i) && IsPlayerInRangeOfPoint(i, 50.0, BusinessInfo[b][bPosition][0], BusinessInfo[b][bPosition][1], BusinessInfo[b][bPosition][2]))
			{
	   	 		format(string, sizeof(string), "* The fire alarm tone at %s starts to ring. *", BusinessInfo[b][bName]);
		        SendClientMessageEx(i, COLOR_YELLOW, string);
			}
			if(PlayerInfo[i][pFaction] == 3) SetPlayerCheckpoint(i, BusinessInfo[b][bPosition][0], BusinessInfo[b][bPosition][1], BusinessInfo[b][bPosition][2], 5.0);
		}
		SendRadioMessage(3, COLOR_WHITE, "----------------------------------------");
		format(string, sizeof(string), "[DISPATCH]{FFFFFF} All Units ABP: Caller: Anonymous");
		SendRadioMessage(3, COLOR_HOTPINK, string);
		format(string, sizeof(string), "[DISPATCH]{FFFFFF} Incident: %s is on fire! Please get here ASAP.", BusinessInfo[b][bName]);
		SendRadioMessage(3, COLOR_HOTPINK, string);
		SendRadioMessage(3, COLOR_WHITE, "----------------------------------------");
		SendRadioMessage(3, COLOR_YELLOW, "A marker to the location of the fire has been set on your GPS.");
	}
}

public ConsumeGlobalFuel()
{
	for(new i =0; i < MAX_VEHICLES; i++)
	{
		if(!VehicleInfo[i][vTotalled] && VehicleInfo[i][vEngine] == 1 && VehicleInfo[i][vFuel] >= FUEL_COST && IsRunnableEngine(i))
		{
			VehicleInfo[i][vFuel] -= FUEL_COST;
			if(VehicleInfo[i][vFuel] < FUEL_COST)
			{
		    	VehicleInfo[i][vEngine] = 0;
		    	VehicleInfo[i][vLights] = 0;
		  	    SetVehicleParamsEx(i, VehicleInfo[i][vEngine], VehicleInfo[i][vLights], VehicleInfo[i][vAlarm], VehicleInfo[i][vDoors], VehicleInfo[i][vBonnet], VehicleInfo[i][vBoot], VehicleInfo[i][vObjective]);
			}
		}
	}
}

public PayDay()
{
	new currentHour = GetCurrentHour(), string[128];
	if(currentHour == (WorldTime[0] + 1) || (WorldTime[0] == 23 && currentHour == 0))
	{
	    SetWorldTime(currentHour);
	    format(string, sizeof(string), "SERVER:{FFFFFF} The time is now %i:00.", GetCurrentHour());
		SendClientMessageToAllEx(COLOR_ORANGE, string);
	    printf("SERVER: World Time is now %i:00.", GetCurrentHour());
		InitiatePaycheck();
		PlantMarijuanaPlant();
		foreach (new i: Player)
		{
            if(GetPVarInt(i, "WeedSmoked") >= 1)
            {
		        DeletePVar(i, "WeedLength");
		        DeletePVar(i, "WeedSmoked");
		        SendClientMessageEx(i, COLOR_WHITE, "The effects of the marijuana begin to slowly fade away, giving you the urge to reconsume it again.");
            }
		}
	}
	gettime(WorldTime[0], WorldTime[1], WorldTime[2]);
}

////////////////////////////////////////////////////////////////////////////////////////////////

CMD:ah(playerid, params[]) return cmd_ahelp(playerid, params);
CMD:acmds(playerid, params[]) return cmd_ahelp(playerid, params);
CMD:ahelp(playerid, params[])
{
	if(!IsAdmin(playerid, ADMIN_LEVEL_MODERATOR)) return SendClientMessageEx(playerid, COLOR_GREY, "You are not an admin.");
	SendClientMessageEx(playerid, COLOR_ORANGE, "-------------------------------------------------------------------");
	if(PlayerInfo[playerid][pAdminLevel] == ADMIN_LEVEL_MODERATOR)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "As a {FFFF00}Server Moderator{FFFFFF}, you are to help players on /helpme.");
		SendClientMessageEx(playerid, COLOR_WHITE, "You are authorized to enforce the rules and punish players who break rules.");
		SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}Server Moderator:{FFFFFF} /c, /kick, /jail");
	}
    if(PlayerInfo[playerid][pAdminLevel] >= ADMIN_LEVEL_TRIALADMIN)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "{9370DB}Trial Admin{FFFFFF}: /a, /c, /kick, /jail, /mute, /ban, /oban, /setint, /setvw, /slap, /freeze, /unfreeze");
		SendClientMessageEx(playerid, COLOR_WHITE, "{9370DB}Trial Admin{FFFFFF}: /sendtols, /gotoid, /gethere, /goto, /gotoco, /gotoplant, /getcar, /gotocar");
		SendClientMessageEx(playerid, COLOR_WHITE, "{9370DB}Trial Admin{FFFFFF}: /setskin, /spectate, /ar, /cr, /tr, /reports, /sobeitplayers, /tabbed, /revive");
	}
    if(PlayerInfo[playerid][pAdminLevel] >= ADMIN_LEVEL_JUNIORADMIN)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "{7CFC00}Junior Admin{FFFFFF}: /unmute, /release, /sethp, /check, /uncuff, /ip, /jetpack, /setfire");
	}
    if(PlayerInfo[playerid][pAdminLevel] >= ADMIN_LEVEL_SENIORADMIN)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "{F4A460}Senior Admin{FFFFFF}: /respawnvehicles, /unban, /setarmor, /agivelicense, /givegun");
		SendClientMessageEx(playerid, COLOR_WHITE, "{F4A460}Senior Admin{FFFFFF}: /makeleader, /fmakeleader, /removeleader, /editfamily, /setweather");
	}
	if(PlayerInfo[playerid][pAdminLevel] >= ADMIN_LEVEL_LEADADMIN)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "{FF0000}Lead Admin{FFFFFF}: /setname, /addwaypoint, /editwaypoint, /addbusiness, /editbusiness, /businessids");
		SendClientMessageEx(playerid, COLOR_WHITE, "{FF0000}Lead Admin{FFFFFF}: /createpvehicle, /destroypvehicle, /addhouse, /edithouse, /addgate, /editgate, /gates");
		SendClientMessageEx(playerid, COLOR_WHITE, "{FF0000}Lead Admin{FFFFFF}: /givecash, /makehitman, /payday, /makeadmin, /setstat, /saveaccounts, /restart");
	}
	SendClientMessageEx(playerid, COLOR_ORANGE, "-------------------------------------------------------------------");
	return 1;
}

CMD:grantgunlicense(playerid, params[])
{
	if(IsACop(playerid) && PlayerInfo[playerid][pLeadership] == 1)
	{
	    new targetid, string[128];
	    if(sscanf(params, "u", targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /grantgunlicense <playerid>");
	    else if(!IsPlayerConnectedEx(targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
	    else if(PlayerInfo[targetid][pGunLicense] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "The specified player already has a gun license.");
	    PlayerInfo[targetid][pGunLicense] = 1;
	    format(string, sizeof(string), "You are hereby granted a license to purchase weapons from ammunation stores by %s.", GetPlayerNameEx(playerid));
	    SendClientMessageEx(targetid, COLOR_LIGHTBLUE, string);
	    format(string, sizeof(string), "You have granted %s a license to purchase weapons from ammunation stores.", GetPlayerNameEx(targetid));
	    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
	    printf("%s has granted %s a gun license.", GetPlayerNameEx(playerid), GetPlayerNameEx(targetid));
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GREY, "You must have leadership of a Law Enforcement Organization to use this command.");
	}
	return 1;
}

CMD:revokegunlicense(playerid, params[])
{
	if(IsACop(playerid) && PlayerInfo[playerid][pLeadership] == 1)
	{
	    new targetid, string[128];
	    if(sscanf(params, "u", targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /revokegunlicense <playerid>");
	    else if(!IsPlayerConnectedEx(targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
	    else if(PlayerInfo[targetid][pGunLicense] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "The specified player doesn't have a gun license.");
	    PlayerInfo[targetid][pGunLicense] = 0;
	    format(string, sizeof(string), "Your gun license has been revoked by %s, you will not be able to purchase guns from ammunation.", GetPlayerNameEx(playerid));
	    SendClientMessageEx(targetid, COLOR_LIGHTBLUE, string);
	    format(string, sizeof(string), "You have revoked %s's gun license, they will not be able to purchase guns from ammunation.", GetPlayerNameEx(targetid));
	    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
	    printf("%s has revoked %s's gun license.", GetPlayerNameEx(playerid), GetPlayerNameEx(targetid));
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "You must have leadership of a Law Enforcement Organization to use this command.");
	return 1;
}

CMD:agivelicense(playerid, params[])
{
	if(IsAdmin(playerid, ADMIN_LEVEL_JUNIORADMIN))
	{
	    new option[8], targetid, string[128];
	    if(sscanf(params, "us[8]", targetid, option)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /agivelicense <playerid> <weapon, driver>");
		else if(!IsPlayerConnectedEx(targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");

		if(!strcmp(option, "weapon", true))
		{
			if(PlayerInfo[targetid][pGunLicense] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "The specified player already has a gun license.");
			format(string, sizeof(string), "You have been given a gun license from Administrator %s.", GetPlayerNameEx(playerid));
		    SendClientMessageEx(targetid, COLOR_LIGHTBLUE, string);
		    format(string, sizeof(string), "You have given %s's a gun license.", GetPlayerNameEx(targetid));
		    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
	 		PlayerInfo[targetid][pGunLicense] = 1;
		}
		else if(!strcmp(option, "driver", true))
		{
			if(PlayerInfo[targetid][pDriverLicense] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "The specified player already has a drivers license.");
			format(string, sizeof(string), "You have been given a drivers license from Administrator %s.", GetPlayerNameEx(playerid));
		    SendClientMessageEx(targetid, COLOR_LIGHTBLUE, string);
		    format(string, sizeof(string), "You have given %s's a drivers license.", GetPlayerNameEx(targetid));
		    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
	 		PlayerInfo[targetid][pDriverLicense] = 1;
		}
	}
	return 1;
}

CMD:addbusiness(playerid, params[])
{
    if(IsAdmin(playerid, ADMIN_LEVEL_LEADADMIN))
	{
	    new b = GetAvailableBusiness(), szQuery[256];

		if(b == INVALID_BUSINESS_ID) return SendClientMessageEx(playerid, COLOR_GREY, "You were unable to allocate a business because the number of businesses have reached the limit.");
		
		format(BusinessInfo[b][bName], 16, "None"); format(BusinessInfo[b][bOwner], MAX_PLAYER_NAME, "None"); BusinessInfo[b][bInterior] = 1;
		BusinessInfo[b][bPosition][0] = 0; BusinessInfo[b][bPosition][1] = 0; BusinessInfo[b][bPosition][2] = 0; BusinessInfo[b][bVirtualWorld] = GetAvailableVirtualWorld();
		BusinessInfo[b][bOpen] = 1; BusinessInfo[b][bFacingAngle] = 0; BusinessInfo[b][bBuyPrice] = 1; BusinessInfo[b][bEarnings] = 0; BusinessInfo[b][bExistant] = 1;

	    format(szQuery, sizeof(szQuery), "INSERT INTO `businesses` VALUES ('%d','None','None','%d','0','0','0','0','0','0','%d','1');", b, BusinessInfo[b][bBuyPrice], BusinessInfo[b][bVirtualWorld]);
		mysql_query(szQuery, THREAD_LOG_RESULT, playerid, mConnectionHandle);

		format(szQuery, sizeof(szQuery), "You have successfully added a business! Type /editbusiness %d to complete business creation.", b);
		SendClientMessageEx(playerid, COLOR_WHITE, szQuery);
	}
	return 1;
}

CMD:saveaccounts(playerid, params[])
{
	if(IsAdmin(playerid, ADMIN_LEVEL_LEADADMIN))
	{
	    foreach (new i: Player)
	    {
	    	SavePlayerAccount(i, mConnectionHandle);
	    }
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have launched a full server account save, be aware that this is automatically done every 30 seconds.");
	}
	return 1;
}

CMD:addhouse(playerid, params[])
{
    if(IsAdmin(playerid, ADMIN_LEVEL_LEADADMIN))
	{
	    new
	        h = GetAvailableHouse(),
			szQuery[256];

		if(h == INVALID_HOUSE_ID) return SendClientMessageEx(playerid, COLOR_GREY, "You were unable to allocate a house because the number of houses have reached the limit.");

		format(HouseInfo[h][hOwner], MAX_PLAYER_NAME, "None"); HouseInfo[h][hInterior] = 1;
		HouseInfo[h][hPosition][0] = 0; HouseInfo[h][hPosition][1] = 0; HouseInfo[h][hPosition][2] = 0; HouseInfo[h][hVirtualWorld] = GetAvailableVirtualWorld();
		HouseInfo[h][hOpen] = 0; HouseInfo[h][hFacingAngle] = 0; HouseInfo[h][hBuyPrice] = 1; HouseInfo[h][hExistant] = 1;

	    format(szQuery, sizeof(szQuery), "INSERT INTO `houses` VALUES ('%d','None','%d','0','0','0','0','%d','1');", h, HouseInfo[h][hBuyPrice], HouseInfo[h][hVirtualWorld]);
		mysql_query(szQuery, THREAD_LOG_RESULT, playerid, mConnectionHandle);

		format(szQuery, sizeof(szQuery), "You have successfully added a house! Type /edithouse %d to complete house creation.", h);
		SendClientMessageEx(playerid, COLOR_WHITE, szQuery);
	}
	return 1;
}

CMD:editbusiness(playerid, params[])
{
    if(IsAdmin(playerid, ADMIN_LEVEL_LEADADMIN))
	{
 		new
			string[512],
			b;

	    if(sscanf(params, "i", b)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /editbusiness <id>");
	    else if(b < 1 || b > MAX_BUSINESSES) return SendClientMessageEx(playerid, COLOR_GREY, "You have entered an invalid business id, please enter a valid one.");
	    else if(BusinessInfo[b][bExistant] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "You have entered an invalid business id, please enter a valid one.");

        BusinessEdit[playerid] = b;

	    format(string, sizeof(string), "Rename (%s)\n\
		Business PosX (%f)\n\
		Business PosY (%f)\n\
		Business PosZ (%f)\n\
		Business Interior (%d)\n\
		Business Virtual World (%d)\n", BusinessInfo[b][bName], BusinessInfo[b][bPosition][0], BusinessInfo[b][bPosition][1], BusinessInfo[b][bPosition][2], BusinessInfo[b][bInterior], BusinessInfo[b][bVirtualWorld]);

		format(string, sizeof(string), "%sDelete Business\n\
		Teleport to Business\n\
		Teleport to Interior\n\
		Place Business Here\n\
		Edit Ownership\n\
		Edit Buying Price", string);

		ShowPlayerDialogEx(playerid, DIALOG_BUSINESS_ADMIN, DIALOG_STYLE_LIST, "{FFFFFF}Business Editor", string, "Edit", "Cancel");
		format(string, sizeof(string), "You are now editing business %d, all changes will be saved automatically.", b);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
    }
    return 1;
}

CMD:edithouse(playerid, params[])
{
    if(IsAdmin(playerid, ADMIN_LEVEL_LEADADMIN))
	{
 		new
			string[512],
			h;

	    if(sscanf(params, "i", h)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /edithouse <id>");
	    else if(h < 1 || h > MAX_HOUSES) return SendClientMessageEx(playerid, COLOR_GREY, "You have entered an invalid house id, please enter a valid one.");
	    else if(HouseInfo[h][hExistant] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "You have entered an invalid house id, please enter a valid one.");

        HouseEdit[playerid] = h;

	    format(string, sizeof(string), "House PosX (%f)\n\
		House PosY (%f)\n\
		House PosZ (%f)\n\
		House Interior (%d)\n\
		House Virtual World (%d)\n", HouseInfo[h][hPosition][0], HouseInfo[h][hPosition][1], HouseInfo[h][hPosition][2], HouseInfo[h][hInterior], HouseInfo[h][hVirtualWorld]);

		format(string, sizeof(string), "%sDelete House\n\
		Teleport to House\n\
		Teleport to Interior\n\
		Place House Here\n\
		Edit Ownership\n\
		Edit Buying Price", string);

		ShowPlayerDialogEx(playerid, DIALOG_HOUSE_ADMIN, DIALOG_STYLE_LIST, "{FFFFFF}House Editor", string, "Edit", "Cancel");
		format(string, sizeof(string), "You are now editing house %d, all changes will be saved automatically.", h);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
	}
	return 1;
}

CMD:addwaypoint(playerid, params[])
{
    if(IsAdmin(playerid, ADMIN_LEVEL_LEADADMIN))
	{
	    new
	        i = GetAvailableWaypoint(),
			szQuery[256];

		if(i == INVALID_WAYPOINT_ID) return SendClientMessageEx(playerid, COLOR_GREY, "You were unable to allocate a waypoint because the number of waypoints have reached the limit.");

	    format(szQuery, sizeof(szQuery), "INSERT INTO `waypoints` VALUES ('%d','None','None','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0');", i);
		mysql_query(szQuery, THREAD_LOG_RESULT, playerid, mConnectionHandle);

		format(WaypointInfo[i][wTextDisplay], 64, "None"); format(WaypointInfo[i][wPassword], 8, "None"); WaypointInfo[i][wInterior] = 0;
		WaypointInfo[i][wPosition][0] = 0; WaypointInfo[i][wPosition][1] = 0; WaypointInfo[i][wPosition][2] = 0; WaypointInfo[i][wDestInterior] = 0;
		WaypointInfo[i][wDestPosition][0] = 0; WaypointInfo[i][wDestPosition][1] = 0; WaypointInfo[i][wDestPosition][2] = 0;
		WaypointInfo[i][wVirtualWorld] = 0; WaypointInfo[i][wDestVirtualWorld] = 0; WaypointInfo[i][wExistant] = 1; WaypointInfo[i][wLocked] = 0;
		WaypointInfo[i][wFactionRestriction] = 0;
		
		format(szQuery, sizeof(szQuery), "You have successfully added a waypoint! Type /editwaypoint %d to complete the waypoint.", i);
		SendClientMessageEx(playerid, COLOR_WHITE, szQuery);
	}
	return 1;
}

CMD:editwaypoint(playerid, params[])
{
    if(IsAdmin(playerid, ADMIN_LEVEL_LEADADMIN))
	{
 		new
			string[768],
			i;
	
	    if(sscanf(params, "i", i)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /editwaypoint <id>");
	    else if(i < 1 || i > MAX_WAYPOINTS) return SendClientMessageEx(playerid, COLOR_GREY, "You have entered an invalid waypoint id, please enter a valid one.");
	    else if(WaypointInfo[i][wExistant] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "You have entered an invalid waypoint id, please enter a valid one.");

        WaypointEditing[playerid] = i;
        
	    format(string, sizeof(string), "Rename (%s)\n\
		Entrance PosX (%f)\n\
		Entrance PosY (%f)\n\
		Entrance PosZ (%f)\n\
		Entrance Interior (%d)\n\
		Entrance Virtual World (%d)\n", WaypointInfo[i][wTextDisplay], WaypointInfo[i][wPosition][0], WaypointInfo[i][wPosition][1], WaypointInfo[i][wPosition][2], WaypointInfo[i][wInterior], WaypointInfo[i][wVirtualWorld]);
		
		format(string, sizeof(string), "%sDestination PosX (%f)\n\
		Destination PosY (%f)\n\
		Destination PosZ (%f)\n\
		Destination Interior (%d)\n\
		Destination Virtual World (%d)\n\
	    Delete Waypoint\n\
		Teleport to Entrance\n\
		Teleport to Destination\n\
		Place Entrance Here\n\
		Place Destination Here\n", string, WaypointInfo[i][wDestPosition][0], WaypointInfo[i][wDestPosition][1], WaypointInfo[i][wDestPosition][2], WaypointInfo[i][wDestInterior], WaypointInfo[i][wDestVirtualWorld]);

		format(string, sizeof(string), "%sSet Entrance Load Time\n\
		Set Destination Load Time\n\
		Change Password\n\
		Lock/Unlock Waypoint\n\
		Set Faction Restriction", string);

		ShowPlayerDialogEx(playerid, DIALOG_WAYPOINT_EDIT, DIALOG_STYLE_LIST, "{FFFFFF}Waypoint Editor", string, "Edit", "Cancel");
		format(string, sizeof(string), "You are now editing waypoint %d, all changes will be saved automatically.", i);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
    }
    return 1;
}

CMD:editfamily(playerid, params[])
{
    if(IsAdmin(playerid, ADMIN_LEVEL_SENIORADMIN))
	{
 		new string[512], i;

	    if(sscanf(params, "i", i)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /editfamily <id>");
	    else if(i < 1 || i > MAX_FAMILIES) return SendClientMessageEx(playerid, COLOR_GREY, "You have entered an invalid family id, please enter a valid one.");

        FamilyEdit[playerid] = i;

	    format(string, sizeof(string), "Rename (%s)\n\
		Edit Motd\n\
		Edit Rank 1 (%s)\n\
		Edit Rank 2 (%s)\n\
		Edit Rank 3 (%s)\n\
		Edit Rank 4 (%s)\n\
		Edit Rank 5 (%s)\n\
		Edit Rank 6 (%s)\n\
		Place Safe\n\
		Clear", FamilyInfo[i][fName], FamilyInfo[i][fRank1], FamilyInfo[i][fRank2], FamilyInfo[i][fRank3], FamilyInfo[i][fRank4], FamilyInfo[i][fRank5], FamilyInfo[i][fRank6]);

		ShowPlayerDialogEx(playerid, DIALOG_FAMILY_ADMIN, DIALOG_STYLE_LIST, "{FFFFFF}Family Editor", string, "Edit", "Cancel");
		format(string, sizeof(string), "You are now editing family %d, all changes will be saved automatically.", i);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
    }
	return 1;
}

CMD:hgate(playerid, params[])
{
	for (new i=1; i < MAX_GATES; i++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 8.0, GateInfo[i][gPosition][0], GateInfo[i][gPosition][1], GateInfo[i][gPosition][2]) || IsPlayerInRangeOfPoint(playerid, 8.0, GateInfo[i][gDestPosition][0], GateInfo[i][gDestPosition][1], GateInfo[i][gDestPosition][2]))
	    {
	        if(!strcmp(params, GateInfo[i][gPassword], true))
	        {
	            if(IsDynamicObjectMoving(GateInfo[i][gObjectHandle]))
	        		StopDynamicObject(GateInfo[i][gObjectHandle]);
	        		
				if(GateInfo[i][gSpeed] == 0)
				    return SendClientMessageEx(playerid, COLOR_WHITE, "This gate hasn't been configured to work properly, please seek an administrator for more information.");

		        switch (GateInfo[i][gState])
		        {
		            case 0:
		            {
		                GateInfo[i][gState] = 1;
		                MoveDynamicObject(GateInfo[i][gObjectHandle], GateInfo[i][gDestPosition][0], GateInfo[i][gDestPosition][1], GateInfo[i][gDestPosition][2], GateInfo[i][gSpeed], GateInfo[i][gDestRotation][0], GateInfo[i][gDestRotation][1], GateInfo[i][gDestRotation][2]);
		            }

		            case 1:
		            {
		                GateInfo[i][gState] = 0;
		                MoveDynamicObject(GateInfo[i][gObjectHandle], GateInfo[i][gPosition][0], GateInfo[i][gPosition][1], GateInfo[i][gPosition][2], GateInfo[i][gSpeed], GateInfo[i][gRotation][0], GateInfo[i][gRotation][1], GateInfo[i][gRotation][2]);
		            }
		        }
	        }
	        break;
	    }
	}
	return 1;
}

public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	if(GateEdit[playerid] != 0)
	{
	    if(response == EDIT_RESPONSE_FINAL)
	    {
	    	new
				id = GateEdit[playerid],
				method = GetPVarInt(playerid, "GateMethod");

			switch (method)
			{
			    case 1:
			    {
			        GateInfo[id][gPosition][0] = x;
			        GateInfo[id][gPosition][1] = y;
			        GateInfo[id][gPosition][2] = z;
			        GateInfo[id][gRotation][0] = rx;
					GateInfo[id][gRotation][1] = ry;
			        GateInfo[id][gRotation][2] = rz;
			        SendClientMessage(playerid, -1, "You have stopped editing the object, the position has successfully been saved.");
			        MySQL_Update_Gate(id);
	 				RecreateGateText(id);
			    }

			    case 2:
			    {
			        GateInfo[id][gDestPosition][0] = x;
			        GateInfo[id][gDestPosition][1] = y;
			        GateInfo[id][gDestPosition][2] = z;
			        GateInfo[id][gDestRotation][0] = rx;
			        GateInfo[id][gDestRotation][1] = ry;
			        GateInfo[id][gDestRotation][2] = rz;
			        GateInfo[id][gState] = 0;
			        SendClientMessage(playerid, -1, "You have stopped editing the object, the destination has successfully been saved.");
			        SetDynamicObjectPos(GateInfo[id][gObjectHandle], GateInfo[id][gPosition][0], GateInfo[id][gPosition][1], GateInfo[id][gPosition][2]);
			        SetDynamicObjectRot(GateInfo[id][gObjectHandle], GateInfo[id][gRotation][0], GateInfo[id][gRotation][1], GateInfo[id][gRotation][2]);
			        MySQL_Update_Gate(id);
	 				RecreateGateText(id);
			    }
			}
	    }
	    else if(response == EDIT_RESPONSE_CANCEL)
	    {
	    	new
				id = GateEdit[playerid];
    		SendClientMessage(playerid, -1, "You have cancelled editing the object, nothing has been saved.");
    		SetDynamicObjectPos(GateInfo[id][gObjectHandle], GateInfo[id][gPosition][0], GateInfo[id][gPosition][1], GateInfo[id][gPosition][2]);
      		SetDynamicObjectRot(GateInfo[id][gObjectHandle], GateInfo[id][gRotation][0], GateInfo[id][gRotation][1], GateInfo[id][gRotation][2]);
	    }
	}
}

CMD:addgate(playerid, params[])
{
    if(IsAdmin(playerid, ADMIN_LEVEL_LEADADMIN))
	{
	    new
	        g = GetAvailableGate(),
			szQuery[256];

		if(g == INVALID_GATE_ID) return SendClientMessageEx(playerid, COLOR_GREY, "You were unable to allocate a gate because the number of gates have reached the limit.");

		format(GateInfo[g][gPassword], 12, ""); GateInfo[g][gModel] = 971; GateInfo[g][gState] = 0; GateInfo[g][gSpeed] = 1;
		GetPlayerPos(playerid, GateInfo[g][gPosition][0], GateInfo[g][gPosition][1], GateInfo[g][gPosition][2]);
		GateInfo[g][gDestPosition][0] = 0; GateInfo[g][gDestPosition][1] = 0; GateInfo[g][gDestPosition][2] = 0;
		GateInfo[g][gRotation][0] = 0; GateInfo[g][gRotation][1] = 0; GateInfo[g][gRotation][2] = 0;
		GateInfo[g][gDestRotation][0] = 0; GateInfo[g][gDestRotation][1] = 0; GateInfo[g][gDestRotation][2] = 0;
		GateInfo[g][gObjectHandle] = CreateDynamicObject(GateInfo[g][gModel], GateInfo[g][gPosition][0], GateInfo[g][gPosition][1], GateInfo[g][gPosition][2], GateInfo[g][gRotation][0], GateInfo[g][gRotation][1], GateInfo[g][gRotation][2]);

	    format(szQuery, sizeof(szQuery), "INSERT INTO `gates` VALUES ('%d','0','0','0','0','0','0','0','0','0','0','0','0','%d','%s','0');", g, GateInfo[g][gModel], GateInfo[g][gPassword]);
		mysql_query(szQuery, THREAD_LOG_RESULT, playerid, mConnectionHandle);
		format(szQuery, sizeof(szQuery), "You have successfully added a gate! Type /editgate %d to complete gate creation.", g);
		SendClientMessageEx(playerid, COLOR_WHITE, szQuery);
	}
	return 1;
}

CMD:editgate(playerid, params[])
{
    if(IsAdmin(playerid, ADMIN_LEVEL_LEADADMIN))
	{
 		new string[512], i;

	    if(sscanf(params, "i", i)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /editgate <id>");
	    else if(i < 1 || i > MAX_GATES) return SendClientMessageEx(playerid, COLOR_GREY, "You have entered an invalid gate id, please enter a valid one.");
	    else if(!IsValidDynamicObject(GateInfo[i][gObjectHandle])) return SendClientMessageEx(playerid, COLOR_GREY, "You have specified an invalid gate id.");

	    format(string, sizeof(string), "Password (%s)\n\
	    Edit Model (%d)\n\
		Edit Gate Position\n\
		Bring Gate Here\n\
		Edit Gate Destination\n\
		Delete Gate\n\
		Edit Speed (%d)", GateInfo[i][gPassword], GateInfo[i][gModel], GateInfo[i][gSpeed]);
		ShowPlayerDialogEx(playerid, DIALOG_GATE_EDIT, DIALOG_STYLE_LIST, "{FFFFFF}Gate Editor", string, "Select", "Cancel");

        GateEdit[playerid] = i;
		format(string, sizeof(string), "You are now editing gate id %d, all changes will be saved automatically.", i);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
    }
    return 1;
}

CMD:enter(playerid, params[])
{
	if(IsPlayerRestricted(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this at this time.");
	else if(IsPlayerInAnyVehicle(playerid)) return 1;

	for (new w=1; w < MAX_WAYPOINTS; w++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 2.0, WaypointInfo[w][wPosition][0], WaypointInfo[w][wPosition][1], WaypointInfo[w][wPosition][2]))
	    {
	        if(GetPlayerVirtualWorld(playerid) == WaypointInfo[w][wVirtualWorld] && GetPlayerInterior(playerid) == WaypointInfo[w][wInterior])
	        {
	            if(WaypointInfo[w][wLocked] == 0)
	            {
	                if((WaypointInfo[w][wFactionRestriction] != 0 && PlayerInfo[playerid][pFaction] == WaypointInfo[w][wFactionRestriction]) || WaypointInfo[w][wFactionRestriction] == 0)
	                {
			            SetPlayerFacingAngle(playerid, WaypointInfo[w][wDestFacingAngle]);
				        SetPlayerVirtualWorldEx(playerid, WaypointInfo[w][wDestVirtualWorld]);
				        SetPlayerInteriorEx(playerid, WaypointInfo[w][wDestInterior]);
					    SetPlayerPos(playerid, WaypointInfo[w][wDestPosition][0], WaypointInfo[w][wDestPosition][1], WaypointInfo[w][wDestPosition][2]);
			            if(WaypointInfo[w][wDestLoadingTime] > 0)
			            {
							SetPVarInt(playerid, "ActionRestriction", 1);
							TogglePlayerControllable(playerid, false);
							TextDrawShowForPlayer(playerid, LoadingObjectTextDraw);
							TextDrawShowForPlayer(playerid, LoadingObjectBox);
							defer HideLoadingTextdraws[WaypointInfo[w][wDestLoadingTime] * 1000](playerid);
							SetCameraBehindPlayer(playerid);
						}
						Streamer_UpdateEx(playerid, WaypointInfo[w][wDestPosition][0], WaypointInfo[w][wDestPosition][1], WaypointInfo[w][wDestPosition][2]);
					}
					else SendClientMessageEx(playerid, COLOR_GREY, "This waypoint is restricted to factions, you cannot access it.");
					return 1;
	            }
	            else SendClientMessageEx(playerid, COLOR_GREY, "This waypoint is currently locked, you cannot access it.");
				return 1;
		    }
	    }
	}
	
	for (new b=1; b < MAX_BUSINESSES; b++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 2.0, BusinessInfo[b][bPosition][0],BusinessInfo[b][bPosition][1], BusinessInfo[b][bPosition][2]))
	    {
	        if((!BusinessInfo[b][bOpen] && IsBusinessOwner(b, playerid)) || BusinessInfo[b][bOpen])
	        {
    	    	if(BusinessInfo[b][bInterior] >= 1 && BusinessInfo[b][bInterior] <= 30)
	    		{
			   		new i = BusinessInfo[b][bInterior] - 1;
					SetPlayerVirtualWorldEx(playerid, BusinessInfo[b][bVirtualWorld]);
					SetPlayerInteriorEx(playerid, floatround(BusinessInterior[i][4]));
					SetPlayerPos(playerid, BusinessInterior[i][0], BusinessInterior[i][1], BusinessInterior[i][2]);
					SetPlayerFacingAngle(playerid, BusinessInterior[i][3]);
					SetCameraBehindPlayer(playerid);
					SendClientMessageEx(playerid, COLOR_WHITE, "You have entered a business! Use /buy to list the items available to be purchased.");
				}
				else SendClientMessageEx(playerid, COLOR_GREY, "An invalid interior is set for this business, please contact an administrator.");
			}
			else SendClientMessageEx(playerid, COLOR_GREY, "The business is currently closed, please check back later.");
			break;
	    }
	}

	for (new h=1; h < MAX_HOUSES; h++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[h][hPosition][0], HouseInfo[h][hPosition][1], HouseInfo[h][hPosition][2]))
	    {
	        if((!HouseInfo[h][hOpen] && IsHouseOwner(h, playerid)) || HouseInfo[h][hOpen])
	        {
    	    	if(HouseInfo[h][hInterior] >= 1 && HouseInfo[h][hInterior] <= 21)
	    		{
			   		new i = HouseInfo[h][hInterior] - 1;
					SetPlayerVirtualWorldEx(playerid, HouseInfo[h][hVirtualWorld]);
					SetPlayerInteriorEx(playerid, floatround(HouseInterior[i][4]));
					SetPlayerPos(playerid, HouseInterior[i][0], HouseInterior[i][1], HouseInterior[i][2]);
					SetPlayerFacingAngle(playerid, HouseInterior[i][3]);
					SetCameraBehindPlayer(playerid);
				}
				else SendClientMessageEx(playerid, COLOR_GREY, "An invalid interior is set for this house, please contact an administrator.");
			}
			else SendClientMessageEx(playerid, COLOR_GREY, "The door to the house is locked, but it appears that it can be broken down easily.");
			break;
	    }
	}
	return 1;
}

CMD:exit(playerid, params[])
{
	if(IsPlayerRestricted(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this at this time.");
	else if(IsPlayerInAnyVehicle(playerid)) return 1;

	for (new i=1; i < MAX_WAYPOINTS; i++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 2.0, WaypointInfo[i][wDestPosition][0], WaypointInfo[i][wDestPosition][1], WaypointInfo[i][wDestPosition][2]))
	    {
	        if(GetPlayerVirtualWorld(playerid) == WaypointInfo[i][wDestVirtualWorld] && GetPlayerInterior(playerid) == WaypointInfo[i][wDestInterior])
	        {
         		SetPlayerFacingAngle(playerid, WaypointInfo[i][wFacingAngle]);
	        	SetPlayerVirtualWorldEx(playerid, WaypointInfo[i][wVirtualWorld]);
     			SetPlayerInteriorEx(playerid, WaypointInfo[i][wInterior]);
				SetPlayerPos(playerid, WaypointInfo[i][wPosition][0], WaypointInfo[i][wPosition][1], WaypointInfo[i][wPosition][2]);
		        if(WaypointInfo[i][wLoadingTime] > 0)
		        {
					TogglePlayerControllable(playerid, false);
					SetPVarInt(playerid, "ActionRestriction", 1);
					TextDrawShowForPlayer(playerid, LoadingObjectTextDraw);
					TextDrawShowForPlayer(playerid, LoadingObjectBox);
					defer HideLoadingTextdraws[WaypointInfo[i][wLoadingTime] * 1000](playerid);
				}
				SetCameraBehindPlayer(playerid);
			    return 1;
		    }
	    }
	}
	
	for (new b=1; b < MAX_BUSINESSES; b++)
	{
	    if(BusinessInfo[b][bInterior] >= 1 && BusinessInfo[b][bInterior] <= 30)
	    {
			new i = BusinessInfo[b][bInterior] - 1;
		    if(IsPlayerInRangeOfPoint(playerid, 2.0, BusinessInterior[i][0], BusinessInterior[i][1], BusinessInterior[i][2]))
		    {
		        if(GetPlayerVirtualWorld(playerid) == BusinessInfo[b][bVirtualWorld])
		        {
					SetPlayerVirtualWorldEx(playerid, 0);
					SetPlayerInteriorEx(playerid, 0);
					SetPlayerPos(playerid, BusinessInfo[b][bPosition][0], BusinessInfo[b][bPosition][1], BusinessInfo[b][bPosition][2]);
					SetPlayerFacingAngle(playerid, BusinessInfo[b][bFacingAngle]);
					SetCameraBehindPlayer(playerid);
					break;
				}
		    }
	    }
	}
	
	for (new h=1; h < MAX_HOUSES; h++)
	{
	    if(HouseInfo[h][hInterior] >= 1 && HouseInfo[h][hInterior] <= 21)
	    {
			new
				i = HouseInfo[h][hInterior] - 1;
		    if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInterior[i][0], HouseInterior[i][1], HouseInterior[i][2]))
		    {
		        if(GetPlayerVirtualWorld(playerid) == HouseInfo[h][hVirtualWorld])
		        {
					SetPlayerVirtualWorldEx(playerid, 0);
					SetPlayerInteriorEx(playerid, 0);
					SetPlayerPos(playerid, HouseInfo[h][hPosition][0], HouseInfo[h][hPosition][1], HouseInfo[h][hPosition][2]);
					SetPlayerFacingAngle(playerid, HouseInfo[h][hFacingAngle]);
					SetCameraBehindPlayer(playerid);
					break;
				}
		    }
	    }
	}
	
	if(SpectatingAdmin[playerid] != INVALID_PLAYER_ID)
	{
    	if(SpectatingPlayer[SpectatingAdmin[playerid]] == playerid)
     	{
	    	PlayerSpectatePlayer(SpectatingAdmin[playerid], playerid);
     	    SetPlayerInterior(SpectatingAdmin[playerid], GetPlayerInterior(playerid));
     	    SetPlayerVirtualWorld(SpectatingAdmin[playerid], GetPlayerVirtualWorld(playerid));
		}
	}
	return 1;
}

CMD:buyhouse(playerid, params[])
{
	new h = GetNearHouse(playerid), string[128];
	if(h == INVALID_HOUSE_ID) return SendClientMessageEx(playerid, COLOR_GREY, "You must be at the entrance of a house to use this command.");
	else if(HouseInfo[h][hBuyPrice] <= 0) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot buy this house because it has been disabled by an Administrator.");

	if(!strcmp(HouseInfo[h][hOwner], "none", true))
	{
	    if(HouseInfo[h][hBuyPrice] > PlayerInfo[playerid][pMoney]) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot afford this house.");
	    GivePlayerCash(playerid, -HouseInfo[h][hBuyPrice]);
	    format(HouseInfo[h][hOwner], MAX_PLAYER_NAME, "%s", PlayerInfo[playerid][pUsername]);
	    format(string, sizeof(string), "You have purchased this house for $%d, type /househelp for more information.", HouseInfo[h][hBuyPrice]);
	    SendClientMessage(playerid, COLOR_WHITE, string);
	    printf("[House]: %s has purchased house %d for $%d.", PlayerInfo[playerid][pUsername], h, HouseInfo[h][hBuyPrice]);
		format(string, sizeof(string), "UPDATE `houses` SET `Owner` = '%s' WHERE `Id` = '%d'", HouseInfo[h][hOwner], h);
		mysql_query(string, THREAD_LOG_RESULT, playerid, mConnectionHandle);
		RecreateHouseText(h);
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GREY, "This house is already owned by someone else.");
	}
	return 1;
}

CMD:sellhouse(playerid, params[])
{
	new h = GetNearHouse(playerid), string[128];
	if(h == INVALID_HOUSE_ID) return SendClientMessageEx(playerid, COLOR_GREY, "You must be at the entrance of a house to use this command.");

	if(!strcmp(HouseInfo[h][hOwner], PlayerInfo[playerid][pUsername], true))
	{
	    GivePlayerCash(playerid, HouseInfo[h][hBuyPrice]);
	    format(HouseInfo[h][hOwner], MAX_PLAYER_NAME, "None");
	    format(string, sizeof(string), "You have sold this house for $%d.", HouseInfo[h][hBuyPrice]);
	    SendClientMessage(playerid, COLOR_WHITE, string);
	    printf("[House]: %s has purchased business %d for $%d.", PlayerInfo[playerid][pUsername], h, HouseInfo[h][hBuyPrice]);
		format(string, sizeof(string), "UPDATE `houses` SET `Owner` = '%s' WHERE `Id` = '%d'", HouseInfo[h][hOwner], h);
		mysql_query(string, THREAD_LOG_RESULT, playerid, mConnectionHandle);
		RecreateHouseText(h);
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GREY, "You don't own this house.");
	}
	return 1;
}

CMD:buybiz(playerid, params[])
{
	new b = GetNearBusiness(playerid), string[128];
	if(b == INVALID_BUSINESS_ID) return SendClientMessageEx(playerid, COLOR_GREY, "You must be at the entrance of a business to use this command.");
	else if(BusinessInfo[b][bBuyPrice] <= 0) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot buy this business because it has been disabled by an Administrator.");

	if(!strcmp(BusinessInfo[b][bOwner], "none", true))
	{
	    if(BusinessInfo[b][bBuyPrice] > PlayerInfo[playerid][pMoney]) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot afford this business.");
	    GivePlayerCash(playerid, -BusinessInfo[b][bBuyPrice]);
	    format(BusinessInfo[b][bOwner], MAX_PLAYER_NAME, "%s", PlayerInfo[playerid][pUsername]);
	    format(string, sizeof(string), "You have purchased this business for $%d, type /business to manage your business.", BusinessInfo[b][bBuyPrice]);
	    SendClientMessage(playerid, COLOR_WHITE, string);
	    printf("[Business]: %s has purchased the business %s for $%d.", PlayerInfo[playerid][pUsername], BusinessInfo[b][bName], BusinessInfo[b][bBuyPrice]);
		format(string, sizeof(string), "UPDATE `businesses` SET `Owner` = '%s' WHERE `Id` = '%d'", BusinessInfo[b][bOwner], b);
		mysql_query(string, THREAD_LOG_RESULT, playerid, mConnectionHandle);
		RecreateBusinessText(b);
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GREY, "This business is already owned by someone else.");
	}
	return 1;
}

CMD:sellbiz(playerid, params[])
{
	new b = GetNearBusiness(playerid), string[128];
	if(b == INVALID_BUSINESS_ID) return SendClientMessageEx(playerid, COLOR_GREY, "You must be at the entrance of a business to use this command.");

	if(!strcmp(BusinessInfo[b][bOwner], PlayerInfo[playerid][pUsername], true))
	{
	    GivePlayerCash(playerid, BusinessInfo[b][bBuyPrice]);
	    format(BusinessInfo[b][bOwner], MAX_PLAYER_NAME, "None");
	    format(string, sizeof(string), "You have sold this business for $%d, type /business to manage your business.", BusinessInfo[b][bBuyPrice]);
	    SendClientMessage(playerid, COLOR_WHITE, string);
	    printf("[Business]: %s has purchased the business %s for $%d.", PlayerInfo[playerid][pUsername], BusinessInfo[b][bName], BusinessInfo[b][bBuyPrice]);
		format(string, sizeof(string), "UPDATE `businesses` SET `Owner` = '%s' WHERE `Id` = '%d'", BusinessInfo[b][bOwner], b);
		mysql_query(string, THREAD_LOG_RESULT, playerid, mConnectionHandle);
		RecreateBusinessText(b);
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GREY, "You don't own this business.");
	}
	return 1;
}

CMD:business(playerid, params[])
{
	new b = GetNearBusiness(playerid);
	if(b == INVALID_BUSINESS_ID) return SendClientMessageEx(playerid, COLOR_GREY, "You must be at the entrance of a business to use this command.");
	else if(!IsBusinessOwner(b, playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You do not own the business that you are nearest to.");
	BusinessEdit[playerid] = b;
    ShowPlayerDialogEx(playerid, DIALOG_BUSINESS_EDIT, DIALOG_STYLE_LIST, "{FFFFFF}Business - Management", "{FFFFFF}Rename\nOpen/Close\nCollect Earnings", "Select", "Cancel");
	return 1;
}

CMD:houselock(playerid, params[])
{
	new
		h = GetNearHouse(playerid),
		string[128];
	if(h == INVALID_HOUSE_ID) return SendClientMessageEx(playerid, COLOR_GREY, "You must be at the entrance of your house to use this command.");
	else if(!IsHouseOwner(h, playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You do not own the house that you are nearest to.");
	if(HouseInfo[h][hOpen])
	{
		HouseInfo[h][hOpen] = 0;
		SendClientMessageEx(playerid, COLOR_WHITE, "You have locked your house, no one will now be able to access it except you.");
		format(string, sizeof(string), "* %s withdraws their house keys and locks the house.", GetPlayerNameEx(playerid));
	} else {
		HouseInfo[h][hOpen] = 1;
		SendClientMessageEx(playerid, COLOR_WHITE, "You have unlocked your house, everyone will now be able to access it.");
		format(string, sizeof(string), "* %s withdraws their house keys and unlocks the house.", GetPlayerNameEx(playerid));
	}
	ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	return 1;
}

CMD:waypointlock(playerid, params[])
{
	new
		w = GetNearWaypoint(playerid),
		string[128];
	if(w == INVALID_WAYPOINT_ID) return SendClientMessageEx(playerid, COLOR_GREY, "You must be at the entrance of the waypoint to use this command.");
	else if(strlen(params) > 8) return SendClientMessageEx(playerid, COLOR_GREY, "The password must be under or at 8 characters.");
	else if(sscanf(params, "{s[8]}")) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /waypointlock [password]");

	if(!strcmp(WaypointInfo[w][wPassword], params, true))
	{
		if(WaypointInfo[w][wLocked] == 1)
		{
			WaypointInfo[w][wLocked] = 0;
			SendClientMessageEx(playerid, COLOR_WHITE, "You have unlocked the waypoint, everyone will now be able to access it.");
		} else {
			WaypointInfo[w][wLocked] = 1;
			SendClientMessageEx(playerid, COLOR_WHITE, "You have locked the waypoint, no one will now be able to access it.");
		}
		format(string, sizeof(string), "UPDATE `waypoints` SET `Locked` = '%d' WHERE `Id` = '%d'", WaypointInfo[w][wLocked], w);
		mysql_query(string, THREAD_NO_RESULT, playerid, mConnectionHandle);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You have entered an invalid password.");
	}
	return 1;
}

CMD:restart(playerid, params[])
{
    if(IsAdmin(playerid, ADMIN_LEVEL_LEADADMIN))
	{
        new string[128];
	    foreach (new i: Player) SavePlayerAccount(i, mConnectionHandle);
        format(string, sizeof(string), "AdmCmd: %s has announced a server restart, please wait while the updates are being implemented.", GetPlayerNameEx(playerid));
		SendClientMessageToAllEx(COLOR_LIGHTRED, string);
		SendRconCommand("gmx");
    }
	else SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use this command.");
    return 1;
}

CMD:pay(playerid, params[])
{
	new targetid, cash, string[128];
  	if(sscanf(params, "ud", targetid, cash)) SendClientMessageEx(playerid, COLOR_GREY, "Usage: /pay <playerid> <amount>");
   	else if(!IsPlayerConnectedEx(targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
   	else if(targetid == playerid) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot use this command on yourself.");
	else if(!IsPlayerInRangeOfPlayer(playerid, targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "You must be near the specified player to use this command.");
   	else if(cash < 1 || cash > PlayerInfo[playerid][pMoney]) return SendClientMessageEx(playerid, COLOR_GREY, "You have entered an invalid amount.");
   	else
   	{
   	    GivePlayerCash(playerid, -cash);
   	    GivePlayerCash(targetid, cash);
     	format(string, sizeof(string), " *  You have sent $%d to (ID: %d) %s.", cash, targetid, GetPlayerNameEx(targetid));
     	SendClientMessageEx(playerid, COLOR_GREY, string);
    	format(string, sizeof(string), " *  You have received $%d from (ID: %d) %s.", cash, playerid, GetPlayerNameEx(playerid));
		SendClientMessageEx(targetid, COLOR_GREY, string);
		format(string, sizeof(string), "* %s withdraws some cash, and hands it over to %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(targetid));
   		ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		format(string, sizeof(string), "[Pay]: %s has given $%d to %s.", PlayerInfo[playerid][pUsername], cash, PlayerInfo[targetid][pUsername]);
		Log("logs/pay.log", string);
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		PlayerPlaySound(targetid, 1052, 0.0, 0.0, 0.0);
  	}
  	return 1;
}

CMD:eject(playerid, params[])
{
	new targetid, string[128];
  	if(sscanf(params, "u", targetid)) SendClientMessageEx(playerid, COLOR_GREY, "Usage: /eject <playerid>");
   	else if(!IsPlayerConnectedEx(targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
   	else if(targetid == playerid) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot use this command on yourself..");
	else if(IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You must be inside a vehicle to use this command.");
	else if(GetPlayerVehicleSeat(playerid) != 0) return SendClientMessageEx(playerid, COLOR_GREY, "You must be the driver of the vehicle to use this command.");
	else if(GetPlayerVehicleID(playerid) != GetPlayerVehicleID(targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "The specified player is not inside your vehicle.");
   	else
   	{
     	format(string, sizeof(string), " *  You have ejected (ID: %d) %s from the vehicle.", targetid, GetPlayerNameEx(targetid));
     	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
     	format(string, sizeof(string), "You have been ejected from the vehicle by (ID: %d) %s.", playerid, GetPlayerNameEx(playerid));
     	SendClientMessageEx(targetid, COLOR_LIGHTBLUE, string);
     	RemovePlayerFromVehicleEx(targetid);
     	format(string, sizeof(string), "* %s has ejected %s from the vehicle.", GetPlayerNameEx(playerid), GetPlayerNameEx(targetid));
   		ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
  	}
  	return 1;
}

CMD:payday(playerid, params[])
{
    if(IsAdmin(playerid, ADMIN_LEVEL_LEADADMIN))
	{
        new string[128], option[8];
        if(sscanf(params, "s[32]", option))
        {
			return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /payday [confirm]");
        }
        if(!strcmp(option, "confirm", true))
        {
            format(string, sizeof(string), "AdmCmd: %s has announced a payday for everyone.", GetPlayerNameEx(playerid));
			SendClientMessageToAllEx(COLOR_LIGHTRED, string);
			InitiatePaycheck();
		}
    }
	else SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use this command.");
    return 1;
}

CMD:sellfish(playerid, params[])
{
	new
	    string[128];
	for (new i=0; i < 5; i++)
	{
		if(PlayerInfo[playerid][pFish][i] != 0)
	    {
	        new
	            amount = 0;
	        switch (PlayerInfo[playerid][pFish][i])
	        {
	            case 1:
	            {
	                amount = random(50) + 25;
	            }
	            
	            case 3:
	            {
             		amount = random(150) + 50;
	            }
	            
	            case 4:
	            {
	                amount = random(300) + 100;
	            }
	            
	            case 5:
	            {
	                amount = random(75) + 100;
	            }
	            
	            case 6:
	            {
	                amount = random(400) + 150;
	            }
	        }
	        format(string, sizeof(string), "You have sold a %s for $%d cash.", GetFishNameId(PlayerInfo[playerid][pFish][i]), amount);
	        SendClientMessage(playerid, COLOR_YELLOW, string);
	        GivePlayerCash(playerid, amount);
	        PlayerInfo[playerid][pFish][i] = 0;
	    }
	}
	return 1;
}

CMD:fish(playerid, params[])
{
	if(IsAtFishPlace(playerid))
	{
	    new
	        f = GetAvailableFishSlot(playerid),
			string[128];
		if(f == -1) return SendClientMessageEx(playerid, COLOR_GREY, " You cannot carry more than five fish at a time, /releasefish to release them.");
		else if(gettime() - PlayerInfo[playerid][pFishedAlready] < 0) return SendClientMessageEx(playerid, COLOR_GREY, " You can only catch a fish every 5 minutes.");

		switch (random(10))
		{
		    case 1:
		    {
			    PlayerInfo[playerid][pFish][f] = 1;
			    format(string, sizeof(string), "You have caught a trout, you can sell it to a 24/7 store using /sellfish for some money.");
		    }
		    
		    case 2:
		    {
		        new cashAmount = random(100) + 50;
			    format(string, sizeof(string), "You have caught a bag of money containing %d, it has been added to your inventory.", cashAmount);
			    GivePlayerCash(playerid, cashAmount);
		    }
		    
		    case 3:
		    {
			    PlayerInfo[playerid][pFish][f] = 3;
			    format(string, sizeof(string), "You have caught a shark, you can sell it to a 24/7 store using /sellfish for some money.");
		    }

		    case 4:
		    {
			    PlayerInfo[playerid][pFish][f] = 4;
			    format(string, sizeof(string), "You have caught a squid, you can sell it to a 24/7 store using /sellfish for some money.");
		    }
		    
		    case 5:
		    {
			    PlayerInfo[playerid][pFish][f] = 5;
			    format(string, sizeof(string), "You have caught a salmon, you can sell it to a 24/7 store using /sellfish for some money.");
		    }
		    
		    case 6:
		    {
			    PlayerInfo[playerid][pFish][f] = 6;
			    format(string, sizeof(string), "You have caught a Manta Ray, you can sell it to a 24/7 store using /sellfish for some money.");
		    }
		    
		    default:
		    {
			    format(string, sizeof(string), "The line snapped, you can try again in 5 minutes.");
		    }
		}
		SendClientMessageEx(playerid, COLOR_YELLOW, string);
  		PlayerInfo[playerid][pFishedAlready] = gettime() + 300;
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, " You must be at the Santa Maria Pier to use this command.");
	}
	return 1;
}

CMD:releasefish(playerid, params[])
{
	new slot, string[128];
	if(sscanf(params, "i", slot)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /releasefish <1-5>");
	else if(slot < 1 || slot > 5) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /releasefish <1-5>");
	else if(PlayerInfo[playerid][pFish][slot-1] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "You do not have any fish in that slot.");
	PlayerInfo[playerid][pFish][slot-1] = 0;
	format(string, sizeof(string), "You have just released the fish in slot %d.", slot);
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	return 1;
}

CMD:refill(playerid, params[])
{
	if(PlayerInfo[playerid][pGasCans] >= 1)
	{
	    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, " You must be inside a vehicle to use this command.");
	    else if(VehicleInfo[GetPlayerVehicleID(playerid)][vFuel] >= 100) return SendClientMessageEx(playerid, COLOR_GREY, " This car is already at full fuel, you cannot add anymore to it.");
		new
		    string[128];
		if(VehicleInfo[GetPlayerVehicleID(playerid)][vFuel] + 20 >= 100)
			VehicleInfo[GetPlayerVehicleID(playerid)][vFuel] = 100;
		else
			VehicleInfo[GetPlayerVehicleID(playerid)][vFuel] += 20;
		PlayerInfo[playerid][pGasCans]--;
		format(string, sizeof(string), "You have used the gas can on your vehicle, the fuel indicator indicates that you have %d percent of fuel remaining.", VehicleInfo[GetPlayerVehicleID(playerid)][vFuel]);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, " You do not have any gas cans to refill the vehicle.");
	}
	return 1;
}

CMD:sobeitplayers(playerid, params[])
{
	if(IsAdmin(playerid, ADMIN_LEVEL_TRIALADMIN))
	{
	    new string[128], bool:noHackers = true;
		SendClientMessageEx(playerid, COLOR_WHITE, "--------------------------------");
	    foreach (new i: Player)
	    {
	        if(GetPVarInt(i, "SobeitCheck") == 1)
			{
				format(string, sizeof(string), "(ID: %d) %s", i, GetPlayerNameEx(i));
				SendClientMessageEx(playerid, COLOR_GREY, string);
				noHackers = false;
			}
	    }
		if(noHackers) {
			SendClientMessageEx(playerid, COLOR_GREY, "There are no players online that are currently using s0beit.");
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "--------------------------------");
	}
	return 1;
}

CMD:tabbed(playerid, params[])
{
	if(IsAdmin(playerid, ADMIN_LEVEL_TRIALADMIN))
	{
	    new
	        string[128],
			noTabbed = 1;
		SendClientMessageEx(playerid, COLOR_WHITE, "--------------------------------");
	    foreach (new i: Player)
	    {
	        if(IsPlayerTabbed(i)) {
				format(string, sizeof(string), "(ID: %d) %s - %d seconds", i, GetPlayerNameEx(i), gettime() - LastUpdate[i]);
				SendClientMessageEx(playerid, COLOR_GREY, string);
				noTabbed = 0;
			}
	    }
		if(noTabbed == 1) {
			SendClientMessageEx(playerid, COLOR_GREY, "There are no players online that are currently tabbed.");
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "--------------------------------");
	}
	return 1;
}

CMD:car(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if(sscanf(params, "{s[32]}")) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /car [engine, lights, refuel, hood, trunk, status]");
    else if(!IsPlayerInAnyVehicle(playerid) || GetPlayerVehicleSeat(playerid) != 0) return SendClientMessageEx(playerid, COLOR_GREY, "You are not inside a vehicle.");
	else if(IsAStreetSweeper(vehicleid) || IsAPizzaBike(vehicleid) || IsADmvCar(vehicleid) || IsATruckerVehicle(vehicleid) || (WhoRentsVehicle(vehicleid) == INVALID_PLAYER_ID && IsARentableVehicle(vehicleid)) || !IsRunnableEngine(vehicleid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot use this command on this vehicle.");

	if(!strcmp(params, "engine"))
	{
	    if(VehicleInfo[vehicleid][vFuel] < FUEL_COST) return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Engine Failure:{FFFFFF} You cannot start the engine because the fuel tank is empty.");
    	else if(VehicleInfo[vehicleid][vTotalled]) return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Engine Failure:{FFFFFF} You cannot start the engine because it is damaged.");
	    else if(GetPVarInt(playerid, "EngineStarting") == 1) return SendClientMessageEx(playerid, COLOR_LIGHTRED, "The engine is currently starting...");

		if(VehicleInfo[vehicleid][vEngine] == 0)
	    {
     		SetPVarInt(playerid, "EngineStarting", 1);
		  	defer StartEngine(playerid, vehicleid);
			SendClientMessageEx(playerid, COLOR_WHITE, "Vehicle engine starting, please wait...");
	    }
	    else
	    {
		    GetVehicleParamsEx(vehicleid, VehicleInfo[vehicleid][vEngine], VehicleInfo[vehicleid][vLights], VehicleInfo[vehicleid][vAlarm], VehicleInfo[vehicleid][vDoors], VehicleInfo[vehicleid][vBonnet], VehicleInfo[vehicleid][vBoot], VehicleInfo[vehicleid][vObjective]);
			VehicleInfo[vehicleid][vEngine] = 0;
		    VehicleInfo[vehicleid][vLights] = 0;
			SetVehicleParamsEx(vehicleid, VehicleInfo[vehicleid][vEngine], VehicleInfo[vehicleid][vLights], VehicleInfo[vehicleid][vAlarm], VehicleInfo[vehicleid][vDoors], VehicleInfo[vehicleid][vBonnet], VehicleInfo[vehicleid][vBoot], VehicleInfo[vehicleid][vObjective]);
	    }
	}
	else if(!strcmp(params, "refuel"))
	{
		if(!IsPlayerAtFuelStation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You are not at a gas station.");
		else if(RefillAmount[playerid] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "Your vehicle is currently being refueled at the moment.");
    	else if(!IsPlayerInAnyVehicle(playerid) || GetPlayerVehicleSeat(playerid) != 0) return SendClientMessageEx(playerid, COLOR_GREY, "You are not inside a vehicle.");
		GetVehicleParamsEx(vehicleid, VehicleInfo[vehicleid][vEngine], VehicleInfo[vehicleid][vLights], VehicleInfo[vehicleid][vAlarm], VehicleInfo[vehicleid][vDoors], VehicleInfo[vehicleid][vBonnet], VehicleInfo[vehicleid][vBoot], VehicleInfo[vehicleid][vObjective]);
		if(VehicleInfo[GetPlayerVehicleID(playerid)][vEngine] == 1)
		{
			VehicleInfo[vehicleid][vEngine] = 0;
			VehicleInfo[vehicleid][vLights] = 0;
		 	SetVehicleParamsEx(vehicleid, VehicleInfo[vehicleid][vEngine], VehicleInfo[vehicleid][vLights], VehicleInfo[vehicleid][vAlarm], VehicleInfo[vehicleid][vDoors], VehicleInfo[vehicleid][vBonnet], VehicleInfo[vehicleid][vBoot], VehicleInfo[vehicleid][vObjective]);
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "You are currently refueling your vehicle, it will cost $1.10 per litre of fuel.");
		RefillAmount[playerid] = 1;
		RefuelTimer[playerid] = repeat RefuelVehicle(playerid, vehicleid);
	}
	else if(!strcmp(params, "status"))
	{
    	if(!IsPlayerInAnyVehicle(playerid) || GetPlayerVehicleSeat(playerid) != 0) return SendClientMessageEx(playerid, COLOR_GREY, "You are not inside a vehicle.");
	    new string[128];
		format(string, sizeof(string), "You have %d percent of fuel left inside your tank.", VehicleInfo[vehicleid][vFuel]);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		if(VehicleInfo[vehicleid][vTotalled]) SendClientMessageEx(playerid, COLOR_WHITE, "Your car is currently totalled, it is facing some serious engine damage.");
	}
	else if(!strcmp(params, "trunk"))
	{
	    if(!IsPlayerInAnyVehicle(playerid)) vehicleid = GetClosestCar(playerid);
		GetVehicleParamsEx(vehicleid, VehicleInfo[vehicleid][vEngine], VehicleInfo[vehicleid][vLights], VehicleInfo[vehicleid][vAlarm], VehicleInfo[vehicleid][vDoors], VehicleInfo[vehicleid][vBonnet], VehicleInfo[vehicleid][vBoot], VehicleInfo[vehicleid][vObjective]);
		if(VehicleInfo[vehicleid][vBoot])
		{
		    VehicleInfo[vehicleid][vBoot] = 0;
			SendClientMessageEx(playerid, COLOR_WHITE, "You have successfully closed the trunk of your car.");
		}
		else
		{
		    VehicleInfo[vehicleid][vBoot] = 1;
			SendClientMessageEx(playerid, COLOR_WHITE, "You have successfully opened the trunk of your car.");
		}
		SetVehicleParamsEx(vehicleid, VehicleInfo[vehicleid][vEngine], VehicleInfo[vehicleid][vLights], VehicleInfo[vehicleid][vAlarm], VehicleInfo[vehicleid][vDoors], VehicleInfo[vehicleid][vBonnet], VehicleInfo[vehicleid][vBoot], VehicleInfo[vehicleid][vObjective]);
	}
	else if(!strcmp(params, "hood"))
	{
   	    if(!IsPlayerInAnyVehicle(playerid)) vehicleid = GetClosestCar(playerid);
		GetVehicleParamsEx(vehicleid, VehicleInfo[vehicleid][vEngine], VehicleInfo[vehicleid][vLights], VehicleInfo[vehicleid][vAlarm], VehicleInfo[vehicleid][vDoors], VehicleInfo[vehicleid][vBonnet], VehicleInfo[vehicleid][vBoot], VehicleInfo[vehicleid][vObjective]);
		if(VehicleInfo[vehicleid][vBonnet])
		{
		    VehicleInfo[vehicleid][vBonnet] = 0;
			SendClientMessageEx(playerid, COLOR_WHITE, "You have successfully closed the hood of your car.");
		}
		else
		{
		    VehicleInfo[vehicleid][vBonnet] = 1;
			SendClientMessageEx(playerid, COLOR_WHITE, "You have successfully opened the hood of your car.");
		}
		SetVehicleParamsEx(vehicleid, VehicleInfo[vehicleid][vEngine], VehicleInfo[vehicleid][vLights], VehicleInfo[vehicleid][vAlarm], VehicleInfo[vehicleid][vDoors], VehicleInfo[vehicleid][vBonnet], VehicleInfo[vehicleid][vBoot], VehicleInfo[vehicleid][vObjective]);
	}
	return 1;
}

timer StartEngine[1250](playerid, vehicleid)
{
	DeletePVar(playerid, "EngineStarting");
	if(VehicleInfo[vehicleid][vTotalled]) return 0;
	else if(VehicleInfo[vehicleid][vFuel] < FUEL_COST) return 0;
	static Float:tvPosition[3];
	GetVehiclePos(vehicleid, tvPosition[0], tvPosition[1], tvPosition[2]);
	foreach(new i: Player)
	{
		if((GetPVarInt(i, "PCB") - 1) == vehicleid)
		{
			foreach(new t: Player)
			{
			    if(IsPlayerInRangeOfPoint(t, 27.5, tvPosition[0], tvPosition[1], tvPosition[2]))
			    {
			        if(HitmanTarget[i] == t)
			        {
				   		new string[128];
					   	/*new File:clog = fopen("logs/contract.log", io_append);
					    format(string, sizeof(string), "Hitman %s has fulfilled the contract on %s's head and collected $%d.", GetPlayerNameEx(i), GetPlayerNameEx(t), PlayerInfo[t][pContractPrice]);
						fwrite(clog, string);
						fclose(clog);*/
						format(string, sizeof(string), "Hitman %s has fulfilled the contract on %s's head and collected $%d.", GetPlayerNameEx(i), GetPlayerNameEx(t), PlayerInfo[t][pContractPrice]);
						Log("logs/contract.log", string);

						format(string, sizeof(string), " You have been critically injured by a hitman and lost $%d.", PlayerInfo[t][pContractPrice]);
						SendClientMessageEx(playerid, COLOR_YELLOW, string);
					    format(string, sizeof(string), "Hitman %s has fulfilled the contract on %s's head and collected $%d.", GetPlayerNameEx(i), GetPlayerNameEx(t), PlayerInfo[t][pContractPrice]);
						SendHitmanMessage(COLOR_YELLOW, string);
						GivePlayerCash(t, -PlayerInfo[t][pContractPrice]);
						GivePlayerCash(i, PlayerInfo[t][pContractPrice]);
						PlayerInfo[i][pCompletedHits]++;
						PlayerInfo[t][pContractPrice] = 0;
						format(PlayerInfo[t][pContractReason], 32, "");
						format(PlayerInfo[t][pContractBy], MAX_PLAYER_NAME, "");
						HitmanTarget[i] = INVALID_PLAYER_ID;
					}
				}
			}
	    	RemovePlayerFromVehicleEx(playerid);
			CreateExplosion(tvPosition[0], tvPosition[1], tvPosition[2], 0, 25);
	    	SetVehicleHealth(vehicleid, 0);
	    	VehicleInfo[vehicleid][vTotalled] = 1;
	    	SetPlayerHealthEx(playerid, 0);
		    DeletePVar(i, "PCB");
	    	return 1;
	    }
	}
	GetVehicleParamsEx(vehicleid, VehicleInfo[vehicleid][vEngine], VehicleInfo[vehicleid][vLights], VehicleInfo[vehicleid][vAlarm], VehicleInfo[vehicleid][vDoors], VehicleInfo[vehicleid][vBonnet], VehicleInfo[vehicleid][vBoot], VehicleInfo[vehicleid][vObjective]);
	VehicleInfo[vehicleid][vEngine] = 1;
	VehicleInfo[vehicleid][vLights] = 1;
 	SetVehicleParamsEx(vehicleid, VehicleInfo[vehicleid][vEngine], VehicleInfo[vehicleid][vLights], VehicleInfo[vehicleid][vAlarm], VehicleInfo[vehicleid][vDoors], VehicleInfo[vehicleid][vBonnet], VehicleInfo[vehicleid][vBoot], VehicleInfo[vehicleid][vObjective]);
    SendClientMessageEx(playerid, COLOR_WHITE, "Vehicle engine started successfully (/car engine to turn the engine off).");
	return 1;
}

CMD:dropcar(playerid, params[])
{
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You are not inside a vehicle.");
    else if(GetPVarInt(playerid, "SellingCar") == 1) return SendClientMessageEx(playerid, COLOR_GREY, "You are already on a drop car mission.");
	else if(HasActiveCheckpoint(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You already have an existing checkpoint, type /killcheckpoint to delete it.");
    else if(gettime() - PlayerInfo[playerid][pJackedCar] < 0) return SendClientMessageEx(playerid, COLOR_GREY, "You have already dropped a car in the last twenty minutes, please wait.");
	SetPVarInt(playerid, "SellingCar", 1);
    SetPlayerCheckpoint(playerid, 2690.49, -2226.02, 13.55, 5.0);
    SendClientMessageEx(playerid, COLOR_GREEN, "[/DROPCAR]:{FFFFFF} Deliver the vehicle to the marker shown on your radar to receive your pay.");
	PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
    return 1;
}

timer RefuelVehicle[2000](playerid, vehicleid)
{
	if(!IsPlayerConnectedEx(playerid)) stop RefuelTimer[playerid];
	else if(!IsPlayerInAnyVehicle(playerid) || GetPlayerVehicleID(playerid) != vehicleid || !IsPlayerAtFuelStation(playerid) || VehicleInfo[vehicleid][vEngine] == 1 || VehicleInfo[vehicleid][vFuel] >= 100)
	{
	    new fuelstring[64];
		GivePlayerCash(playerid, -RefillAmount[playerid]*2);
	    format(fuelstring, sizeof(fuelstring), "The total cost of your petrol bill is: $%i.", RefillAmount[playerid]*2);
	    SendClientMessageEx(playerid, COLOR_ORANGE, fuelstring);
	    RefillAmount[playerid] = 0;
	    stop RefuelTimer[playerid];
	}
	else
	{
		VehicleInfo[GetPlayerVehicleID(playerid)][vFuel] += FUEL_COST;
		RefillAmount[playerid] += 2;
	}
	return 1;
}

CMD:join(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid))
	{
	    if(PlayerInfo[playerid][pJob] == 0)
	    {
			if(IsPlayerInRangeOfPoint(playerid, 2.0, -77.998, -1135.989, 1.078))
			{
			    PlayerInfo[playerid][pJob] = 1;
		        SendClientMessageEx(playerid, COLOR_WHITE, "You are now a Trucker.");
		        SendClientMessageEx(playerid, COLOR_WHITE, "Type /help for more information and commands about your job.");
			}
			else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1083.84, -1231.75, 15.82))
			{
			    PlayerInfo[playerid][pJob] = 2;
		        SendClientMessageEx(playerid, COLOR_WHITE, "You are now a Mechanic.");
		        SendClientMessageEx(playerid, COLOR_WHITE, "Type /help for more information and commands about your job.");
			}
			else if(IsPlayerInRangeOfPoint(playerid, 2.0, 377.84, -114.93, 1001.49))
			{
			    PlayerInfo[playerid][pJob] = 3;
		        SendClientMessageEx(playerid, COLOR_WHITE, "You are now a Pizza Boy.");
		        SendClientMessageEx(playerid, COLOR_WHITE, "Type /help for more information and commands about your job.");
				SendClientMessageEx(playerid, COLOR_WHITE, "You have been given a Pizza Boy attire.");
				SetPlayerSkin(playerid, 155);
			}
			else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1009.46, -1366.93, 13.34))
			{
			    PlayerInfo[playerid][pJob] = 4;
		        SendClientMessageEx(playerid, COLOR_WHITE, "You are now a Street Sweeper.");
		        SendClientMessageEx(playerid, COLOR_WHITE, "Type /help for more information and commands about your job.");
			}
			else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1741.5199, -1863.4615, 13.5750))
			{
			    if(PlayerInfo[playerid][pDriverLicense] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "You need to have a driver's license to be employed by the Taxi Company.");
			    PlayerInfo[playerid][pJob] = 5;
		        SendClientMessageEx(playerid, COLOR_WHITE, "You are now a Taxi Driver.");
		        SendClientMessageEx(playerid, COLOR_WHITE, "Type /help for more information and commands about your job.");
			}
			else
			{
		        SendClientMessageEx(playerid, COLOR_GREY, "You are not near a place to get a job.");
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You already have a job, type /quitjob to quit your current job.");
		}
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "You cannot get a job while inside a vehicle.");
	return 1;
}

CMD:quitjob(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid))
	{
		if(PlayerInfo[playerid][pJob] > 0)
		{
		    switch(PlayerInfo[playerid][pJob])
		    {
		        case 1:
		        {
			 		DeletePVar(playerid, "RouteTruck");
					DeletePVar(playerid, "RouteId");
				 	DeletePVar(playerid, "RoutePayment");
		        }

		        case 2:
		        {
		        
		        }
		        
		        case 3:
		        {
			 		DeletePVar(playerid, "DeliveryBike");
					DeletePVar(playerid, "DeliveryID");
				 	DeletePVar(playerid, "DeliveryPayment");
		            SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
		        }
		        
		        case 4:
		        {
				    DeletePVar(playerid, "RouteStage");
				    DeletePVar(playerid, "SweepingDuty");
		        }
			}
			PlayerInfo[playerid][pJob] = 0;
			DisablePlayerCheckpoint(playerid);
   			SendClientMessageEx(playerid, COLOR_WHITE, "You have succesfully quit your job.");
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You are not employed, and don't have a job.");
		}
	}
	else
	{
 		SendClientMessageEx(playerid, COLOR_GREY, "You cannot quit your job while you are inside a vehicle.");
	}
	return 1;
}
/*
CMD:forcetut(playerid, params[])
{
	if(IsAdmin(playerid, ADMIN_LEVEL_JUNIORADMIN))
	{
	    new targetid, string[128];

		if(sscanf(params, "u", targetid))return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /forcetut [id]");
  		else if(!IsPlayerConnectedEx(targetid) || GetPVarInt(targetid, "TutorialStage") == 0) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		DeletePVar(targetid, "TutorialStage");
	    stop TutorialTimerEx[playerid];
        SetDefaultRegisterStatistics(targetid);
    	format(string, sizeof(string), "You have sent %s out of the server tutorial.", GetPlayerNameEx(targetid));
   	    SendClientMessageEx(playerid, COLOR_YELLOW, string);
   	    SendClientMessage(playerid, COLOR_ORANGE, "---------------------------------------------------");
   	    SendClientMessageEx(targetid, COLOR_WHITE, "Welcome to "SERVER_NAME".");
		SendClientMessageEx(playerid, COLOR_WHITE, "There are many things to do, ranging from applying to a faction to becoming the richest person in San Andreas.");
		SendClientMessageEx(playerid, COLOR_WHITE, "We believe here that everyone should play legitimately, including our staff members along with others.");
		SendClientMessageEx(playerid, COLOR_WHITE, "You can find out more information about our server on our site (/information), or ask on /n(ewbie) for help.");
		SendClientMessage(playerid, COLOR_ORANGE, "---------------------------------------------------");
	}
	return 1;
}
*/
CMD:s(playerid, params[]) return cmd_shout(playerid, params);
CMD:shout(playerid, params[])
{
	new string[128];
	if(sscanf(params, "{s[128]}")) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /s(hout) [message]");
	format(string, sizeof(string), "%s shouts: %s!", GetPlayerNameEx(playerid), params);
    ProxDetector(30.0, playerid, string, COLOR_WHITE, COLOR_WHITE, COLOR_WHITE, COLOR_FADE1, COLOR_FADE2);
    return 1;
}

CMD:l(playerid, params[]) return cmd_low(playerid, params);
CMD:low(playerid, params[])
{
	new string[128];
	if(sscanf(params, "{s[128]}")) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /l(ocal) [message]");
	format(string, sizeof(string), "%s quietly: %s", GetPlayerNameEx(playerid), params);
    ProxDetector(5.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
	return 1;
}

CMD:number(playerid, params[])
{
	new
	    targetid;
	if(PlayerInfo[playerid][pPhonebook] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "You do not have a phonebook.");
	else if(sscanf(params, "u", targetid))
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /number [player]");
	}
	else if(PlayerInfo[targetid][pPhoneNumber] == 0 || PlayerInfo[targetid][pPhonebookRemoval] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "The specified person could not be found in the phonebook.");
	else if(!IsPlayerConnectedEx(targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
	new
		string[128];
	format(string, sizeof(string), "%s (%d)", GetPlayerNameEx(targetid), PlayerInfo[targetid][pPhoneNumber]);
	SendClientMessageEx(playerid, COLOR_GREY, string);
	return 1;
}

CMD:togphone(playerid, params[])
{
	if(PlayerInfo[playerid][pPhoneNumber] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "You do not own a cellphone, purchase one at a 24/7 store.");
	else if(PhoneState[playerid] == 1 || CallingTo[playerid] != INVALID_PLAYER_ID) return SendClientMessageEx(playerid, COLOR_GREY, "Your phone is already in use.");
	switch(PlayerInfo[playerid][pPhoneToggled])
	{
	    case 1:
	    {
	        SendClientMessageEx(playerid, COLOR_WHITE, "You have switched your phone back on.");
	        PlayerInfo[playerid][pPhoneToggled] = 0;
	    }
	    
	    default:
	    {
	        SendClientMessageEx(playerid, COLOR_WHITE, "You have switched off your phone, type /togphone to turn it back on.");
	        PlayerInfo[playerid][pPhoneToggled] = 1;
	    }
	}
	return 1;
}

CMD:call(playerid, params[])
{
	new number, string[128];
	if(PlayerInfo[playerid][pPhoneNumber] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "You do not own a cellphone, purchase one at a 24/7 store.");
	else if(sscanf(params, "i", number)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /call [number]");
	else if(number == 0 || number == PlayerInfo[playerid][pPhoneNumber]) return SendClientMessageEx(playerid, COLOR_GREY, "You have entered an invalid number on your cellphone, please try again.");
	else if(PhoneState[playerid] == 1 || CallingTo[playerid] != INVALID_PLAYER_ID) return SendClientMessageEx(playerid, COLOR_GREY, "Your phone is already in use.");
	else if(PlayerInfo[playerid][pPhoneToggled] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "Your phone is currently switched off.");
	else if(IsPlayerRestricted(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this at this time.");
	format(string, sizeof(string), "* %s takes out a cellphone.", GetPlayerNameEx(playerid));
 	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	SendClientMessageEx(playerid, COLOR_WHITE, "HINT: You now use T to talk on your cellphone, type /hangup to hang up.");
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
	if(number == 911)
	{
	    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "EMERGENCY: Hello you have reached the emergency service line, which service do you require? (police, ems)");
	    SetPVarInt(playerid, "Calling911", 1);
		PhoneState[playerid] = 1;
		CallingTo[playerid] = 911;
	}
	else
	{
	    new targetid = GetPlayerIDFromNumber(number);
 		if(targetid == INVALID_PLAYER_ID) return SendClientMessageEx(playerid, COLOR_GREY, "The number you have dialed is currently unavailable, please try again later...");
		else if(PhoneState[targetid] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "The specified number is busy (already on a call), try again later...");
		if(PlayerInfo[targetid][pPhoneToggled] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "That persons phone is currently switched off.");
		CallingTo[playerid] = targetid;
		CallingTo[targetid] = playerid;
		PhoneState[playerid] = 1;
		format(string, sizeof(string), "Your mobile is ringing - type /pickup to answer it. [Caller ID: %s]", GetPlayerNameEx(playerid));
		SendClientMessageEx(targetid, COLOR_YELLOW, string);

		format(string, sizeof(string), "* %s's phone begins to ring.", GetPlayerNameEx(targetid));
		ProxDetector(30.0, targetid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	return 1;
}

CMD:h(playerid, params[]) return cmd_hangup(playerid, params);
CMD:hangup(playerid, params[])
{
	new string[128];
	if(PlayerInfo[playerid][pPhoneNumber] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "You do not own a cellphone, purchase one at a 24/7 store.");
	else if(CallingTo[playerid] == INVALID_PLAYER_ID || PhoneState[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "Your phone is in your pocket.");
	if(CallingTo[CallingTo[playerid]] == playerid)
	{
		CallingTo[CallingTo[playerid]] = INVALID_PLAYER_ID;
		PhoneState[CallingTo[playerid]] = 0;
		SendClientMessageEx(CallingTo[playerid], COLOR_GREY, "They hung up.");
		SetPlayerSpecialAction(CallingTo[playerid], SPECIAL_ACTION_STOPUSECELLPHONE);
		format(string, sizeof(string), "* %s's puts away their cellphone.", GetPlayerNameEx(CallingTo[playerid]));
		ProxDetector(30.0, CallingTo[playerid], string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	if(GetPVarInt(playerid, "Calling911") >= 1 || CallingTo[playerid] == 911) DeletePVar(playerid, "Calling911");
	SendClientMessageEx(playerid, COLOR_GREY, "You hung up.");
	CallingTo[playerid] = INVALID_PLAYER_ID;
	PhoneState[playerid] = 0;
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
	format(string, sizeof(string), "* %s puts away their cellphone.", GetPlayerNameEx(playerid));
	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	return 1;
}

CMD:time(playerid, params[])
{
	new string[128],
		mtext[20],
		year,
		month,
		day;
    getdate(year, month, day);
    if(month == 1) { mtext = "January"; }
    else if(month == 2) { mtext = "February"; }
    else if(month == 3) { mtext = "March"; }
    else if(month == 4) { mtext = "April"; }
    else if(month == 5) { mtext = "May"; }
    else if(month == 6) { mtext = "June"; }
    else if(month == 7) { mtext = "July"; }
    else if(month == 8) { mtext = "August"; }
    else if(month == 9) { mtext = "September"; }
    else if(month == 10) { mtext = "October"; }
    else if(month == 11) { mtext = "November"; }
    else if(month == 12) { mtext = "December"; }
    format(string, sizeof(string), "~y~%d %s~n~~g~|~w~%d:%d~g~|", day, mtext, WorldTime[0], WorldTime[1]);
    GameTextForPlayer(playerid, string, 5000, 1);
    return 1;
}

CMD:p(playerid, params[]) return cmd_pickup(playerid, params);
CMD:pickup(playerid, params[])
{
	if(PlayerInfo[playerid][pPhoneNumber] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "You do not own a cellphone, purchase one at a 24/7 store.");
	else if(CallingTo[playerid] == INVALID_PLAYER_ID) return SendClientMessageEx(playerid, COLOR_GREY, "No one is calling you.");
	else if(CallingTo[CallingTo[playerid]] != playerid) return SendClientMessageEx(playerid, COLOR_GREY, "The specified number has disconnected from the phone network.");
	else if(IsPlayerRestricted(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this at this time.");
	PhoneState[playerid] = 1;
 	SendClientMessageEx(playerid, COLOR_GREY, "You have picked up the phone.");
	SendClientMessageEx(CallingTo[playerid], COLOR_GREY, "They have picked up the phone.");
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
	return 1;
}

CMD:t(playerid, params[])
{
	return cmd_sms(playerid, params);
}

CMD:sms(playerid, params[])
{
	new number, string[128];
	if(PlayerInfo[playerid][pPhoneNumber] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "You do not own a cellphone, purchase one at a 24/7 store.");
	else if(sscanf(params, "is[128]", number, string)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /sms [number] [text]");
	else if(PhoneState[playerid] == 1 || CallingTo[playerid] != INVALID_PLAYER_ID) return SendClientMessageEx(playerid, COLOR_GREY, "Your phone is already in use.");
	else if(number == 0 || GetPlayerIDFromNumber(number) == INVALID_PLAYER_ID  || strval(params) == PlayerInfo[playerid][pPhoneNumber]) return SendClientMessageEx(playerid, COLOR_GREY, "You have entered an invalid number on your cellphone, please try again...");
	else if(IsPlayerRestricted(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this at this time.");
	else if(PlayerInfo[playerid][pPhoneToggled] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "Your phone is currently switched off.");
    new targetid = GetPlayerIDFromNumber(number);
	if(PlayerInfo[targetid][pPhoneToggled] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "That persons phone is currently switched off.");
	format(string, sizeof(string), "SMS: %s, Sender: %s (Ph: %i).", string, GetPlayerNameEx(playerid), PlayerInfo[playerid][pPhoneNumber]);
	SendClientMessageEx(targetid, COLOR_YELLOW, string);
	SendClientMessageEx(playerid, COLOR_YELLOW, string);
	GameTextForPlayer(playerid, "~r~$-1", 5000, 1);
	GivePlayerCash(playerid, -1);
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	format(string, sizeof(string), "* %s takes out a cellphone.", GetPlayerNameEx(playerid));
	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	return 1;
}

CMD:whisper(playerid, params[]) return cmd_w(playerid, params);
CMD:w(playerid, params[])
{
	new string[128], message[128], targetid;
	if(sscanf(params, "us[128]", targetid, message))
	{
 		return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /w(hisper) <playerid> <message>");
   	}
   	else if(!IsPlayerConnectedEx(targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
   	else if(!IsPlayerInRangeOfPlayer(playerid, targetid) && !IsAdmin(playerid, ADMIN_LEVEL_TRIALADMIN)) return SendClientMessageEx(playerid, COLOR_GREY, "You must be near the specified player to use this command.");
   	else if(playerid == targetid) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot use this command on yourself.");
	format(string, sizeof(string), "(ID %d) %s whispers to you: %s", playerid, GetPlayerNameEx(playerid), message);
	SendClientMessageEx(targetid, COLOR_YELLOW, string);
	format(string, sizeof(string), "You whispered to (ID %d) %s: %s", targetid, GetPlayerNameEx(targetid), message);
	SendClientMessageEx(playerid, COLOR_YELLOW, string);
    return 1;
}

CMD:b(playerid, params[])
{
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /b(rackets) [message]");
	new string[128];
	format(string, sizeof(string), "%s says: (( %s ))", GetPlayerNameEx(playerid), params);
    ProxDetector(20.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
    return 1;
}

CMD:me(playerid, params[])
{
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /me [action]");
	new string[128];
	format(string, sizeof(string), "* %s %s", GetPlayerNameEx(playerid), params);
    ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
    return 1;
}

CMD:do(playerid, params[])
{
	new string[128];
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /do [action]");
	else if(strlen(params) > 99)
	{
	    format(string, sizeof(string), "The message cannot be more than 99 characters in length, please shorten it by %d characters.", strlen(params) - 99);
		return SendClientMessageEx(playerid, COLOR_GREY, string);
	}
	format(string, sizeof(string), "%s (( %s ))", params, GetPlayerNameEx(playerid));
    ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
    return 1;
}

CMD:asay(playerid, params[])
{
	if(IsAdmin(playerid, ADMIN_LEVEL_TRIALADMIN))
	{
	    if(sscanf(params, "{s[64]}")) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /asay [message]");
		new string[128];
		format(string, sizeof(string), "* %s %s: %s", GetAdministratorRank(playerid), GetPlayerNameEx(playerid), params);
		SendClientMessageToAllEx(COLOR_LIGHTBLUE, string);
	}
	return 1;
}

CMD:advert(playerid, params[])
{
	new string[128];
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /ad(vert) [text]");
    else if(gettime() - gAdvertisementTime < 0)
	{
		format(string, sizeof(string), "Please wait %i seconds before using the advertisement channel.", gAdvertisementTime - gettime());
    	return SendClientMessageEx(playerid, COLOR_GREY, string);
   	}
	else if(IsPlayerRestricted(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this at this time.");
  	else if(PlayerInfo[playerid][pAdMute] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "You are muted from the advert channel.");
	else if(PlayerInfo[playerid][pPhoneNumber] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "You must own a phone to use this command, buy one from a local 24/7.");
	else if(strlen(string) > 64) return SendClientMessageEx(playerid, COLOR_GREY, "The advertisement cannot exceed more than 64 characters in length.");
	new payout = strlen(params) * 10;
	if(PlayerInfo[playerid][pMoney] < payout)
	{
		format(string, sizeof(string), "* You used %d characters which cost $%d, you don't have enough.", strlen(params), payout);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		return 1;
	}
	format(string, sizeof(string), "~r~Paid $%d~n~~w~Message contained: %d characters", payout, strlen(params));
	GameTextForPlayer(playerid, string, 5000, 5);
	format(string, sizeof(string), "SANews Advert: %s - contact %s (%d)", params, GetPlayerNameEx(playerid),PlayerInfo[playerid][pPhoneNumber]);
    SendClientMessageToAllEx(COLOR_GREEN, string);
	gAdvertisementTime = gettime() + 60;
    GivePlayerCash(playerid, -payout);
    AddVaultMoney(5, payout);
    return 1;
}

CMD:ad(playerid, params[]) return cmd_advert(playerid, params);

CMD:gov(playerid, params[])
{
	new string[128];
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /gov [text]");
	switch(PlayerInfo[playerid][pFaction])
	{
	    case 0:
	    {
	        SendClientMessageEx(playerid, COLOR_GREY, "You are not in a faction.");
		}
		
		case 1:
		{
		    switch(PlayerInfo[playerid][pLeadership])
		    {
		        case 0:
		        {
					SendClientMessageEx(playerid, COLOR_GREY, "You are not a faction leader to use this command.");
				}
				case 1:
				{
					SendClientMessageToAllEx(COLOR_WHITE, "|___________ Government News Announcement ___________|");
					format(string, sizeof(string), "** %s %s says: %s **", GetRankName(playerid), GetPlayerNameEx(playerid), params);
				    SendClientMessageToAllEx(COLOR_LIGHTBLUE, string);
				}
			}
		}
		
		case 2:
		{
		    switch(PlayerInfo[playerid][pLeadership])
		    {
		        case 0:
		        {
					SendClientMessageEx(playerid, COLOR_GREY, "You are not a faction leader to use this command.");
				}
				case 1:
				{
					SendClientMessageToAllEx(COLOR_WHITE, "|___________ Government News Announcement ___________|");
					format(string, sizeof(string), "** %s %s says: %s **", GetRankName(playerid), GetPlayerNameEx(playerid), params);
		    		SendClientMessageToAllEx(COLOR_WHITE, string);
				}
		    }
		}
		
		case 3:
		{
		    switch(PlayerInfo[playerid][pLeadership])
		    {
		        case 0:
		        {
					SendClientMessageEx(playerid, COLOR_GREY, "You are not a faction leader to use this command.");
				}
				case 1:
				{
					SendClientMessageToAllEx(COLOR_WHITE, "|___________ Government News Announcement ___________|");
					format(string, sizeof(string), "** %s %s says: %s **", GetRankName(playerid), GetPlayerNameEx(playerid), params);
		    		SendClientMessageToAllEx(COLOR_HOTPINK, string);
				}
		    }
		}
		
		case 6:
		{
		    switch(PlayerInfo[playerid][pLeadership])
		    {
		        case 0:
		        {
					SendClientMessageEx(playerid, COLOR_GREY, "You are not a faction leader to use this command.");
				}
				case 1:
				{
					SendClientMessageToAllEx(COLOR_WHITE, "|___________ Government News Announcement ___________|");
					format(string, sizeof(string), "** %s %s says: %s **", GetRankName(playerid), GetPlayerNameEx(playerid), params);
				    SendClientMessageToAllEx(TEAM_COLOR_FBI, string);
				}
			}
		}
		case 7:
		{
		    switch(PlayerInfo[playerid][pLeadership])
		    {
		        case 0:
		        {
					SendClientMessageEx(playerid, COLOR_GREY, "You are not a faction leader to use this command.");
				}
				case 1:
				{
					SendClientMessageToAllEx(COLOR_WHITE, "|___________ Government News Announcement ___________|");
					format(string, sizeof(string), "** %s %s says: %s **", GetRankName(playerid), GetPlayerNameEx(playerid), params);
				    SendClientMessageToAllEx(TEAM_COLOR_DOC, string);
				}
			}

		}
	}
	return 1;
}

CMD:c(playerid, params[]) return cmd_combined(playerid, params);
CMD:combined(playerid, params[])
{
	if(IsAdmin(playerid, ADMIN_LEVEL_MODERATOR))
	{
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /c(ombined) [message]");
		new string[128];
		format(string, sizeof(string), "** %s %s: %s **", GetAdministratorRank(playerid), GetPlayerNameEx(playerid), params);
		foreach(new i: Player) if(IsAdmin(i, ADMIN_LEVEL_MODERATOR)) SendClientMessageEx(i, COLOR_CYAN, string);
	}
	return 1;
}

CMD:a(playerid, params[]) return cmd_admin(playerid, params);
CMD:admin(playerid, params[])
{
	if(IsAdmin(playerid, ADMIN_LEVEL_TRIALADMIN))
	{
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /a(dmin) [message]");
		new string[128];
		format(string, sizeof(string), "** %s %s: %s **", GetAdministratorRank(playerid), GetPlayerNameEx(playerid), params);
		foreach(new i: Player) if(IsAdmin(i, ADMIN_LEVEL_TRIALADMIN)) SendClientMessageEx(i, COLOR_YELLOW, string);
	}
	return 1;
}

CMD:members(playerid, params[])
{
    if(PlayerInfo[playerid][pFaction] == 0 && PlayerInfo[playerid][pFamily] == 0) return SendClientMessage(playerid, COLOR_WHITE, "You're not in a faction or a family.");
	SendClientMessage(playerid, COLOR_WHITE, "Online Members:");
	foreach(new i: Player)
	{
 		if(PlayerInfo[i][pFaction] >= 1)
	    {
			if(PlayerInfo[i][pFaction] == PlayerInfo[playerid][pFaction])
		    {
		    	new string[128], dutystatus[10];
		        switch(PlayerInfo[i][pDuty])
		        {
			        case 0: dutystatus = "Off Duty";
			        case 1: dutystatus = "On Duty";
				}
				format(string, sizeof(string), "(%d) %s %s (%s)", PlayerInfo[i][pRank], GetRankName(i), GetPlayerNameEx(i), dutystatus);
				SendClientMessage(playerid, COLOR_WHITE, string);
			}
		}
 		else if(PlayerInfo[i][pFamily] >= 1)
	    {
			if(PlayerInfo[i][pFamily] == PlayerInfo[playerid][pFamily])
		    {
		    	new string[128];
				format(string, sizeof(string), "(%d) %s %s", PlayerInfo[i][pRank], GetRankName(i), GetPlayerNameEx(i));
				SendClientMessage(playerid, COLOR_WHITE, string);
			}
		}
	}
	return 1;
}

CMD:getpos(playerid, params[])
{
	new Float:cPosition[3], Float:Position[4], Float:vAngle, string[128];
	GetPlayerFacingAngle(playerid, Position[3]);
	GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
	GetPlayerCameraPos(playerid, cPosition[0], cPosition[1], cPosition[2]);
	SendClientMessageEx(playerid, COLOR_ORANGE, "------------------------------------------");
	SendClientMessageEx(playerid, COLOR_ORANGE, "Debugging {FFFFFF}Information");
	format(string, sizeof(string), "Position X: %f, Position Y: %f, Position Z: %f, Facing Angle: %f", Position[0], Position[1], Position[2], Position[3]);
	SendClientMessageEx(playerid, COLOR_YELLOW, string);
	format(string, sizeof(string), "Interior: %i, Virtual World: %i", GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
	SendClientMessageEx(playerid, COLOR_YELLOW, string);
	if(IsPlayerInAnyVehicle(playerid))
	{
		GetVehiclePos(GetPlayerVehicleID(playerid), cPosition[0], cPosition[1], cPosition[2]);
		GetVehicleZAngle(GetPlayerVehicleID(playerid), vAngle);
		format(string, sizeof(string), "Vehicle X: %f, Vehicle Y: %f, Vehicle Z: %f, Facing Angle: %f", cPosition[0], cPosition[1], cPosition[2], vAngle);
		SendClientMessageEx(playerid, COLOR_YELLOW, string);
	}
	SendClientMessageEx(playerid, COLOR_ORANGE, "------------------------------------------");
	return 1;
}

CMD:setint(playerid, params[])
{
	if(IsAdmin(playerid, ADMIN_LEVEL_TRIALADMIN))
	{
		new targetid, interiorid;
		if(sscanf(params, "ii", targetid, interiorid)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /setint [targetid] [interiorid]");
	 	else if(!IsPlayerConnectedEx(targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		SetPlayerInteriorEx(targetid, interiorid);
	}
	return 1;
}

CMD:kick(playerid, params[])
{
	if(IsAdmin(playerid, ADMIN_LEVEL_MODERATOR))
    {
	    new targetid, reason[128];
		if(sscanf(params, "us[128]", targetid, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /kick <playerid> <reason>");
		else if(!IsPlayerConnectedEx(targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		else if(PlayerInfo[targetid][pAdminLevel] > PlayerInfo[playerid][pAdminLevel]) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot kick administrators that are higher rank than you.");
		else if(targetid == playerid) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot use this command on yourself.");
		format(reason, sizeof(reason), "AdmCmd: %s was kicked by %s, reason: %s", GetPlayerNameEx(targetid), GetPlayerNameEx(playerid), reason);
		AdminAlert(reason, ALERT_GLOBAL);
		Kick(targetid);
		return 1;
   	}
   	else return SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use this command.");
}

CMD:setfire(playerid, params[])
{
	new b, string[128];
	if(!IsAdmin(playerid, ADMIN_LEVEL_JUNIORADMIN)) return SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "i", b)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /setfire <businessid>");
	DestroyDynamicObject(FireObject);
	DestroyDynamicObject(SmokeObject);
	Delete3DTextLabel(FireText);
	if(BusinessInfo[b][bExistant])
	{
		FireObject = CreateDynamicObject(18691, BusinessInfo[b][bPosition][0], BusinessInfo[b][bPosition][1], BusinessInfo[b][bPosition][2], 0, 0, 0.0);
		SmokeObject = CreateDynamicObject(18723, BusinessInfo[b][bPosition][0], BusinessInfo[b][bPosition][1], BusinessInfo[b][bPosition][2], 0, 0, 0.0);
		FireHealth = 100;
		FireText = Create3DTextLabel("100%", COLOR_GREEN, BusinessInfo[b][bPosition][0], BusinessInfo[b][bPosition][1], BusinessInfo[b][bPosition][2]+1, 20.0, 0, 0);
		foreach(new i: Player)
		{
			if(IsPlayerConnectedEx(i) && IsPlayerInRangeOfPoint(i, 50.0, BusinessInfo[b][bPosition][0], BusinessInfo[b][bPosition][1], BusinessInfo[b][bPosition][2]))
			{
	   	 		format(string, sizeof(string), "* The fire alarm tone at %s starts to ring. *", BusinessInfo[b][bName]);
		        SendClientMessageEx(i, COLOR_YELLOW, string);
			}
			if(PlayerInfo[i][pFaction] == 3) SetPlayerCheckpoint(i, BusinessInfo[b][bPosition][0], BusinessInfo[b][bPosition][1], BusinessInfo[b][bPosition][2], 5.0);
		}
		SendRadioMessage(3, COLOR_WHITE, "----------------------------------------");
		format(string, sizeof(string), "[DISPATCH]{FFFFFF} All Units ABP: Caller: Anonymous");
		SendRadioMessage(3, COLOR_HOTPINK, string);
		format(string, sizeof(string), "[DISPATCH]{FFFFFF} Incident: %s is on fire!", BusinessInfo[b][bName]);
		SendRadioMessage(3, COLOR_HOTPINK, string);
		SendRadioMessage(3, COLOR_WHITE, "----------------------------------------");
		SendRadioMessage(3, COLOR_YELLOW, "A marker to the location of the fire has been set on your GPS.");
	}
	return 1;
}

CMD:jetpack(playerid, params[])
{
	if(IsAdmin(playerid, ADMIN_LEVEL_JUNIORADMIN))
    {
	    new targetid, reason[128];
		if(sscanf(params, "u", targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /jetpack <playerid>");
		else if(!IsPlayerConnectedEx(targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		format(reason, sizeof(reason), "AdmCmd: %s has received a jetpack from %s.", GetPlayerNameEx(targetid), GetPlayerNameEx(playerid));
		AdminAlert(reason, ALERT_GLOBAL);
		SetPVarInt(targetid, "JetpackAuthorized", 1);
		SetPlayerSpecialAction(targetid, SPECIAL_ACTION_USEJETPACK);
		return 1;
   	}
	else SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use this command.");
	return 1;
}

CMD:mute(playerid, params[])
{
	if(IsAdmin(playerid, ADMIN_LEVEL_TRIALADMIN))
    {
	    new targetid, option[32], reason[128];
		if(sscanf(params, "us[32]", targetid, option)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /mute <playerid> <advert, report>");
		else if(!IsPlayerConnectedEx(targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		if(!strcmp(option, "advert", true))
		{
		    format(reason, sizeof(reason), "AdmCmd: %s was muted from the advertisement channel by %s due to abuse.", GetPlayerNameEx(targetid), GetPlayerNameEx(playerid));
			AdminAlert(reason, ALERT_GLOBAL);
			format(reason, sizeof(reason), "You were muted by %s from creating advertisements due to abuse.", GetPlayerNameEx(playerid));
			SendClientMessageEx(targetid, COLOR_YELLOW, reason);
			PlayerInfo[targetid][pAdMute] = 1;

			/*new File:mutelog = fopen("logs/mute.log", io_append);
			format(reason, sizeof(reason), "%s was muted from the advertisement channel by %s.\n", GetPlayerNameEx(targetid), playerid);
			fwrite(mutelog, reason);
			fclose(mutelog);*/
			format(reason, sizeof(reason), "%s was muted from the advertisement channel by %s.", GetPlayerNameEx(targetid), playerid);
			Log("logs/mute.log", reason);
		}
		else if(!strcmp(option, "report", true))
		{
			format(reason, sizeof(reason), "{FF6347}AdmWarning:{FFFF00} %s has muted %s from creating reports.", GetPlayerNameEx(playerid), GetPlayerNameEx(targetid));
			AdminAlert(reason, ALERT_ADMINS);
			format(reason, sizeof(reason), "You were muted by %s from creating reports due to abuse.", GetPlayerNameEx(playerid));
			SendClientMessageEx(targetid, COLOR_YELLOW, reason);
			PlayerInfo[targetid][pReportMute] = 1;
			
   			/*new File:mutelog = fopen("logs/mute.log", io_append);
			format(reason, sizeof(reason), "%s was muted from creating reports by %s.\n", GetPlayerNameEx(targetid), playerid);
			fwrite(mutelog, reason);
			fclose(mutelog);*/
			format(reason, sizeof(reason), "%s was muted from creating reports by %s.", GetPlayerNameEx(targetid), playerid);
			Log("logs/mute.log", reason);
			
		}
		return 1;
   	}
   	else return SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use this command.");
}

CMD:unmute(playerid, params[])
{
	if(IsAdmin(playerid, ADMIN_LEVEL_JUNIORADMIN))
    {
	    new targetid, option[32], string[128];
		if(sscanf(params, "us[32]", targetid, option)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /unmute <playerid> <advert, report>");
		else if(!IsPlayerConnectedEx(targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");

		if(!strcmp(option, "advert", true))
		{
		    if(PlayerInfo[targetid][pAdMute] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "They are not muted from the advertisement channel.");
		    PlayerInfo[targetid][pAdMute] = 0;
			format(string, sizeof(string), "You have been unmuted from the advertisement channel by Administrator %s.", GetPlayerNameEx(playerid));
			SendClientMessageEx(targetid, COLOR_WHITE, string);
			format(string, sizeof(string), "You have unmuted %s from the advertisement channel.", GetPlayerNameEx(targetid));
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}

		else if(!strcmp(option, "report", true))
		{
		    if(PlayerInfo[targetid][pReportMute] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "They are not muted from making reports.");
		    PlayerInfo[targetid][pReportMute] = 0;
			format(string, sizeof(string), "You have been unmuted from making reports by Administrator %s.", GetPlayerNameEx(playerid));
			SendClientMessageEx(targetid, COLOR_WHITE, string);
			format(string, sizeof(string), "You have unmuted %s from making reports.", GetPlayerNameEx(targetid));
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		return 1;
   	}
   	else return SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use this command.");
}

CMD:ip(playerid, params[])
{
	if(IsAdmin(playerid, ADMIN_LEVEL_JUNIORADMIN))
    {
        new
            targetid,
			string[128];
        if(sscanf(params, "u", targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /ip <playerid>");
        else if(!IsPlayerConnectedEx(targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
        else if(PlayerInfo[targetid][pAdminLevel] > PlayerInfo[playerid][pAdminLevel]) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot use this command on higher level administrators.");
        format(string, sizeof(string), "(ID: %d) %s - IP Address: %s", targetid, GetPlayerNameEx(targetid), GetPlayerIPAddress(targetid));
        SendClientMessageEx(playerid, COLOR_WHITE, string);
    }
    return 1;
}

CMD:ban(playerid, params[])
{
    new targetid, string[128], reason[64], days;
	if(!IsAdmin(playerid, ADMIN_LEVEL_TRIALADMIN)) return SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "uis[64]", targetid, days, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /ban <playerid> <days (-1 for permanent)> <reason>");
	else if(!IsPlayerConnectedEx(targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
	else if(targetid == playerid) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot use this command on yourself.");
	else if(GetPVarInt(targetid, "gPlayerLogged") == 0) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
	if(days > 0)
	{
		format(string, sizeof(string), "AdmCmd: %s was banned from the server by %s for %d days, reason: %s", GetPlayerNameEx(targetid), GetPlayerNameEx(playerid), days, reason);
		AdminAlert(string, ALERT_GLOBAL);
		new banLength = gettime();
  		banLength += days * 86400;
		BanPlayerEx(targetid, reason, BAN_TEMPORARY, banLength);
	}
	else
	{
 		format(string, sizeof(string), "AdmCmd: %s was permanently banned from the server by %s, reason: %s", GetPlayerNameEx(targetid), GetPlayerNameEx(playerid), reason);
		AdminAlert(string, ALERT_GLOBAL);
		BanPlayerEx(targetid, reason, BAN_PERMANENT, 0);
	}
	return 1;
}

public MySQL_Unban_Player(name[], adminid, connectionHandle)
{
	new szQuery[128], rowCount, fieldCount;
	cache_get_data(rowCount, fieldCount, connectionHandle);
	if(rowCount > 0 && UnbanPlayerEx(name) == 1)
	{
		format(szQuery, sizeof(szQuery), "%s was unbanned from the server. Any IP addresses assosiciated with that account has been unbanned as well.", name);
		SendClientMessageEx(adminid, COLOR_WHITE, szQuery);
	}
	else
	{
		SendClientMessageEx(adminid, COLOR_WHITE, "The specified player could not be found in the ban database, please check the name for any typos.");
		SendClientMessageEx(adminid, COLOR_WHITE, "Bans are case-sensitive and please make sure that the usernames contain the underscore (_).");
	}
	return 1;
}

CMD:unban(playerid, params[])
{
	if(!IsAdmin(playerid, ADMIN_LEVEL_SENIORADMIN)) return SendClientMessageEx(playerid, COLOR_GREY, "You need to be a Senior Administrator or higher to use this command.");
    new pName[24], szQuery[128];
	if(sscanf(params, "s[24]", pName)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /unban [playername]");
	format(szQuery, sizeof(szQuery), "SELECT * FROM `bans` WHERE `Username` = '%s'", pName);
	mysql_function_query(mConnectionHandle, szQuery, true, "MySQL_Unban_Player", "sii", pName, playerid, mConnectionHandle);
	return 1;
}

public MySQL_Unban_Ip(ip[], adminid, connectionHandle)
{
	new
	    szQuery[128],
		rowCount,
		fieldCount;
	cache_get_data(rowCount, fieldCount, connectionHandle);
	if(mysql_affected_rows(connectionHandle) > 0)
	{
		format(szQuery, sizeof(szQuery), "IP Address %s has been found and removed off the ban list.", ip);
		SendClientMessageEx(adminid, COLOR_WHITE, szQuery);
	}
	else
	{
		SendClientMessageEx(adminid, COLOR_WHITE, "The specified IP Address could not be found in the ban database, please confirm that the IP Address is banned.");
	}
	return 1;
}

CMD:unbanip(playerid, params[])
{
	if(IsAdmin(playerid, ADMIN_LEVEL_SENIORADMIN))
    {
	    new IpAddress[16], szQuery[128];
		if(sscanf(params, "s[16]", IpAddress)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /unbanip [ipaddress]");
		format(szQuery, sizeof(szQuery), "DELETE FROM `bans` WHERE `IP_Address` = '%s'", IpAddress);
		mysql_function_query(mConnectionHandle, szQuery, true, "MySQL_Unban_Ip", "sii", IpAddress, playerid, mConnectionHandle);
   	}
   	else SendClientMessageEx(playerid, COLOR_GREY, "You need to be a Senior Administrator or higher to use this command.");
	return 1;
}

public MySQL_Offline_Ban(name[], reason[], days, adminid, connectionHandle)
{
	new szString[256], szIpAddress[16], rowCount, fieldCount;
	cache_get_data(rowCount, fieldCount, connectionHandle);
	if(rowCount > 0)
	{
		cache_get_field_content(0, "IpAddress", szIpAddress, connectionHandle);
		cache_get_field_content(0, "Banned", szString, connectionHandle);
	    if(strval(szString) == 1) return SendClientMessageEx(adminid, COLOR_GREY, "The specified player is already banned from the server.");
	    
		/*new File:log = fopen("logs/oban.log", io_append);
		format(szString, sizeof(szString), "%s has placed an offline ban on %s for %d days, reason: %s.\n", GetPlayerNameEx(adminid), name, days, reason);
		fwrite(log, szString);
		fclose(log);*/
		format(szString, sizeof(szString), "%s has placed an offline ban on %s for %d days, reason: %s.", GetPlayerNameEx(adminid), name, days, reason);
		Log("logs/ban.log", szString);

		format(szString, sizeof(szString), "UPDATE `accounts` SET `Banned` = '1' WHERE `Username` = '%s'", name);
		mysql_query(szString, THREAD_NO_RESULT, adminid, connectionHandle);
		if(days == -1)
		{
			format(szString, sizeof(szString), "INSERT INTO `bans` (`IP_Address`,`Username`,`Expiry_Date`,`Reason`,`Ban_Type`) \
			VALUES ('%s','%s','0','%s','1')", szIpAddress, name, reason);
		}
		else
		{
		    new unbanstamp = gettime();
			unbanstamp += days * 86400;
			format(szString, sizeof(szString), "INSERT INTO `bans` (`IP_Address`,`Username`,`Expiry_Date`,`Reason`,`Ban_Type`) \
			VALUES ('%s','%s','%d','%s','0')", szIpAddress, name, unbanstamp, reason);
		}
		mysql_query(szString, THREAD_LOG_RESULT, INVALID_PLAYER_ID, mConnectionHandle);
		format(szString, sizeof(szString), "You have successfully banned player %s (IP: %s) for %d days, reason: %s", name, szIpAddress, days, reason);
		SendClientMessageEx(adminid, COLOR_WHITE, szString);
	}
	else
	{
		SendClientMessageEx(adminid, COLOR_WHITE, "The specified account could not be found in the ban database, please confirm that the username is correct.");
	}
	return 1;
}

CMD:oban(playerid, params[])
{
	if(!IsAdmin(playerid, ADMIN_LEVEL_TRIALADMIN)) return SendClientMessageEx(playerid, COLOR_GREY, "You need to be a level Trial Admin or higher to use this command.");
    new pName[24], days, reason[64], szQuery[128];
	if(sscanf(params, "s[24]is[64]", pName, days, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /oban [playername] [days] <-1 = permanent> [reason]");
	format(szQuery, sizeof(szQuery), "SELECT * FROM `accounts` WHERE `Username` = '%s'", pName);
	mysql_function_query(mConnectionHandle, szQuery, true, "MySQL_Offline_Ban", "ssiii", pName, reason, days, playerid, mConnectionHandle);
	return 1;
}

CMD:report(playerid, params[])
{
 	new string[128];
	if(sscanf(params, "{s[128]}", string)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /report [text]");
   	else if(PlayerInfo[playerid][pReportMute] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "You are muted from creating reports.");
   	else if(GetPVarString(playerid, "Report", string, sizeof(string)) > 0) return SendClientMessageEx(playerid, COLOR_GREY, "You already have an existing report, type /cancel report to cancel it.");
	else if(gettime() - rTimeLeft[playerid] < 0)
	{
		format(string, sizeof(string), "Please wait %i seconds before creating a report.", rTimeLeft[playerid] - gettime());
    	return SendClientMessageEx(playerid, COLOR_GREY, string);
    }
 	SetPVarString(playerid, "Report", params);
	SetPVarInt(playerid, "ReportStage", 1);
	format(string, sizeof(string), "Report from [%i] %s:{FFFF00} %s", playerid, GetPlayerNameEx(playerid), params);
 	AdminAlert(string, ALERT_ADMINS);
 	SendClientMessageEx(playerid, COLOR_YELLOW, "Your report message has been sent to online administrators.");
 	rTimeLeft[playerid] = gettime() + 30;
	return 1;
}

CMD:helpme(playerid, params[])
{
 	new string[128];
	if(sscanf(params, "{s[128]}", string)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /helpme [text]");
   	else if(PlayerInfo[playerid][pReportMute] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "You are muted from creating reports.");
	else if(gettime() - rTimeLeft[playerid] < 0)
	{
		format(string, sizeof(string), "Please wait %i seconds before creating a report.", rTimeLeft[playerid] - gettime());
    	return SendClientMessageEx(playerid, COLOR_GREY, string);
    }
	format(string, sizeof(string), "Help Request from [%i] %s:{FFFF00} %s", playerid, GetPlayerNameEx(playerid), params);
	foreach(new i: Player) if(IsAdmin(i, ADMIN_LEVEL_MODERATOR)) SendClientMessageEx(i, COLOR_LIGHTRED, string);
 	SendClientMessageEx(playerid, COLOR_YELLOW, "Your help request was sent to online moderators and administrators.");
 	rTimeLeft[playerid] = gettime() + 30;
	return 1;
}


CMD:togpm(playerid, params[])
{
	if(PlayerInfo[playerid][pTogPM] == 1)
	{
	    PlayerInfo[playerid][pTogPM] = 0;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have disabled private messaging, other players will not be able to send you a message.");
	}
	else
	{
	    PlayerInfo[playerid][pTogPM] = 1;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have enabled private messaging, anyone will now be able to send you a message.");
	}
	return 1;
}

CMD:pm(playerid, params[])
{
	new string[128], message[128], targetid;
	if(sscanf(params, "us[128]", targetid, message)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /pm <playerid> <message>");
   	else if(!IsPlayerConnectedEx(targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
   	else if(PlayerInfo[targetid][pTogPM] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "The specified player has disabled private messaging, you cannot send them a message.");
	format(string, sizeof(string), "[Message Sent]{FFFFFF} %s (ID: %d): %s", GetPlayerNameEx(targetid), targetid, message);
	SendClientMessageEx(playerid, COLOR_YELLOW, string);
	format(string, sizeof(string), "[Message Received]{FFFFFF} (ID: %d) %s: %s", playerid, GetPlayerNameEx(playerid), message);
   	SendClientMessageEx(targetid, COLOR_YELLOW, string);
    return 1;
}

CMD:reports(playerid, params[])
{
	new string[128], reportCount;
	if(IsAdmin(playerid, ADMIN_LEVEL_TRIALADMIN))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "-------------------------------------------------------------------------------------------------------------------------------");
		foreach(Player, i) if(GetPVarString(i, "Report", string, 128) > 0) reportCount++;
		if(reportCount == 0)
		{
	   		SendClientMessageEx(playerid, COLOR_ORANGE, "Active Reports (Total: 0):");
			SendClientMessageEx(playerid, COLOR_GREY, "There are no reports available at the moment.");
		}
		else
		{
			format(string, sizeof(string), "Active Reports (Total: %d):", reportCount);
			SendClientMessageEx(playerid, COLOR_ORANGE, string);
		}
		foreach(Player, i)
		{
			if(GetPVarString(i, "Report", string, 128) > 0)
			{
			    if(GetPVarInt(i, "SpeakingAdmin") == 0) format(string, sizeof(string), "%s (ID: %d) | Report: %s", GetPlayerNameEx(i), i, string);
				else format(string, sizeof(string), "%s (ID: %d) | Report: %s | Reviewer: %s", GetPlayerNameEx(i), i, string, GetPlayerNameEx(GetPVarInt(i, "SpeakingAdmin") - 1));
				SendClientMessageEx(playerid, COLOR_YELLOW, string);
			}
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "-------------------------------------------------------------------------------------------------------------------------------");
	}
	return 1;
}

CMD:reply(playerid, params[])
{
    if(GetPVarInt(playerid, "ReportStage") != 2) return SendClientMessageEx(playerid, COLOR_WHITE, "You are not able to reply because no administrators are currently reviewing your report.");
    else if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Usage: /reply [message]");
    new adminid = GetPVarInt(playerid, "SpeakingAdmin") - 1, string[128];
    if(GetPVarInt(adminid, "SpeakingPlayer") - 1 == playerid)
	{
   		format(string, sizeof(string), "[Message Sent]{FFFFFF} %s (ID: %d) %s", params, adminid, GetPlayerNameEx(adminid));
		SendClientMessageEx(playerid, COLOR_YELLOW, string);
		format(string, sizeof(string), "[Message Received] (ID: %d) %s:{FFFFFF} %s", playerid, GetPlayerNameEx(playerid), params);
	   	SendClientMessageEx(adminid, COLOR_YELLOW, string);
    }
	else DeleteReport(playerid);
	return 1;
}

CMD:ar(playerid, params[])
{
    new string[128], targetid;
    if(sscanf(params, "u", targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /ar <playerid>");
    else if(GetPVarInt(playerid, "SpeakingPlayer") > 0 && GetPVarInt(GetPVarInt(playerid, "SpeakingPlayer") - 1, "SpeakingAdmin") - 1 == playerid) return SendClientMessageEx(playerid, COLOR_GREY, "You already have an existing reporting, type /cr to complete it.");
	else if(IsAdmin(playerid, ADMIN_LEVEL_TRIALADMIN))
	{
		if(GetPVarString(targetid, "Report", string, 128))
		{
			format(string, sizeof(string), "AdmCmd: %s has accepted the report from %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(targetid));
	 		SendClientMessageToAdmins(string);
			format(string, sizeof(string), "%s has accepted your report and is now reviewing it, you may use /reply to speak with the administrator.", GetPlayerNameEx(playerid));
			SendClientMessageEx(targetid, COLOR_WHITE, string);
			SetPVarInt(targetid, "ReportStage", 2);
			SetPVarInt(targetid, "SpeakingAdmin", playerid + 1);
			SetPVarInt(playerid, "SpeakingPlayer", targetid + 1);
		}
	}
	return 1;
}

CMD:cr(playerid, params[])
{
    new string[128], targetid;
    if(sscanf(params, "u", targetid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Usage: /cr <playerid>");
	else if(IsAdmin(playerid, ADMIN_LEVEL_TRIALADMIN))
	{
		if(GetPVarString(targetid, "Report", string, 128))
		{
		    PlayerInfo[playerid][pReports]++;
			format(string, sizeof(string), "AdmCmd: %s has completed the report from %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(targetid));
	 		SendClientMessageToAdmins(string);
			DeleteReport(targetid);
		}
	}
	return 1;
}

CMD:tr(playerid, params[])
{
    new string[128], targetid, reason[32];
    if(sscanf(params, "us[32]", targetid, reason)) return SendClientMessageEx(playerid, COLOR_WHITE, "Usage: /tr <playerid> <reason>");
	else if(IsAdmin(playerid, ADMIN_LEVEL_TRIALADMIN))
	{
		if(GetPVarString(targetid, "Report", string, 128) > 0)
		{
		    PlayerInfo[playerid][pReports]++;
			format(string, sizeof(string), "AdmCmd: %s has trashed the report from (ID: %d) %s, reason: %s.", GetPlayerNameEx(playerid), targetid, GetPlayerNameEx(targetid), reason);
	 		SendClientMessageToAdmins(string);
			format(string, sizeof(string), "%s has trashed your report, reason: %s.", GetPlayerNameEx(playerid), reason);
			SendClientMessageEx(targetid, COLOR_WHITE, string);
			DeleteReport(targetid);
		}
	}
	return 1;
}

stock DeleteReport(playerid)
{
	DeletePVar(playerid, "Report");
	DeletePVar(playerid, "ReportStage");
	if(GetPVarInt(playerid, "SpeakingAdmin") > 0)
	{
	    DeletePVar(GetPVarInt(playerid, "SpeakingAdmin") - 1, "SpeakingPlayer");
	    DeletePVar(playerid, "SpeakingAdmin");
	}
}

CMD:jail(playerid, params[])
{
	if(IsAdmin(playerid, ADMIN_LEVEL_MODERATOR))
    {
	    new targetid, minutes, reason[128];
		if(sscanf(params, "uis[128]", targetid, minutes, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /jail <playerid> <minutes> <reason>");
		else if(!IsPlayerConnectedEx(targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		else if(PlayerInfo[targetid][pAdminLevel] > PlayerInfo[playerid][pAdminLevel]) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot jail an administrator higher than your rank.");
		else if(targetid == playerid) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot use this command on yourself.");
		else if(IsPlayerRestricted(targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot jail a player that is in the hospital.");

		format(reason, sizeof(reason), "AdmCmd: %s was jailed by %s, reason: %s", GetPlayerNameEx(targetid), GetPlayerNameEx(playerid), reason);
		AdminAlert(reason, ALERT_GLOBAL);

		PlayerInfo[targetid][pJailTime] = minutes*60;
		new jailPos = random(sizeof(JailPositions));
		SetPlayerPos(targetid, JailPositions[jailPos][0], JailPositions[jailPos][1], JailPositions[jailPos][2]);
		SetPlayerInteriorEx(targetid, 1);
		SetPlayerVirtualWorldEx(targetid, 1);

		SetPlayerToTeamColor(playerid);
		ResetPlayerWeapons(targetid);
  		stop JailTimerEx[targetid];
		JailTimerEx[targetid] = repeat JailTimer(targetid);
		for(new i=0; i < 12; i++) PlayerInfo[targetid][pWeapons][i] = 0;

		TogglePlayerControllable(targetid, false);
		SetPVarInt(targetid, "ActionRestriction", 1);
		TextDrawShowForPlayer(targetid, LoadingObjectTextDraw);
		TextDrawShowForPlayer(targetid, LoadingObjectBox);
		defer HideLoadingTextdraws(targetid);

		TextDrawShowForPlayer(targetid, JailTimerTD[targetid]);
		return 1;
   	}
   	else return SendClientMessageEx(playerid, COLOR_GREY, "You need to be a level one administrator or higher to use this command.");
}

CMD:prisoners(playerid, params[])
{
	if(IsAdmin(playerid, ADMIN_LEVEL_TRIALADMIN))
    {
        new string[128];
    	SendClientMessageEx(playerid, COLOR_GREY, "-----------------------------------------");
    	SendClientMessageEx(playerid, COLOR_WHITE, "People who are currently in jail:");
		foreach(new i: Player)
 		{
 		    if(PlayerInfo[i][pJailTime] > 0)
 		    {
 		        if(PlayerInfo[i][pJailTime]/60 > 1) format(string, sizeof(string), "(ID: %d) %s - %d minutes remaining.", i, GetPlayerNameEx(i), PlayerInfo[i][pJailTime]/60);
	 		    else format(string, sizeof(string), "(ID: %d) %s - %d seconds remaining.", i, GetPlayerNameEx(i), PlayerInfo[i][pJailTime]);
	 		    SendClientMessageEx(playerid, COLOR_WHITE, string);
 		    }
		}
    	SendClientMessageEx(playerid, COLOR_GREY, "-----------------------------------------");
    }
    return 1;
}

CMD:release(playerid, params[])
{
	if(IsAdmin(playerid, ADMIN_LEVEL_JUNIORADMIN))
    {
	    new targetid, reason[200];
		if(sscanf(params, "us[200]", targetid, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /release <playerid> <reason>");
		else if(!IsPlayerConnectedEx(targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		else if(targetid == playerid) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot use this command on yourself.");
		else if(PlayerInfo[targetid][pJailTime] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "The player specified is not in jail.");
		format(reason, sizeof(reason), "AdmCmd: %s was released from jail by %s, reason: %s", GetPlayerNameEx(targetid), GetPlayerNameEx(playerid), reason);
		AdminAlert(reason, ALERT_GLOBAL);

		TextDrawHideForPlayer(targetid, JailTimerTD[targetid]);
		PlayerInfo[targetid][pJailTime] = 0;
		SetPlayerPos(targetid, 1540.35, -1675.33, 13.55);
		SetPlayerInteriorEx(targetid, 0);
		SetPlayerVirtualWorldEx(targetid, 0);
		stop JailTimerEx[targetid];
		SetPlayerToTeamColor(targetid);
   	}
   	else SendClientMessageEx(playerid, COLOR_GREY, "You need to be a level three administrator or higher to use this command.");
	return 1;
}

CMD:query(playerid, params[])
{
	if(IsAdmin(playerid, ADMIN_LEVEL_LEADADMIN) || IsPlayerAdmin(playerid))
    {
        if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /query <mysql query>");
		mysql_query(params, THREAD_LOG_RESULT, playerid, mConnectionHandle);
		SendClientMessageEx(playerid, COLOR_WHITE, "You have successfully sent the query to the server.");
    }
    return 1;
 }

CMD:makeadmin(playerid, params[])
{
	if(IsAdmin(playerid, ADMIN_LEVEL_LEADADMIN) || IsPlayerAdmin(playerid))
    {
	    new targetid, level, string[128];
		if(sscanf(params, "ui", targetid, level)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /makeadmin <playerid> <level>");
		else if(!IsPlayerConnectedEx(targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		else if(level < 0 || level > 5) return SendClientMessageEx(playerid, COLOR_GREY, "You have enter an invalid administrator level.");
		PlayerInfo[targetid][pAdminLevel] = level;
		format(string, sizeof(string), "* You have been made a %s by Administrator %s.", GetAdministratorRank(targetid), GetPlayerNameEx(playerid));
		SendClientMessageEx(targetid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "You have made %s a %s.", GetPlayerNameEx(targetid), GetAdministratorRank(targetid));
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
   	}
   	else return SendClientMessageEx(playerid, COLOR_GREY, "You need to be a level five administrator or higher to use this command.");
	return 1;
}

CMD:slap(playerid, params[])
{
	if(IsAdmin(playerid, ADMIN_LEVEL_TRIALADMIN))
    {
        new targetid, string[128], Float:Position[3];
		if(sscanf(params, "u", targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /slap <playerid>");
		else if(!IsPlayerConnectedEx(targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		
		format(string, sizeof(string), "AdmCmd: %s has slapped (ID: %i) %s.", GetPlayerNameEx(playerid), targetid, GetPlayerNameEx(targetid));
		AdminAlert(string, ALERT_ADMINS);

		GetPlayerPos(targetid, Position[0], Position[1], Position[2]);
    	SetPlayerPos(targetid, Position[0], Position[1], Position[2] + 10);
   	}
   	else return SendClientMessageEx(playerid, COLOR_GREY, "You need to be a level two administrator or higher to use this command.");
	return 1;
}

CMD:sethp(playerid, params[])
{
	if(IsAdmin(playerid, ADMIN_LEVEL_JUNIORADMIN))
    {
        new targetid, amount, string[128];
		if(sscanf(params, "ui", targetid, amount)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /sethp <playerid> <amount>");
		else if(!IsPlayerConnectedEx(targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		
		format(string, sizeof(string), "AdmCmd: %s has modified (ID: %i) %s health.", GetPlayerNameEx(playerid), targetid, GetPlayerNameEx(targetid));
		AdminAlert(string, ALERT_ADMINS);
		
		SetPlayerHealthEx(targetid, amount);
   	}
   	else SendClientMessageEx(playerid, COLOR_GREY, "You need to be a level three administrator or higher to use this command.");
	return 1;
}

CMD:setskin(playerid, params[])
{
	if(IsAdmin(playerid, ADMIN_LEVEL_TRIALADMIN))
    {
        new targetid, skinid, string[128];
		if(sscanf(params, "ui", targetid, skinid)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /setskin <playerid> <skin>");
		else if(!IsPlayerConnectedEx(targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		else if(skinid < 0 || skinid > 299) return SendClientMessageEx(playerid, COLOR_GREY, "You have entered an invalid skin id.");
		format(string, sizeof(string), "AdmCmd: %s has set (ID: %i) %s's skin ID to %d.", GetPlayerNameEx(playerid), targetid, GetPlayerNameEx(targetid), skinid);
		AdminAlert(string, ALERT_ADMINS);
		format(string, sizeof(string), "Administrator %s has set your skin ID to %d.", GetPlayerNameEx(playerid), skinid);
		SendClientMessageEx(targetid, COLOR_WHITE, string);
		SetPlayerSkinEx(targetid, skinid);
   	}
   	else return SendClientMessageEx(playerid, COLOR_GREY, "You need to be a level two administrator or higher to use this command.");
	return 1;
}

CMD:setarmor(playerid, params[])
{
	if(IsAdmin(playerid, ADMIN_LEVEL_SENIORADMIN))
    {
        new targetid, amount, string[128], Float:armour;
		if(sscanf(params, "ui", targetid, amount)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /setarmor <playerid> <amount>");
		else if(!IsPlayerConnectedEx(targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		else if(amount < 0 || amount > 100) return SendClientMessageEx(playerid, COLOR_GREY, "Please enter a valid amount between 0-100.");
		GetPlayerArmour(targetid, armour);
		format(string, sizeof(string), "AdmCmd: %s has modified (ID: %i) %s's armour from %d to %d.", GetPlayerNameEx(playerid), targetid, GetPlayerNameEx(targetid), floatround(armour, floatround_ceil), amount);
		AdminAlert(string, ALERT_ADMINS);
		
		SetPlayerArmourEx(targetid, amount);
   	}
   	else
   	{
       	return SendClientMessageEx(playerid, COLOR_GREY, "You need to be a level four administrator or higher to use this command.");
	}
	return 1;
}

CMD:setweather(playerid, params[])
{
	if(IsAdmin(playerid, ADMIN_LEVEL_SENIORADMIN))
    {
        new value, string[128];
		if(sscanf(params, "i", value)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /setweather <id>");
		else if(value < 0 || value > 20) return SendClientMessageEx(playerid, COLOR_GREY, "Please enter a valid amount between 0-20.");
		SetWeather(value);
		format(string, sizeof(string), "AdmCmd: %s has set the weather to id: %d", GetPlayerNameEx(playerid), value);
		AdminAlert(string, ALERT_ADMINS);
   	}
   	else
   	{
       	return SendClientMessageEx(playerid, COLOR_GREY, "You are unauthorized to use this command.");
	}
	return 1;
}

CMD:freeze(playerid, params[])
{
	if(IsAdmin(playerid, ADMIN_LEVEL_TRIALADMIN))
    {
		if(sscanf(params, "{u}")) {
	 		return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /freeze <playerid>");
		}
		else if(!IsPlayerConnectedEx(strval(params))) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		
		new string[128];
		format(string, sizeof(string), "AdmCmd: %s has frozen (ID: %i) %s.", GetPlayerNameEx(playerid), strval(params), GetPlayerNameEx(strval(params)));
		AdminAlert(string, ALERT_ADMINS);
		
		TogglePlayerControllable(strval(params), false);
		SetPVarInt(strval(params), "ActionRestriction", 1);
   	}
   	else return SendClientMessageEx(playerid, COLOR_GREY, "You need to be a level three administrator or higher to use this command.");
	return 1;
}

CMD:unfreeze(playerid, params[])
{
	if(IsAdmin(playerid, ADMIN_LEVEL_TRIALADMIN))
    {
		if(sscanf(params, "{u}")) {
	 		return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /unfreeze <playerid>");
		}
		else if(!IsPlayerConnectedEx(strval(params))) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		else if(GetPVarInt(strval(params), "IsCuffed") == 1) return SendClientMessageEx(playerid, COLOR_GREY, "The specified player is currently cuffed, please use the /uncuff command.");
		new string[128];
		format(string, sizeof(string), "AdmCmd: %s has unfrozen (ID: %i) %s.", GetPlayerNameEx(playerid), strval(params), GetPlayerNameEx(strval(params)));
		AdminAlert(string, ALERT_ADMINS);
		SetPlayerSkin(strval(params), PlayerInfo[strval(params)][pSkin]);
		TogglePlayerControllable(strval(params), true);
		ClearAnimations(strval(params), 1);
		DeletePVar(strval(params), "ActionRestriction");
   	}
   	else return SendClientMessageEx(playerid, COLOR_GREY, "You need to be a level three administrator or higher to use this command.");
	return 1;
}

CMD:setvw(playerid, params[])
{
	if(IsAdmin(playerid, ADMIN_LEVEL_TRIALADMIN))
    {
        new targetid, world, string[128];
		if(sscanf(params, "ui", targetid, world)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /setvw <playerid> <world>");
		else if(!IsPlayerConnectedEx(targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");

		SetPlayerVirtualWorldEx(targetid, world);
		format(string, sizeof(string), "Your virtual world was set to %d by Administrator %s.", world, GetPlayerNameEx(playerid));
		SendClientMessageEx(targetid, COLOR_WHITE, string);
   	}
   	else return SendClientMessageEx(playerid, COLOR_GREY, "You need to be a level three administrator or higher to use this command.");
	return 1;
}

CMD:gethere(playerid, params[])
{
	if(IsAdmin(playerid, ADMIN_LEVEL_TRIALADMIN))
    {
        new targetid, Float:Position[3];
		if(sscanf(params, "u", targetid)) {
	 		return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /gethere <playerid>");
		}
		else if(!IsPlayerConnectedEx(targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		else if(targetid == playerid) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot use this command on yourself.");
		
		if(IsPlayerInAnyVehicle(targetid))
		{
		    RemovePlayerFromVehicleEx(targetid);
		    ClearAnimations(targetid);
		}
		
		GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
		SetPlayerInteriorEx(targetid, GetPlayerInterior(playerid));
		SetPlayerVirtualWorldEx(targetid, GetPlayerVirtualWorld(playerid));
		SetPlayerPos(targetid, Position[0], Position[1], Position[2]);
		SendClientMessageEx(targetid, COLOR_FADE1, "You have been teleported.");
   	}
   	else
   	{
       	return SendClientMessageEx(playerid, COLOR_GREY, "You need to be a level three administrator or higher to use this command.");
	}
	return 1;
}

CMD:revive(playerid,params[])
{
    if(IsAdmin(playerid, ADMIN_LEVEL_TRIALADMIN))
    {
    	new targetid, string[128];
    	if(sscanf(params,"u",targetid)) return SendClientMessageEx(playerid,COLOR_GREY,"Usage: /revive <playerid>");
		else if(!IsPlayerConnectedEx(targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		else if(GetPVarInt(targetid, "RequireMedicalAssistance") == 0) return SendClientMessageEx(playerid, COLOR_GREY, "The specified player does not need reviving.");
    	DeletePVar(GetPVarInt(targetid, "MedicId"), "MedicCall");
    	DeletePVar(targetid, "MedicId");
		DeletePVar(targetid, "MedicalX");
		DeletePVar(targetid, "MedicalY");
		DeletePVar(targetid, "MedicalZ");
		DeletePVar(targetid, "MedicalInterior");
		DeletePVar(targetid, "MedicalVirtualWorld");
		DeletePVar(targetid, "RequireMedicalAssistance");
		PlayerInfo[targetid][pMedicalBill] = 0;
		SetPlayerHealthEx(targetid, 100);
		ClearAnimations(targetid);
		SendClientMessageEx(targetid, COLOR_FADE1, "You were revived by an administrator.");
		format(string, sizeof(string), "AdmCmd: %s revived (ID: %i) %s.", GetPlayerNameEx(playerid), targetid, GetPlayerNameEx(targetid));
		AdminAlert(string, ALERT_ADMINS);
		SendClientMessageEx(playerid, COLOR_FADE1, "You have successfully revived the specified player.");
	}
 	return 1;
}

CMD:goto(playerid, params[])
{
    if(IsAdmin(playerid, ADMIN_LEVEL_TRIALADMIN))
	{
		if(isnull(params))
		{
			SendClientMessage(playerid, COLOR_WHITE, "USAGE: /goto [location]");
			SendClientMessage(playerid, COLOR_GREY, "Locations: ls, sf, lv, mall, bank, allsaints, countygen, gym, fbi, rc, jail");
			return 1;
		}
		if(strcmp(params,"ls",true) == 0)
		{
			if(GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1529.6,-1691.2,13.3);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
			}
			else SetPlayerPos(playerid, 1529.6,-1691.2,13.3);
			SendClientMessage(playerid, COLOR_WHITE, "You have teleported to Los Santos.");
			SetPlayerInteriorEx(playerid,0);
			SetPlayerVirtualWorldEx(playerid, 0);
		}

		else if(strcmp(params,"sf",true) == 0)
		{
		 	if(GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, -1417.0,-295.8,14.1);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
			}
			else SetPlayerPos(playerid, -1417.0,-295.8,14.1);
			SendClientMessage(playerid, COLOR_WHITE, "You have teleported to San Fierro.");
			SetPlayerInteriorEx(playerid,0);
			SetPlayerVirtualWorldEx(playerid, 0);
		}
		else if(strcmp(params,"lv",true) == 0)
		{
		 	if(GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1699.2, 1435.1, 10.7);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
			}
			else SetPlayerPos(playerid, 1699.2,1435.1, 10.7);
			SendClientMessage(playerid, COLOR_WHITE, "You have teleported to Las Venturas.");
			SetPlayerInteriorEx(playerid,0);
			SetPlayerVirtualWorldEx(playerid, 0);
		}
		else if(strcmp(params,"bank",true) == 0)
		{
		 	if(GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1487.91, -1030.60, 23.66);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
			}
			else SetPlayerPos(playerid, 1487.91, -1030.60, 23.66);
			SendClientMessage(playerid, COLOR_WHITE, "You have teleported to the Bank of Los Santos.");
			SetPlayerInteriorEx(playerid,0);
			SetPlayerVirtualWorldEx(playerid, 0);
		}
		else if(strcmp(params,"allsaints",true) == 0)
		{
		 	if(GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1192.78, -1292.68, 13.38);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
			}
			else SetPlayerPos(playerid, 1192.78, -1292.68, 13.38);
			SendClientMessage(playerid, COLOR_WHITE, "You have teleported to All Saints General Hospital.");
			SetPlayerInteriorEx(playerid,0);
			SetPlayerVirtualWorldEx(playerid, 0);
		}
		else if(strcmp(params,"countygen",true) == 0)
		{
		 	if(GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 2000.05, -1409.36, 16.99);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
			}
			else SetPlayerPos(playerid, 2000.05, -1409.36, 16.99);
			SendClientMessage(playerid, COLOR_WHITE, "You have teleported to County General Hospital.");
			SetPlayerInteriorEx(playerid,0);
			SetPlayerVirtualWorldEx(playerid, 0);
		}
		else if(strcmp(params,"gym",true) == 0)
		{
		 	if(GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 2227.60, -1674.89, 14.62);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
			}
			else SetPlayerPos(playerid, 2227.60, -1674.89, 14.62);
			SendClientMessage(playerid, COLOR_WHITE, "You have teleported to Ganton Gym.");
			SetPlayerInteriorEx(playerid,0);
			SetPlayerVirtualWorldEx(playerid, 0);
   		}
		else if(strcmp(params,"fbi",true) == 0)
		{
		 	if(GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 344.77,-1526.08,33.28);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
			}
			else SetPlayerPos(playerid, 344.77,-1526.08,33.28);
			SendClientMessage(playerid, COLOR_WHITE, "You have teleported to the FBI.");
			SetPlayerInteriorEx(playerid,0);
			SetPlayerVirtualWorldEx(playerid, 0);
		}
  		else if(strcmp(params,"rc",true) == 0)
		{
		 	if(GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1253.70, 343.73, 19.41);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
			}
			else SetPlayerPos(playerid, 1253.70, 343.73, 19.41);
			SendClientMessage(playerid, COLOR_WHITE, "You have teleported to Red County.");
			SetPlayerInteriorEx(playerid,0);
			SetPlayerVirtualWorldEx(playerid, 0);
   		}
		else if(strcmp(params,"jail",true) == 0)
		{
	 		SetPlayerPos(playerid, 1835.3623,-1721.8365,5202.5859);
			SendClientMessage(playerid, COLOR_WHITE, "You have teleported to Jail.");
			SetPlayerInteriorEx(playerid, 1);
			SetPlayerVirtualWorldEx(playerid, 0);
		}
		else if(strcmp(params,"mall",true) == 0)
		{
		 	if(GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1133.71,-1464.52,15.77);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
			}
			else SetPlayerPos(playerid, 1133.71,-1464.52,15.77);
			SendClientMessage(playerid, COLOR_WHITE, "You have teleported to the Mall.");
			SetPlayerInteriorEx(playerid,0);
			SetPlayerVirtualWorldEx(playerid, 0);
		}
	}
	else SendClientMessage(playerid, COLOR_GREY, "You're not authorized to use that command.");
	return 1;
}

CMD:gotoco(playerid,params[])
{
    if(IsAdmin(playerid, ADMIN_LEVEL_TRIALADMIN))
    {
    	new Float:x,Float:y,Float:z,i;
    	if(sscanf(params,"fffi",x,y,z,i))
		{
			return SendClientMessageEx(playerid,COLOR_GREY,"Usage: /gotoco [xcoord] [ycoord] [zcoord] [interior]");
		}
        SetPlayerInteriorEx(playerid, i);
        SetPlayerPos(playerid,x,y,z);
	}
 	return 1;
}

CMD:gotoid(playerid, params[])
{
	if(IsAdmin(playerid, ADMIN_LEVEL_TRIALADMIN))
    {
        new targetid, Float:Position[3];
		if(sscanf(params, "u", targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /gotoid <playerid>");
		else if(!IsPlayerConnectedEx(targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		else if(targetid == playerid) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot use this command on yourself.");
		
		GetPlayerPos(targetid, Position[0], Position[1], Position[2]);
		SetPlayerInteriorEx(playerid, GetPlayerInterior(targetid));
		SetPlayerVirtualWorldEx(playerid, GetPlayerVirtualWorld(targetid));
		SetPlayerPos(playerid, Position[0] + 1, Position[1], Position[2]);
   	}
   	else return SendClientMessageEx(playerid, COLOR_GREY, "You need to be a level three administrator or higher to use this command.");
	return 1;
}

CMD:sendtols(playerid, params[])
{
	if(IsAdmin(playerid, ADMIN_LEVEL_TRIALADMIN))
    {
        new targetid;
		if(sscanf(params, "u", targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /sendtols <playerid>");
		else if(!IsPlayerConnectedEx(targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");

		if(IsPlayerInAnyVehicle(targetid))
		{
			SetVehiclePos(GetPlayerVehicleID(targetid), 1531.78, -1675.01, 13.04);
			SetVehicleZAngle(GetPlayerVehicleID(targetid), 180.0);
		}
		else SetPlayerPos(targetid, 1540.35, -1675.33, 13.55);
		SetPlayerInteriorEx(targetid, 0);
		SetPlayerVirtualWorldEx(targetid, 0);
		SendClientMessageEx(targetid, COLOR_FADE1, "You have been teleported.");
   	}
   	else
   	{
       	return SendClientMessageEx(playerid, COLOR_GREY, "You need to be a level three administrator or higher to use this command.");
	}
	return 1;
}

CMD:setstat(playerid, params[])
{
	if(IsAdmin(playerid, ADMIN_LEVEL_LEADADMIN))
    {
        new targetid, value, option[16], string[256];
		if(sscanf(params, "us[16]i", targetid, option, value)) {
	 		SendClientMessageEx(playerid, COLOR_GREY, "Usage: /setstat <playerid> <stat> <value>");
			SendClientMessageEx(playerid, COLOR_GREY, "---------------------------------------------------");
			SendClientMessageEx(playerid, COLOR_GREY, "Available Options:");
			SendClientMessageEx(playerid, COLOR_GREY, "Level: <1 - 50>");
			SendClientMessageEx(playerid, COLOR_GREY, "Age: <18 - 80>");
			SendClientMessageEx(playerid, COLOR_GREY, "Phone: <number>");
			SendClientMessageEx(playerid, COLOR_GREY, "Gender: <1 (Male) or 2 (Female)>");
			SendClientMessageEx(playerid, COLOR_GREY, "Hits (Completed): 0 minimum value");
			SendClientMessageEx(playerid, COLOR_GREY, "---------------------------------------------------");
	 		return 1;
		}
		else if(!IsPlayerConnectedEx(targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		else if(GetPVarInt(targetid, "gPlayerLogged") == 0) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");

		if(!strcmp(option, "level", true))
		{
		    if(value < 1 || value > 50) return SendClientMessageEx(playerid, COLOR_GREY, "The value cannot be less then 1 or more than 50.");
		    PlayerInfo[targetid][pLevel] = value;
		    SetPlayerScore(targetid, PlayerInfo[targetid][pLevel]);
			format(string, sizeof(string), "Your level was set to %i by Administrator %s.", value, GetPlayerNameEx(playerid));
			SendClientMessageEx(targetid, COLOR_YELLOW, string);
			format(string, sizeof(string), "AdmCmd: %s has set (ID: %i) %s's level to %i.", GetPlayerNameEx(playerid), targetid, GetPlayerNameEx(targetid), value);
		}
		else if(!strcmp(option, "age", true))
		{
		    if(value < 18 || value > 80) return SendClientMessageEx(playerid, COLOR_GREY, "The value cannot be less then 18 or more than 80.");
		    PlayerInfo[targetid][pAge] = value;
			format(string, sizeof(string), "Your age was set to %i by Administrator %s.", value, GetPlayerNameEx(playerid));
			SendClientMessageEx(targetid, COLOR_YELLOW, string);
			format(string, sizeof(string), "AdmCmd: %s has set (ID: %i) %s's age to %i.", GetPlayerNameEx(playerid), targetid, GetPlayerNameEx(targetid), value);
		}
		else if(!strcmp(option, "phone", true) && value != 0)
		{
		    if(!IsNumberAvailable(value)) return SendClientMessageEx(playerid, COLOR_GREY, "The specified number is not available.");
   			if(PlayerInfo[targetid][pPhoneNumber] != 0) {
				format(string, sizeof(string), "SELECT * FROM `accounts` WHERE `PhoneNumber` = '%d'", PlayerInfo[targetid][pPhoneNumber]);
				mysql_function_query(mConnectionHandle, string, true, "MySQL_Delete_Number", "iii", PlayerInfo[targetid][pPhoneNumber], targetid, mConnectionHandle);
				DeletePhoneNumber(PlayerInfo[targetid][pPhoneNumber]);
			}
		    AddPhoneNumber(value);
		    PlayerInfo[targetid][pPhoneNumber] = value;
			format(string, sizeof(string), "AdmCmd: %s has set (ID: %i) %s's phone number to %i.", GetPlayerNameEx(playerid), targetid, GetPlayerNameEx(targetid), value);
		}
		else if(!strcmp(option, "gender", true))
		{
		    if(value < 1 || value > 2) return SendClientMessageEx(playerid, COLOR_GREY, "The value cannot be less then 1 or more than 2.");
		    PlayerInfo[targetid][pGender] = value;
			format(string, sizeof(string), "Your gender was set to %s by Administrator %s.", GetPlayerGender(value), GetPlayerNameEx(playerid));
			SendClientMessageEx(targetid, COLOR_YELLOW, string);
			format(string, sizeof(string), "AdmCmd: %s has set (ID: %i) %s's gender to %s.", GetPlayerNameEx(playerid), targetid, GetPlayerNameEx(targetid), GetPlayerGender(value));
		}
		else if(!strcmp(option, "hits", true))
		{
		    if(value < 0) return SendClientMessageEx(playerid, COLOR_GREY, "The value cannot be less then 0.");
		    PlayerInfo[targetid][pCompletedHits] = value;
			format(string, sizeof(string), "Your completed hits was set to %d by Administrator %s.", PlayerInfo[targetid][pCompletedHits], GetPlayerNameEx(playerid));
			SendClientMessageEx(targetid, COLOR_YELLOW, string);
			format(string, sizeof(string), "AdmCmd: %s has set (ID: %i) %s's hits to %d.", GetPlayerNameEx(playerid), targetid, GetPlayerNameEx(targetid), PlayerInfo[targetid][pCompletedHits]);
		}
		else
		{
			return SendClientMessageEx(playerid, COLOR_GREY, "You have entered an invalid option.");
		}
		AdminAlert(string, ALERT_ADMINS);
   	}
   	else
   	{
       	return SendClientMessageEx(playerid, COLOR_GREY, "You need to be a level five administrator or higher to use this command.");
	}
	return 1;
}


public MySQL_Delete_Number(number, playerid, connectionHandle)
{
	new
	    szQuery[128],
		rowCount,
		fieldCount;
	cache_get_data(rowCount, fieldCount, connectionHandle);
	if(rowCount > 0)
	{
        foreach(new i: Player)
        {
            if(PlayerInfo[i][pPhoneNumber] == number)
            {
                SendClientMessageEx(i, COLOR_WHITE, "Your phone number was deleted from the database, therefore your number has been set to 0.");
                PlayerInfo[i][pPhoneNumber] = 0;
            }
        }
		format(szQuery, sizeof(szQuery), "UPDATE `accounts` SET  `PhoneNumber` = '0' WHERE  `PhoneNumber` = %d", number);
		mysql_query(szQuery, THREAD_NO_RESULT, playerid, connectionHandle);
		DeletePhoneNumber(number);
	}
}

CMD:deletenumber(playerid, params[])
{
	if(IsAdmin(playerid, ADMIN_LEVEL_SENIORADMIN))
	{
	    new
	        szQuery[128];
	    if(sscanf(params, "{i}"))
	    {
	        return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /deletenumber <number>");
	    }
	    else if(strval(params) == 0 || strlen(params) > 7) return SendClientMessageEx(playerid, COLOR_GREY, "You have specified an invalid number.");
		format(szQuery, sizeof(szQuery), "SELECT * FROM `accounts` WHERE `PhoneNumber` = '%d'", strval(params));
		mysql_function_query(mConnectionHandle, szQuery, true, "MySQL_Delete_Number", "iii", strval(params), playerid, mConnectionHandle);
	}
	return 1;
}

CMD:givecash(playerid, params[])
{
	if(IsAdmin(playerid, ADMIN_LEVEL_LEADADMIN))
    {
        new targetid, amount, string[128];
		if(sscanf(params, "ui", targetid, amount)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /givecash <playerid> <amount>");
		else if(!IsPlayerConnectedEx(targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		format(string, sizeof(string), "You have given %s $%i.", GetPlayerNameEx(targetid), amount);
		SendClientMessageEx(playerid, COLOR_YELLOW, string);
		format(string, sizeof(string), "You were given $%i from Administrator %s.", amount, GetPlayerNameEx(playerid));
		SendClientMessageEx(targetid, COLOR_YELLOW, string);
		GivePlayerCash(targetid, amount);
		format(string, sizeof(string), "AdmCmd: %s has issued (ID: %i) %s a refund of $%i.", GetPlayerNameEx(playerid), targetid, GetPlayerNameEx(targetid), amount);
		AdminAlert(string, ALERT_ADMINS);
   	}
   	else
   	{
       	SendClientMessageEx(playerid, COLOR_GREY, "You need to be a level five administrator or higher to use this command.");
	}
	return 1;
}

CMD:spectate(playerid, params[])
{
	if(IsAdmin(playerid, ADMIN_LEVEL_TRIALADMIN))
    {
        new string[128], targetid;
		if(!strcmp("off", params, true) && SpectatingPlayer[playerid] != INVALID_PLAYER_ID)
		{
            SpectatingAdmin[SpectatingPlayer[playerid]] = INVALID_PLAYER_ID;
		    SpectatingPlayer[playerid] = INVALID_PLAYER_ID;
		    TogglePlayerSpectating(playerid, false);
			SetPlayerPos(playerid, 1540.35, -1675.33, 13.55);
		    SetPlayerVirtualWorldEx(playerid, 0);
		    SetPlayerInteriorEx(playerid, 0);
		    SetCameraBehindPlayer(playerid);
		    return 1;
		}
        else if(sscanf(params, "u", targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /spectate <playerid>");
		else if(PlayerInfo[targetid][pTutorial] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "This player is currently in the tutorial and cannot be spectated.");
		else if(targetid == playerid) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot use this command on yourself.");
		else if(SpectatingAdmin[targetid] != INVALID_PLAYER_ID || SpectatingPlayer[targetid] != INVALID_PLAYER_ID) return SendClientMessageEx(playerid, COLOR_GREY, "The specified player is already being spectated.");
		else if(!IsPlayerConnectedEx(targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		if(SpectatingPlayer[playerid] != INVALID_PLAYER_ID)
		{
            SpectatingAdmin[SpectatingPlayer[playerid]] = INVALID_PLAYER_ID;
		    SpectatingPlayer[playerid] = INVALID_PLAYER_ID;
		}
		TogglePlayerSpectating(playerid, true);
        format(string, sizeof(string), "You are now spectating (ID: %d) %s, type /spec off to stop spectating.", targetid, GetPlayerNameEx(targetid));
        SendClientMessageEx(playerid, COLOR_WHITE, string);
        SpectatingAdmin[targetid] = playerid;
        SpectatingPlayer[playerid] = targetid;
   	    SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(targetid));
   	    SetPlayerInterior(playerid, GetPlayerInterior(targetid));
        if(IsPlayerInAnyVehicle(targetid))
        {
            PlayerSpectateVehicle(playerid, GetPlayerVehicleID(targetid));
        }
        else
		{
			PlayerSpectatePlayer(playerid, targetid);
        }
    }
	return 1;
}

CMD:spec(playerid, params[])
{
	return cmd_spectate(playerid, params);
}

CMD:fare(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] == 5)
	{
		new
	    	fareamount,
			string[128];

	    if(gTaxiFareAmount[playerid] != 0)
	    {
			gTaxiFareAmount[playerid] = 0;
	        GivePlayerCash(playerid, gTaxiFareEarnings[playerid]);
	        format(string, sizeof(string), "You have went off duty and earned $%d for this trip.", gTaxiFareEarnings[playerid]);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
	        gTaxiFareEarnings[playerid] = 0;
	        PlayerInfo[playerid][pDuty] = 0;
	        SetPlayerToTeamColor(playerid);
	    }
	    else
	    {
	    	if(sscanf(params, "i", fareamount)) return SendClientMessageEx(playerid, COLOR_WHITE, "Usage: /fare [$1-$5]");
	    	else if(fareamount < 1 || fareamount > 5) return SendClientMessageEx(playerid, COLOR_WHITE, "You must enter an amount between $1-$5 per second.");
	    	else if(!IsATaxiCar(GetPlayerVehicleID(playerid))) return SendClientMessageEx(playerid, COLOR_WHITE, "You must be inside a cab to use this command.");
	    	gTaxiFareEarnings[playerid] = 0;
	        format(string, sizeof(string), "You are now on duty, people who enter your car will pay you $%d every second.", fareamount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
	        gTaxiFareAmount[playerid] = fareamount;
	        PlayerInfo[playerid][pDuty] = 1;
	        SetPlayerToTeamColor(playerid);
	    }
	}
	return 1;
}

CMD:news(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 5 && PlayerInfo[playerid][pRank] >= 2)
	{
		new string[128];
		//if(!IsNewsVehicle(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_GREY, "You are not in a news vehicle.");
		if(sscanf(params, "s[128]", params)) return SendClientMessage(playerid, COLOR_WHITE, "Usage: /news [text]");
		format(string, sizeof(string), "SANews Reporter %s: %s", GetPlayerNameEx(playerid), params);
		SendClientMessageToAll(COLOR_ORANGE, string);
	}
	else SendClientMessage(playerid, COLOR_GREY, "You must be at least rank 2.");
	return 1;
}


CMD:creategun(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 4)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 6.0, 2543.16, -1296.00, 1044.13))
	    {
	        new weaponname[24];
			if(sscanf(params, "s[24]", weaponname))
			{
				SendClientMessageEx(playerid, COLOR_GREY, "Usage: /creategun [weapon name]");
				SendClientMessageEx(playerid, COLOR_GREY, "Weapon(s): Deagle ($900), Shotgun ($700), SPAS12 ($6500), M4 ($4500), AK-47 ($3500), Knife ($150), Bomb ($750)");
				SendClientMessageEx(playerid, COLOR_GREY, "Weapon(s): MP5 ($950), Uzi ($1200), Tec9 ($1100), Sniper ($12500), Katana ($400), SDpistol ($900)");
				return 1;
			}
			else if(PlayerInfo[playerid][pRank] < 2) return SendClientMessageEx(playerid, COLOR_GREY, "You must be at least rank 2 to create guns.");
			
			if(!strcmp(weaponname, "spas12", true) || !strcmp(weaponname, "spas", true) || !strcmp(weaponname, "spas12", true))
			{
			    if(VaultInfo[4][vMoney] < 2500) return SendClientMessageEx(playerid, COLOR_YELLOW, "Your faction vault does not have the sufficient funds, you cannot obtain this item.");
			    GivePlayerWeaponEx(playerid, WEAPON_SHOTGSPA);
	    		AddVaultMoney(4, -2500);
			}
			else if(!strcmp(weaponname, "deagle", true))
			{
			    if(VaultInfo[4][vMoney] < 900) return SendClientMessageEx(playerid, COLOR_YELLOW, "Your faction vault does not have the sufficient funds, you cannot obtain this item.");
			    GivePlayerWeaponEx(playerid, WEAPON_DEAGLE);
	    		AddVaultMoney(4, -900);
			}
			else if(!strcmp(weaponname, "shotgun", true))
			{
			    if(VaultInfo[4][vMoney] < 700) return SendClientMessageEx(playerid, COLOR_YELLOW, "Your faction vault does not have the sufficient funds, you cannot obtain this item.");
			    GivePlayerWeaponEx(playerid, WEAPON_SHOTGUN);
	    		AddVaultMoney(4, -700);
			}
			else if(!strcmp(weaponname, "m4", true))
			{
			    if(VaultInfo[4][vMoney] < 1800) return SendClientMessageEx(playerid, COLOR_YELLOW, "Your faction vault does not have the sufficient funds, you cannot obtain this item.");
			    GivePlayerWeaponEx(playerid, WEAPON_M4);
	    		AddVaultMoney(4, -1800);
			}
			else if(!strcmp(weaponname, "ak-47", true))
			{
			    if(VaultInfo[4][vMoney] < 1500) return SendClientMessageEx(playerid, COLOR_YELLOW, "Your faction vault does not have the sufficient funds, you cannot obtain this item.");
			    GivePlayerWeaponEx(playerid, WEAPON_AK47);
	    		AddVaultMoney(4, -1500);
			}
			else if(!strcmp(weaponname, "mp5", true))
			{
			    if(VaultInfo[4][vMoney] < 950) return SendClientMessageEx(playerid, COLOR_YELLOW, "Your faction vault does not have the sufficient funds, you cannot obtain this item.");
			    GivePlayerWeaponEx(playerid, WEAPON_MP5);
	    		AddVaultMoney(4, -950);
			}
			else if(!strcmp(weaponname, "uzi", true))
			{
			    if(VaultInfo[4][vMoney] < 1200) return SendClientMessageEx(playerid, COLOR_YELLOW, "Your faction vault does not have the sufficient funds, you cannot obtain this item.");
			    GivePlayerWeaponEx(playerid, WEAPON_UZI);
	    		AddVaultMoney(4, -1200);
			}
			else if(!strcmp(weaponname, "tec9", true))
			{
			    if(VaultInfo[4][vMoney] < 1100) return SendClientMessageEx(playerid, COLOR_YELLOW, "Your faction vault does not have the sufficient funds, you cannot obtain this item.");
			    GivePlayerWeaponEx(playerid, WEAPON_TEC9);
	    		AddVaultMoney(4, -1100);
			}
			else if(!strcmp(weaponname, "sniper", true))
			{
			    if(VaultInfo[4][vMoney] < 5000) return SendClientMessageEx(playerid, COLOR_YELLOW, "Your faction vault does not have the sufficient funds, you cannot obtain this item.");
			    GivePlayerWeaponEx(playerid, WEAPON_SNIPER);
	    		AddVaultMoney(4, -5000);
			}
			else if(!strcmp(weaponname, "katana", true))
			{
			    if(VaultInfo[4][vMoney] < 400) return SendClientMessageEx(playerid, COLOR_YELLOW, "Your faction vault does not have the sufficient funds, you cannot obtain this item.");
			    GivePlayerWeaponEx(playerid, WEAPON_KATANA);
	    		AddVaultMoney(4, -400);
			}
			else if(!strcmp(weaponname, "knife", true))
			{
			    if(VaultInfo[4][vMoney] < 150) return SendClientMessageEx(playerid, COLOR_YELLOW, "Your faction vault does not have the sufficient funds, you cannot obtain this item.");
			    GivePlayerWeaponEx(playerid, WEAPON_KNIFE);
				SendClientMessageEx(playerid, COLOR_WHITE, "A hitman may find this useful, you may be interest in selling them to the agency.");
	    		AddVaultMoney(4, -150);
			}
			else if(!strcmp(weaponname, "sdpistol", true))
			{
			    if(VaultInfo[4][vMoney] < 900) return SendClientMessageEx(playerid, COLOR_YELLOW, "Your faction vault does not have the sufficient funds, you cannot obtain this item.");
			    GivePlayerWeaponEx(playerid, WEAPON_SILENCED);
	    		AddVaultMoney(4, -900);
			}
			else if(!strcmp(weaponname, "bomb", true))
			{
			    if(VaultInfo[4][vMoney] < 750) return SendClientMessageEx(playerid, COLOR_YELLOW, "Your faction vault does not have the sufficient funds, you cannot obtain this item.");
			    PlayerInfo[playerid][pBombs]++;
				SendClientMessageEx(playerid, COLOR_WHITE, "A hitman may find this useful, you may be interest in selling them to the agency.");
	    		AddVaultMoney(4, -750);
			}
			else
			{
				return SendClientMessageEx(playerid, COLOR_GREY, "You have specified an invalid weapon name.");
			}
			new string[128];
			format(string, sizeof(string), "* %s takes a bunch of parts from the workbench, and puts them together.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	    }
	    else SendClientMessageEx(playerid, COLOR_GREY, "You are not at the weapon assembly workbench.");
	}
	return 1;
}

CMD:givegun(playerid, params[])
{
	if(IsAdmin(playerid, ADMIN_LEVEL_SENIORADMIN))
	{
		new targetid, weaponname[24], string[128];
		if(sscanf(params, "us[24]", targetid, weaponname)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /givegun <playerid> <weapon name>");
		else if(!IsPlayerConnectedEx(targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		if(!strcmp(weaponname, "spas12", true) || !strcmp(weaponname, "spas", true) || !strcmp(weaponname, "spas-12", true)) GivePlayerWeaponEx(targetid, WEAPON_SHOTGSPA);
		else if(!strcmp(weaponname, "shotgun", true)) GivePlayerWeaponEx(targetid, WEAPON_SHOTGUN);
		else if(!strcmp(weaponname, "knife", true)) GivePlayerWeaponEx(targetid, WEAPON_KNIFE);
		else if(!strcmp(weaponname, "chainsaw", true))	GivePlayerWeaponEx(targetid, WEAPON_CHAINSAW);
		else if(!strcmp(weaponname, "bat", true) || !strcmp(weaponname, "baseballbat", true))  GivePlayerWeaponEx(targetid, WEAPON_BAT);
		else if(!strcmp(weaponname, "katana", true)) GivePlayerWeaponEx(targetid, WEAPON_KATANA);
		else if(!strcmp(weaponname, "uzi", true)) GivePlayerWeaponEx(targetid, WEAPON_UZI);
		else if(!strcmp(weaponname, "tec9", true)) GivePlayerWeaponEx(targetid, WEAPON_TEC9);
		else if(!strcmp(weaponname, "mp5", true) || !strcmp(weaponname, "smg", true)) GivePlayerWeaponEx(targetid, WEAPON_MP5);
		else if(!strcmp(weaponname, "deagle", true)) GivePlayerWeaponEx(targetid, WEAPON_DEAGLE);
		else if(!strcmp(weaponname, "9mm", true) || !strcmp(weaponname, "colt45", true)) GivePlayerWeaponEx(targetid, WEAPON_COLT45);
		else if(!strcmp(weaponname, "sdpistol", true))	GivePlayerWeaponEx(targetid, WEAPON_SILENCED);
		else if(!strcmp(weaponname, "m4", true) || !strcmp(weaponname, "m4a1", true)) GivePlayerWeaponEx(targetid, WEAPON_M4);
		else if(!strcmp(weaponname, "ak47", true))	GivePlayerWeaponEx(targetid, WEAPON_AK47);
		else if(!strcmp(weaponname, "rifle", true)) GivePlayerWeaponEx(targetid, WEAPON_RIFLE);
		else if(!strcmp(weaponname, "sniper", true) || !strcmp(weaponname, "sniperrifle", true)) GivePlayerWeaponEx(targetid, WEAPON_SNIPER);
		else return SendClientMessageEx(playerid, COLOR_GREY, "You have entered an invalid weapon name.");
		format(string, sizeof(string), "You have given (ID: %d) %s a %s.", targetid, GetPlayerNameEx(targetid), weaponname);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "You have been given a %s from Administrator %s.", weaponname, GetPlayerNameEx(playerid));
		SendClientMessageEx(targetid, COLOR_LIGHTBLUE, string);
	}
	return 1;
}

CMD:giveweapon(playerid, params[])
{
	new targetid, weaponname[24], string[128];
	if(sscanf(params, "us[24]", targetid, weaponname)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /giveweapon <playerid> <weapon name>");
	else if(!IsPlayerConnectedEx(targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
	else if(!IsPlayerInRangeOfPlayer(playerid, targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "You must be near the specified player to use this command.");
	if(!strcmp(weaponname, "spas12", true) || !strcmp(weaponname, "spas", true) || !strcmp(weaponname, "spas-12", true))
	{
	    if(PlayerInfo[playerid][pWeapons][3] != WEAPON_SHOTGSPA) return SendClientMessageEx(playerid, COLOR_GREY, "You don't have this weapon.");
	    else if(PlayerInfo[targetid][pWeapons][3] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "The specified player already has a weapon in that slot.");
		RemovePlayerWeaponEx(playerid, 3);
		GivePlayerWeaponEx(targetid, WEAPON_SHOTGSPA);
		format(string, sizeof(string), "* %s has given %s their SPAS-12.", GetPlayerNameEx(playerid), GetPlayerNameEx(targetid));
		ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		format(string, sizeof(string), "[Weapon]: %s has given a SPAS-12 to %s.", PlayerInfo[playerid][pUsername], PlayerInfo[targetid][pUsername]);
		Log("logs/pay.log", string);
	}
	else if(!strcmp(weaponname, "shotgun", true))
	{
	    if(PlayerInfo[playerid][pWeapons][3] != WEAPON_SHOTGUN) return SendClientMessageEx(playerid, COLOR_GREY, "You don't have this weapon.");
	    else if(PlayerInfo[targetid][pWeapons][3] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "The specified player already has a weapon in that slot.");
		RemovePlayerWeaponEx(playerid, 3);
  		GivePlayerWeaponEx(targetid, WEAPON_SHOTGUN);
		format(string, sizeof(string), "* %s has given %s their shotgun.", GetPlayerNameEx(playerid), GetPlayerNameEx(targetid));
		ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		format(string, sizeof(string), "[Weapon]: %s has given a shotgun to %s.", PlayerInfo[playerid][pUsername], PlayerInfo[targetid][pUsername]);
		Log("logs/pay.log", string);
	}
	else if(!strcmp(weaponname, "knife", true))
	{
	    if(PlayerInfo[playerid][pWeapons][1] != WEAPON_KNIFE) return SendClientMessageEx(playerid, COLOR_GREY, "You don't have this weapon.");
	    else if(PlayerInfo[targetid][pWeapons][1] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "The specified player already has a weapon in that slot.");
		RemovePlayerWeaponEx(playerid, 1);
		GivePlayerWeaponEx(targetid, WEAPON_KNIFE);
		format(string, sizeof(string), "* %s has given %s their knife.", GetPlayerNameEx(playerid), GetPlayerNameEx(targetid));
		ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		format(string, sizeof(string), "[Weapon]: %s has given a knife to %s.", PlayerInfo[playerid][pUsername], PlayerInfo[targetid][pUsername]);
		Log("logs/pay.log", string);
	}
	else if(!strcmp(weaponname, "chainsaw", true))
	{
	    if(PlayerInfo[playerid][pWeapons][1] != WEAPON_CHAINSAW) return SendClientMessageEx(playerid, COLOR_GREY, "You don't have this weapon.");
	    else if(PlayerInfo[targetid][pWeapons][1] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "The specified player already has a weapon in that slot.");
		RemovePlayerWeaponEx(playerid, 1);
		GivePlayerWeaponEx(targetid, WEAPON_CHAINSAW);
		format(string, sizeof(string), "* %s has given %s their chainsaw.", GetPlayerNameEx(playerid), GetPlayerNameEx(targetid));
		ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		format(string, sizeof(string), "[Weapon]: %s has given a chainsaw to %s.", PlayerInfo[playerid][pUsername], PlayerInfo[targetid][pUsername]);
		Log("logs/pay.log", string);
	}
	else if(!strcmp(weaponname, "bat", true) || !strcmp(weaponname, "baseballbat", true))
	{
	    if(PlayerInfo[playerid][pWeapons][1] != WEAPON_BAT) return SendClientMessageEx(playerid, COLOR_GREY, "You don't have this weapon.");
	    else if(PlayerInfo[targetid][pWeapons][1] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "The specified player already has a weapon in that slot.");
		RemovePlayerWeaponEx(playerid, 1);
		GivePlayerWeaponEx(targetid, WEAPON_BAT);
		format(string, sizeof(string), "* %s has given %s their baseball bat.", GetPlayerNameEx(playerid), GetPlayerNameEx(targetid));
		ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		format(string, sizeof(string), "[Weapon]: %s has given a baseball bat to %s.", PlayerInfo[playerid][pUsername], PlayerInfo[targetid][pUsername]);
		Log("logs/pay.log", string);
	}
	else if(!strcmp(weaponname, "katana", true))
	{
	    if(PlayerInfo[playerid][pWeapons][1] != WEAPON_KATANA) return SendClientMessageEx(playerid, COLOR_GREY, "You don't have this weapon.");
	    else if(PlayerInfo[targetid][pWeapons][1] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "The specified player already has a weapon in that slot.");
		RemovePlayerWeaponEx(playerid, 1);
		GivePlayerWeaponEx(targetid, WEAPON_KATANA);
		format(string, sizeof(string), "* %s has given %s their katana.", GetPlayerNameEx(playerid), GetPlayerNameEx(targetid));
		ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		format(string, sizeof(string), "[Weapon]: %s has given a katana to %s.", PlayerInfo[playerid][pUsername], PlayerInfo[targetid][pUsername]);
		Log("logs/pay.log", string);
	}
	else if(!strcmp(weaponname, "uzi", true))
	{
	    if(PlayerInfo[playerid][pWeapons][4] != WEAPON_UZI) return SendClientMessageEx(playerid, COLOR_GREY, "You don't have this weapon.");
	    else if(PlayerInfo[targetid][pWeapons][4] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "The specified player already has a weapon in that slot.");
		RemovePlayerWeaponEx(playerid, 4);
		GivePlayerWeaponEx(targetid, WEAPON_UZI);
		format(string, sizeof(string), "* %s has given %s their Uzi.", GetPlayerNameEx(playerid), GetPlayerNameEx(targetid));
		ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		format(string, sizeof(string), "[Weapon]: %s has given a Uzi to %s.", PlayerInfo[playerid][pUsername], PlayerInfo[targetid][pUsername]);
		Log("logs/pay.log", string);
	}
	else if(!strcmp(weaponname, "tec9", true))
	{
	    if(PlayerInfo[playerid][pWeapons][4] != WEAPON_TEC9) return SendClientMessageEx(playerid, COLOR_GREY, "You don't have this weapon.");
	    else if(PlayerInfo[targetid][pWeapons][4] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "The specified player already has a weapon in that slot.");
		RemovePlayerWeaponEx(playerid, 4);
		GivePlayerWeaponEx(targetid, WEAPON_TEC9);
		format(string, sizeof(string), "* %s has given %s their Tec-9.", GetPlayerNameEx(playerid), GetPlayerNameEx(targetid));
		ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		format(string, sizeof(string), "[Weapon]: %s has given a Tec-9 to %s.", PlayerInfo[playerid][pUsername], PlayerInfo[targetid][pUsername]);
		Log("logs/pay.log", string);
	}
	else if(!strcmp(weaponname, "mp5", true) || !strcmp(weaponname, "smg", true))
	{
	    if(PlayerInfo[playerid][pWeapons][4] != WEAPON_MP5) return SendClientMessageEx(playerid, COLOR_GREY, "You don't have this weapon.");
	    else if(PlayerInfo[targetid][pWeapons][4] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "The specified player already has a weapon in that slot.");
		RemovePlayerWeaponEx(playerid, 4);
		GivePlayerWeaponEx(targetid, WEAPON_MP5);
		format(string, sizeof(string), "* %s has given %s their MP5.", GetPlayerNameEx(playerid), GetPlayerNameEx(targetid));
		ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		format(string, sizeof(string), "[Weapon]: %s has given a MP5 to %s.", PlayerInfo[playerid][pUsername], PlayerInfo[targetid][pUsername]);
		Log("logs/pay.log", string);
	}
	else if(!strcmp(weaponname, "deagle", true))
	{
	    if(PlayerInfo[playerid][pWeapons][2] != WEAPON_DEAGLE) return SendClientMessageEx(playerid, COLOR_GREY, "You don't have this weapon.");
	    else if(PlayerInfo[targetid][pWeapons][2] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "The specified player already has a weapon in that slot.");
		RemovePlayerWeaponEx(playerid, 2);
		GivePlayerWeaponEx(targetid, WEAPON_DEAGLE);
		format(string, sizeof(string), "* %s has given %s their deagle.", GetPlayerNameEx(playerid), GetPlayerNameEx(targetid));
		ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		format(string, sizeof(string), "[Weapon]: %s has given a deagle to %s.", PlayerInfo[playerid][pUsername], PlayerInfo[targetid][pUsername]);
		Log("logs/pay.log", string);
	}
	else if(!strcmp(weaponname, "9mm", true) || !strcmp(weaponname, "colt45", true))
	{
	    if(PlayerInfo[playerid][pWeapons][2] != WEAPON_COLT45) return SendClientMessageEx(playerid, COLOR_GREY, "You don't have this weapon.");
	    else if(PlayerInfo[targetid][pWeapons][2] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "The specified player already has a weapon in that slot.");
		RemovePlayerWeaponEx(playerid, 2);
		GivePlayerWeaponEx(targetid, WEAPON_COLT45);
		format(string, sizeof(string), "* %s has given %s their Colt-45.", GetPlayerNameEx(playerid), GetPlayerNameEx(targetid));
		ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		format(string, sizeof(string), "[Weapon]: %s has given a Colt-45 to %s.", PlayerInfo[playerid][pUsername], PlayerInfo[targetid][pUsername]);
		Log("logs/pay.log", string);
	}
	else if(!strcmp(weaponname, "sdpistol", true))
	{
	    if(PlayerInfo[playerid][pWeapons][2] != WEAPON_SILENCED) return SendClientMessageEx(playerid, COLOR_GREY, "You don't have this weapon.");
	    else if(PlayerInfo[targetid][pWeapons][2] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "The specified player already has a weapon in that slot.");
		RemovePlayerWeaponEx(playerid, 2);
		GivePlayerWeaponEx(targetid, WEAPON_SILENCED);
		format(string, sizeof(string), "* %s has given %s their silenced pistol.", GetPlayerNameEx(playerid), GetPlayerNameEx(targetid));
		ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		format(string, sizeof(string), "[Weapon]: %s has given a silenced pistol to %s.", PlayerInfo[playerid][pUsername], PlayerInfo[targetid][pUsername]);
		Log("logs/pay.log", string);
	}
	else if(!strcmp(weaponname, "m4", true) || !strcmp(weaponname, "m4a1", true))
	{
	    if(PlayerInfo[playerid][pWeapons][5] != WEAPON_M4) return SendClientMessageEx(playerid, COLOR_GREY, "You don't have this weapon.");
	    else if(PlayerInfo[targetid][pWeapons][5] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "The specified player already has a weapon in that slot.");
		RemovePlayerWeaponEx(playerid, 5);
		GivePlayerWeaponEx(targetid, WEAPON_M4);
		format(string, sizeof(string), "* %s has given %s their M4A1.", GetPlayerNameEx(playerid), GetPlayerNameEx(targetid));
		ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		format(string, sizeof(string), "[Weapon]: %s has given a M4AI to %s.", PlayerInfo[playerid][pUsername], PlayerInfo[targetid][pUsername]);
		Log("logs/pay.log", string);
	}
	else if(!strcmp(weaponname, "ak47", true))
	{
	    if(PlayerInfo[playerid][pWeapons][5] != WEAPON_AK47) return SendClientMessageEx(playerid, COLOR_GREY, "You don't have this weapon.");
	    else if(PlayerInfo[targetid][pWeapons][5] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "The specified player already has a weapon in that slot.");
		RemovePlayerWeaponEx(playerid, 5);
		GivePlayerWeaponEx(targetid, WEAPON_AK47);
		format(string, sizeof(string), "* %s has given %s their AK-47.", GetPlayerNameEx(playerid), GetPlayerNameEx(targetid));
		ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		format(string, sizeof(string), "[Weapon]: %s has given a AK-47 to %s.", PlayerInfo[playerid][pUsername], PlayerInfo[targetid][pUsername]);
		Log("logs/pay.log", string);
	}
	else if(!strcmp(weaponname, "rifle", true))
	{
	    if(PlayerInfo[playerid][pWeapons][6] != WEAPON_RIFLE) return SendClientMessageEx(playerid, COLOR_GREY, "You don't have this weapon.");
	    else if(PlayerInfo[targetid][pWeapons][6] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "The specified player already has a weapon in that slot.");
		RemovePlayerWeaponEx(playerid, 6);
		GivePlayerWeaponEx(targetid, WEAPON_RIFLE);
		format(string, sizeof(string), "* %s has given %s their rifle.", GetPlayerNameEx(playerid), GetPlayerNameEx(targetid));
		ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		format(string, sizeof(string), "[Weapon]: %s has given a rifle to %s.", PlayerInfo[playerid][pUsername], PlayerInfo[targetid][pUsername]);
		Log("logs/pay.log", string);
	}
	else if(!strcmp(weaponname, "sniper", true) || !strcmp(weaponname, "sniperrifle", true))
	{
	    if(PlayerInfo[playerid][pWeapons][6] != WEAPON_SNIPER) return SendClientMessageEx(playerid, COLOR_GREY, "You don't have this weapon.");
	    else if(PlayerInfo[targetid][pWeapons][6] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "The specified player already has a weapon in that slot.");
		RemovePlayerWeaponEx(playerid, 6);
		GivePlayerWeaponEx(targetid, WEAPON_SNIPER);
		format(string, sizeof(string), "* %s has given %s their sniper rifle.", GetPlayerNameEx(playerid), GetPlayerNameEx(targetid));
		ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		format(string, sizeof(string), "[Weapon]: %s has given a sniper rifle to %s.", PlayerInfo[playerid][pUsername], PlayerInfo[targetid][pUsername]);
		Log("logs/pay.log", string);
	}
	else SendClientMessageEx(playerid, COLOR_GREY, " You have entered an invalid weapon name.");
	return 1;
}

CMD:drop(playerid, params[])
{
	new string[128];
	if(sscanf(params, "{s[24]}")) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /drop [weapons, weed, seeds]");
	if(!strcmp(params, "weapons", true))
	{
		ResetPlayerWeapons(playerid);
		SetPlayerArmedWeapon(playerid, 0);
		for (new i=0; i < 12; i++)
		{
			PlayerInfo[playerid][pWeapons][i] = 0;
		}
		format(string, sizeof(string), "* %s has dropped their weapons.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	else if(!strcmp(params, "weed", true))
	{
		PlayerInfo[playerid][pWeed] = 0;
		format(string, sizeof(string), "* %s has dropped their weed.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	else if(!strcmp(params, "seeds", true))
	{
		PlayerInfo[playerid][pSeeds] = 0;
		format(string, sizeof(string), "* %s has dropped a small packet of seeds.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	return 1;
}

CMD:give(playerid, params[])
{
	new targetid, option[12], amount, string[128];
	if(sscanf(params, "us[12]i", targetid, option, amount)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /give <playerid> <weed, seed, bomb> <amount>");
	else if(!IsPlayerInRangeOfPlayer(playerid, targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "You must be near the specified player to use this command.");
	if(!strcmp(option, "weed", true))
	{
	    if(PlayerInfo[playerid][pWeed] < amount || amount < 1) return SendClientMessageEx(playerid, COLOR_GREY, "You don't have that many grams of weed to give.");
		PlayerInfo[playerid][pWeed] -= amount;
		PlayerInfo[targetid][pWeed] += amount;
		format(string, sizeof(string), "* %s withdraws a small dime-bag, and hands it over to %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(targetid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
     	format(string, sizeof(string), " *  You have received %d grams of weed from (ID: %d) %s.", amount, playerid, GetPlayerNameEx(playerid));
     	SendClientMessageEx(targetid, COLOR_GREY, string);
     	format(string, sizeof(string), " *  You have sent %d grams of weed to (ID: %d) %s.", amount, targetid, GetPlayerNameEx(targetid));
     	SendClientMessageEx(playerid, COLOR_GREY, string);
		format(string, sizeof(string), "[Weed]: %s has given %d weed(s) to %s.", PlayerInfo[playerid][pUsername], amount, PlayerInfo[targetid][pUsername]);
		Log("logs/pay.log", string);
	}
	else if(!strcmp(option, "seed", true))
	{
	    if(PlayerInfo[playerid][pSeeds] < amount || amount < 1) return SendClientMessageEx(playerid, COLOR_GREY, "You don't have that many seeds to give.");
		PlayerInfo[playerid][pSeeds] -= amount;
		PlayerInfo[targetid][pSeeds] += amount;
		format(string, sizeof(string), "* %s withdraws a small packet of seeds, and hands it over to %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(targetid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
     	format(string, sizeof(string), " *  You have received %d seeds from (ID: %d) %s.", amount, playerid, GetPlayerNameEx(playerid));
     	SendClientMessageEx(targetid, COLOR_GREY, string);
     	format(string, sizeof(string), " *  You have sent %d seeds to (ID: %d) %s.", amount, targetid, GetPlayerNameEx(targetid));
     	SendClientMessageEx(playerid, COLOR_GREY, string);
		format(string, sizeof(string), "[Seed]: %s has given %d seed(s) to %s.", PlayerInfo[playerid][pUsername], amount, PlayerInfo[targetid][pUsername]);
		Log("logs/pay.log", string);
	}
	else if(!strcmp(option, "bomb", true))
	{
	    if(PlayerInfo[playerid][pBombs] < amount || amount < 1) return SendClientMessageEx(playerid, COLOR_GREY, "You don't have that many bombs to give.");
		PlayerInfo[playerid][pBombs] -= amount;
		PlayerInfo[targetid][pBombs] += amount;
		format(string, sizeof(string), "* %s takes out a small package, and hands it over to %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(targetid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
     	format(string, sizeof(string), " *  You have received %d explosives from (ID: %d) %s.", amount, playerid, GetPlayerNameEx(playerid));
     	SendClientMessageEx(targetid, COLOR_GREY, string);
     	format(string, sizeof(string), " *  You have given %d explosives to (ID: %d) %s.", amount, targetid, GetPlayerNameEx(targetid));
     	SendClientMessageEx(playerid, COLOR_GREY, string);
		format(string, sizeof(string), "[Bomb]: %s has given %d bomb(s) to %s.", PlayerInfo[playerid][pUsername], amount, PlayerInfo[targetid][pUsername]);
		Log("logs/pay.log", string);
	}
	return 1;
}

CMD:dropweapon(playerid, params[])
{
	new
		string[128];
	if(sscanf(params, "{s[24]}")) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /dropweapon [weapon name]");

	if(!strcmp(params, "spas12", true) || !strcmp(params, "spas", true) || !strcmp(params, "spas-12", true))
	{
	    if(PlayerInfo[playerid][pWeapons][3] != WEAPON_SHOTGSPA) return SendClientMessageEx(playerid, COLOR_GREY, "You don't have this weapon.");
		RemovePlayerWeaponEx(playerid, 3);
		format(string, sizeof(string), "* %s has dropped their SPAS-12.", GetPlayerNameEx(playerid));
	}
	else if(!strcmp(params, "shotgun", true))
	{
	    if(PlayerInfo[playerid][pWeapons][3] != WEAPON_SHOTGUN) return SendClientMessageEx(playerid, COLOR_GREY, "You don't have this weapon.");
		RemovePlayerWeaponEx(playerid, 3);
		format(string, sizeof(string), "* %s has dropped their shotgun.", GetPlayerNameEx(playerid));
	}
	else if(!strcmp(params, "knife", true))
	{
	    if(PlayerInfo[playerid][pWeapons][1] != WEAPON_KNIFE) return SendClientMessageEx(playerid, COLOR_GREY, "You don't have this weapon.");
		RemovePlayerWeaponEx(playerid, 1);
		format(string, sizeof(string), "* %s has dropped their knife.", GetPlayerNameEx(playerid));
	}
	else if(!strcmp(params, "chainsaw", true))
	{
	    if(PlayerInfo[playerid][pWeapons][1] != WEAPON_CHAINSAW) return SendClientMessageEx(playerid, COLOR_GREY, "You don't have this weapon.");
		RemovePlayerWeaponEx(playerid, 1);
		format(string, sizeof(string), "* %s has dropped their chainsaw.", GetPlayerNameEx(playerid));
	}
	else if(!strcmp(params, "bat", true) || !strcmp(params, "baseballbat", true))
	{
	    if(PlayerInfo[playerid][pWeapons][1] != WEAPON_BAT) return SendClientMessageEx(playerid, COLOR_GREY, "You don't have this weapon.");
		RemovePlayerWeaponEx(playerid, 1);
		format(string, sizeof(string), "* %s has dropped their baseball bat.", GetPlayerNameEx(playerid));
	}
	else if(!strcmp(params, "katana", true))
	{
	    if(PlayerInfo[playerid][pWeapons][1] != WEAPON_KATANA) return SendClientMessageEx(playerid, COLOR_GREY, "You don't have this weapon.");
		RemovePlayerWeaponEx(playerid, 1);
		format(string, sizeof(string), "* %s has dropped their katana.", GetPlayerNameEx(playerid));
	}
	else if(!strcmp(params, "uzi", true))
	{
	    if(PlayerInfo[playerid][pWeapons][4] != WEAPON_UZI) return SendClientMessageEx(playerid, COLOR_GREY, "You don't have this weapon.");
		RemovePlayerWeaponEx(playerid, 4);
		format(string, sizeof(string), "* %s has dropped their UZI.", GetPlayerNameEx(playerid));
	}
	else if(!strcmp(params, "tec9", true))
	{
	    if(PlayerInfo[playerid][pWeapons][4] != WEAPON_TEC9) return SendClientMessageEx(playerid, COLOR_GREY, "You don't have this weapon.");
		RemovePlayerWeaponEx(playerid, 4);
		format(string, sizeof(string), "* %s has dropped their Tec-9.", GetPlayerNameEx(playerid));
	}
	else if(!strcmp(params, "mp5", true) || !strcmp(params, "smg", true))
	{
	    if(PlayerInfo[playerid][pWeapons][4] != WEAPON_MP5) return SendClientMessageEx(playerid, COLOR_GREY, "You don't have this weapon.");
		RemovePlayerWeaponEx(playerid, 4);
		format(string, sizeof(string), "* %s has dropped their MP5.", GetPlayerNameEx(playerid));
	}
	else if(!strcmp(params, "deagle", true))
	{
	    if(PlayerInfo[playerid][pWeapons][2] != WEAPON_DEAGLE) return SendClientMessageEx(playerid, COLOR_GREY, "You don't have this weapon.");
		RemovePlayerWeaponEx(playerid, 2);
		format(string, sizeof(string), "* %s has dropped their deagle.", GetPlayerNameEx(playerid));
	}
	else if(!strcmp(params, "9mm", true) || !strcmp(params, "colt45", true))
	{
	    if(PlayerInfo[playerid][pWeapons][2] != WEAPON_COLT45) return SendClientMessageEx(playerid, COLOR_GREY, "You don't have this weapon.");
		RemovePlayerWeaponEx(playerid, 2);
		format(string, sizeof(string), "* %s has dropped their colt-45.", GetPlayerNameEx(playerid));
	}
	else if(!strcmp(params, "sdpistol", true))
	{
	    if(PlayerInfo[playerid][pWeapons][2] != WEAPON_SILENCED) return SendClientMessageEx(playerid, COLOR_GREY, "You don't have this weapon.");
		RemovePlayerWeaponEx(playerid, 2);
		format(string, sizeof(string), "* %s has dropped their silenced pistol.", GetPlayerNameEx(playerid));
	}
	else if(!strcmp(params, "m4", true) || !strcmp(params, "m4a1", true))
	{
	    if(PlayerInfo[playerid][pWeapons][5] != WEAPON_M4) return SendClientMessageEx(playerid, COLOR_GREY, "You don't have this weapon.");
		RemovePlayerWeaponEx(playerid, 5);
		format(string, sizeof(string), "* %s has dropped their M4.", GetPlayerNameEx(playerid));
	}
	else if(!strcmp(params, "ak47", true))
	{
	    if(PlayerInfo[playerid][pWeapons][5] != WEAPON_AK47) return SendClientMessageEx(playerid, COLOR_GREY, "You don't have this weapon.");
		RemovePlayerWeaponEx(playerid, 5);
		format(string, sizeof(string), "* %s has dropped their AK-47.", GetPlayerNameEx(playerid));
	}
	else if(!strcmp(params, "rifle", true))
	{
	    if(PlayerInfo[playerid][pWeapons][6] != WEAPON_RIFLE) return SendClientMessageEx(playerid, COLOR_GREY, "You don't have this weapon.");
		RemovePlayerWeaponEx(playerid, 6);
		format(string, sizeof(string), "* %s has dropped their rifle.", GetPlayerNameEx(playerid));
	}
	else if(!strcmp(params, "sniper", true) || !strcmp(params, "sniperrifle", true))
	{
	    if(PlayerInfo[playerid][pWeapons][6] != WEAPON_SNIPER) return SendClientMessageEx(playerid, COLOR_GREY, "You don't have this weapon.");
		RemovePlayerWeaponEx(playerid, 6);
		format(string, sizeof(string), "* %s has dropped their sniper rifle.", GetPlayerNameEx(playerid));
	}
	else
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You have entered an invalid weapon name.");
	}
	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	return 1;
}

CMD:duty(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] >= 1)
	{
        if(PlayerInfo[playerid][pDuty])
		{
           	PlayerInfo[playerid][pDuty] = 0;
			SetPlayerToTeamColor(playerid);
			SendClientMessageEx(playerid, COLOR_WHITE, "You have hidden your badge, and will now be identified as being off-duty.");
        }
		else
		{
          	PlayerInfo[playerid][pDuty] = 1;
           	SetPlayerToTeamColor(playerid);
			SendClientMessageEx(playerid, COLOR_WHITE, "You have shown your badge, and will now be identified as being on-duty.");
		}
	}
	return 1;
}

CMD:fsafe(playerid, params[])
{
	if(PlayerInfo[playerid][pFamily] != 0 && PlayerInfo[playerid][pRank] >= 5)
	{
	    new option[32], amount, string[128];
	    if(!IsPlayerInRangeOfPoint(playerid, 4.0, FamilyInfo[PlayerInfo[playerid][pFamily]][fSafePosition][0], FamilyInfo[PlayerInfo[playerid][pFamily]][fSafePosition][1], FamilyInfo[PlayerInfo[playerid][pFamily]][fSafePosition][2])) return SendClientMessageEx(playerid, COLOR_GREY, "You must be at your family safe to use this command.");
	    else if(sscanf(params, "s[32]i", option, amount))
	    {
	        return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /fsafe [depositmoney, withdrawmoney] [amount]");
	    }
	    
		if(!strcmp(option, "depositmoney"))
		{
		    if(PlayerInfo[playerid][pMoney] < amount || amount < 1) return SendClientMessageEx(playerid, COLOR_GREY, "You have entered an invalid amount.");
		    
		    /*new File:famlog = fopen("logs/family.log", io_append);
			format(string, sizeof(string), "[Family Safe]: %s has placed a deposit of $%d into the %d family safe.\n", GetPlayerNameEx(playerid), amount, FamilyInfo[PlayerInfo[playerid][pFamily]][fSafeItems][0]);
			fwrite(famlog, string);
			fclose(famlog);*/
			format(string, sizeof(string), "[%s]: %s has placed a deposit of $%d into the %d family safe.", GetFamilyName(PlayerInfo[playerid][pFamily]), GetPlayerNameEx(playerid), amount, FamilyInfo[PlayerInfo[playerid][pFamily]][fSafeItems][0]);
			Log("logs/famiy.log", string);
			
			GivePlayerCash(playerid, -amount);
		    FamilyInfo[PlayerInfo[playerid][pFamily]][fSafeItems][0] += amount;
      		format(string, sizeof(string), "UPDATE `families` SET `SafeMoney` = '%d' WHERE `Id` = '%d'", FamilyInfo[PlayerInfo[playerid][pFamily]][fSafeItems][0], PlayerInfo[playerid][pFamily]);
			mysql_query(string, THREAD_LOG_RESULT, playerid, mConnectionHandle);
		    format(string, sizeof(string), " You have deposited $%d into your family safe, it now has $%d inside it.", amount, FamilyInfo[PlayerInfo[playerid][pFamily]][fSafeItems][0]);
		    SendClientMessageEx(playerid, COLOR_GREY, string);
		}
		else if(!strcmp(option, "withdrawmoney"))
		{
		    if(FamilyInfo[PlayerInfo[playerid][pFamily]][fSafeItems][0] < amount || amount < 1) return SendClientMessageEx(playerid, COLOR_GREY, "You have entered an invalid amount.");
			else if(!PlayerInfo[playerid][pLeadership]) return SendClientMessageEx(playerid, COLOR_GREY, "You must be a leader to use this command.");
		    /*new File:famlog = fopen("logs/family.log", io_append);
			format(string, sizeof(string), "[Family Safe]: %s has withdrawed $%d from the %d family safe.\n", GetPlayerNameEx(playerid), amount, FamilyInfo[PlayerInfo[playerid][pFamily]][fSafeItems][0]);
			fwrite(famlog, string);
			fclose(famlog);*/
			format(string, sizeof(string), "[%s]: %s has withdrawed $%d from the %d family safe.", GetFamilyName(PlayerInfo[playerid][pFamily]), GetPlayerNameEx(playerid), amount, FamilyInfo[PlayerInfo[playerid][pFamily]][fSafeItems][0]);
			Log("logs/famiy.log", string);

			GivePlayerCash(playerid, amount);
		    FamilyInfo[PlayerInfo[playerid][pFamily]][fSafeItems][0] -= amount;
      		format(string, sizeof(string), "UPDATE `families` SET `SafeMoney` = '%d' WHERE `Id` = '%d'", FamilyInfo[PlayerInfo[playerid][pFamily]][fSafeItems][0], PlayerInfo[playerid][pFamily]);
			mysql_query(string, THREAD_LOG_RESULT, playerid, mConnectionHandle);
		    format(string, sizeof(string), " You have withdrawed $%d from your family safe, it now has $%d inside it.", amount, FamilyInfo[PlayerInfo[playerid][pFamily]][fSafeItems][0]);
		    SendClientMessageEx(playerid, COLOR_GREY, string);
		}
	}
	return 1;
}

CMD:vault(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] != 0)
	{
	    new option[32], amount, string[128], factionid = PlayerInfo[playerid][pFaction];
	    if(!IsPlayerInRangeOfPoint(playerid, 4.0, VaultInfo[factionid][vPosition][0], VaultInfo[factionid][vPosition][1], VaultInfo[factionid][vPosition][2])) return SendClientMessageEx(playerid, COLOR_GREY, "You must be at your faction vault to use this command.");
		else if(sscanf(params, "s[32]i", option, amount))
		{
		    format(string, sizeof(string), " Your faction has currently $%d inside the vault.", VaultInfo[factionid][vMoney]);
		    SendClientMessageEx(playerid, COLOR_GREY, string);
			return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /vault [depositmoney, withdrawmoney] [amount]");
		}

		if(!strcmp(option, "depositmoney"))
		{
		    if(PlayerInfo[playerid][pMoney] < amount || amount < 1) return SendClientMessageEx(playerid, COLOR_GREY, "You have entered an invalid amount.");

		    /*new File:vaultlog = fopen("logs/vault.log", io_append);
			format(string, sizeof(string), "[%s]: %s has placed a deposit of $%d into the vault.\n", GetFactionName(factionid), GetPlayerNameEx(playerid), amount);
			fwrite(vaultlog, string);
			fclose(vaultlog);*/
			format(string, sizeof(string), "[%s]: %s has placed a deposit of $%d into the vault.", GetFactionName(factionid), GetPlayerNameEx(playerid), amount);
			Log("logs/faction.log", string);

			GivePlayerCash(playerid, -amount);
		    AddVaultMoney(factionid, amount);
		    format(string, sizeof(string), " You have deposited $%d into your faction vault, it now has $%d inside it.", amount, VaultInfo[factionid][vMoney]);
		    SendClientMessageEx(playerid, COLOR_GREY, string);
		}
		else if(!strcmp(option, "withdrawmoney"))
		{
		    if(VaultInfo[factionid][vMoney] < amount || amount < 1) return SendClientMessageEx(playerid, COLOR_GREY, "You have entered an invalid amount.");
		    else if(!PlayerInfo[playerid][pLeadership]) return SendClientMessageEx(playerid, COLOR_GREY, "You must be a leader to use this command.");
		    /*new File:vaultlog = fopen("logs/vault.log", io_append);
			format(string, sizeof(string), "[%s]: %s has withdrawn $%d from the vault.\n", GetFactionName(factionid), GetPlayerNameEx(playerid), amount);
			fwrite(vaultlog, string);
			fclose(vaultlog);*/
			format(string, sizeof(string), "[%s]: %s has withdrawn $%d from the vault.", GetFactionName(factionid), GetPlayerNameEx(playerid), amount);
			Log("logs/faction.log", string);

			GivePlayerCash(playerid, amount);
		    AddVaultMoney(factionid, -amount);
		    format(string, sizeof(string), " You have withdrawed $%d from your faction vault, it now has $%d inside it.", amount, VaultInfo[factionid][vMoney]);
		    SendClientMessageEx(playerid, COLOR_GREY, string);
		}
	}
	return 1;
}

CMD:invite(playerid, params[])
{
	new targetid, string[128];
	if(sscanf(params, "u", targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /invite <playerid>");
	else if(!IsPlayerConnectedEx(targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
	else if(playerid == targetid) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot use this command on yourself.");
	else if(PlayerInfo[targetid][pFaction] > 0 || PlayerInfo[targetid][pFamily] > 0) return SendClientMessageEx(playerid, COLOR_GREY, "The specified person is already inside a faction or family.");
	if(PlayerInfo[playerid][pFaction] != 0 && PlayerInfo[playerid][pLeadership] == 1)
	{
		/*new File:paylog = fopen("logs/faction.log", io_append);
		format(string, sizeof(string), "[%s]: %s has invited %s to the faction.\n", GetFactionName(PlayerInfo[playerid][pFaction]), GetPlayerNameEx(playerid), GetPlayerNameEx(targetid));
		fwrite(paylog, string);
		fclose(paylog);*/
		format(string, sizeof(string), "[%s]: %s has invited %s to the faction.", GetFactionName(PlayerInfo[playerid][pFaction]), GetPlayerNameEx(playerid), GetPlayerNameEx(targetid));
		Log("logs/faction.log", string);

		SetPVarInt(targetid, "FactionID", PlayerInfo[playerid][pFaction]);
		SetPVarInt(targetid, "FactionInvitation", playerid);
		SetPVarInt(playerid, "InvitedPlayer", targetid);
		format(string, sizeof(string), "%s %s has invited you to join the %s (/accept faction).", GetRankName(playerid), GetPlayerNameEx(playerid), GetFactionName(PlayerInfo[playerid][pFaction]));
		SendClientMessageEx(targetid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "You have invited %s to join the %s.", GetPlayerNameEx(targetid), GetFactionName(PlayerInfo[playerid][pFaction]));
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
	}
	else if(PlayerInfo[playerid][pFamily] != 0 && PlayerInfo[playerid][pLeadership] == 1)
	{
		/*new File:famlog = fopen("logs/family.log", io_append);
		format(string, sizeof(string), "[Invite]: %s has invited %s to %s.\n", GetPlayerNameEx(playerid), GetPlayerNameEx(targetid), FamilyInfo[PlayerInfo[playerid][pFamily]][fName]);
		fwrite(famlog, string);
		fclose(famlog);*/
		format(string, sizeof(string), "[%s]: %s has invited %s to the faction.", GetFamilyName(PlayerInfo[playerid][pFamily]), GetPlayerNameEx(playerid), GetPlayerNameEx(targetid));
		Log("logs/family.log", string);

		SetPVarInt(targetid, "FamilyID", PlayerInfo[playerid][pFamily]);
		SetPVarInt(targetid, "FamilyInvitation", playerid);
		SetPVarInt(playerid, "InvitedPlayer", targetid);
		format(string, sizeof(string), "%s has invited you to join the %s (/accept family).", GetPlayerNameEx(playerid), FamilyInfo[PlayerInfo[playerid][pFamily]][fName]);
		SendClientMessageEx(targetid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "You have invited %s to join the %s.", GetPlayerNameEx(targetid), FamilyInfo[PlayerInfo[playerid][pFamily]][fName]);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
	}
	else
	{
	     SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use this.");
	}
	return 1;
}

CMD:uninvite(playerid, params[])
{
	new targetid, string[128];
	if(sscanf(params, "u", targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /uninvite <playerid>");
	else if(!IsPlayerConnectedEx(targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
	else if(playerid == targetid) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot use this command on yourself.");
	else if(PlayerInfo[targetid][pRank] > PlayerInfo[playerid][pRank]) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot kick members who are of higher rank.");
	if(PlayerInfo[playerid][pFaction] != 0 && PlayerInfo[playerid][pLeadership] == 1)
	{
        if(PlayerInfo[targetid][pFaction] !=  PlayerInfo[playerid][pFaction]) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot uninvite people who are not inside your faction.");
		/*new File:paylog = fopen("logs/faction.log", io_append);
		format(string, sizeof(string), "[%s]: %s has kicked %s from their faction.\n", GetFactionName(PlayerInfo[playerid][pFaction]), GetPlayerNameEx(playerid), GetPlayerNameEx(targetid));
		fwrite(paylog, string);
		fclose(paylog);*/
		format(string, sizeof(string), "[%s]: %s has kicked %s from their faction.", GetFactionName(PlayerInfo[playerid][pFaction]), GetPlayerNameEx(playerid), GetPlayerNameEx(targetid));
		Log("logs/faction.log", string);

		format(string, sizeof(string), "* You have been kicked from %s by %s.", GetFactionName(PlayerInfo[playerid][pFaction]), GetPlayerNameEx(playerid));
		SendClientMessageEx(targetid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "You have kicked %s from the faction.", GetPlayerNameEx(targetid));
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
	 	PlayerInfo[targetid][pFaction] = 0;
	 	PlayerInfo[targetid][pLeadership] = 0;
	  	PlayerInfo[targetid][pRank] = 0;
		PlayerInfo[targetid][pDuty] = 0;
		SetPlayerToTeamColor(targetid);
	}
	else if(PlayerInfo[playerid][pFamily] != 0 && PlayerInfo[playerid][pLeadership] == 1)
	{
		/*new File:famlog = fopen("logs/family.log", io_append);
		format(string, sizeof(string), "[Kick]: %s has kicked %s from %s.\n", GetPlayerNameEx(playerid), GetPlayerNameEx(targetid), FamilyInfo[PlayerInfo[playerid][pFamily]][fName]);
		fwrite(famlog, string);
		fclose(famlog);*/
		format(string, sizeof(string), "[%s]: %s has kicked %s from their family.", GetFamilyName(PlayerInfo[playerid][pFamily]), GetPlayerNameEx(playerid), GetPlayerNameEx(targetid));
		Log("logs/family.log", string);

		format(string, sizeof(string), "* You have been kicked from %s by %s.", FamilyInfo[PlayerInfo[playerid][pFamily]][fName], GetPlayerNameEx(playerid));
		SendClientMessageEx(targetid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "You have kicked %s from the family.", GetPlayerNameEx(targetid));
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		
		PlayerInfo[targetid][pFamily] = 0;
		PlayerInfo[targetid][pRank] = 0;
	}
	else
	{
	     SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use this.");
	}
	return 1;
}

CMD:giverank(playerid, params[])
{
	new targetid, rank, string[128];
	if(sscanf(params, "ui", targetid, rank)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /giverank <playerid> <rank 0-6>");
	else if(!IsPlayerConnectedEx(targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
	if(PlayerInfo[playerid][pFaction] > 0 && PlayerInfo[playerid][pLeadership] == 1)
	{
		if(PlayerInfo[targetid][pFaction] !=  PlayerInfo[playerid][pFaction]) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot change the ranks of people that are not in your faction.");
		else if(rank < 0 || rank > 6) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /giverank <playerid> <rank 0-6>");
	    /*new File:paylog = fopen("logs/faction.log", io_append);
		format(string, sizeof(string), "[%s]: %s has set %s's rank to %i.\n", GetFactionName(PlayerInfo[targetid][pFaction]), GetPlayerNameEx(playerid), GetPlayerNameEx(targetid), rank);
		fwrite(paylog, string);
		fclose(paylog);*/
		format(string, sizeof(string), "[%s]: %s has set %s's rank to %i.", GetFactionName(PlayerInfo[targetid][pFaction]), GetPlayerNameEx(playerid), GetPlayerNameEx(targetid), rank);
		Log("logs/faction.log", string);

	    PlayerInfo[targetid][pRank] = rank;
		format(string, sizeof(string), "Your rank has been adjusted to %i by %s", PlayerInfo[targetid][pRank], GetPlayerNameEx(playerid));
		SendClientMessageEx(targetid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "You have adjusted %s's rank to %i.", GetPlayerNameEx(targetid), PlayerInfo[targetid][pRank]);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
	}
	else if(PlayerInfo[playerid][pFamily] > 0 && PlayerInfo[playerid][pLeadership] == 1)
	{
		if(PlayerInfo[targetid][pFamily] != PlayerInfo[playerid][pFamily]) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot rank up people that are not in your family.");
		else if(rank < 0 || rank > 6) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /giverank <playerid> <rank 0-6>");
		else if(PlayerInfo[targetid][pRank] > PlayerInfo[playerid][pRank]) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot change people's rank over your current rank.");
		
		/*new File:famlog = fopen("logs/family.log", io_append);
		format(string, sizeof(string), "[%s]: %s has changed %s's rank to %d.\n", FamilyInfo[PlayerInfo[playerid][pFamily]][fName], GetPlayerNameEx(playerid), GetPlayerNameEx(targetid), rank);
		fwrite(famlog, string);
		fclose(famlog);*/
		format(string, sizeof(string), "[%s]: %s has set %s's rank to %i.", GetFamilyName(PlayerInfo[targetid][pFamily]), GetPlayerNameEx(playerid), GetPlayerNameEx(targetid), rank);
		Log("logs/family.log", string);

	    PlayerInfo[targetid][pRank] = rank;
		format(string, sizeof(string), "Your rank has been adjusted to %d by %s", PlayerInfo[targetid][pRank], GetPlayerNameEx(playerid));
		SendClientMessageEx(targetid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "You have adjusted %s's rank to %d.", GetPlayerNameEx(targetid), PlayerInfo[targetid][pRank]);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
	}
	else
	{
	     SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	return 1;
}

CMD:adjustdivision(playerid, params[])
{
	new
		targetid,
		id,
		string[128],
		division[13];
	if(sscanf(params, "ui", targetid, id)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /adjustdivision <playerid> <division>");
	else if(!IsPlayerConnectedEx(targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
	if(PlayerInfo[playerid][pFaction] != 0 && PlayerInfo[playerid][pLeadership] == 1)
	{
		if(PlayerInfo[targetid][pFaction] !=  PlayerInfo[playerid][pFaction]) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot change the division of people that are not in your faction.");
		else if(id < 0) return SendClientMessageEx(playerid, COLOR_GREY, "You have entered an invalid division id.");

		switch (PlayerInfo[targetid][pFaction])
		{
		    case 1:
		    {
		        switch (id) {
		            case 0 .. 3: {
						division = GetDivisionName(PlayerInfo[targetid][pFaction], id);
					}
		    		default: { return SendClientMessageEx(playerid, COLOR_GREY, "You have entered an invalid division id."); }
		        }
		    }
		    
		    case 2:
		    {
		        switch (id) {
		            case 0 .. 4: {
						division = GetDivisionName(PlayerInfo[targetid][pFaction], id);
					}
		    		default: { return SendClientMessageEx(playerid, COLOR_GREY, "You have entered an invalid division id."); }
		        }
		    }
		    
		    case 3:
		    {
		        switch (id) {
		            case 0 .. 2: {
						division = GetDivisionName(PlayerInfo[targetid][pFaction], id);
					}
		    		default: { return SendClientMessageEx(playerid, COLOR_GREY, "You have entered an invalid division id."); }
		        }
		    }
		    
		    case 5:
		    {
		        switch (id) {
		            case 0 .. 3: {
						division = GetDivisionName(PlayerInfo[targetid][pFaction], id);
					}
		    		default: { return SendClientMessageEx(playerid, COLOR_GREY, "You have entered an invalid division id."); }
		        }
		    }
		    
		    case 6:
		    {
		        switch (id) {
		            case 0 .. 4: {
						division = GetDivisionName(PlayerInfo[targetid][pFaction], id);
					}
		    		default: { return SendClientMessageEx(playerid, COLOR_GREY, "You have entered an invalid division id."); }
		        }
		    }

		    default: { return SendClientMessageEx(playerid, COLOR_GREY, "You have entered an invalid division id."); }
		}

		/*new File:paylog = fopen("logs/faction.log", io_append);
		format(string, sizeof(string), "[%s]: %s has set %s's division to %s.\n", GetFactionName(PlayerInfo[targetid][pFaction]), GetPlayerNameEx(playerid), GetPlayerNameEx(targetid), division);
		fwrite(paylog, string);
		fclose(paylog);*/
		format(string, sizeof(string), "[%s]: %s has set %s's division to %s.", GetFactionName(PlayerInfo[targetid][pFaction]), GetPlayerNameEx(playerid), GetPlayerNameEx(targetid), division);
		Log("logs/faction.log", string);

	    PlayerInfo[targetid][pDivision] = id;
		format(string, sizeof(string), "Your division has been adjusted to %i by %s", PlayerInfo[targetid][pDivision], GetPlayerNameEx(playerid));
		SendClientMessageEx(targetid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "You have adjusted %s's division to %d.", GetPlayerNameEx(targetid), PlayerInfo[targetid][pDivision]);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
	}
	else
	{
	     SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	return 1;
}

CMD:er(playerid, params[])
{
	new text[128], string[128], rankname[32];
	if(PlayerInfo[playerid][pHitman] == 1) format(rankname, sizeof(rankname), "Freelancer");
	else if(PlayerInfo[playerid][pHitman] == 2) format(rankname, sizeof(rankname), "Marksman");
	else if(PlayerInfo[playerid][pHitman] == 3) format(rankname, sizeof(rankname), "Agent");
	else if(PlayerInfo[playerid][pHitman] == 4) format(rankname, sizeof(rankname), "Special Agent");
	else if(PlayerInfo[playerid][pHitman] == 5) format(rankname, sizeof(rankname), "Vice Director");
	else if(PlayerInfo[playerid][pHitman] == 6) format(rankname, sizeof(rankname), "Director");
    else return SendClientMessageEx(playerid, COLOR_GREY, "You are not a hitman.");
	if(sscanf(params, "s[128]", text)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /er <text>");
	format(string, sizeof(string), "(radio) %s ", text);
	SetPlayerChatBubble(playerid, text, COLOR_WHITE, 20.0, 10000);
	format(string, sizeof(string), "** %s %s: %s **", rankname, GetPlayerNameEx(playerid), text);
	SendHitmanMessage(COLOR_RADIO, string);
	return 1;
}

CMD:wt(playerid, params[]) return cmd_walkietalkie(playerid, params);
CMD:walkietalkie(playerid, params[])
{
	new text[128], string[128];
	if(sscanf(params, "s[128]", text))
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /wt <text>");
	}
	else if(PlayerInfo[playerid][pWalkieTalkie] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "You do not have a walkie talkie!  Buy one at a 24/7.");
	else if(PlayerInfo[playerid][pChannel] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "You must change the channel using the device.");
	format(string, sizeof(string), "(radio) %s ", text);
	SetPlayerChatBubble(playerid, text, COLOR_WHITE, 20.0, 10000);
	format(string, sizeof(string), "** Walkie Talkie (%d kHz) %s: %s **", PlayerInfo[playerid][pChannel], GetPlayerNameEx(playerid), text);
	foreach(new i: Player)
	{
	    if(PlayerInfo[i][pWalkieTalkie] == 1 && PlayerInfo[i][pChannel] == PlayerInfo[playerid][pChannel]) SendClientMessageEx(i, COLOR_GREEN, string);
	}
	return 1;
}

CMD:channel(playerid, params[])
{
	new string[128];
	if(sscanf(params, "{i}")) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /channel <channel>");
	else if(PlayerInfo[playerid][pWalkieTalkie] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "You must first own a walkie talkie! Buy one at a 24/7");
	else if(IsPlayerRestricted(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this at this time.");
	PlayerInfo[playerid][pChannel] = strval(params);
	format(string, sizeof(string), " You have modified your Walking Talkie's channel to %d kHz.", PlayerInfo[playerid][pChannel]);
	SendClientMessageEx(playerid, COLOR_GREEN, string);
	return 1;
}

CMD:radio(playerid, params[]) return cmd_r(playerid, params);
CMD:r(playerid, params[])
{
	new string[128];
	if(sscanf(params, "{s[128]}")) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /r(adio) [text]");
	else if(PlayerInfo[playerid][pFaction] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "You are not in a faction.");
    else if(IsPlayerRestricted(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot use your radio at this time.");

	format(string, sizeof(string), "(radio) %s ", params);
	SetPlayerChatBubble(playerid, string, COLOR_WHITE, 20.0, 3000);
	format(string, sizeof(string), "** %s (%s) %s: %s **", GetRankName(playerid), GetDivisionName(PlayerInfo[playerid][pFaction], PlayerInfo[playerid][pDivision]), GetPlayerNameEx(playerid), params);
    SendRadioMessage(PlayerInfo[playerid][pFaction], COLOR_RADIO, string);
	return 1;
}

CMD:f(playerid, params[]) return cmd_family(playerid, params);
CMD:family(playerid, params[])
{
	new string[128];
    if(PlayerInfo[playerid][pFamily] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "You are not in a family.");
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /f(amily) [text]");
    else if(IsPlayerRestricted(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot use this channel at this time.");
	format(string, sizeof(string), "** (%d) %s %s: %s **", PlayerInfo[playerid][pRank], GetRankName(playerid), GetPlayerNameEx(playerid), params);
 	foreach(new i: Player) if(PlayerInfo[i][pFamily] == PlayerInfo[playerid][pFamily]) SendClientMessageEx(i, COLOR_CYANBLUE, string);
 	return 1;
}

CMD:d(playerid, params[]) return cmd_department(playerid, params);
CMD:department(playerid, params[])
{
	new string[128];
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /d(epartment) [text]");
	else if(!IsACop(playerid) && PlayerInfo[playerid][pFaction] != 3) return SendClientMessageEx(playerid, COLOR_GREY, "You are not in a faction that can use this command.");
    else if(IsPlayerRestricted(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot use your radio at this time.");
	format(string, sizeof(string), "** %s %s (%s) %s: %s **", GetFactionName(PlayerInfo[playerid][pFaction]), GetRankName(playerid), GetDivisionName(PlayerInfo[playerid][pFaction], PlayerInfo[playerid][pDivision]), GetPlayerNameEx(playerid), params);
 	foreach(new i: Player)
	{
		if(IsACop(i) || PlayerInfo[i][pFaction] == 3)
		{
			SendClientMessageEx(i, RADIO_DEPT, string);
		}
	}
	return 1;
}

CMD:fmakeleader(playerid, params[])
{
	if(IsAdmin(playerid, ADMIN_LEVEL_SENIORADMIN))
	{
		new targetid, family, string[128];
		if(sscanf(params, "ui", targetid, family)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /fmakeleader <playerid> <family 1-6>");
		else if(!IsPlayerConnectedEx(targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
	    else if(family < 1 || family > MAX_FAMILIES) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /fmakeleader <playerid> <family 1-6>");
	    PlayerInfo[targetid][pFaction] = 0;
	    PlayerInfo[targetid][pLeadership] = 1;
	    PlayerInfo[targetid][pFamily] = family;
	    PlayerInfo[targetid][pRank] = 6;

		/*new File:famlog = fopen("logs/family.log", io_append);
		format(string, sizeof(string), "[Leader]: %s has set %s as the leader of %s.\n", GetPlayerNameEx(playerid), GetPlayerNameEx(targetid), FamilyInfo[family][fName]);
		fwrite(famlog, string);
		fclose(famlog);*/
		format(string, sizeof(string), "[%s]: %s has set %s the leader of the faction.", FamilyInfo[family][fName], GetPlayerNameEx(playerid), GetPlayerNameEx(targetid));
		Log("logs/family.log", string);

		format(string, sizeof(string), "* You were made the leader of %d by %s.", family, GetPlayerNameEx(playerid));
		SendClientMessageEx(targetid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "You have made %s the leader of %d.", GetPlayerNameEx(targetid), family);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
	}
	return 1;
}

CMD:families(playerid, params[])
{
	new string[128];
	if(IsAdmin(playerid, ADMIN_LEVEL_TRIALADMIN))
	{
		SendClientMessageEx(playerid, COLOR_ORANGE, "---------------------------------");
		for(new i=1; i < MAX_FAMILIES+1; i++)
		{
		    format(string, sizeof(string), "Family %d: %s", i, FamilyInfo[i][fName]);
		    SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		SendClientMessageEx(playerid, COLOR_ORANGE, "---------------------------------");
		format(string, sizeof(string), "Online Members of %s", FamilyInfo[strval(params)][fName]);
		SendClientMessage(playerid, COLOR_WHITE, string);
		foreach(new i: Player)
		{
			if(PlayerInfo[i][pFamily] == strval(params))
		    {
				format(string, sizeof(string), "(%d) %s %s", PlayerInfo[i][pRank], GetRankName(i), GetPlayerNameEx(i));
				SendClientMessage(playerid, COLOR_WHITE, string);
			}
		}
	}
	return 1;
}

CMD:admins(playerid, params[])
{
	new string[128], adminsOnline;
	SendClientMessageEx(playerid, COLOR_ORANGE, "---------------------------------");
	SendClientMessageEx(playerid, COLOR_ORANGE, ""SERVER_NAME" - Administration Team");
	foreach (Player, i)
	{
	    if(PlayerInfo[i][pAdminLevel] >= 2)
	    {
		    adminsOnline++;
		    format(string, sizeof(string), "%s - %s", GetAdministratorRank(i), GetPlayerNameEx(i));
		    SendClientMessageEx(playerid, COLOR_WHITE, string);
	    }
	}
	if(!adminsOnline) SendClientMessageEx(playerid, COLOR_GREY, "There are currently no administrators online at the moment.");
	SendClientMessageEx(playerid, COLOR_ORANGE, "---------------------------------");
	return 1;
}

CMD:makeleader(playerid, params[])
{
	if(IsAdmin(playerid, ADMIN_LEVEL_SENIORADMIN))
	{
		new targetid, faction, string[128];
		if(sscanf(params, "ui", targetid, faction))
		{
		 	SendClientMessageEx(playerid, COLOR_GREY, "Usage: /makeleader <playerid> <1: LSPD, 2: Executive Branch, 3: LSFMD, 4: Gun Runners5: 5: SANews, 6: FBI, 7: DoC>");
			return 1;
		}
		else if(!IsPlayerConnectedEx(targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
	    else if(faction < 1 || faction > MAX_FACTIONS) { format(string, sizeof(string),  "Please specify a valid faction ID. (Between 1 and %d)", MAX_FACTIONS); return SendClientMessageEx(playerid, COLOR_GREY, string); }
	    PlayerInfo[targetid][pFaction] = faction;
	    PlayerInfo[targetid][pLeadership] = 1;
	    PlayerInfo[targetid][pFamily] = 0;
	    PlayerInfo[targetid][pRank] = 6;
	   	
	   	/*new File:paylog = fopen("logs/faction.log", io_append);
		format(string, sizeof(string), "[%s]: %s has set %s's as the leader of the faction.\n", GetFactionName(PlayerInfo[targetid][pFaction]), GetPlayerNameEx(playerid), GetPlayerNameEx(targetid));
		fwrite(paylog, string);
		fclose(paylog);*/
		format(string, sizeof(string), "[%s]: %s has set %s's as the leader of the faction.", GetFactionName(PlayerInfo[targetid][pFaction]), GetPlayerNameEx(playerid), GetPlayerNameEx(targetid));
		Log("logs/faction.log", string);
	   	
		format(string, sizeof(string), "* You were made the leader of the %s by %s.", GetFactionName(PlayerInfo[targetid][pFaction]), GetPlayerNameEx(playerid));
		SendClientMessageEx(targetid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "You have made %s the leader of %s.", GetPlayerNameEx(targetid), GetFactionName(PlayerInfo[targetid][pFaction]));
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
	}
	return 1;
}

CMD:removeleader(playerid, params[])
{
	if(IsAdmin(playerid, ADMIN_LEVEL_SENIORADMIN))
	{
		new targetid, string[128];
		if(sscanf(params, "u", targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /removeleader <playerid>");
		else if(!IsPlayerConnectedEx(targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		if(PlayerInfo[targetid][pFaction] > 0)
		{
			format(string, sizeof(string), "* You were kicked from %s by %s.", GetFactionName(PlayerInfo[targetid][pFaction]), GetPlayerNameEx(playerid));
			SendClientMessageEx(targetid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "You have kicked %s from %s.", GetPlayerNameEx(targetid), GetFactionName(PlayerInfo[targetid][pFaction]));
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			
	   		/*new File:faclog = fopen("logs/faction.log", io_append);
			format(string, sizeof(string), "[%s]: %s has been removed from the faction %s by Administrator %s.\n", GetFactionName(PlayerInfo[targetid][pFaction]), GetPlayerNameEx(targetid), GetPlayerNameEx(playerid));
			fwrite(faclog, string);
			fclose(faclog);*/
			format(string, sizeof(string), "[%s]: %s has been removed from the faction %s by %s.", GetFactionName(PlayerInfo[targetid][pFaction]), GetPlayerNameEx(targetid), GetPlayerNameEx(playerid));
			Log("logs/faction.log", string);

		}
		else if(PlayerInfo[targetid][pFamily] > 0)
		{
			format(string, sizeof(string), "* You were kicked from %s by %s.", GetFamilyName(PlayerInfo[targetid][pFamily]), GetPlayerNameEx(playerid));
			SendClientMessageEx(targetid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "You have kicked %s from %s.", GetPlayerNameEx(targetid), GetFamilyName(PlayerInfo[targetid][pFamily]));
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);

	   		/*new File:faclog = fopen("logs/family.log", io_append);
			format(string, sizeof(string), "[%s]: %s has been removed from the family %s by Administrator %s.\n", GetFamilyName(PlayerInfo[targetid][pFamily]), GetPlayerNameEx(targetid), GetPlayerNameEx(playerid));
			fwrite(faclog, string);
			fclose(faclog);*/
			format(string, sizeof(string), "[%s]: %s has been removed from the family %s by %s.", GetFamilyName(PlayerInfo[targetid][pFamily]), GetPlayerNameEx(targetid), GetPlayerNameEx(playerid));
			Log("logs/family.log", string);
		}
	    PlayerInfo[targetid][pFaction] = 0;
	    PlayerInfo[targetid][pLeadership] = 0;
	    PlayerInfo[targetid][pFamily] = 0;
	    PlayerInfo[targetid][pRank] = 0;
	}
	return 1;
}

CMD:bank(playerid, params[])
{
	SendClientMessageEx(playerid, COLOR_GREEN, "Bank Commands (valid at ATMs as well){FFFFFF}: /withdraw, /deposit, /wiretransfer");
	return 1;
}

CMD:wiretransfer(playerid, params[])
{
	if(IsPlayerInRangeOfPoint(playerid, 10.0, 2310.30, -8.22, 26.74) || IsNearAtm(playerid))
	{
		new amount, targetid, string[128];
		if(sscanf(params, "ui", targetid, amount))
		{
		    format(string, sizeof(string), "You have $%i inside your bank account.", PlayerInfo[playerid][pBankBalance]);
		    SendClientMessageEx(playerid, COLOR_GREY, string);
		 	return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /wiretransfer <id> <amount>");
		}
		else if(amount < 1) return SendClientMessageEx(playerid, COLOR_GREY, "You have entered an invalid amount.");
		else if(amount > PlayerInfo[playerid][pBankBalance]) return SendClientMessageEx(playerid, COLOR_GREY, "You do not have that much money inside your bank account.");
		else if(!IsPlayerConnectedEx(targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		else if(playerid == targetid) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot use this command on yourself.");
		format(string, sizeof(string), "You have transfered $%d to %s's account.", amount, GetPlayerNameEx(targetid));
	 	SendClientMessageEx(playerid, COLOR_GREY, string);
		format(string, sizeof(string), "You have received $%d into your account from %s.", amount, GetPlayerNameEx(playerid));
	 	SendClientMessageEx(targetid, COLOR_GREY, string);
		PlayerInfo[playerid][pBankBalance] -= amount;
		PlayerInfo[targetid][pBankBalance] += amount;

		/*new File:nclog = fopen("logs/wiretransfer.log", io_append);
		format(string, sizeof(string), "[Wire Transfer]: %s has sent $%d to %s.\n", PlayerInfo[playerid][pUsername], amount, PlayerInfo[targetid][pUsername]);
		fwrite(nclog, string);
		fclose(nclog);*/
		format(string, sizeof(string), "[Wire Transfer]: %s has sent $%d to %s.", PlayerInfo[playerid][pUsername], amount, PlayerInfo[targetid][pUsername]);
		Log("logs/pay.log", string);
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "You are not inside the bank.");
	return 1;
}


CMD:withdraw(playerid, params[])
{
	if(IsPlayerInRangeOfPoint(playerid, 10.0, 2310.30, -8.22, 26.74) || IsNearAtm(playerid))
	{
		new amount, string[128];
		if(sscanf(params, "i", amount))
		{
		    format(string, sizeof(string), "You have $%i inside your bank account.", PlayerInfo[playerid][pBankBalance]);
		    SendClientMessageEx(playerid, COLOR_GREY, string);
		 	return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /withdraw [amount]");
		}
		else if(amount < 1) return SendClientMessageEx(playerid, COLOR_GREY, "You have entered an invalid withdrawal amount.");
		else if(amount > PlayerInfo[playerid][pBankBalance]) return SendClientMessageEx(playerid, COLOR_GREY, "You do not have that much money inside your bank account.");

		PlayerInfo[playerid][pBankBalance] -= amount;
		GivePlayerCash(playerid, amount);

		SendClientMessageEx(playerid, COLOR_WHITE, "---------------------------------------------------");
		SendClientMessageEx(playerid, 0x00C100FF, "Bank Information:");
		format(string, sizeof(string), "You have withdrawed $%i from your bank account.", amount);
	 	SendClientMessageEx(playerid, COLOR_YELLOW, string);
		format(string, sizeof(string), "Old Balance: $%i, Bank Balance: $%i", PlayerInfo[playerid][pBankBalance] + amount, PlayerInfo[playerid][pBankBalance]);
	 	SendClientMessageEx(playerid, COLOR_GREY, string);
		SendClientMessageEx(playerid, COLOR_WHITE, "---------------------------------------------------");
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GREY, "You are not inside the bank.");
	}
	return 1;
}

CMD:deposit(playerid, params[])
{
	if(IsPlayerInRangeOfPoint(playerid, 10.0, 2310.30, -8.22, 26.74) || IsNearAtm(playerid))
	{
		new amount, string[128];
		if(sscanf(params, "i", amount))
		{
		    format(string, sizeof(string), "You have $%i inside your bank account.", PlayerInfo[playerid][pBankBalance]);
		    SendClientMessageEx(playerid, COLOR_GREY, string);
		 	return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /deposit [amount]");
		}
		else if(amount < 1) return SendClientMessageEx(playerid, COLOR_GREY, "You have entered an invalid deposit amount.");
		else if(amount > PlayerInfo[playerid][pMoney]) return SendClientMessageEx(playerid, COLOR_GREY, "You do not have that much money.");

		GivePlayerCash(playerid, -amount);
		PlayerInfo[playerid][pBankBalance] += amount;

		SendClientMessageEx(playerid, COLOR_WHITE, "---------------------------------------------------");
		SendClientMessageEx(playerid, 0x00C100FF, "Bank Information:");
		format(string, sizeof(string), "You have put $%i into your bank account.", amount);
	 	SendClientMessageEx(playerid, COLOR_YELLOW, string);
		format(string, sizeof(string), "Old Balance: $%i, Bank Balance: $%i", PlayerInfo[playerid][pBankBalance] - amount, PlayerInfo[playerid][pBankBalance]);
	 	SendClientMessageEx(playerid, COLOR_GREY, string);
		SendClientMessageEx(playerid, COLOR_WHITE, "---------------------------------------------------");
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GREY, "You are not inside the bank.");
	}
	return 1;
}

stock IsNearAtm(playerid)
{
	return (IsPlayerInRangeOfPoint(playerid, 3.0, 1154.83, -1448.93, 15.43)
		|| IsPlayerInRangeOfPoint(playerid, 3.0, -79.09, -1171.63, 1.80)
		|| IsPlayerInRangeOfPoint(playerid, 3.0, 387.20, -1816.04, 7.47)
		|| IsPlayerInRangeOfPoint(playerid, 3.0, 1367.25, -1290.09, 12.97)
		|| IsPlayerInRangeOfPoint(playerid, 3.0, 1493.41, -1772.32, 18.36)
		|| IsPlayerInRangeOfPoint(playerid, 3.0, 1748.78, -1863.59, 13.21)
		|| IsPlayerInRangeOfPoint(playerid, 3.0, 1833.24, -1840.24, 13.21)
		|| IsPlayerInRangeOfPoint(playerid, 3.0, 1928.57, -1779.13, 13.19)
		|| IsPlayerInRangeOfPoint(playerid, 3.0, 2108.12, -1790.70, 13.18)
		|| IsPlayerInRangeOfPoint(playerid, 3.0, 2228.40, -1715.64, 13.13)
		|| IsPlayerInRangeOfPoint(playerid, 3.0, 2402.55, -1982.00, 13.19));
}

CMD:accept(playerid, params[])
{
	new option[32], string[128];
	if(sscanf(params, "s[32]", option)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /accept <faction, family, frisk, ticket, mechanic>");
	if(!strcmp(option, "faction", true))
	{
	    new factionid = GetPVarInt(playerid, "FactionID");
	    new factioninvite = GetPVarInt(playerid, "FactionInvitation");
	    new invitedplayer = GetPVarInt(factioninvite, "InvitedPlayer");
	    if(invitedplayer == playerid)
		{
	    	if(PlayerInfo[playerid][pFaction] > 0 || PlayerInfo[playerid][pFamily] > 0) return SendClientMessageEx(playerid, COLOR_GREY, "You are already inside an organization.");
		    PlayerInfo[playerid][pFaction] = factionid;
		    PlayerInfo[playerid][pLeadership] = 0;
		    PlayerInfo[playerid][pFamily] = 0;
		    PlayerInfo[playerid][pRank] = 0;
			format(string, sizeof(string), "You have accepted the invitation, and joined the %s.", GetFactionName(PlayerInfo[playerid][pFaction]));
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "%s has accepted your faction invitation to the %s.", GetPlayerNameEx(playerid), GetFactionName(PlayerInfo[playerid][pFaction]));
			SendClientMessageEx(factioninvite, COLOR_LIGHTBLUE, string);
			
			DeletePVar(playerid, "FactionID");
			DeletePVar(playerid, "FactionInvitation");
			DeletePVar(factioninvite, "InvitedPlayer");
			return 1;
		}
	}
	
	else if(!strcmp(option, "family", true))
	{
	    new familyid = GetPVarInt(playerid, "FamilyID");
	    new familyinvite = GetPVarInt(playerid, "FamilyInvitation");
	    new invitedplayer = GetPVarInt(familyinvite, "InvitedPlayer");
	    if(invitedplayer == playerid)
		{
	    	if(PlayerInfo[playerid][pFaction] > 0 || PlayerInfo[playerid][pFamily] > 0) return SendClientMessageEx(playerid, COLOR_GREY, "You are already inside an organization.");
		    PlayerInfo[playerid][pFaction] = 0;
		    PlayerInfo[playerid][pLeadership] = 0;
		    PlayerInfo[playerid][pFamily] = familyid;
		    PlayerInfo[playerid][pRank] = 1;
			format(string, sizeof(string), "You have accepted the invitation, and joined the %s.", FamilyInfo[PlayerInfo[playerid][pFamily]][fName]);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "%s has accepted your invitation and joined the %s.", GetPlayerNameEx(playerid), FamilyInfo[PlayerInfo[playerid][pFamily]][fName]);
			SendClientMessageEx(familyinvite, COLOR_LIGHTBLUE, string);

			DeletePVar(playerid, "FamilyID");
			DeletePVar(playerid, "FamilyInvitation");
			DeletePVar(familyinvite, "InvitedPlayer");
			return 1;
		}
	}
	
	else if(!strcmp(option, "car", true))
	{
	    new
			vSeller = GetPVarInt(playerid, "VehicleOffer"),
			vSlot = GetPVarInt(playerid, "VehicleOfferSlot"),
			vPrice = GetPVarInt(playerid, "VehicleOfferPrice"),
			i = GetAvailableVehicleSlot(playerid);
	    if(IsPlayerConnectedEx(vSeller))
		{
	    	if(PlayerVehicleInfo[vSeller][vSlot][pvHandleId] != GetPlayerVehicleID(vSeller) || !IsPlayerInAnyVehicle(vSeller)) return 1;
	    	else if(!IsPlayerInRangeOfPlayer(playerid, vSeller, 5.0)) return SendClientMessageEx(playerid, COLOR_GREY, "You must be near the seller to use this command.");
	    	else if(PlayerInfo[playerid][pMoney] < vPrice) return SendClientMessageEx(playerid, COLOR_GREY, "You do not have enough money to purchase this vehicle.");
	    	else if(i == INVALID_SLOT_ID) return SendClientMessageEx(playerid, COLOR_GREY, "You do not have any slots available to store this vehicle.");
			else if(PlayerVehicleInfo[vSeller][i][pvImpounded] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot buy this car off the seller because it is impounded.");

			format(string, sizeof(string), "You have accepted the offer and purchased the %s for $%d.", VehicleNames[PlayerVehicleInfo[vSeller][vSlot][pvModelId] - 400], vPrice);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "%s has purchased your %s for $%d.", GetPlayerNameEx(playerid), VehicleNames[PlayerVehicleInfo[vSeller][vSlot][pvModelId] - 400], vPrice);
			SendClientMessageEx(vSeller, COLOR_LIGHTBLUE, string);

			PlayerVehicleInfo[playerid][i][pvHandleId] = PlayerVehicleInfo[vSeller][vSlot][pvHandleId];
			PlayerVehicleInfo[playerid][i][pvModelId] = PlayerVehicleInfo[vSeller][vSlot][pvModelId];
			PlayerVehicleInfo[playerid][i][pvPosition][0] = PlayerVehicleInfo[vSeller][vSlot][pvPosition][0];
			PlayerVehicleInfo[playerid][i][pvPosition][1] = PlayerVehicleInfo[vSeller][vSlot][pvPosition][1];
			PlayerVehicleInfo[playerid][i][pvPosition][2] = PlayerVehicleInfo[vSeller][vSlot][pvPosition][2];
			PlayerVehicleInfo[playerid][i][pvLocked] = PlayerVehicleInfo[vSeller][vSlot][pvLocked];
			PlayerVehicleInfo[playerid][i][pvPaintJob] = PlayerVehicleInfo[vSeller][vSlot][pvPaintJob];
			PlayerVehicleInfo[playerid][i][pvCarColor][0] = PlayerVehicleInfo[vSeller][vSlot][pvCarColor][0];
			PlayerVehicleInfo[playerid][i][pvCarColor][1] = PlayerVehicleInfo[vSeller][vSlot][pvCarColor][1];

			for (new ePlayerVehicleData:v; v < ePlayerVehicleData; v++) PlayerVehicleInfo[vSeller][vSlot][ePlayerVehicleData:v] = 0;

			RemovePlayerFromVehicleEx(vSeller);
			GivePlayerCash(playerid, -vPrice);
			GivePlayerCash(vSeller, vPrice);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			PlayerPlaySound(vSeller, 1052, 0.0, 0.0, 0.0);
			MySQL_Save_Player_Vehicle(vSeller, vSlot);
			MySQL_Save_Player_Vehicle(playerid, i);
			DeletePVar(playerid, "VehicleOffer");
			DeletePVar(playerid, "VehicleOfferSlot");
			DeletePVar(vSeller, "VehicleOfferPrice");
			return 1;
		}
	}
	
	else if(!strcmp(option, "frisk", true))
	{
	    new
	        friskId = GetPVarInt(playerid, "FriskedBy");
	        
		if(GetPVarInt(friskId, "FriskingPlayer") == playerid)
		{
			if(!IsPlayerInRangeOfPlayer(playerid, friskId)) return SendClientMessageEx(playerid, COLOR_GREY, "You must be near the specified player to use this command.");
			SendClientMessageEx(friskId, COLOR_GREY, "--------------------------------------------------------------");
			SendClientMessageEx(friskId, COLOR_GREY, "Item(s) found:");
			for(new i=0; i < 12; i++)
			{
				if(PlayerInfo[playerid][pWeapons][i] != 0)
				{
				    format(string, sizeof(string), "%s", GetWeaponNameEx(PlayerInfo[playerid][pWeapons][i]));
				    SendClientMessageEx(friskId, COLOR_GREY, string);
				}
			}
			if(PlayerInfo[playerid][pWeed] > 0)
			{
				format(string, sizeof(string), "Weed: %d grams", PlayerInfo[playerid][pWeed]);
				SendClientMessageEx(friskId, COLOR_GREY, string);
			}
			if(PlayerInfo[playerid][pSeeds] > 0)
			{
				format(string, sizeof(string), "Seeds: %d", PlayerInfo[playerid][pSeeds]);
				SendClientMessageEx(friskId, COLOR_GREY, string);
			}
			if(PlayerInfo[playerid][pGasCans] > 0)
			{
				format(string, sizeof(string), "Gas Cans: %d", PlayerInfo[playerid][pGasCans]);
				SendClientMessageEx(friskId, COLOR_GREY, string);
			}
			SendClientMessageEx(friskId, COLOR_GREY, "--------------------------------------------------------------");
			format(string, sizeof(string), "* You have frisked (ID: %i) %s.", playerid, GetPlayerNameEx(playerid));
			SendClientMessageEx(friskId, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "* You were frisked by (ID: %i) %s.", friskId, GetPlayerNameEx(friskId));
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			DeletePVar(friskId, "FriskingPlayer");
			DeletePVar(playerid, "FriskedBy");
		}
	}

	else if(!strcmp(option, "ticket", true))
	{
	    new ticketOfficer = GetPVarInt(playerid, "TicketOfficer"), ticketAmount = GetPVarInt(playerid, "TicketAmount");

		if(GetPVarInt(ticketOfficer, "TicketPlayer") == playerid)
		{
			if(!IsPlayerInRangeOfPlayer(playerid, ticketOfficer, 4.0)) return SendClientMessageEx(playerid, COLOR_GREY, "You must be near the specified player to use this command.");
			else if(PlayerInfo[playerid][pMoney] < ticketAmount) return SendClientMessageEx(playerid, COLOR_GREY, "You do not have enough money to pay for the ticket.");
			GivePlayerCash(playerid, -ticketAmount);
	    	AddVaultMoney(PlayerInfo[ticketOfficer][pFaction], ticketAmount);
			format(string, sizeof(string), "* You have paid the ticket of $%d to (ID: %i) %s.", ticketAmount, ticketOfficer, GetPlayerNameEx(ticketOfficer));
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "* (ID: %d) %s has paid the ticket of $%d.", playerid, GetPlayerNameEx(playerid), ticketAmount);
			SendClientMessageEx(ticketOfficer, COLOR_LIGHTBLUE, string);
			DeletePVar(ticketOfficer, "TicketPlayer");
			DeletePVar(playerid, "TicketAmount");
			DeletePVar(playerid, "TicketOfficer");
		}
	}
	
	else if(!strcmp(option, "taxi", true))
	{
	    if(PlayerInfo[playerid][pJob] == 5)
	    {
	        if(PlayerInfo[playerid][pDuty])
	        {
		        if(!IsPlayerConnectedEx(gCurrentTaxiCall))
				{
		    		gCurrentTaxiCall = INVALID_PLAYER_ID;
					return SendClientMessageEx(playerid, COLOR_GREY, "Nobody called for a taxi.");
				}
				new Float:Position[3];
			    SendClientMessageEx(gCurrentTaxiCall, COLOR_LIGHTBLUE, "TAXI HQ: Your request has been processed and a unit has been dispatched to your location.");
				format(string, sizeof(string), "* %s has accepted (ID: %d) %s's call.", GetPlayerNameEx(playerid), gCurrentTaxiCall, GetPlayerNameEx(gCurrentTaxiCall));
				foreach (new i: Player) if(PlayerInfo[i][pJob] == 5) SendClientMessageEx(i, COLOR_LIGHTYELLOW, string);
				GetPlayerPos(gCurrentTaxiCall, Position[0], Position[1], Position[2]);
				SetPlayerCheckpoint(playerid, Position[0], Position[1], Position[2], 5.0);
				SetPVarInt(playerid, "TaxiFindPlayer", 1);
		    	gCurrentTaxiCall = INVALID_PLAYER_ID;
	    	}
	    	else SendClientMessageEx(playerid, COLOR_GREY, "You must be on duty to use this command.");
	    }
	}
	else if(!strcmp(option, "death", true))
	{
	    if(GetPVarInt(playerid, "RequireMedicalAssistance") == 1)
		{
    		GivePlayerDeath(playerid);
		}
	}
	else if(!strcmp(option, "mechanic", true))
	{
	    if(GetPVarInt(playerid, "MechOffer") != INVALID_PLAYER_ID)
		{
			new vehid = GetPlayerVehicleID(playerid);
		    if(GetPVarInt(playerid, "MechOfferType") == 1)
		    {
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You accepted mechanic service. The body kit of your car is being fixed.");
				SendClientMessageEx(GetPVarInt(playerid, "MechOffer"), COLOR_LIGHTBLUE, "The specified player has accepted your offer to fix their car's body kit.");
				SendClientMessageEx(GetPVarInt(playerid, "MechOffer"), COLOR_WHITE, "Start spraying the vehicle with your spraycan to complete the process.");
				new Float:X, Float:Y, Float:Z;
				GetVehiclePos(vehid, X, Y, Z);
                SetPVarInt(GetPVarInt(playerid, "MechOffer"), "SprayingVehicleID", vehid);
				SetPVarFloat(GetPVarInt(playerid, "MechOffer"), "SprayingVehicleX", X);
				SetPVarFloat(GetPVarInt(playerid, "MechOffer"), "SprayingVehicleY", Y);
				SetPVarFloat(GetPVarInt(playerid, "MechOffer"), "SprayingVehicleZ", Z);
                GivePlayerWeapon(GetPVarInt(playerid, "MechOffer"), 41, 99999);
		    }
		    else if(GetPVarInt(playerid, "MechOfferType") == 2)
		    {
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You accepted mechanic service. The engine of your car has been fixed.");
				SendClientMessageEx(GetPVarInt(playerid, "MechOffer"), COLOR_LIGHTBLUE, "The specified player has accepted your offer to fix their car's engine.");
		   		SetVehicleHealth(vehid, 1000.0);
				VehicleInfo[vehid][vTotalled] = 0;
		    }
  			DeletePVar(playerid, "MechOffer");
			DeletePVar(playerid, "MechOfferType");
		}
	}
	return 1;
}

CMD:frisk(playerid, params[])
{
    new targetid, string[128];
    if(sscanf(params, "u", targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /frisk <playerid>");
    else if(!IsPlayerConnectedEx(targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
	else if(targetid == playerid) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot use this command on yourself.");
	else if(!IsPlayerInRangeOfPlayer(playerid, targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "You must be near the specified player to use this command.");

	SetPVarInt(playerid, "FriskingPlayer", targetid);
	SetPVarInt(targetid, "FriskedBy", playerid);
	format(string, sizeof(string), "* (ID: %i) %s wants to frisk you (type /accept frisk to allow them to do so)", playerid, GetPlayerNameEx(playerid));
	SendClientMessageEx(targetid, 0x33CCFFAA, string);
	format(string, sizeof(string), "* You have offered a frisk to (ID: %i) %s", targetid, GetPlayerNameEx(targetid));
	SendClientMessageEx(playerid, 0x33CCFFAA, string);
	return 1;
}
/*
new AvailableVehicles[212][] = {
	{"Landstalker"},{"Bravura"},{"Buffalo"},{"Linerunner"},{"Perrenial"},{"Sentinel"},{""},
	{""},{""},{"Stretch"},{"Manana"},{"Infernus"},{"Voodoo"},{"Pony"},{"Mule"},
	{"Cheetah"},{""},{"Leviathan"},{"Moonbeam"},{"Esperanto"},{"Taxi"},{"Washington"},
	{"Bobcat"},{"Mr Whoopee"},{"BF Injection"},{""},{"Premier"},{""},{"Securicar"},
	{"Banshee"},{""},{"Bus"},{""},{""},{"Hotknife"},{""},{"Previon"},
	{"Coach"},{"Cabbie"},{"Stallion"},{"Rumpo"},{"RC Bandit"},{"Romero"},{"Packer"},{"Monster"},
	{"Admiral"},{"Squalo"},{""},{"Pizzaboy"},{""},{""},{"Turismo"},
	{"Speeder"},{"Reefer"},{"Tropic"},{"Flatbed"},{"Yankee"},{"Caddy"},{"Solair"},{""},
	{"Skimmer"},{"PCJ-600"},{"Faggio"},{"Freeway"},{""},{""},{"Glendale"},{"Oceanic"},
	{"Sanchez"},{""},{"Patriot"},{"Quad"},{"Coastguard"},{"Dinghy"},{"Hermes"},{"Sabre"},
	{"Rustler"},{"ZR-350"},{"Walton"},{"Regina"},{"Comet"},{"BMX"},{"Burrito"},{"Camper"},{"Marquis"},
	{"Baggage"},{"Dozer"},{"Maverick"},{""},{"Rancher"},{""},{"Virgo"},{"Greenwood"},
	{"Jetmax"},{"Hotring"},{"Sandking"},{"Blista Compact"},{""},{"Boxville"},{"Benson"},
	{"Mesa"},{""},{"Hotring Racer A"},{"Hotring Racer B"},{"Bloodring Banger"},{"Rancher"},
	{"Super GT"},{"Elegant"},{"Journey"},{"Bike"},{"Mountain Bike"},{"Beagle"},{"Cropdust"},{"Stunt"},
	{""}, {"Roadtrain"},{"Nebula"},{"Majestic"},{"Buccaneer"},{"Shamal"},{""},{"FCR-900"},
	{"NRG-500"},{""},{"Cement Truck"},{""},{"Fortune"},{"Cadrona"},{""},
	{"Willard"},{"Forklift"},{"Tractor"},{"Combine"},{"Feltzer"},{"Remington"},{"Slamvan"},
	{"Blade"},{"Freight"},{"Streak"},{"Vortex"},{"Vincent"},{"Bullet"},{"Clover"},{"Sadler"},
	{""},{"Hustler"},{"Intruder"},{"Primo"},{"Cargobob"},{"Tampa"},{"Sunrise"},{"Merit"},
	{"Utility"},{"Nevada"},{"Yosemite"},{"Windsor"},{"Monster A"},{"Monster B"},{"Uranus"},{"Jester"},
	{"Sultan"},{"Stratum"},{"Elegy"},{"Raindance"},{""},{"Flash"},{"Tahoma"},{"Savanna"},
	{"Bandito"},{"Freight Flat"},{"Streak Carriage"},{"Kart"},{"Mower"},{"Duneride"},{"Sweeper"},
	{"Broadway"},{"Tornado"},{""},{""},{"Huntley"},{"Stafford"},{"BF-400"},{"Newsvan"},
	{"Tug"},{""},{"Emperor"},{"Wayfarer"},{"Euros"},{"Hotdog"},{"Club"},{""},
	{""},{"Andromada"},{"Dodo"},{""},{"Launch"},{""},{""},
	{""},{""},{"Picador"},{""},{"Alpha"},{"Phoenix"},{"Glendale"},
	{"Sadler"},{""},{""},{""},{"Boxville"},{""},
	{""}
};
*/
CMD:createpvehicle(playerid, params[])
{
	new string[128], targetid, vName[16];

    if(!IsAdmin(playerid, ADMIN_LEVEL_LEADADMIN)) return SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use this command.");
	else if(sscanf(params, "us[16]", targetid, vName)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /createpvehicle <playerid> <name>");

	new
		i = GetAvailableVehicleSlot(targetid);
	if(i == INVALID_SLOT_ID) return SendClientMessageEx(playerid, COLOR_GREY, "They do not have available slots to store anymore vehicles.");

	for (new id=0; id < sizeof(VehicleNames); id++)
	{
		if(strfind(VehicleNames[id], vName, true) == -1)
		{
			continue;
		}

		GetPlayerPos(playerid, PlayerInfo[playerid][pPositionX], PlayerInfo[playerid][pPositionY], PlayerInfo[playerid][pPositionZ]);
		GetPlayerFacingAngle(playerid, PlayerInfo[playerid][pFacingAngle]);
		PlayerVehicleInfo[targetid][i][pvModelId] = 400 + id;
		PlayerVehicleInfo[targetid][i][pvPosition][0] = PlayerInfo[playerid][pPositionX];
		PlayerVehicleInfo[targetid][i][pvPosition][1] = PlayerInfo[playerid][pPositionY];
		PlayerVehicleInfo[targetid][i][pvPosition][2] = PlayerInfo[playerid][pPositionZ];
		PlayerVehicleInfo[playerid][i][pvPosition][3] = PlayerInfo[playerid][pFacingAngle];
		PlayerVehicleInfo[targetid][i][pvLocked] = 0;
		PlayerVehicleInfo[targetid][i][pvPaintJob] = 0;
		PlayerVehicleInfo[targetid][i][pvCarColor][0] = 0;
		PlayerVehicleInfo[targetid][i][pvCarColor][1] = 0;
		PlayerVehicleInfo[targetid][i][pvImpounded] = 0;
		PlayerVehicleInfo[targetid][i][pvTicketPrice] = 0;
		PlayerVehicleInfo[targetid][i][pvHandleId] = CreateVehicle(PlayerVehicleInfo[targetid][i][pvModelId], PlayerVehicleInfo[targetid][i][pvPosition][0], PlayerVehicleInfo[targetid][i][pvPosition][1], PlayerVehicleInfo[targetid][i][pvPosition][2], PlayerVehicleInfo[targetid][i][pvPosition][3], PlayerVehicleInfo[targetid][i][pvCarColor][0], PlayerVehicleInfo[targetid][i][pvCarColor][1], VEHICLE_RESPAWN);
  		VehicleInfo[PlayerVehicleInfo[targetid][i][pvHandleId]][vLocked] = 0;

		PlayerPlaySound(targetid, 1052, 0.0, 0.0, 0.0);
		PutPlayerInVehicle(targetid, PlayerVehicleInfo[targetid][i][pvHandleId], 0);
		MySQL_Save_Player_Vehicle(targetid, i);

		format(string, sizeof(string), "A %s has successfully been issued to (ID: %d) %s.", GetVehicleName(PlayerVehicleInfo[targetid][i][pvHandleId]), targetid, GetPlayerNameEx(targetid));
 		SendClientMessageEx(playerid, COLOR_YELLOW, string);
		format(string, sizeof(string), "You have been issued a %s by Administrator %s.", GetVehicleName(PlayerVehicleInfo[targetid][i][pvHandleId]), GetPlayerNameEx(playerid));
 		SendClientMessageEx(targetid, COLOR_YELLOW, string);
		return 1;
	}
 	SendClientMessageEx(playerid, COLOR_YELLOW, "The specified car could not be found in the database, you have entered an invalid name.");
	return 1;
}


CMD:destroypvehicle(playerid, params[])
{
	new string[128], targetid, value;
    if(!IsAdmin(playerid, ADMIN_LEVEL_LEADADMIN)) return SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use this command.");
	else if(sscanf(params, "ui", targetid, value)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /destroypvehicle <playerid> <slot>");
	else if(value < 1 || value > MAX_PLAYEROWNED_VEHICLES) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /destroypvehicle <playerid> <slot 1-3>");
	else if(PlayerVehicleInfo[targetid][value - 1][pvModelId] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot delete the car in that slot because it is empty.");
	format(string, sizeof(string), "Your vehicle %s was deleted by Administrator %s.", GetVehicleName(PlayerVehicleInfo[targetid][value - 1][pvHandleId]), GetPlayerNameEx(playerid));
	SendClientMessageEx(targetid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "You have deleted %s's %s.", GetPlayerNameEx(targetid), GetVehicleName(PlayerVehicleInfo[targetid][value - 1][pvHandleId]));
	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
	DestroyVehicle(PlayerVehicleInfo[targetid][value - 1][pvHandleId]);
	VehicleInfo[PlayerVehicleInfo[playerid][value - 1][pvHandleId]][vLocked] = 0;
	for (new i; ePlayerVehicleData:i < ePlayerVehicleData; i++)
	{
    	PlayerVehicleInfo[targetid][value - 1][ePlayerVehicleData:i] = 0;
	}
	MySQL_Save_Player_Vehicle(targetid, value - 1);
	return 1;
}

CMD:tow(playerid, params[])
{
	if(IsACop(playerid))
	{
		if(!IsPlayerInAnyVehicle(playerid) || GetVehicleModel(GetPlayerVehicleID(playerid)) != 525) return SendClientMessageEx(playerid, COLOR_GREY, "You must be inside a tow truck to use this command.");
		if(!IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) {
			new
				Float: fVehiclePos[3];
			for(new i = 0; i < MAX_VEHICLES; i++) {
				if(GetVehicleModel(i) == 0 || (IsPlayerInAnyVehicle(playerid) && i == GetPlayerVehicleID(playerid)) ) continue;
				GetVehiclePos(i, fVehiclePos[0], fVehiclePos[1], fVehiclePos[2]);
				if(IsPlayerInRangeOfPoint(playerid, 7.0, fVehiclePos[0], fVehiclePos[1], fVehiclePos[2])) {
				    if(IsCar(i)) {
				        AttachTrailerToVehicle(i, GetPlayerVehicleID(playerid));
				        SendClientMessageEx(playerid, COLOR_GREEN, "You have successfully attached a vehicle to the tow truck.");
				    }
					else return SendClientMessageEx(playerid, COLOR_GREY, "This command can only be used on cars.");
				}
			}
		}
		else
		{
		    DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
  			SendClientMessageEx(playerid, COLOR_GREEN, "You have successfully detached a vehicle from the tow truck.");
		}
		return 1;
	}
	else return SendClientMessageEx(playerid, COLOR_GREY, "You must be in the Los Santos Police Department to use this command.");
}

CMD:impound(playerid, params[])
{
	if(IsACop(playerid))
	{
	    if(!IsPlayerInRangeOfPoint(playerid, 6.0, 1866.447, -1793.340, 13.546)) return SendClientMessageEx(playerid, COLOR_GREY, "You must be near the car storage warehouse to use this command.");
		else if(!IsPlayerInAnyVehicle(playerid) || GetVehicleModel(GetPlayerVehicleID(playerid)) != 525) return SendClientMessageEx(playerid, COLOR_GREY, "You must be inside a tow truck to use this command.");
		else if(!IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) return SendClientMessageEx(playerid, COLOR_GREY, "You must be towing a car to use this command.");
		new trailer = GetVehicleTrailer(GetPlayerVehicleID(playerid)), string[128];
		if(trailer == 0) return 1;
		foreach(new i: Player)
		{
		    for(new v=0; v < MAX_PLAYEROWNED_VEHICLES; v++)
		    {
		        if(PlayerVehicleInfo[i][v][pvHandleId] == trailer)
				{
					format(string, sizeof(string), "DMV: %s has impounded %s's %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(i), GetVehicleName(PlayerVehicleInfo[i][v][pvHandleId]));
			        PoliceAlert(string);
		    		format(string, sizeof(string), "Your %s has been impounded, you must pay a visit to the DMV to have it released.", GetVehicleName(PlayerVehicleInfo[i][v][pvHandleId]));
		    		SendClientMessageEx(i, COLOR_WHITE, string);
		            PlayerVehicleInfo[i][v][pvImpounded] = 1;
	    	        VehicleInfo[PlayerVehicleInfo[i][v][pvHandleId]][vLocked] = 0;
	    	    	DestroyVehicle(PlayerVehicleInfo[i][v][pvHandleId]);
		    		MySQL_Save_Player_Vehicle(i, v);
		            return 1;
		        }
		    }
		}
		DetachTrailerFromVehicle(trailer);
		SetVehicleToRespawn(trailer);
		SendClientMessageEx(playerid, COLOR_WHITE, "Non-player owned vehicles cannot be stored inside the impound, it has been respawned.");
		return 1;
	}
	else return SendClientMessageEx(playerid, COLOR_GREY, "You must be in the Los Santos Police Department to use this command.");
}

CMD:vticket(playerid, params[])
{
    if(IsACop(playerid))
    {
		new
			closestcar = GetClosestCar(playerid),
			amount;
	    if(sscanf(params, "i", amount)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /vticket [amount]");
  		else if(closestcar == INVALID_VEHICLE_ID) return SendClientMessage(playerid, COLOR_FADE1, "You're not close enough to any vehicle.");
		else if(amount < 1 || amount > 250) return SendClientMessageEx(playerid, COLOR_GREY, "The ticket cannot cost less than $1 or more than $250.");
		foreach(new i: Player)
		{
		    for(new v=0; v < MAX_PLAYEROWNED_VEHICLES; v++)
		    {
		        if(PlayerVehicleInfo[i][v][pvHandleId] == closestcar)
				{
		            if(PlayerVehicleInfo[i][v][pvTicketPrice] < 1000)
					{
		                PlayerVehicleInfo[i][v][pvTicketPrice] += amount;
		    			MySQL_Save_Player_Vehicle(i, v);
						SendClientMessage(playerid, COLOR_GREEN, "You have successfully issued the ticket to the specified vehicle.");
		            }
					else SendClientMessage(playerid, COLOR_FADE1, "This vehicle has exceeded the ticket limit ($1000) you cannot place anymore tickets on it.");
              		return 1;
		        }
			}
		}
		SendClientMessage(playerid, COLOR_FADE1, "You're not close enough to any vehicle.");
        return 1;
    }
	else return SendClientMessageEx(playerid, COLOR_GREY, "You must be in the Los Santos Police Department to use this command.");
}
 
CMD:vcheck(playerid, params[])
{
    if(IsACop(playerid) || IsAdmin(playerid, ADMIN_LEVEL_TRIALADMIN))
    {
		new
			closestcar = GetClosestCar(playerid),
			string[256];
  		if(closestcar == INVALID_VEHICLE_ID) return SendClientMessage(playerid, COLOR_FADE1, "You're not close enough to any vehicle.");
		foreach(new i: Player)
		{
		    for(new v=0; v < MAX_PLAYEROWNED_VEHICLES; v++)
		    {
		        if(PlayerVehicleInfo[i][v][pvHandleId] == closestcar) {
		            format(string, sizeof(string), "Vehicle Status:{FFFFFF} Model: %s, Number Plate: %d, Registrant: %s, Tickets: $%d", VehicleNames[PlayerVehicleInfo[i][v][pvModelId] - 400], PlayerVehicleInfo[i][v][pvHandleId], GetPlayerNameEx(i), PlayerVehicleInfo[i][v][pvTicketPrice]);
					SendClientMessage(playerid, COLOR_GREEN, string);
              		return 1;
		        }
			}
		}
		SendClientMessage(playerid, COLOR_FADE1, "This vehicle appears to show up unregistered in the database (it may be a faction/job vehicle).");
        return 1;
    }
	else return SendClientMessageEx(playerid, COLOR_GREY, "You must be in the Los Santos Police Department to use this command.");
 }
    
CMD:ticket(playerid, params[])
{
    if(IsACop(playerid))
    {
	    new
			targetid,
			amount,
			reason[16],
			string[128];
	    if(sscanf(params, "uis[16]", targetid, amount, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /ticket <playerid> <amount] [reason>");
	    else if(!IsPlayerConnectedEx(targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		else if(targetid == playerid) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot use this command on yourself.");
		else if(!IsPlayerInRangeOfPlayer(playerid, targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "You must be near the specified player to use this command.");
		else if(amount < 1 || amount > 400) return SendClientMessageEx(playerid, COLOR_GREY, "The ticket cannot cost less than $1 or more than $400.");
		SetPVarInt(playerid, "TicketPlayer", targetid);
		SetPVarInt(targetid, "TicketAmount", amount);
		SetPVarInt(targetid, "TicketOfficer", playerid);
		format(string, sizeof(string), "* (ID: %i) %s wants you to pay for a ticket of $%d, reason: %s. (/accept ticket)", playerid, GetPlayerNameEx(playerid), amount, reason);
		SendClientMessageEx(targetid, 0x33CCFFAA, string);
		format(string, sizeof(string), "* You have given (ID: %i) %s a ticket of $%d for %s.", targetid, GetPlayerNameEx(targetid), amount, reason);
		SendClientMessageEx(playerid, 0x33CCFFAA, string);
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GREY, "You must be in the Los Santos Police Department to use this command.");
	}
	return 1;
}

CMD:quitfaction(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "You are not in a faction.");
	DeletePVar(playerid, "FactionID");
	DeletePVar(playerid, "FactionInvitation");
	DeletePVar(GetPVarInt(playerid, "FactionInvitation"), "InvitedPlayer");
	SendClientMessageEx(playerid, COLOR_WHITE, "You have left your current faction, any faction weapons have been removed from your inventory.");
 	PlayerInfo[playerid][pFaction] = 0;
 	PlayerInfo[playerid][pLeadership] = 0;
  	PlayerInfo[playerid][pRank] = 0;
	PlayerInfo[playerid][pDuty] = 0;
	SetPlayerToTeamColor(playerid);
   	return 1;
}

CMD:quitgang(playerid, params[])
{
	return cmd_quitfamily(playerid, params);
}

CMD:quitfamily(playerid, params[])
{
	if(PlayerInfo[playerid][pFamily] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "You are not in a family.");
	DeletePVar(playerid, "FamilyID");
	DeletePVar(playerid, "FamilyInvitation");
	DeletePVar(GetPVarInt(playerid, "FamilyInvitation"), "InvitedPlayer");
	SendClientMessageEx(playerid, COLOR_WHITE, "You have quit your current family.");
 	PlayerInfo[playerid][pFamily] = 0;
  	PlayerInfo[playerid][pRank] = 0;
   	return 1;
}

CMD:stats(playerid, params[])
{
	new string[256];
	SendClientMessage(playerid, COLOR_ORANGE, "-----------------------------------------------------------------------------------------------------");
	format(string, sizeof(string), "Name: %s | Level: %i | Age: %i |  Gender: %s | Phone Number: %i", GetPlayerNameEx(playerid), PlayerInfo[playerid][pLevel], PlayerInfo[playerid][pAge], GetPlayerGender(playerid), PlayerInfo[playerid][pPhoneNumber]);
	SendClientMessage(playerid, COLOR_FADE1, string);
	format(string, sizeof(string), "Playing Hours: %i | Experience: %i/%d | Paycheck: %d", PlayerInfo[playerid][pPlayingHours], PlayerInfo[playerid][pExperience], (PlayerInfo[playerid][pLevel] + 1) * 5, PlayerInfo[playerid][pPaycheck]);
	SendClientMessage(playerid, COLOR_FADE1, string);
	format(string, sizeof(string), "Total Wealth: $%i | Money: $%i | Bank Balance: $%i | Channel: %i", (PlayerInfo[playerid][pMoney] + PlayerInfo[playerid][pBankBalance]), PlayerInfo[playerid][pMoney], PlayerInfo[playerid][pBankBalance], PlayerInfo[playerid][pChannel]);
	SendClientMessage(playerid, COLOR_FADE1, string);
	format(string, sizeof(string), "Organization: %s | Family: %s | Rank: (%s [%d]) | Job: %s ", GetFactionName(PlayerInfo[playerid][pFaction]), GetFamilyName(PlayerInfo[playerid][pFamily]), GetRankName(playerid), PlayerInfo[playerid][pRank], GetPlayerJob(playerid));
	SendClientMessage(playerid, COLOR_FADE1, string);
	SendClientMessage(playerid, COLOR_ORANGE, "-----------------------------------------------------------------------------------------------------");
   	return 1;
}

CMD:inventory(playerid, params[])
{
	new string[256];
	SendClientMessageEx(playerid, COLOR_ORANGE, "-------------------------");
	format(string, sizeof(string), "{F69521}[Marijuana]:{FFFFFF} %d grams {F69521}[Seeds]:{FFFFFF} %d seeds", PlayerInfo[playerid][pWeed], PlayerInfo[playerid][pSeeds]);
	SendClientMessageEx(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "{F69521}[Gas Cans]:{FFFFFF} %d {F69521}[Spraycans]:{FFFFFF} %d {F69521}[Bombs]:{FFFFFF} %d", PlayerInfo[playerid][pGasCans], PlayerInfo[playerid][pSprayCan], PlayerInfo[playerid][pBombs]);
	SendClientMessageEx(playerid, COLOR_GREY, string);
	SendClientMessageEx(playerid, COLOR_ORANGE, "-------------------------");
	return 1;
}

CMD:check(playerid, params[])
{
	new targetid, string[256], employer[64];
	if(!IsAdmin(playerid, ADMIN_LEVEL_TRIALADMIN)) return SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "u", targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /check <playerid>");
	if(PlayerInfo[targetid][pFaction]) format(employer, sizeof(employer), "%s", GetFactionName(PlayerInfo[targetid][pFaction]));
	else if(PlayerInfo[targetid][pFamily]) format(employer, sizeof(employer), "%s", FamilyInfo[targetid][fName]);
	SendClientMessageEx(playerid, COLOR_ORANGE, "-----------------------------------------------------------------------------------------------------");
	format(string, sizeof(string), "Name: %s | Level: %i | Age: %i |  Gender: %s | Phone Number: %i", GetPlayerNameEx(targetid), PlayerInfo[targetid][pLevel], PlayerInfo[targetid][pAge], GetPlayerGender(targetid), PlayerInfo[targetid][pPhoneNumber]);
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "Playing Hours: %i | Experience: %i/%d | Paycheck: %d", PlayerInfo[targetid][pPlayingHours], PlayerInfo[targetid][pExperience], (PlayerInfo[targetid][pLevel] + 1) * 5, PlayerInfo[targetid][pPaycheck]);
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "Total Wealth: $%i | Money: $%i | Bank Balance: $%i | Channel: %i", (PlayerInfo[targetid][pMoney] + PlayerInfo[targetid][pBankBalance]), PlayerInfo[targetid][pMoney], PlayerInfo[targetid][pBankBalance], PlayerInfo[targetid][pChannel]);
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "Organization: %s | Rank: %s (%d) | Job: %s ", employer, GetRankName(targetid), PlayerInfo[targetid][pRank], GetPlayerJob(targetid));
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	SendClientMessageEx(playerid, COLOR_ORANGE, "-----------------------------------------------------------------------------------------------------");
	return 1;
}
CMD:tazer(playerid, params[]) return cmd_taser(playerid, params);
CMD:taser(playerid, params[])
{
    if(IsACop(playerid))
    {
		if(IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot use this command if you are inside a vehicle.");
		else if(IsPlayerRestricted(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot use this command at this time.");
		
		new string[128];
			
        if(GetPVarInt(playerid, "TaserEquipped"))
        {
			format(string, sizeof(string), "* %s holsters their taser.", GetPlayerNameEx(playerid));
            ResetPlayerWeapons(playerid);
			PlayerInfo[playerid][pWeapons][2] = LastGun[playerid];
			ReloadPlayerWeapons(playerid);
			LastGun[playerid] = 0;
			DeletePVar(playerid, "TaserEquipped");
		}
		else
		{
			format(string, sizeof(string), "* %s unholsters their taser.", GetPlayerNameEx(playerid));
			SetPVarInt(playerid, "TaserEquipped", 1);
			LastGun[playerid] = PlayerInfo[playerid][pWeapons][2];
			ResetPlayerWeapons(playerid);
			PlayerInfo[playerid][pWeapons][2] = 0;
			GivePlayerWeaponEx(playerid, 23);
	    }
		ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
    }
    else SendClientMessageEx(playerid, COLOR_GREY, "You are not part of a Law Enforcement Organisation.");
	return 1;
}


CMD:rentcar(playerid, params[])
{
	new veh = GetPlayerVehicleID(playerid);
	if(!IsARentableVehicle(veh)) return SendClientMessageEx(playerid, COLOR_GREY, "You must be inside a rentable vehicle to use this command.");
	else if(GetPVarInt(playerid, "RentingCar") != 0) return SendClientMessageEx(playerid, COLOR_GREY, "You are already renting a vehicle, you cannot rent another one.");
	else if(WhoRentsVehicle(veh) != INVALID_PLAYER_ID) return SendClientMessageEx(playerid, COLOR_GREY, "Somebody is currently already renting this vehicle, you cannot use this command.");
	else if(PlayerInfo[playerid][pMoney] < 25) return SendClientMessageEx(playerid, COLOR_GREY, "You must have at least $25 to rent a vehicle.");
	GivePlayerCash(playerid, -25);
	SetPVarInt(playerid, "RentingCar", veh);
	GetVehicleParamsEx(veh, VehicleInfo[veh][vEngine], VehicleInfo[veh][vLights], VehicleInfo[veh][vAlarm], VehicleInfo[veh][vDoors], VehicleInfo[veh][vBonnet], VehicleInfo[veh][vBoot], VehicleInfo[veh][vObjective]);
	VehicleInfo[veh][vEngine] = 1; VehicleInfo[veh][vLights] = 1; VehicleInfo[veh][vLocked] = 0;
	SetVehicleParamsEx(veh, VehicleInfo[veh][vEngine], VehicleInfo[veh][vLights], VehicleInfo[veh][vAlarm], VehicleInfo[veh][vDoors], VehicleInfo[veh][vBonnet], VehicleInfo[veh][vBoot], VehicleInfo[veh][vObjective]);
	return 1;
}

CMD:service(playerid, params[])
{
	new option[32], string[128];
	if(sscanf(params, "s[32]", option)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /service [taxi]");
	else if(gettime() - sTimeLeft[playerid] < 0)
	{
		format(string, sizeof(string), "Please wait %i seconds before requesting another service.", sTimeLeft[playerid] - gettime());
    	return SendClientMessageEx(playerid, COLOR_GREY, string);
   	}
	if(!strcmp(option, "taxi", true))
	{
	    if(!AreAnyTaxiDriversOnline()) return SendClientMessageEx(playerid, COLOR_GREY, "There are currently no taxi driver units available, please try again later.");
		else if(IsPlayerRestricted(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this at this time.");
	    gCurrentTaxiCall = playerid;
	    format(string, sizeof(string), "* (ID: %d) %s requires a taxi at location %s, (/accept taxi).", playerid, GetPlayerNameEx(playerid), GetPlayerZone(playerid));
		foreach (new i: Player) if(PlayerInfo[i][pJob] == 5) SendClientMessageEx(i, COLOR_LIGHTYELLOW, string);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You have called for a taxi, please wait at your current location for the taxi to arrive.");
		sTimeLeft[playerid] += gettime() + 30;
	}
	else if(!strcmp(option, "ems", true))
	{
	    if(GetPVarInt(playerid, "RequireMedicalAssistance") == 1)
	    {
			SendClientMessageEx(playerid, COLOR_WHITE, "The EMS have been informed of your current location and are on their way.");
	        GetPlayer2DZone(playerid, option, sizeof(option));
    		format(string, sizeof(string), "Emergency Dispatch has reported (ID: %d) %s to be wounded at %s, type (/getpt) %d to accept.", playerid, GetPlayerNameEx(playerid), option, playerid);
			SendRadioMessage(3, TEAM_COLOR_LSFMD, string);
    		sTimeLeft[playerid] += gettime() + 30;
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "You do not require any medical attention.");
	}
	return 1;
}

CMD:getpt(playerid, params[])
{
	new string[128];
	if(PlayerInfo[playerid][pFaction] != 3) return SendClientMessageEx(playerid, COLOR_GREY, "You are not a part of the LSFMD.");
	else if(sscanf(params, "{u}")) {
	 	return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /getpt <playerid>");
	}
	else if(!IsPlayerConnectedEx(strval(params))) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
	else if(PlayerInfo[playerid][pDuty] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "You must be on duty to use this command.");
	else if(strval(params) == playerid) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot use this command on yourself.");
	else if(IsPlayerRestricted(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this at this time.");
	else if(GetPVarInt(strval(params), "RequireMedicalAssistance") == 0) return SendClientMessageEx(playerid, COLOR_GREY, "The specified player does not require any medical assistance.");

	format(string, sizeof(string), "* You have accepted the Medic Call from %s", GetPlayerNameEx(strval(params)));
    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "* Medic %s has accepted your Medic Call please wait at your current Position.", GetPlayerNameEx(playerid));
    SendClientMessageEx(strval(params), COLOR_LIGHTBLUE, string);
    SetPVarInt(playerid, "MedicCall", strval(params) + 1);
    SetPVarInt(strval(params), "MedicId", playerid + 1);
	return 1;
}

CMD:loadpt(playerid, params[])
{
    if(PlayerInfo[playerid][pFaction] == 3)
    {
		new string[128], targetid, seatid;
		if(sscanf(params, "ui", targetid, seatid))  return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /loadpt <playerid> <seat 1-3>");
		else if(!IsPlayerConnectedEx(targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		else if(playerid == targetid) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot use this command on yourself.");
		else if(IsPlayerRestricted(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot use this command at this time.");
		else if(seatid < 1 || seatid > 3) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /loadpt <playerid> <seat 1-4>");
		else if(IsPlayerInAnyVehicle(targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "The specified is already inside a vehicle.");
		else if(!IsPlayerInRangeOfPlayer(playerid, targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "You must be near the specified player to use this command.");
		else if(!IsAmbulance(gLastCar[playerid])) return SendClientMessageEx(playerid, COLOR_GREY, "Your last vehicle cannot be used because it is not an ambulance.");
		else if(GetPVarInt(targetid, "RequireMedicalAssistance") == 0) return SendClientMessageEx(playerid, COLOR_GREY, "The specified player does not require any medical assistance.");
		ClearAnimations(targetid);
		PutPlayerInVehicle(targetid, gLastCar[playerid], seatid);
		TogglePlayerControllable(targetid, false);
		format(string, sizeof(string), "* %s loads %s into the ambulance.", GetPlayerNameEx(playerid), GetPlayerNameEx(targetid));
		ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
    }
    else SendClientMessageEx(playerid, COLOR_GREY, "You are not a part of the LSFMD.");
	return 1;
}

CMD:deliverpt(playerid, params[])
{
    if(PlayerInfo[playerid][pFaction] == 3)
    {
        new targetid, string[128];
		if(sscanf(params, "u", targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /deliverpt <playerid>");
		else if(!IsPlayerConnectedEx(targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		else if(playerid == targetid) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot use this command on yourself.");
		else if(GetPlayerVehicleID(targetid) != GetPlayerVehicleID(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "The specified person is not inside your vehicle.");
		else if(GetPVarInt(targetid, "RequireMedicalAssistance") == 0) return SendClientMessageEx(playerid, COLOR_GREY, "The specified person does not require any medical assistance.");
		else if(IsNearDeliveryPoint(playerid) == 0) return SendClientMessageEx(playerid, COLOR_GREY, "You must be at a delivery point to use this command.");

		PlayerInfo[targetid][pMedicalBill] = 0;
	    DeletePVar(targetid, "RequireMedicalAssistance");
    	DeletePVar(GetPVarInt(targetid, "MedicId"), "MedicCall");
    	DeletePVar(targetid, "MedicId");
		DeletePVar(targetid, "MedicalX");
		DeletePVar(targetid, "MedicalY");
		DeletePVar(targetid, "MedicalZ");
		DeletePVar(targetid, "MedicalInterior");
		DeletePVar(targetid, "MedicalVirtualWorld");
		GivePlayerCash(targetid, -100);
		AddVaultMoney(PlayerInfo[playerid][pFaction], 100);

		SetPlayerHealthEx(targetid, 100);
	    if(IsNearDeliveryPoint(playerid) == 1)
	    {
			SetPlayerPos(targetid, 1174.804, -1323.383, 14.593);
			SetPlayerFacingAngle(targetid, 270.0);
		}
		else if(IsNearDeliveryPoint(playerid) == 2)
		{
		    SetPlayerPos(targetid, 2034.03, -1405.94, 17.22);
			SetPlayerFacingAngle(targetid, 155.0);
		}
		TogglePlayerControllable(targetid, true);
		ClearAnimations(targetid, 1);
		SendClientMessageEx(targetid, COLOR_HOTPINK, "LSFMD: The total medical bill for the treatment is $100, have a nice day.");
		format(string, sizeof(string), "EMS Driver %s has successfully delivered Patient %s to the hospital.", GetPlayerNameEx(playerid), GetPlayerNameEx(targetid));
		SendRadioMessage(3, TEAM_COLOR_LSFMD, string);
    }
    else SendClientMessageEx(playerid, COLOR_GREY, "You are not a part of the LSFMD.");
	return 1;
}

IsNearDeliveryPoint(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 6.0, 1140.42, -1330.39, 13.66))	{
	    return 1;
	} else if(IsPlayerInRangeOfPoint(playerid, 6.0, 2026.96, -1410.91, 16.99)) {
	    return 2;
	}
	return 0;
}

task ProcessEMSQueue[1000]()
{
	foreach(new i: Player)
	{
		if(GetPVarInt(i, "gPlayerLogged") == 0 || GetPVarInt(i, "RequireMedicalAssistance") == 0) continue;
		
		new medic = GetPVarInt(i, "MedicId");
		if(medic != 0 && (GetPVarInt(medic - 1, "MedicCall") - 1) == i)
		{
			GetPlayerPos(i, PlayerInfo[i][pPositionX], PlayerInfo[i][pPositionY], PlayerInfo[i][pPositionZ]);
			SetPlayerCheckpoint(medic - 1, PlayerInfo[i][pPositionX], PlayerInfo[i][pPositionY], PlayerInfo[i][pPositionZ], 4.0);
		}
		if(IsAmbulance(GetPlayerVehicleID(i)))
		{
		    GameTextForPlayer(i, "~g~RESCUED STATE~n~~w~AWAITING TREATMENT", 1000, 3);
		}
		else
		{
			ApplyAnimation(i, "SWAT", "gnstwall_injurd", 4.0, 1, 0, 0, 0, 0, 1);
			GameTextForPlayer(i, "~r~HURT STATE~n~~w~/accept death OR /service ems", 2000, 3);
		}
		
	}
	return 1;
}

stock GivePlayerDeath(playerid)
{
    if(IsPlayerConnectedEx(playerid))
    {
		if(GetPVarInt(playerid, "RequireMedicalAssistance")) DeletePVar(playerid, "RequireMedicalAssistance");
    	DeletePVar(GetPVarInt(playerid, "MedicId"), "MedicCall");
    	DeletePVar(playerid, "MedicId");
		DeletePVar(playerid, "MedicalX");
		DeletePVar(playerid, "MedicalY");
		DeletePVar(playerid, "MedicalZ");
		DeletePVar(playerid, "MedicalInterior");
		DeletePVar(playerid, "MedicalVirtualWorld");
		ResetPlayerWeapons(playerid);
		PlayerInfo[playerid][pDuty] = 0;
		SetPlayerHealthEx(playerid, 100);
		SetPlayerPos(playerid, 1173.44, -1324.03, 6.17);
		SetPlayerCameraPos(playerid, 1209.95, -1329.96, 23.10);
		SetPlayerCameraLookAt(playerid, 1174.804, -1323.383, 14.593);
		SetPlayerArmourEx(playerid, 0);
		SetPlayerFacingAngle(playerid, 270.0);
		SetPlayerInteriorEx(playerid, 0);
		SetPlayerVirtualWorldEx(playerid, 0);
		TogglePlayerControllable(playerid, false);
		SetPlayerToTeamColor(playerid);
		SendClientMessageEx(playerid, COLOR_HOTPINK, "LSFMD: You were found blacked out and were retrived here by a stranger.");
		SendClientMessageEx(playerid, COLOR_HOTPINK, "LSFMD: Don't worry, you are safe now. Please wait while we get you ready.");
		defer HospitalTimer(playerid);
	}
	return 1;
}
CMD:backup(playerid, params[])
{
	if(IsACop(playerid))
	{
	    if(IsPlayerRestricted(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this at this time.");
	    new
	        string[128];
	    if(GetPVarInt(playerid, "BackupRequested") == 1)
	    {
		    format(string, sizeof(string), "* %s no longer requires backup.", GetPlayerNameEx(playerid));
		    SendRadioMessage(1, COLOR_LIGHTBLUE, string);
		    SendRadioMessage(2, COLOR_LIGHTBLUE, string);
		    SendRadioMessage(6, COLOR_LIGHTBLUE, string);
		    SetPlayerToTeamColor(playerid);
			DeletePVar(playerid, "BackupRequested");
	    }
	    else
	    {
		    format(string, sizeof(string), "* %s requires backup at their location location: %s.", GetPlayerNameEx(playerid), GetPlayerZone(playerid));
		    SendRadioMessage(1, COLOR_LIGHTBLUE, string);
		    SendRadioMessage(2, COLOR_LIGHTBLUE, string);
		    SendRadioMessage(6, COLOR_LIGHTBLUE, string);
		    SetPVarInt(playerid, "BackupRequested", 1);
			foreach (new i: Player) SetPlayerMarkerForPlayer(i, playerid, 0xFF0000FF);
			format(string, sizeof(string), "* %s requests backup over their radio.", GetPlayerNameEx(playerid));
			ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		    BackupTimerEx[playerid] = repeat BackupTimer(playerid);
	    }
	}
	return 1;
}

timer BackupTimer[5000](playerid)
{
	if(GetPVarInt(playerid, "BackupRequested") == 0)
	{
	    if(IsPlayerConnectedEx(playerid)) foreach (new i: Player) SetPlayerMarkerForPlayer(i, playerid, 0xFFFFFF00);
		stop BackupTimerEx[playerid];
	}
	else foreach (new i: Player) SetPlayerMarkerForPlayer(i, playerid, 0xFF0000FF);
}

CMD:cuff(playerid, params[])
{
    if(IsACop(playerid))
    {
		new ChatString[128], targetid;
		if(sscanf(params, "u", targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /cuff <playerid>");
		else if(!IsPlayerConnectedEx(targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		else if(IsPlayerRestricted(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this at this time.");
		else if(!IsPlayerInRangeOfPlayer(playerid, targetid, 3.0) || GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessageEx(playerid, COLOR_GREY, "You must be near the player to use this command.");
		else if(playerid == targetid) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot use this command on yourself.");
		else if(GetPVarInt(targetid, "IsRestrained") == 0) return SendClientMessageEx(playerid, COLOR_GREY, "Suspect is not restrained.");
		else if(GetPVarInt(targetid, "IsCuffed") == 1) return SendClientMessageEx(playerid, COLOR_GREY, "Suspect is already cuffed.");
		SetPVarInt(targetid, "IsCuffed", 1);
		SetPVarInt(targetid, "ActionRestriction", 1);
		TogglePlayerControllable(targetid, false);
		ApplyPlayerAnimation(targetid, "ped", "cower", 1, 1, 0, 0, 0, 0);
		format(ChatString, sizeof(ChatString), "* %s withdraws a pair of cuffs, cuffing the suspect tightly.", GetPlayerNameEx(playerid));
		ProxDetector(20.0, playerid, ChatString, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
    }
    else SendClientMessageEx(playerid, COLOR_GREY, "You are not part of a Law Enforcement Organisation.");
	return 1;
}

CMD:licensetest(playerid, params[])
{
	if(IsPlayerInRangeOfPoint(playerid, 6.0, 1490.652, 1305.725, 1093.296))
	{
	    if(PlayerInfo[playerid][pMoney] < 25) return SendClientMessageEx(playerid, COLOR_GREY, "A minimum amount of $25 is required to participate in the driving test.");
		ShowPlayerDialogEx(playerid,2011,DIALOG_STYLE_LIST,"Written Exam","What should you do when you are driving at night?\r\n1) Make sure you are driving slow enough incase of an emergency.\r\n2) Roll down your window so that the fresh air will help keep you awake.\r\n3) If you are sleepy, drink coffee or other caffeine products.","Answer", "Cancel");
	}
	else return SendClientMessageEx(playerid, COLOR_GREY, "You are not in range of the DMV (interior)");
	return 1;
}

CMD:showlicenses(playerid, params[])
{
	new
		targetid,
		string[128];
	if(sscanf(params, "u", targetid)) {
 		return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /showlicenses <playerid>");
	}
	else if(!IsPlayerConnectedEx(targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
	else if(!IsPlayerInRangeOfPlayer(playerid, targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "You must be near the specified player to use this command.");

	SendClientMessageEx(targetid, COLOR_ORANGE, "----------------------------------------");
	SendClientMessageEx(targetid, COLOR_WHITE, "City of "SERVER_MAP" - Licenses:");
	format(string, sizeof(string), "Full Name: %s", GetPlayerNameEx(playerid));
	SendClientMessageEx(targetid, COLOR_WHITE, string);
	format(string, sizeof(string), "Age: %d", PlayerInfo[playerid][pAge]);
	SendClientMessageEx(targetid, COLOR_WHITE, string);
	format(string, sizeof(string), "Phone: %d", PlayerInfo[playerid][pPhoneNumber]);
	SendClientMessageEx(targetid, COLOR_WHITE, string);
	if(PlayerInfo[playerid][pDriverLicense] == 1)
	{
		SendClientMessageEx(targetid, COLOR_WHITE, "Drivers License: {00FF00}Registered");
	}
	else
	{
		SendClientMessageEx(targetid, COLOR_WHITE, "Drivers License: {AA3333}Unregistered");
	}
	if(PlayerInfo[playerid][pGunLicense] == 1)
	{
		SendClientMessageEx(targetid, COLOR_WHITE, "Gun License: {00FF00}Registered");
	}
	else
	{
		SendClientMessageEx(targetid, COLOR_WHITE, "Gun License: {AA3333}Unregistered");
	}
	SendClientMessageEx(targetid, COLOR_ORANGE, "----------------------------------------");
	format(string, sizeof(string), "You have shown your licenses to %s.", GetPlayerNameEx(targetid));
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	return 1;
}

CMD:sl(playerid, params[])
{
	return cmd_showlicenses(playerid, params);
}

CMD:detain(playerid, params[])
{
    if(IsACop(playerid))
    {
		new ChatString[128], targetid, seatid;
		if(sscanf(params, "ui", targetid, seatid)) {
		 	return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /detain <playerid> <seat 1-3>");
		}
		else if(!IsPlayerConnectedEx(targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		else if(playerid == targetid) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot use this command on yourself.");
		else if(GetPVarInt(targetid, "IsCuffed") == 0) return SendClientMessageEx(playerid, COLOR_GREY, "Suspect is not cuffed.");
		else if(!IsPlayerInRangeOfPlayer(playerid, targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "You must be near the specified player to use this command.");
		else if(seatid < 1 || seatid > 3) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /detain <playerid> <seat 1-3>");
		else if(IsPlayerInAnyVehicle(targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Suspect is already inside a vehicle.");

		SetPlayerInteriorEx(targetid, 0);
		PutPlayerInVehicle(targetid, gLastCar[playerid], seatid);
		format(ChatString, sizeof(ChatString), "* %s drags the suspect to the vehicle, opening then door then placing him inside the cruiser.", GetPlayerNameEx(playerid));
		ProxDetector(20.0, playerid, ChatString, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
    }
    else
    {
       	SendClientMessageEx(playerid, COLOR_GREY, "You are not part of a Law Enforcement Organisation.");
    }
	return 1;
}

CMD:arrest(playerid, params[])
{
    if(IsACop(playerid))
    {
		new string[256], targetid, arrestprice, arrestminutes;
		if(sscanf(params, "uii", targetid, arrestprice, arrestminutes)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /arrest <playerid> <price> <minutes>");
		else if(!IsPlayerConnectedEx(targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		else if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1528.71, -1678.06, 5.89)) return SendClientMessageEx(playerid, COLOR_GREY, "You are not at the arrest point.");
		else if(arrestprice < 100 || arrestprice > 1000) return SendClientMessageEx(playerid, COLOR_GREY, "The price can only be between the range of $100 - $1000.");
		else if(arrestminutes < 10 || arrestminutes > 600) return SendClientMessageEx(playerid, COLOR_GREY, "The jail minutes can only be between 10 - 600.");
		else if(playerid == targetid) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot use this command on yourself.");
		else if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You are not inside a vehicle.");
		else if(GetPlayerVehicleID(targetid) != GetPlayerVehicleID(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "Suspect is not inside your vehicle.");
		else if(PlayerInfo[targetid][pFaction] == 1 || PlayerInfo[targetid][pFaction] == 2) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot use this command on LEOs.");
		else if(GetPVarInt(targetid, "IsCuffed") == 0) return SendClientMessageEx(playerid, COLOR_GREY, "Suspect is not cuffed.");
		else if(PlayerInfo[targetid][pWantedLevel] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot arrest innocent civillians, the suspect has no wanted status.");
		
		if(PlayerInfo[targetid][pGunLicense] == 1)
		{
		    PlayerInfo[targetid][pGunLicense] = 0;
			SendClientMessage(targetid, COLOR_WHITE, "Your gun license has been revoked, due to the laws banning convicts to possess them.");
		}
		
		DeletePVar(targetid, "IsCuffed");
		DeletePVar(targetid, "IsRestrained");
		PlayerInfo[targetid][pWantedLevel] = 0;
		GivePlayerCash(targetid, -arrestprice);
		AddVaultMoney(7, arrestprice);
		
		PlayerInfo[targetid][pJailTime] = arrestminutes * 60;
		SetPlayerWantedLevel(targetid, 0);
		ResetPlayerWeapons(targetid);
		for(new i=0; i < 12; i++) PlayerInfo[targetid][pWeapons][i] = 0;

		new jailPos = random(sizeof(JailPositions));
		SetPlayerPos(targetid, JailPositions[jailPos][0], JailPositions[jailPos][1], JailPositions[jailPos][2]);
		SetPlayerInteriorEx(targetid, 1);
		SetPlayerVirtualWorldEx(targetid, 0);

		stop JailTimerEx[targetid];
		JailTimerEx[targetid] = repeat JailTimer(targetid);
		TextDrawShowForPlayer(targetid, JailTimerTD[targetid]);
		format(string, sizeof(string), "You have been arrested by %s (wanted level: %i), and fined %i.", GetPlayerNameEx(playerid), PlayerInfo[targetid][pWantedLevel], arrestprice);
		SendClientMessageEx(targetid, COLOR_WHITE, string);
		format(string, sizeof(string), "SANews News: Wanted criminal %s was sent to jail by %s.", GetPlayerNameEx(targetid), GetPlayerNameEx(playerid));
		AdminAlert(string, ALERT_GLOBAL);
		
		TogglePlayerControllable(targetid, false);
		SetPVarInt(targetid, "ActionRestriction", 1);
		TextDrawShowForPlayer(targetid, LoadingObjectTextDraw);
		TextDrawShowForPlayer(targetid, LoadingObjectBox);
		defer HideLoadingTextdraws(targetid);
    }
    else SendClientMessageEx(playerid, COLOR_GREY, "You are not employed by a Law Enforcement Organisation.");
	return 1;
}

CMD:su(playerid, params[])
{
    if(IsACop(playerid))
    {
		new string[256], targetid, crime[64];
		if(sscanf(params, "us[64]", targetid, crime)) {
		 	return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /su <playerid> <crime>");
		}
		else if(!IsPlayerConnectedEx(targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		else if(playerid == targetid) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot use this command on yourself.");
		else if(PlayerInfo[targetid][pFaction] == 1 || PlayerInfo[targetid][pFaction] == 2) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot use this command on LEOs.");
		else if(PlayerInfo[targetid][pWantedLevel] >= 6) return SendClientMessageEx(playerid, COLOR_GREY, "Suspect is most wanted, you cannot extend his wanted level any further.");
		
		PlayerInfo[targetid][pWantedLevel]++;
		SetPlayerWantedLevel(targetid, PlayerInfo[targetid][pWantedLevel]);

		format(string, sizeof(string), "%s charged you for %s,", GetPlayerNameEx(playerid), crime);
		SendClientMessageEx(targetid, COLOR_YELLOW, string);

        PoliceAlert("----------------------------------------");
		format(string, sizeof(string), "[DISPATCH]{FFFFFF} All Units APB: Reporter: %s", GetPlayerNameEx(playerid));
        PoliceAlert(string);
		format(string, sizeof(string), "[DISPATCH]{FFFFFF} Crime: %s, Suspect: %s", crime, GetPlayerNameEx(targetid));
        PoliceAlert(string);
        PoliceAlert("----------------------------------------");
    }
    else
    {
       	SendClientMessageEx(playerid, COLOR_GREY, "You are not a part of a Law Enforcement Organization.");
    }
	return 1;
}

CMD:wanted(playerid, params[])
{
    if(IsACop(playerid))
    {
		new string[256];
  		SendClientMessageEx(playerid, COLOR_YELLOW, "Wanted criminals in "SERVER_MAP"");
		foreach(new i: Player)
		{
		    if(PlayerInfo[playerid][pWantedLevel] == 0) continue;
			format(string, sizeof(string), "Name: %s | Wanted Level: %d", GetPlayerNameEx(i), PlayerInfo[i][pWantedLevel]);
	       	SendClientMessageEx(playerid, COLOR_YELLOW, string);
		}
    }
    else
    {
       	SendClientMessageEx(playerid, COLOR_GREY, "You are not a part of a Law Enforcement Organization.");
    }
	return 1;
}

CMD:clearcrimes(playerid, params[])
{
    if(IsACop(playerid) && PlayerInfo[playerid][pRank] >= 2)
    {
		new string[128], targetid;
		if(sscanf(params, "u", targetid)) {
		 	return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /clearcrimes <playerid>");
		}
		else if(!IsPlayerConnectedEx(targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		else if(playerid == targetid) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot use this command on yourself.");
		else if(PlayerInfo[targetid][pFaction] == 1 || PlayerInfo[targetid][pFaction] == 2) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot use this command on LEOs.");
		else if(PlayerInfo[targetid][pWantedLevel] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "The civillian has no wanted status on them.");

        PlayerInfo[targetid][pWantedLevel] = 0;
		SetPlayerWantedLevel(targetid, PlayerInfo[targetid][pWantedLevel]);

		format(string, sizeof(string), "HQ: %s has cleared %s's wanted level.", GetPlayerNameEx(playerid), GetPlayerNameEx(targetid));
        PoliceAlert(string);
        format(string, sizeof(string), "Your wanted records have been cleared by %s.", GetPlayerNameEx(targetid));
		SendClientMessageEx(targetid, COLOR_YELLOW, string);
    }
    else SendClientMessageEx(playerid, COLOR_GREY, "You are not a rank 2 within the Executive Branch.");
	return 1;
}

CMD:uncuff(playerid, params[])
{
    if(IsACop(playerid) || (IsAdmin(playerid, ADMIN_LEVEL_JUNIORADMIN)))
    {
		new ChatString[128], targetid;
		if(sscanf(params, "u", targetid)) {
		 	return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /uncuff <playerid>");
		}
		else if(!IsPlayerConnectedEx(targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		else if(IsPlayerRestricted(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this at this time.");
		else if(!IsPlayerInRangeOfPlayer(playerid, targetid, 3.0) || GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendClientMessageEx(playerid, COLOR_GREY, "You must be near the player to use this command.");
		else if(playerid == targetid && !IsAdmin(playerid, ADMIN_LEVEL_TRIALADMIN)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot use this command on yourself.");
		else if(GetPVarInt(targetid, "IsCuffed") == 0) return SendClientMessageEx(playerid, COLOR_GREY, "Suspect is not cuffed.");
		DeletePVar(targetid, "IsCuffed");
		DeletePVar(targetid, "IsRestrained");
		DeletePVar(targetid, "ActionRestriction");
		ClearAnimations(targetid);
		TogglePlayerControllable(targetid, true);
		format(ChatString, sizeof(ChatString), "* %s withdraws a key, inserting it into the cuffs locks, unlocking it.", GetPlayerNameEx(playerid));
		ProxDetector(20.0, playerid, ChatString, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
    }
    else
    {
       	SendClientMessageEx(playerid, COLOR_GREY, "You are not part of a Law Enforcement Organisation.");
    }
	return 1;
}

CMD:locker(playerid, params[])
{
	if(!IsPlayerConnectedEx(playerid)) return 1;
    if(GetPVarInt(playerid, "TaserEquipped") == 1) return SendClientMessageEx(playerid, COLOR_GREY, "You must holster your taser to use this command.");
    switch(PlayerInfo[playerid][pFaction])
    {
		case 0: SendClientMessageEx(playerid, COLOR_GREY, "You are not in any faction.");
        case 1:
		{
		    if(IsPlayerInRangeOfPoint(playerid, 3.0, 254.90, 74.74, 1003.64)) ShowPlayerDialogEx(playerid, DIALOG_LOCKER_MAIN, DIALOG_STYLE_LIST, "Faction Locker", "Duty\nEquipment\r\nUniform", "Select", "Cancel");
			else SendClientMessageEx(playerid, COLOR_GREY, "You are not near any of your faction lockers.");
		}
        case 2:
		{
		    if(IsPlayerInRangeOfPoint(playerid, 3.0, 1292.3789, -986.0073, 6645.7319)) ShowPlayerDialogEx(playerid, DIALOG_LOCKER_MAIN, DIALOG_STYLE_LIST, "Faction Locker", "Duty\r\nEquipment\r\nUniform", "Select", "Cancel");
			else SendClientMessageEx(playerid, COLOR_GREY, "You are not near any of your faction lockers.");
		}
        case 3:
		{
		    if(IsPlayerInRangeOfPoint(playerid, 3.0, 1179.6155, -1329.2679, 1349.3860)) ShowPlayerDialogEx(playerid, DIALOG_LOCKER_MAIN, DIALOG_STYLE_LIST, "Faction Locker", "Duty\r\nEquipment\r\nUniform", "Select", "Cancel");
			else SendClientMessageEx(playerid, COLOR_GREY, "You are not near any of your faction lockers.");
		}
        case 6:
		{
		    // Pending
		    if(IsPlayerInRangeOfPoint(playerid, 3.0, 925.130, -1269.433, 959.415)) ShowPlayerDialogEx(playerid, DIALOG_LOCKER_MAIN, DIALOG_STYLE_LIST, "Faction Locker", "Duty\r\nEquipment\r\nUniform", "Select", "Cancel");
			else SendClientMessageEx(playerid, COLOR_GREY, "You are not near any of your faction lockers.");
		}
        case 7:
		{
		    if(IsPlayerInRangeOfPoint(playerid, 3.0, 1862.2954, -1720.2153, 5206.3486)) ShowPlayerDialogEx(playerid, DIALOG_LOCKER_MAIN, DIALOG_STYLE_LIST, "Faction Locker", "Duty\r\nEquipment\r\nUniform", "Select", "Cancel");
			else SendClientMessageEx(playerid, COLOR_GREY, "You are not near any of your faction lockers.");
		}
		default: return SendClientMessageEx(playerid, COLOR_GREY, "Your faction doesn't have a locker set up.");
	}
	return 1;
}

CMD:gate(playerid, params[])
{
	if(IsACop(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid, 6.0, 1588.33, -1633.63, 13.38) || IsPlayerInRangeOfPoint(playerid, 6.0, 1589.75, -1645.70, 11.75))
		{
		    switch(LSPDGateInUse)
			{
			    case 1: { MoveDynamicObject(LSPDGates[2], 1589.00000000,-1638.09997559, 15.00000000, 2.0); LSPDGateInUse = 0; }
			    default: { MoveDynamicObject(LSPDGates[2], 1589.00000000,-1638.09997559, 7.00000000, 2.0); LSPDGateInUse = 1; }
			}
		}
		else if(PlayerInfo[playerid][pFaction] == 6 && IsPlayerInRangeOfPoint(playerid, 9.0, 364.486,-1469.28, 31.2701))
		{
			switch(FBIGateInUse[0])
			{
			    case 1: { MoveDynamicObject(FBIGates[0], 364.486,-1469.28, 31.2701, 2.0); FBIGateInUse[0] = 0; }
			    default: { MoveDynamicObject(FBIGates[0], 364.486,-1469.28, 23.74, 2.0); FBIGateInUse[0] = 1; }
			}
		}
		else if(PlayerInfo[playerid][pFaction] == 6 && IsPlayerInRangeOfPoint(playerid, 9.0, 310.649, -1555.13, 31.2596))
		{
  			switch(FBIGateInUse[1])
			{
			    case 1: { MoveDynamicObject(FBIGates[1], 310.649, -1555.13, 31.2596, 2.0); FBIGateInUse[1] = 0; }
			    default: { MoveDynamicObject(FBIGates[1], 310.649, -1555.13, 24.7496, 2.0); FBIGateInUse[1] = 1; }
			}
		}
		else if(PlayerInfo[playerid][pFaction] == 7 && IsPlayerInRangeOfPoint(playerid, 2.0, 1849.32995605,-1714.31005859,5201.54003906))
		{
		    switch(PrisonDoorInUse[0])
		    {
		    	case 1: {MoveDynamicObject(door1,1849.32995605,-1714.31005859,5201.54003906,0.50); PrisonDoorInUse[0] = 0;}
		    	default: {MoveDynamicObject(door1,1849.32995605-1.25,-1714.31005859,5201.54003906,0.50); PrisonDoorInUse[0] = 1;}
		    }
		}
		else if(PlayerInfo[playerid][pFaction] == 7 && IsPlayerInRangeOfPoint(playerid, 2.0,1847.31994629,-1722.56994629,5201.54003906))
		{
		    switch(PrisonDoorInUse[1])
		    {
		    	case 1: {MoveDynamicObject(door2,1847.31994629,-1722.56994629,5201.54003906,0.50); PrisonDoorInUse[1] = 0;}
		    	default: {MoveDynamicObject(door2,1847.31994629,-1722.56994629-1.25,5201.54003906,0.50); PrisonDoorInUse[1] = 1;}
		    }
		}
		else if(PlayerInfo[playerid][pFaction] == 7 && IsPlayerInRangeOfPoint(playerid, 2.0,1854.01953125,-1726.27343750,5201.54003906))
		{
		    switch(PrisonDoorInUse[2])
		    {
		    	case 1: {MoveDynamicObject(door3,1854.01953125,-1726.27343750,5201.54003906,0.50); PrisonDoorInUse[2] = 0;}
		    	default: {MoveDynamicObject(door3,1854.01953125,-1726.27343750-1.25,5201.54003906,0.50); PrisonDoorInUse[2] = 1;}
		    }
		}
		else if(PlayerInfo[playerid][pFaction] == 7 && IsPlayerInRangeOfPoint(playerid, 2.0,1862.02246094,-1710.91992188,5201.54003906))
		{
		    switch(PrisonDoorInUse[3])
		    {
		    	case 1: {MoveDynamicObject(door4,1862.02246094,-1710.91992188,5201.54003906,0.50); PrisonDoorInUse[3] = 0;}
		    	default: {MoveDynamicObject(door4,1862.02246094-1.25,-1710.91992188,5201.54003906,0.50); PrisonDoorInUse[3] = 1;}
		    }
		}
		else return 1;
		new string[128];
		format(string, sizeof(string), "* %s retrieves their remote, pressing a button on it.", GetPlayerNameEx(playerid));
		ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
	return 1;
}

CMD:m(playerid, params[]) return cmd_megaphone(playerid, params);
CMD:megaphone(playerid, params[])
{
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /m(egaphone) [text]");
    if(IsACop(playerid) || IsAdmin(playerid, ADMIN_LEVEL_TRIALADMIN))
    {
        new string[128];
    	format(string, sizeof(string), "(megaphone) %s: %s", GetPlayerNameEx(playerid), params);
		ProxDetector(60.0, playerid, string, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW);
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "You do not have the authority to use a megaphone.");
	return 1;
}

CMD:makehitman(playerid, params[])
{
	if(PlayerInfo[playerid][pHitman] >= 5 || IsAdmin(playerid, ADMIN_LEVEL_LEADADMIN))
	{
		new string[128], targetid, rank, rankname[32];
	    if(sscanf(params, "ui", targetid, rank)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /makehitman <playerid> <rank>");
		else if(!IsPlayerConnectedEx(targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		else if(rank < 0 || rank > 6) return SendClientMessageEx(playerid, COLOR_GREY, "Ranks don't go below 0 or above 6.");
        if(rank == 1) format(rankname, sizeof(rankname), "Freelancer");
        else if(rank == 2) format(rankname, sizeof(rankname), "Marksman");
        else if(rank == 3) format(rankname, sizeof(rankname), "Agent");
        else if(rank == 4) format(rankname, sizeof(rankname), "Special Agent");
        else if(rank == 5) format(rankname, sizeof(rankname), "Vice Director");
        else if(rank == 6) format(rankname, sizeof(rankname), "Director");
        if(rank != 0)
		{
	    	format(string, sizeof(string), "You have been made a %s of the International Contract Agency by %s.", rankname, GetPlayerNameEx(playerid));
			SendClientMessageEx(targetid, COLOR_LIGHTBLUE, string);
	    	format(string, sizeof(string), "You have made %s a %s of the International Contract Agency.", GetPlayerNameEx(targetid), rankname);
	    	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
	    	
			/*new File:nclog = fopen("logs/hitman.log", io_append);
			format(string, sizeof(string), "[Invite]: %s has made %s as a %s of the International Contract Agency.\n", GetPlayerNameEx(playerid), GetPlayerNameEx(targetid), rankname);
			fwrite(nclog, string);
			fclose(nclog);*/
			format(string, sizeof(string), "[Invite]: %s has made %s as a %s of the International Contract Agency.", GetPlayerNameEx(playerid), GetPlayerNameEx(targetid), rankname);
			Log("logs/hitman.log", string);
	    }
	    else
	    {
	    	format(string, sizeof(string), "You have been kicked out of the International Contract Agency by %s.", GetPlayerNameEx(playerid));
			SendClientMessageEx(targetid, COLOR_LIGHTBLUE, string);
	    	format(string, sizeof(string), "You have kicked %s of the International Contract Agency.", GetPlayerNameEx(targetid));
	    	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
	    	
			/*new File:nclog = fopen("logs/hitman.log", io_append);
			format(string, sizeof(string), "[Uninvite]: %s has kicked %s out of the International Contract Agency.\n", GetPlayerNameEx(playerid), GetPlayerNameEx(targetid));
			fwrite(nclog, string);
			fclose(nclog);*/
			format(string, sizeof(string), "[Uninvite]: %s has kicked %s out of the International Contract Agency.", GetPlayerNameEx(playerid), GetPlayerNameEx(targetid));
			Log("logs/hitman.log", string);
	    }
	    PlayerInfo[targetid][pHitman] = rank;
    }
	return 1;
}

stock GetHitmanBombSlot(playerid)
{
	for (new i=0; i < MAX_HITMAN_BOMBS; i++)
	{
	    if(HitmanBombObject[playerid][i] == 0)
	    {
	        return i;
	    }
	}
	return INVALID_SLOT_ID;
}

stock RemoveHitmanBombs(playerid)
{
	if(GetPVarInt(playerid, "PCB") != 0)
	{
	    PlayerInfo[playerid][pBombs]++;
	}
	
	for (new i=0; i < MAX_HITMAN_BOMBS; i++)
	{
	    if(HitmanBombObject[playerid][i] != 0)
	    {
	        HitmanBombs[playerid][i][0] = 0;
	        HitmanBombs[playerid][i][1] = 0;
	        HitmanBombs[playerid][i][2] = 0;
	        DestroyDynamicObject(HitmanBombObject[playerid][i]);
	        HitmanBombObject[playerid][i] = 0;
			PlayerInfo[playerid][pBombs]++;
	    }
	}
}

CMD:pcb(playerid, params[]) return cmd_plantcarbomb(playerid, params);
CMD:plantcarbomb(playerid, params[])
{
	if(PlayerInfo[playerid][pHitman] > 0 || IsAdmin(playerid, ADMIN_LEVEL_LEADADMIN))
	{
	    new string[128],
			closestcar = GetClosestCar(playerid);
	    if(PlayerInfo[playerid][pBombs] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "You do not have any bombs to plant.");
		else if(closestcar == INVALID_VEHICLE_ID) return SendClientMessage(playerid, COLOR_FADE1, "You're not close enough to any vehicle.");
		else if(GetPVarInt(playerid, "PCB") != 0) return SendClientMessage(playerid, COLOR_FADE1, "You have already planted a bomb inside a car.");
		SetPVarInt(playerid, "PCB", closestcar + 1);
        PlayerInfo[playerid][pBombs]--;
		format(string, sizeof(string), "You have planted a car bomb, it will explode when target enters the vehicle. (%d remaining)", PlayerInfo[playerid][pBombs]);
		SendClientMessageEx(playerid, COLOR_GREEN, string);
	}
	return 1;
}


CMD:order(playerid, params[])
{
	new string[128];
	if(PlayerInfo[playerid][pHitman] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Usage: /order [request & contact info]");
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Usage: /order [request & contact info]");
	format(string, sizeof(string), "* A special order, details: %s", params);
    SendRadioMessage(4, COLOR_GREEN, string);
    SendClientMessageEx(playerid, COLOR_GREEN, "You have successfully sent the order to all online gun runners.");
    return 1;
}

CMD:pb(playerid, params[]) return cmd_plantbomb(playerid, params);
CMD:plantbomb(playerid, params[])
{
	if(PlayerInfo[playerid][pHitman] > 0 || IsAdmin(playerid, ADMIN_LEVEL_LEADADMIN))
	{
		new i = GetHitmanBombSlot(playerid), string[128];
		if(i == INVALID_SLOT_ID) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot plant anymore bombs.");
		else if(PlayerInfo[playerid][pBombs] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "You do not have any bombs to plant.");
		else if(IsPlayerRestricted(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this at this time.");
		GetPlayerPos(playerid, HitmanBombs[playerid][i][0], HitmanBombs[playerid][i][1], HitmanBombs[playerid][i][2]);
		HitmanBombObject[playerid][i] = CreateDynamicObject(1654, HitmanBombs[playerid][i][0], HitmanBombs[playerid][i][1], HitmanBombs[playerid][i][2] - 0.75, 0, 0, 0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
		format(string, sizeof(string), "{FF6347}AdmWarning:{FFFF00} %s has planted a bomb at %s.", PlayerInfo[playerid][pUsername], GetPlayerZone(playerid));
		AdminAlert(string, ALERT_ADMINS);
		PlayerInfo[playerid][pBombs]--;
		format(string, sizeof(string), "You have planted a bomb, left-click to detonate. (%d bomb remaining)", PlayerInfo[playerid][pBombs]);
		SendClientMessageEx(playerid, COLOR_GREEN, string);
	}
	return 1;
}
CMD:pub(playerid, params[]) return cmd_pickupbomb(playerid, params);
CMD:pickupbomb(playerid, params[])
{
	if(PlayerInfo[playerid][pHitman] > 0 || IsAdmin(playerid, ADMIN_LEVEL_LEADADMIN))
	{
	    if(GetPVarInt(playerid, "PCB") != 0)
	    {
			new Float:tvPosition[3];
			GetVehiclePos(GetPVarInt(playerid, "PCB") - 1, tvPosition[0], tvPosition[1], tvPosition[2]);
			if(IsPlayerInRangeOfPoint(playerid, 6.0, tvPosition[0], tvPosition[1], tvPosition[2]))
			{
				PlayerInfo[playerid][pBombs]++;
				SendClientMessageEx(playerid, COLOR_GREEN, "You have successfully picked up your bomb.");
				DeletePVar(playerid, "PCB");
			}
	    }
	    
		for (new i=0; i < MAX_HITMAN_BOMBS; i++)
		{
		    if(HitmanBombObject[playerid][i] != 0)
		    {
		        if(IsPlayerInRangeOfPoint(playerid, 2.5, HitmanBombs[playerid][i][0], HitmanBombs[playerid][i][1], HitmanBombs[playerid][i][2]))
		        {
					DestroyDynamicObject(HitmanBombObject[playerid][i]);
				    HitmanBombs[playerid][i][0] = 0; HitmanBombs[playerid][i][1] = 0; HitmanBombs[playerid][i][2] = 0;
				   	HitmanBombObject[playerid][i] = 0;
					PlayerInfo[playerid][pBombs]++;
					SendClientMessageEx(playerid, COLOR_GREEN, "You have successfully picked up your bomb.");
					break;
		        }
		    }
		}
	}
	return 1;
}


CMD:givemehit(playerid, params[])
{
	new string[128], targetid;
	if(PlayerInfo[playerid][pHitman] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "You are not a member of the International Contract Agency.");
	if(!IsPlayerInRangeOfPoint(playerid, 2.5, 1510.8628, -1606.6337, 14.0469)) return SendClientMessageEx(playerid, COLOR_GREY, "You are not at the mailbox.");
    if(sscanf(params, "u", targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /givemehit [contractid]");
    else if(!IsPlayerConnectedEx(targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
	else if(PlayerInfo[targetid][pContractPrice] < 1) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
	else if(HitmanTarget[playerid] != INVALID_PLAYER_ID) return SendClientMessageEx(playerid, COLOR_GREY, "You are already assigned to a contract.");
	format(string, sizeof(string), "* You have been assigned to the contract to kill %s, you will recieve $%d when completed.", GetPlayerNameEx(targetid), PlayerInfo[targetid][pContractPrice]);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "%s has been assigned to the contract on %s, for $%d.", GetPlayerNameEx(playerid), GetPlayerNameEx(targetid), PlayerInfo[targetid][pContractPrice]);
	SendHitmanMessage(COLOR_YELLOW, string);
	HitmanTarget[playerid] = targetid;
	return 1;
}

CMD:contracts(playerid, params[])
{
	new string[128], contracts;
	if(PlayerInfo[playerid][pHitman] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "You are not a member of the International Contract Agency.");
	else if(!IsPlayerInRangeOfPoint(playerid, 2.5, 1510.8628, -1606.6337, 14.0469)) return SendClientMessageEx(playerid, COLOR_GREY, "You are not at the mailbox.");
    SendClientMessageEx(playerid, COLOR_WHITE, "Available Contracts:");
    foreach(Player, i)
    {
		if(PlayerInfo[i][pContractPrice] > 0)
		{
			format(string, sizeof(string), "Name: %s (ID %d) | Price: $%d | Contracted By: %s | Reason: %s", GetPlayerNameEx(i), i, PlayerInfo[i][pContractPrice], PlayerInfo[i][pContractBy], PlayerInfo[i][pContractReason]);
			SendClientMessageEx(playerid, COLOR_GREY, string);
			contracts++;
		}
    }
    format(string, sizeof(string), "There are %d contracts available.", contracts);
    SendClientMessageEx(playerid, COLOR_GREY, string);
	return 1;
}

CMD:ranks(playerid, params[])
{
	if(PlayerInfo[playerid][pHitman] >= 1)
	{
		new string[156], rankname[32];
	    SendClientMessageEx(playerid, COLOR_WHITE, "Online Members:");
	    foreach(Player, i)
	    {
			if(PlayerInfo[i][pHitman] >= 1)
			{
	            if(PlayerInfo[i][pHitman] == 1) format(rankname, sizeof(rankname), "Freelancer");
	            else if(PlayerInfo[i][pHitman] == 2) format(rankname, sizeof(rankname), "Marksman");
	            else if(PlayerInfo[i][pHitman] == 3) format(rankname, sizeof(rankname), "Agent");
	            else if(PlayerInfo[i][pHitman] == 4) format(rankname, sizeof(rankname), "Special Agent");
	            else if(PlayerInfo[i][pHitman] == 5) format(rankname, sizeof(rankname), "Vice Director");
	            else if(PlayerInfo[i][pHitman] == 6) format(rankname, sizeof(rankname), "Director");
	            else continue;

				if(HitmanTarget[playerid] != INVALID_PLAYER_ID) format(string, sizeof(string), "* Name: %s | Rank: %s (%d) | Completed Hits: %d | Chasing: %s", GetPlayerNameEx(i), rankname, PlayerInfo[i][pHitman], PlayerInfo[i][pCompletedHits], GetPlayerNameEx(HitmanTarget[i]));
				else format(string, sizeof(string), "* Name: %s | Rank: %s (%d) | Completed Hits: %d", GetPlayerNameEx(i), rankname, PlayerInfo[i][pHitman], PlayerInfo[i][pCompletedHits]);
				SendClientMessageEx(playerid, COLOR_GREY, string);
			}
	    }
    }
	return 1;
}

CMD:contract(playerid, params[])
{
	new string[128], targetid, amount, reason[32];
	if(sscanf(params, "uds[32]", targetid, amount, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /contract <playerid> <amount> <reason>");
	else if(!IsPlayerInRangeOfPoint(playerid, 2.5, 1510.8628, -1606.6337, 14.0469)) return SendClientMessageEx(playerid, COLOR_GREY, "You are not at the mailbox.");
	else if(!IsPlayerConnectedEx(targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
	else if(PlayerInfo[playerid][pHitman] >= 1) return SendClientMessageEx(playerid, COLOR_GREY, "Hitmen cannot place contract on others.");
	else if(playerid == targetid) return SendClientMessageEx(playerid, COLOR_GREY, "You can't place a contract on yourself.");
	else if(amount < 500) return SendClientMessageEx(playerid, COLOR_GREY, "You can't place contracts that are less than $500.");
	else if(strlen(reason) > 32 || strlen(reason) < 6) return SendClientMessageEx(playerid, COLOR_FADE1, "Contract reason must be between 6-32 characters.");
	
	/*new File:clog = fopen("logs/contract.log", io_append);
	format(string, sizeof(string), "%s has placed a contract on %s for $%d, reason: %s.\n", GetPlayerNameEx(playerid), GetPlayerNameEx(targetid), amount, reason);
	fwrite(clog, string);
	fclose(clog);*/
	format(string, sizeof(string), "%s has placed a contract on %s for $%d, reason: %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(targetid), amount, reason);
	Log("logs/contract.log", string);
	
	GivePlayerCash(playerid, -amount);
	PlayerInfo[targetid][pContractPrice] += amount;
	format(PlayerInfo[targetid][pContractBy], MAX_PLAYER_NAME, "%s", GetPlayerNameEx(playerid));
	format(PlayerInfo[targetid][pContractReason], 32, "%s", reason);

	format(string, sizeof(string), "%s has placed a contract on %s for $%d, reason: %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(targetid), amount, reason);
	SendHitmanMessage(COLOR_YELLOW, string);
	format(string, sizeof(string), "* You placed a contract on %s for $%d, reason: %s.",GetPlayerNameEx(targetid), amount, reason);
	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	return 1;
}

CMD:factionhelp(playerid, params[])
{
	SendClientMessageEx(playerid, COLOR_WHITE, "-------------------------------------------------------------------");
		
	if(PlayerInfo[playerid][pHitman] > 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "{000000}Hitman{FFFFFF}: /er, /contracts, /givemehit, /ranks, /pb, /pcb, /pub");
		if(PlayerInfo[playerid][pHitman] >= 5) SendClientMessageEx(playerid, COLOR_WHITE, "{000000}Hitman Leader:{FFFFFF} /makehitman");
	}
    switch(PlayerInfo[playerid][pFaction])
    {
        case 1:
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "{33CCFF}LSPD{FFFFFF}: /r, /d, /duty, /cuff, /uncuff, /taser, /detain, /arrest, /backup, /m, /ticket, /vticket, /vcheck, /impound");
			if(PlayerInfo[playerid][pLeadership] == 1) SendClientMessageEx(playerid, COLOR_WHITE, "{3CA7E8}Faction Leaders:{FFFFFF} /gov, /grantgunlicense, /revokegunlicense, /invite, /uninvite, /giverank, /adjustdivision");
		}
        case 2:
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Executive Branch{FFFFFF}: /r, /d, /cuff, /uncuff, /taser, /detain, /m, /su, /backup");
			if(PlayerInfo[playerid][pLeadership] == 1) SendClientMessageEx(playerid, COLOR_WHITE, "{3CA7E8}Faction Leader:{FFFFFF} /gov, /clearcrimes, /invite, /uninvite, /giverank, /adjustdivision");
		}
		
        case 3:
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "{FF8282}LSFMD{FFFFFF}: /duty, /r, /d, /m, /getpt, /loadpt, /deliverpt");
			if(PlayerInfo[playerid][pLeadership] == 1) SendClientMessageEx(playerid, COLOR_WHITE, "{3CA7E8}Faction Leader:{FFFFFF} /gov, /invite, /uninvite, /giverank, /adjustdivision");
		}
        case 4:
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "{808080}Gun Runners{FFFFFF}: /creategun");
			if(PlayerInfo[playerid][pLeadership] == 1) SendClientMessageEx(playerid, COLOR_WHITE, "{3CA7E8}Faction Leader:{FFFFFF} /invite, /uninvite, /giverank");
		}
        case 5:
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "{008080}SANews{FFFFFF}: /r, /news");
			if(PlayerInfo[playerid][pLeadership] == 1) SendClientMessageEx(playerid, COLOR_WHITE, "{3CA7E8}Faction Leader:{FFFFFF} /invite, /uninvite, /giverank, /adjustdivision");
		}
        case 6:
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "{8D8DFF}FBI{FFFFFF}: /r, /d, /duty, /cuff, /uncuff, /taser, /detain, /arrest, /backup, /m, /ticket, /vticket, /impound, /vcheck");
			if(PlayerInfo[playerid][pLeadership] == 1) SendClientMessageEx(playerid, COLOR_WHITE, "{3CA7E8}Faction Leaders:{FFFFFF} /gov, /grantgunlicense, /revokegunlicense, /invite, /uninvite, /giverank, /adjustdivision");
		}
        case 7:
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "{993300}DoC{FFFFFF}: /r, /d, /duty, /cuff, /uncuff, /taser, /detain, /arrest, /backup, /m, /cells");
			if(PlayerInfo[playerid][pLeadership] == 1) SendClientMessageEx(playerid, COLOR_WHITE, "{3CA7E8}Faction Leaders:{FFFFFF} /gov, /grantgunlicense, /revokegunlicense, /invite, /uninvite, /giverank, /adjustdivision");
		}
		default:
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You are not in a faction! If you are seeking to join a faction, please contact a faction leader.");
		}
	}
	SendClientMessageEx(playerid, COLOR_WHITE, "-------------------------------------------------------------------");
	return 1;
}

CMD:familyhelp(playerid, params[])
{
	if(PlayerInfo[playerid][pFamily] > 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "-------------------------------------------------------------------");
		SendClientMessageEx(playerid, COLOR_WHITE, "Gang Related Command(s): /f, /invite, /uninvite, /giverank");
		SendClientMessageEx(playerid, COLOR_WHITE, "Report for an administrator to edit your family (rank name(s), gang name etc)");
		SendClientMessageEx(playerid, COLOR_WHITE, "-------------------------------------------------------------------");
	}
	return 1;
}


CMD:vehiclehelp(playerid, params[])
{
	SendClientMessageEx(playerid, COLOR_WHITE, "-------------------------------------------------------------------");
	SendClientMessageEx(playerid, COLOR_WHITE, "Vehicle Ownership Related Command: /park, /trackcar, /lock, /colorcar, /deletecar");
	SendClientMessageEx(playerid, COLOR_WHITE, "-------------------------------------------------------------------");
	return 1;
}

CMD:businessids(playerid, params[])
{
	if(!IsAdmin(playerid, ADMIN_LEVEL_LEADADMIN)) return SendClientMessageEx(playerid, COLOR_GREY, "You are not authourized to use this command.");
	SendClientMessageEx(playerid, COLOR_ORANGE, "Business Interior ID's:");
 	SendClientMessageEx(playerid, COLOR_WHITE, "1) Horse Betting Place 2) Small Size Strip Club 3) Modern Barber Shop");
	SendClientMessageEx(playerid, COLOR_WHITE, "4) ProLaps Store 5) Sex Store 6) Tiny Barber Shop");
	SendClientMessageEx(playerid, COLOR_WHITE, "7) Pizza Stack Co 8) Rusty Brown Donuts 9) Victim Clothing Store");
	SendClientMessageEx(playerid, COLOR_WHITE, "10) Ammunation Interior 11) LV Gym Interior 12) Medium Ammunation");
	SendClientMessageEx(playerid, COLOR_WHITE, "13) Urban Clothing Store 14) The Pig Pen 15) Burger Shot");
	SendClientMessageEx(playerid, COLOR_WHITE, "16) Reeces Barber Shop 17) Zip Clothing Store 18) Didier Sachs");
	SendClientMessageEx(playerid, COLOR_WHITE, "19) Club Interior 20) 24/7 (Version 4) 21) Binco Store");
	SendClientMessageEx(playerid, COLOR_WHITE, "22) Lil Probe Inn 23) Jay's Diner 24) Modern Barber Store #2");
	SendClientMessageEx(playerid, COLOR_WHITE, "25) SF Cobra Gym 26) Zero's RC Store 27) Ammunation (Version 4)");
	SendClientMessageEx(playerid, COLOR_WHITE, "28) Ammunation (Version 5) 29) Clucking Bell 30) Green Bottles Bar");
	return 1;
}

CMD:information(playerid, params[])
{
	SendClientMessageEx(playerid, COLOR_WHITE, "---------------------------------------------------");
	SendClientMessageEx(playerid, COLOR_ORANGE, ""SERVER_NAME" - Information");
	SendClientMessageEx(playerid, COLOR_WHITE, "Script Version: "SERVER_VERSION"");
	SendClientMessageEx(playerid, COLOR_WHITE, "Gameplay Area: "SERVER_MAP"");
	SendClientMessageEx(playerid, COLOR_WHITE, "Website: "SERVER_WEBSITE"");
	SendClientMessageEx(playerid, COLOR_WHITE, "TeamSpeak 3: "SERVER_TEAMSPEAK"");
	SendClientMessageEx(playerid, COLOR_WHITE, "---------------------------------------------------");
	return 1;
}

CMD:updates(playerid, params[])
{
	SendClientMessageEx(playerid, COLOR_WHITE, "---------------------------------------------------");
	SendClientMessageEx(playerid, COLOR_ORANGE, ""SERVER_NAME" - Latest Updates");
	SendClientMessageEx(playerid, COLOR_GREEN, "Recent Changes: v1.9 (23/8/2013)");
	SendClientMessageEx(playerid, COLOR_WHITE, "* Implemented impound and vehicle ticket system.");
	SendClientMessageEx(playerid, COLOR_WHITE, "For more detailed information, check our twitter or our website.");
	SendClientMessageEx(playerid, COLOR_WHITE, "---------------------------------------------------");
	return 1;
}

CMD:gps(playerid, params[])
{
	if(PlayerInfo[playerid][pGps])
	{
		if(sscanf(params, "{i}")) {
			SendClientMessageEx(playerid, COLOR_GREY, "---------------------------------------------------");
			SendClientMessageEx(playerid, COLOR_GREY, "Usage: /gps [location id]");
			SendClientMessageEx(playerid, COLOR_GREY, "---------------------------------------------------");
			SendClientMessageEx(playerid, COLOR_GREY, "(1) Stacked Pizza      (2) All Saints Hospital");
			SendClientMessageEx(playerid, COLOR_GREY, "(3) LSPD HQ  (4) City Hall");
			SendClientMessageEx(playerid, COLOR_GREY, "(5) DMV HQ   (6) Binco Clothing");
			SendClientMessageEx(playerid, COLOR_GREY, "(7) Sanitation Department (8) Gantom Gym");
			SendClientMessageEx(playerid, COLOR_GREY, "---------------------------------------------------");
			return 1;
		}
		else if(strval(params) < 1 || strval(params) > 8) return SendClientMessageEx(playerid, COLOR_GREY, "You have entered an invalid destination id.");
		else if(HasActiveCheckpoint(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You already have an existing checkpoint, type /killcheckpoint to delete it.");
		switch(strval(params))
		{
		    case 1: { SetPlayerCheckpoint(playerid, 2094.97, -1796.32, 13.38, 5.0); }
		    case 2: { SetPlayerCheckpoint(playerid, 1194.92, -1324.22, 13.40, 5.0); }
		    case 3: { SetPlayerCheckpoint(playerid, 1530.75, -1675.68, 13.38, 5.0); }
		    case 4: { SetPlayerCheckpoint(playerid, 1480.82, -1734.49, 13.38, 5.0); }
		    case 5: { SetPlayerCheckpoint(playerid, 1105.70, -1206.49, 17.80, 5.0); }
		    case 6: { SetPlayerCheckpoint(playerid, 2244.52, -1664.24, 15.48, 5.0); }
		    case 7: { SetPlayerCheckpoint(playerid, 1005.87, -1353.05, 13.33, 5.0); }
		    case 8:{ SetPlayerCheckpoint(playerid, 2229.45, -1729.94, 13.38, 5.0); }
		}
		SetPVarInt(playerid, "UsingGps", 1);
		SendClientMessageEx(playerid, COLOR_YELLOW, "[GPS]: You have selected a destination, follow the red marker to reach your destination! ");
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_YELLOW, "You do not own a GPS! Buy one from a local 24/7.");
	}
	return 1;
}

CMD:help(playerid, params[])
{
	SendClientMessageEx(playerid, COLOR_ORANGE, "-------------------------------------------------------------------");
	SendClientMessageEx(playerid, COLOR_WHITE, "CHARACTER: /stats, /join, /deposit, /withdraw, /gps, /accept, /pay, /showlicenses, /flipcoin");
	SendClientMessageEx(playerid, COLOR_WHITE, "CHAT: /o(oc), /helpme, /b(rackets), /do, /me, /s(hout), /low, /w(hisper), /report, /ad(vert)");
	SendClientMessageEx(playerid, COLOR_WHITE, "OTHER: /car, /colorcar, /bank, /pay, /service, /cancel, /buy, /inventory, /killcheckpoint");
	if(PlayerInfo[playerid][pPhoneNumber] != 0) SendClientMessageEx(playerid, COLOR_WHITE, "PHONE: /call, /hangup, /pickup, /sms, /number, /togphone");
	switch(PlayerInfo[playerid][pJob])
	{
		case 1: SendClientMessageEx(playerid, COLOR_WHITE, "TRUCKER: /startroute, /cancel route");
		case 2: SendClientMessageEx(playerid, COLOR_WHITE, "MECHANIC: /repair, /nos");
		case 3: SendClientMessageEx(playerid, COLOR_WHITE, "PIZZA BOY: /startdelivery, /cancel delivery");
		case 4: SendClientMessageEx(playerid, COLOR_WHITE, "STREET SWEEPER: /startsweeping");
		case 5: SendClientMessageEx(playerid, COLOR_WHITE, "TAXI DRIVER: /fare, /accept taxi");
	}
	SendClientMessageEx(playerid, COLOR_WHITE, "OTHER: /animhelp, /factionhelp, /familyhelp, /vehiclehelp");
	SendClientMessageEx(playerid, COLOR_ORANGE, "-------------------------------------------------------------------");
	return 1;
}

CMD:changepass(playerid, params[])
{
	ShowPlayerDialogEx(playerid, DIALOG_CHANGE_PASSWORD, DIALOG_STYLE_PASSWORD, "Change Password", "You are about to change your password!\nPlease enter a new password to continue:", "Enter", "Cancel");
	return 1;
}

CMD:flipcoin(playerid, params[])
{
	if(PlayerInfo[playerid][pMoney] < 1) return SendClientMessage(playerid, COLOR_GREY,"You do not have any coins on you.");
    new szMessage[124];
    switch(random(2))
	{
        case 0: format(szMessage, sizeof(szMessage), "* %s flips a coin that lands on heads.", GetPlayerNameEx(playerid));
		case 1: format(szMessage, sizeof(szMessage), "* %s flips a coin that lands on tails.", GetPlayerNameEx(playerid));
    }
    return ProxDetector(10.0, playerid, szMessage, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
}

CMD:cells(playerid, params[])
{
    new string[128];
	if(PlayerInfo[playerid][pFaction] != 7 && !IsAdmin(playerid, ADMIN_LEVEL_JUNIORADMIN)) return SendClientMessageEx(playerid, COLOR_GREY, "You do not have the authority to open the prison cells.");
    if(CellState == false)
    {
    	format(string, sizeof(string), "%s uses their remote controller to open the prison cells.", GetPlayerNameEx(playerid));
		ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		CellState = true;

		MoveDynamicObject(cell0,1827.80004883+1.25,-1729.19995117,5202.79980469,0.50);
        MoveDynamicObject(cell1,1831.00000000+1.25,-1729.19995117,5202.79980469,0.50);
        MoveDynamicObject(cell2,1834.19995117+1.25,-1729.19995117,5202.79980469,0.50);
        MoveDynamicObject(cell3,1837.40002441+1.25,-1729.19995117,5202.79980469,0.50);
        MoveDynamicObject(cell4,1840.59997559+1.25,-1729.19995117,5202.79980469,0.50);
        MoveDynamicObject(cell5,1827.80004883+1.25,-1729.19995117,5206.39990234,0.50);
        MoveDynamicObject(cell6,1831.00000000+1.25,-1729.19995117,5206.39990234,0.50);
        MoveDynamicObject(cell7,1834.19995117+1.25,-1729.19995117,5206.39990234,0.50);
        MoveDynamicObject(cell8,1837.40002441+1.25,-1729.19995117,5206.39990234,0.50);
        MoveDynamicObject(cell9,1840.59997559+1.25,-1729.19995117,5206.39990234,0.50);
        MoveDynamicObject(cell10,1843.80004883+1.25,-1729.19995117,5206.39990234,0.50);
        MoveDynamicObject(cell11,1843.80004883+1.25,-1729.19995117,5202.79980469,0.50);
        MoveDynamicObject(cell12,1843.80004883+1.25,-1729.19995117,5209.89990234,0.50);
        MoveDynamicObject(cell13,1840.59997559+1.25,-1729.19995117,5209.89990234,0.50);
        MoveDynamicObject(cell14,1837.40002441+1.25,-1729.19995117,5209.89990234,0.50);
        MoveDynamicObject(cell15,1834.19995117+1.25,-1729.19995117,5209.89990234,0.50);
        MoveDynamicObject(cell16,1831.00000000+1.25,-1729.19995117,5209.89990234,0.50);
        MoveDynamicObject(cell17,1827.80004883+1.25,-1729.19995117,5209.89990234,0.50);
        MoveDynamicObject(cell18,1827.80004883+1.25,-1714.30004883,5202.79980469,0.50);
        MoveDynamicObject(cell19,1831.00000000+1.25,-1714.30004883,5202.79980469,0.50);
        MoveDynamicObject(cell20,1834.19995117+1.25,-1714.30004883,5202.79980469,0.50);
        MoveDynamicObject(cell21,1837.40002441+1.25,-1714.30004883,5202.79980469,0.50);
        MoveDynamicObject(cell22,1840.59997559+1.25,-1714.30004883,5202.79980469,0.50);
        MoveDynamicObject(cell23,1843.80004883+1.25,-1714.30004883,5202.79980469,0.50);
        MoveDynamicObject(cell24,1843.80004883+1.25,-1714.30004883,5206.39990234,0.50);
        MoveDynamicObject(cell25,1840.59997559+1.25,-1714.30004883,5206.39990234,0.50);
        MoveDynamicObject(cell26,1837.40002441+1.25,-1714.30004883,5206.39990234,0.50);
        MoveDynamicObject(cell27,1834.19995117+1.25,-1714.30004883,5206.39990234,0.50);
        MoveDynamicObject(cell28,1831.00000000+1.25,-1714.30004883,5206.39990234,0.50);
        MoveDynamicObject(cell29,1827.80004883+1.25,-1714.30004883,5206.39990234,0.50);
        MoveDynamicObject(cell30,1827.80004883+1.25,-1714.30004883,5209.89990234,0.50);
        MoveDynamicObject(cell31,1831.00000000+1.25,-1714.30004883,5209.89990234,0.50);
        MoveDynamicObject(cell32,1834.19995117+1.25,-1714.30004883,5209.89990234,0.50);
        MoveDynamicObject(cell33,1837.40002441+1.25,-1714.30004883,5209.89990234,0.50);
        MoveDynamicObject(cell34,1840.59997559+1.25,-1714.30004883,5209.89990234,0.50);
        MoveDynamicObject(cell35,1843.80004883+1.25,-1714.30004883,5209.89990234,0.50);
	}
	else if(CellState == true)
	{
    	format(string, sizeof(string), "%s uses their remote controller to close the prison cells.", GetPlayerNameEx(playerid));
		ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		CellState = false;
        MoveDynamicObject(cell0,1827.80004883,-1729.19995117,5202.79980469,0.50);
        MoveDynamicObject(cell1,1831.00000000,-1729.19995117,5202.79980469,0.50);
        MoveDynamicObject(cell2,1834.19995117,-1729.19995117,5202.79980469,0.50);
        MoveDynamicObject(cell3,1837.40002441,-1729.19995117,5202.79980469,0.50);
        MoveDynamicObject(cell4,1840.59997559,-1729.19995117,5202.79980469,0.50);
        MoveDynamicObject(cell5,1827.80004883,-1729.19995117,5206.39990234,0.50);
        MoveDynamicObject(cell6,1831.00000000,-1729.19995117,5206.39990234,0.50);
        MoveDynamicObject(cell7,1834.19995117,-1729.19995117,5206.39990234,0.50);
        MoveDynamicObject(cell8,1837.40002441,-1729.19995117,5206.39990234,0.50);
        MoveDynamicObject(cell9,1840.59997559,-1729.19995117,5206.39990234,0.50);
        MoveDynamicObject(cell10,1843.80004883,-1729.19995117,5206.39990234,0.50);
        MoveDynamicObject(cell11,1843.80004883,-1729.19995117,5202.79980469,0.50);
        MoveDynamicObject(cell12,1843.80004883,-1729.19995117,5209.89990234,0.50);
        MoveDynamicObject(cell13,1840.59997559,-1729.19995117,5209.89990234,0.50);
        MoveDynamicObject(cell14,1837.40002441,-1729.19995117,5209.89990234,0.50);
        MoveDynamicObject(cell15,1834.19995117,-1729.19995117,5209.89990234,0.50);
        MoveDynamicObject(cell16,1831.00000000,-1729.19995117,5209.89990234,0.50);
        MoveDynamicObject(cell17,1827.80004883,-1729.19995117,5209.89990234,0.50);
        MoveDynamicObject(cell18,1827.80004883,-1714.30004883,5202.79980469,0.50);
        MoveDynamicObject(cell19,1831.00000000,-1714.30004883,5202.79980469,0.50);
        MoveDynamicObject(cell20,1834.19995117,-1714.30004883,5202.79980469,0.50);
        MoveDynamicObject(cell21,1837.40002441,-1714.30004883,5202.79980469,0.50);
        MoveDynamicObject(cell22,1840.59997559,-1714.30004883,5202.79980469,0.50);
        MoveDynamicObject(cell23,1843.80004883,-1714.30004883,5202.79980469,0.50);
        MoveDynamicObject(cell24,1843.80004883,-1714.30004883,5206.39990234,0.50);
        MoveDynamicObject(cell25,1840.59997559,-1714.30004883,5206.39990234,0.50);
        MoveDynamicObject(cell26,1837.40002441,-1714.30004883,5206.39990234,0.50);
        MoveDynamicObject(cell27,1834.19995117,-1714.30004883,5206.39990234,0.50);
        MoveDynamicObject(cell28,1831.00000000,-1714.30004883,5206.39990234,0.50);
        MoveDynamicObject(cell29,1827.80004883,-1714.30004883,5206.39990234,0.50);
        MoveDynamicObject(cell30,1827.80004883,-1714.30004883,5209.89990234,0.50);
        MoveDynamicObject(cell31,1831.00000000,-1714.30004883,5209.89990234,0.50);
        MoveDynamicObject(cell32,1834.19995117,-1714.30004883,5209.89990234,0.50);
        MoveDynamicObject(cell33,1837.40002441,-1714.30004883,5209.89990234,0.50);
        MoveDynamicObject(cell34,1840.59997559,-1714.30004883,5209.89990234,0.50);
        MoveDynamicObject(cell35,1843.80004883,-1714.30004883,5209.89990234,0.50);
	}
	return 1;
}



timer JailTimer[1000](playerid)
{
	if(!IsPlayerConnectedEx(playerid))
	{
		stop JailTimerEx[playerid];
	}
	else if(PlayerInfo[playerid][pJailTime] > 0)
	{
	    if(IsPlayerTabbed(playerid) == false)
	    {
		    new TDString[64];
		    --PlayerInfo[playerid][pJailTime];
		    format(TDString, sizeof(TDString), "Time Remaining~n~  %i Seconds", PlayerInfo[playerid][pJailTime]);
			TextDrawSetString(JailTimerTD[playerid], TDString);
		}
	}
	else
	{
		TextDrawHideForPlayer(playerid, JailTimerTD[playerid]);
		PlayerInfo[playerid][pJailTime] = 0;
		SetPlayerPos(playerid, 1540.35, -1675.33, 13.55);
		SetPlayerInteriorEx(playerid, 0);
		SetPlayerVirtualWorldEx(playerid, 0);
		stop JailTimerEx[playerid];
		SetPlayerToTeamColor(playerid);
	}
}

public OnPlayerDisconnect(playerid, reason)
{
	if(GetPVarInt(playerid, "gPlayerLogged") == 1)
	{
	    if(GetPVarInt(playerid, "SpeakingPlayer") > 0) DeleteReport(GetPVarInt(playerid, "SpeakingPlayer") - 1);
	
		if(IsPlayerInAnyVehicle(playerid)) OnPlayerExitVehicle(playerid, GetPlayerVehicleID(playerid));
		
		if(GetPVarInt(playerid, "IsCuffed") == 1) PlayerInfo[playerid][pJailTime] += 1200;
	    
	    if(GetPVarInt(playerid, "RentingCar") != 0) SetVehicleToRespawn(GetPVarInt(playerid, "RentingCar"));
	    
	    if(PlayerInfo[playerid][pPlantPosition][0] != 0 && PlayerInfo[playerid][pPlantPosition][1] != 0 && PlayerInfo[playerid][pPlantPosition][2] != 0)
		{
	    	DestroyDynamicObject(WeedPlant[playerid]);
	    	WeedPlant[playerid] = 0;
		}

	    RemoveHitmanBombs(playerid);
		
		for(new i=0; i < MAX_PLAYEROWNED_VEHICLES; i++)
		{
    	    if(PlayerVehicleInfo[playerid][i][pvHandleId] != 0) {
    	        VehicleInfo[PlayerVehicleInfo[playerid][i][pvHandleId]][vLocked] = 0;
    	    	DestroyVehicle(PlayerVehicleInfo[playerid][i][pvHandleId]);
			}
		}
	    
	    if(SpectatingAdmin[playerid] != INVALID_PLAYER_ID && SpectatingAdmin[SpectatingPlayer[playerid]] == playerid) {
        	SpectatingAdmin[playerid] = INVALID_PLAYER_ID;
			SpectatingPlayer[playerid] = INVALID_PLAYER_ID;
			SendClientMessageEx(SpectatingAdmin[playerid], COLOR_GREY, "The person that you were spectating has left the server.");
			TogglePlayerSpectating(SpectatingAdmin[playerid], false);
		}

	    if(SpectatingPlayer[playerid] != INVALID_PLAYER_ID) {
	    	SpectatingAdmin[SpectatingPlayer[playerid]] = INVALID_PLAYER_ID;
	     	SpectatingPlayer[playerid] = INVALID_PLAYER_ID;
	    }
	    
	    if(gCurrentTaxiCall == playerid)
	        gCurrentTaxiCall = INVALID_PLAYER_ID;
	        
		new
		    string[128];
		switch (reason)
		{
			case 0: format(string, sizeof(string), "%s has left the server (timeout).", GetPlayerNameEx(playerid));
			case 1:	format(string, sizeof(string), "%s has left the server (leaving).", GetPlayerNameEx(playerid));
			case 2: format(string, sizeof(string), "%s has left the server (kicked/banned).", GetPlayerNameEx(playerid));
		}
		ProxDetector(30.0, playerid, string, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW);

		GivePlayerCash(playerid, gTaxiFareEarnings[playerid]);
		gTaxiFareEarnings[playerid] = 0; gTaxiFareAmount[playerid] = 0;
		CallingTo[playerid] = INVALID_PLAYER_ID; PhoneState[playerid] = 0;

	 	SavePlayerAccount(playerid, mConnectionHandle);
	}
	return 1;
}

public OnPlayerSpawn(playerid)
{
	if(GetPVarInt(playerid, "gPlayerLogged") == 1)
	{
		if(!PlayerAnimLibsPreloaded[playerid])
		{
	        PreloadAnimLib(playerid);
			PlayerAnimLibsPreloaded[playerid] = 1;
		}
	    if(PlayerInfo[playerid][pPlantPosition][0] != 0 && PlayerInfo[playerid][pPlantPosition][1] != 0 && PlayerInfo[playerid][pPlantPosition][2] != 0) WeedPlant[playerid] = CreateDynamicObject(19473, PlayerInfo[playerid][pPlantPosition][0], PlayerInfo[playerid][pPlantPosition][1], PlayerInfo[playerid][pPlantPosition][2] - 1.25, 0, 0, 0, floatround(PlayerInfo[playerid][pPlantPosition][4]),  floatround(PlayerInfo[playerid][pPlantPosition][3]));
	    
		if(PlayerInfo[playerid][pJailTime] > 0)
		{
			new jailPos = random(sizeof(JailPositions));
			SetPlayerPos(playerid, JailPositions[jailPos][0], JailPositions[jailPos][1], JailPositions[jailPos][2]);
		 	SetPlayerInteriorEx(playerid, PlayerInfo[playerid][pInterior]);
		 	SetPlayerVirtualWorldEx(playerid, PlayerInfo[playerid][pVirtualWorld]);
		 	SetCameraBehindPlayer(playerid);

	    	DeletePVar(GetPVarInt(playerid, "MedicId"), "MedicCall");
	    	DeletePVar(playerid, "MedicId");
			DeletePVar(playerid, "MedicalX");
			DeletePVar(playerid, "MedicalY");
			DeletePVar(playerid, "MedicalZ");
			DeletePVar(playerid, "MedicalInterior");
			DeletePVar(playerid, "MedicalVirtualWorld");
			DeletePVar(playerid, "RequireMedicalAssistance");
			PlayerInfo[playerid][pMedicalBill] = 0;
			SetPlayerHealthEx(playerid, 100);
			ClearAnimations(playerid);
			
			TextDrawShowForPlayer(playerid, JailTimerTD[playerid]);
  			stop JailTimerEx[playerid];
			JailTimerEx[playerid] = repeat JailTimer(playerid);
			SendClientMessageEx(playerid, COLOR_ORANGE, "SERVER:{FFFFFF} Incomplete sentence! You have been teleported to jail.");
			SetPlayerSkin(playerid, 50);
			ResetPlayerWeapons(playerid);
			SetPlayerHealthEx(playerid, 100);
			SetPlayerArmour(playerid, 0);
			for(new i=0; i < 12; i++) PlayerInfo[playerid][pWeapons][i] = 0;

			TogglePlayerControllable(playerid, false);
			SetPVarInt(playerid, "ActionRestriction", 1);
			TextDrawShowForPlayer(playerid, LoadingObjectTextDraw);
			TextDrawShowForPlayer(playerid, LoadingObjectBox);
			defer HideLoadingTextdraws(playerid);
			SetPlayerToTeamColor(playerid);
			return 1;
		}
		else if(GetPVarInt(playerid, "RequireMedicalAssistance") == 1)
		{
			Streamer_UpdateEx(playerid, GetPVarFloat(playerid, "MedicalX"), GetPVarFloat(playerid, "MedicalY"), GetPVarFloat(playerid, "MedicalZ"));
			ReloadPlayerWeapons(playerid);
			SetPlayerHealthEx(playerid, 100);
			SetPlayerArmour(playerid, 0);
			SetPlayerPos(playerid, GetPVarFloat(playerid, "MedicalX"), GetPVarFloat(playerid, "MedicalY"), GetPVarFloat(playerid, "MedicalZ"));
			SetPlayerInterior(playerid, GetPVarInt(playerid, "MedicalInterior"));
			SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "MedicalVirtualWorld"));
			GameTextForPlayer(playerid, "~r~HURT STATE~n~~w~/accept death or /service ems", 2000, 3);
			ApplyAnimation(playerid, "SWAT", "gnstwall_injurd", 4.0, 1, 0, 0, 0, 0, 1);
		    return 1;
		}
		else if(PlayerInfo[playerid][pMedicalBill] == 1) return GivePlayerDeath(playerid);
	 	SetPlayerPos(playerid, PlayerInfo[playerid][pPositionX], PlayerInfo[playerid][pPositionY], PlayerInfo[playerid][pPositionZ]);
	 	SetPlayerInteriorEx(playerid, PlayerInfo[playerid][pInterior]);
	 	SetPlayerVirtualWorldEx(playerid, PlayerInfo[playerid][pVirtualWorld]);
	 	SetCameraBehindPlayer(playerid);

		TogglePlayerControllable(playerid, false);
		SetPVarInt(playerid, "ActionRestriction", 1);
		TextDrawShowForPlayer(playerid, LoadingObjectTextDraw);
		TextDrawShowForPlayer(playerid, LoadingObjectBox);
		defer HideLoadingTextdraws(playerid);
		
		SetPlayerWantedLevel(playerid, PlayerInfo[playerid][pWantedLevel]);
		SetPlayerFacingAngle(playerid, PlayerInfo[playerid][pFacingAngle]);
		SetPlayerHealthEx(playerid, PlayerInfo[playerid][pHealth]);
		SetPlayerArmour(playerid, PlayerInfo[playerid][pArmour]);
		ReloadPlayerWeapons(playerid);
		return 1;
	}
	else
	{
	    printf("%s may have tried to spawn without logging in and has been kicked.", GetPlayerNameEx(playerid));
		return Kick(playerid);
	}
}

public OnPlayerDeath(playerid, killerid, reason)
{
	new string[128];
	gPlayerUsingLoopingAnim[playerid] = 0;
	TextDrawHideForPlayer(playerid, StopAnim);
	if(IsPlayerInAnyVehicle(killerid))
	{
		format(string, sizeof(string), "{FF6347}AdmWarning:{FFFF00} %s may have possibly car rammed %s to death.", GetPlayerNameEx(killerid), GetPlayerNameEx(playerid));
		AdminAlert(string, ALERT_ADMINS);
	}
	if(GetPVarInt(playerid, "BackupRequested") == 1)
	{
		DeletePVar(playerid, "BackupRequested");
  		SetPlayerToTeamColor(playerid);
	}
	if(killerid != INVALID_PLAYER_ID)
	{
	    if(reason >= 0 && reason <= 46)
	    {
	  		printf("[Kill]: %s has killed %s with a %s.", GetPlayerNameEx(killerid), GetPlayerNameEx(playerid), GetWeaponNameEx(reason));
			format(string, sizeof(string), "{FF6347}AdmWarning:{FFFF00} %s has just killed %s with a %s.", GetPlayerNameEx(killerid), GetPlayerNameEx(playerid), GetWeaponNameEx(reason));
			AdminAlert(string, ALERT_ADMINS);
		}
		if(HitmanTarget[killerid] == playerid)
		{
		   	/*new File:clog = fopen("logs/contract.log", io_append);
		    format(string, sizeof(string), "Hitman %s has fulfilled the contract on %s's head and collected $%d.", GetPlayerNameEx(killerid), GetPlayerNameEx(playerid), PlayerInfo[playerid][pContractPrice]);
			fwrite(clog, string);
			fclose(clog);*/
			format(string, sizeof(string), "Hitman %s has fulfilled the contract on %s's head and collected $%d.", GetPlayerNameEx(killerid), GetPlayerNameEx(playerid), PlayerInfo[playerid][pContractPrice]);
			Log("logs/contract.log", string);

			format(string, sizeof(string), " You have been critically injured by a hitman and lost $%d.", PlayerInfo[playerid][pContractPrice]);
			SendClientMessageEx(playerid, COLOR_YELLOW, string);
		    format(string, sizeof(string), "Hitman %s has fulfilled the contract on %s's head and collected $%d.", GetPlayerNameEx(killerid), GetPlayerNameEx(playerid), PlayerInfo[playerid][pContractPrice]);
			SendHitmanMessage(COLOR_YELLOW, string);
			GivePlayerCash(playerid, -PlayerInfo[playerid][pContractPrice]);
			GivePlayerCash(killerid, PlayerInfo[playerid][pContractPrice]);
			PlayerInfo[killerid][pCompletedHits]++;
			PlayerInfo[playerid][pContractPrice] = 0;
			format(PlayerInfo[playerid][pContractReason], 32, "");
			format(PlayerInfo[playerid][pContractBy], MAX_PLAYER_NAME, "");
			HitmanTarget[killerid] = INVALID_PLAYER_ID;
		}
		else if(HitmanTarget[playerid] == killerid)
		{
		   	/*new File:clog = fopen("logs/contract.log", io_append);
		    format(string, sizeof(string), "Hitman %s has failed the contract on %s's head and lost $%d.", GetPlayerNameEx(playerid), GetPlayerNameEx(killerid), PlayerInfo[killerid][pContractPrice]);
			fwrite(clog, string);
			fclose(clog);*/
			format(string, sizeof(string), "Hitman %s has failed the contract on %s's head and lost $%d.", GetPlayerNameEx(playerid), GetPlayerNameEx(killerid), PlayerInfo[killerid][pContractPrice]);
			Log("logs/contract.log", string);

		    format(string, sizeof(string), " You have critically injured a hitman and collected $%d.", PlayerInfo[killerid][pContractPrice]);
		    SendClientMessageEx(killerid, COLOR_YELLOW, string);
		    format(string, sizeof(string), "Hitman %s has failed the contract on %s's head and lost $%d.", GetPlayerNameEx(playerid), GetPlayerNameEx(killerid), PlayerInfo[killerid][pContractPrice]);
			SendHitmanMessage(COLOR_YELLOW, string);
			GivePlayerCash(playerid, -PlayerInfo[playerid][pContractPrice]);
			GivePlayerCash(killerid, PlayerInfo[playerid][pContractPrice]);
			PlayerInfo[killerid][pContractPrice] = 0;
			format(PlayerInfo[killerid][pContractReason], 32, "");
			format(PlayerInfo[killerid][pContractBy], MAX_PLAYER_NAME, "");
			HitmanTarget[playerid] = INVALID_PLAYER_ID;
		}
	}
	if(GetPVarInt(playerid, "BackupRequested") == 1)
	{
		DeletePVar(playerid, "BackupRequested");
  		SetPlayerToTeamColor(playerid);
	}
	if(IsPlayerInAnyVehicle(playerid)) OnPlayerExitVehicle(playerid, GetPlayerVehicleID(playerid));
	if(GetPVarInt(playerid, "RequireMedicalAssistance") == 0)
	{
		GetPlayerPos(playerid, PlayerInfo[playerid][pPositionX], PlayerInfo[playerid][pPositionY], PlayerInfo[playerid][pPositionZ]);
		SetPVarFloat(playerid, "MedicalX", PlayerInfo[playerid][pPositionX]);
		SetPVarFloat(playerid, "MedicalY", PlayerInfo[playerid][pPositionY]);
		SetPVarFloat(playerid, "MedicalZ", PlayerInfo[playerid][pPositionZ]);
		SetPVarInt(playerid, "MedicalInterior", GetPlayerInterior(playerid));
		SetPVarInt(playerid, "MedicalVirtualWorld", GetPlayerVirtualWorld(playerid));
		SetPVarInt(playerid, "RequireMedicalAssistance", 1);
	}
	else if(GetPVarInt(playerid, "RequireMedicalAssistance")) DeletePVar(playerid, "RequireMedicalAssistance");
	PlayerInfo[playerid][pMedicalBill] = 1;
	return 1;
}

timer HospitalTimer[15000](playerid)
{
	if(PlayerInfo[playerid][pMedicalBill] == 0 || !IsPlayerConnectedEx(playerid)) return 0;
	PlayerInfo[playerid][pMedicalBill] = 0;
	TogglePlayerControllable(playerid, true);
	ResetPlayerWeapons(playerid);
	for (new i=0; i < 12; i++) PlayerInfo[playerid][pWeapons][i] = 0;
	LastGun[playerid] = 0;
	DeletePVar(playerid, "TaserEquipped");
 	SetPlayerHealthEx(playerid, 100);
 	SetPlayerArmourEx(playerid, 0);
	SetPlayerPos(playerid, 1174.804, -1323.383, 14.593);
	SetCameraBehindPlayer(playerid);
	SendClientMessageEx(playerid, COLOR_HOTPINK, "LSFMD: The total medical bill for the treatment is $100, have a nice day.");
	GivePlayerCash(playerid, -100);
	AddVaultMoney(3, 100);
	return 1;
}

public OnVehicleSpawn(vehicleid)
{
	SetVehicleHealth(vehicleid, 999);
	VehicleInfo[vehicleid][vEngine] = 0;
	VehicleInfo[vehicleid][vTotalled] = 0;
	VehicleInfo[vehicleid][vStarted] = 0;
	return 1;
}

public OnVehicleDeath(vehicleid, killerid)
{
	VehicleInfo[vehicleid][vEngine] = 0;
	VehicleInfo[vehicleid][vTotalled] = 0;
	VehicleInfo[vehicleid][vStarted] = 0;
	return 1;
}

public OnPlayerText(playerid, text[])
{
	new string[128];
	if(PlayerInfo[playerid][pTutorial] == 0) return 0;
	if(GetPVarInt(playerid, "Calling911") == 1)
	{
	    if(!strcmp(text, "police", true))
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "EMERGENCY: I am now going to transfer your call onto the Los Santos Police Department.");
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "DISPATCH: Please provide short description of this crime.");
			SetPVarInt(playerid, "Calling911", 2);
	    }
		else if(!strcmp(text, "ems", true))
		{
			SendClientMessageEx(playerid, COLOR_HOTPINK, "EMERGENCY: I am now going to transfer your call onto the Los Santos Fire and Medical Department.");
			SendClientMessageEx(playerid, COLOR_HOTPINK, "DISPATCH: Please provide short description of the incident.");
			SetPVarInt(playerid, "Calling911", 3);
	    }
		else
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "EMERGENCY: I'm sorry, which service did you need? (police, ems)");
			format(string, sizeof(string), "(cellphone) %s says: %s", GetPlayerNameEx(playerid), text);
		}
		
		SetPlayerChatBubble(playerid, text, COLOR_WHITE, 20.0, 10000);
		ProxDetector(20.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
		return 0;
    }
  	else if(GetPVarInt(playerid, "Calling911") == 2)
    {
		format(string, sizeof(string), "(cellphone) %s says: %s", GetPlayerNameEx(playerid), text);
        if(strlen(text) >= 4)
		{
	    	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "DISPATCH: Thank you for calling the Los Santos Police Department, your call is now being processed.");
	    	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "DISPATCH: All on duty members have been alerted, thank you for reporting this incident.");
			SendRadioMessage(1, COLOR_WHITE, "----------------------------------------");
			SendRadioMessage(6, COLOR_WHITE, "----------------------------------------");
			format(string, sizeof(string), "[DISPATCH]{FFFFFF} All Units IA: Caller: %s", GetPlayerNameEx(playerid));
			SendRadioMessage(1, COLOR_LIGHTBLUE, string);
			SendRadioMessage(6, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "[DISPATCH]{FFFFFF} Incident: %s", text);
			SendRadioMessage(1, COLOR_LIGHTBLUE, string);
			SendRadioMessage(6, COLOR_LIGHTBLUE, string);
			SendRadioMessage(1, COLOR_WHITE, "----------------------------------------");
			SendRadioMessage(6, COLOR_WHITE, "----------------------------------------");
	    	DeletePVar(playerid, "Calling911");
	    	CallingTo[playerid] = INVALID_PLAYER_ID;
			PhoneState[playerid] = 0;
			SendClientMessageEx(playerid, COLOR_GREY, "They hung up.");
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);

			SetPlayerChatBubble(playerid, text, COLOR_WHITE, 20.0, 10000);
		    ProxDetector(20.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 0;
		}
		else SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Police HQ: Hello, is anyone there on the phone?");
    }
  	else if(GetPVarInt(playerid, "Calling911") == 3)
    {
		format(string, sizeof(string), "(cellphone) %s says: %s", GetPlayerNameEx(playerid), text);
        if(strlen(text) >= 4)
		{
	    	SendClientMessageEx(playerid, COLOR_HOTPINK, "LSFMD HQ: Thank you for calling the Los Santos Fire and Medical Department, your call is now being processed.");
	    	SendClientMessageEx(playerid, COLOR_HOTPINK, "DISPATCH: All on duty members have been alerted, thank you for reporting this incident.");
			SendRadioMessage(3, COLOR_WHITE, "----------------------------------------");
			format(string, sizeof(string), "[DISPATCH]{FFFFFF} All Units IA: Caller: %s", GetPlayerNameEx(playerid));
			SendRadioMessage(3, COLOR_HOTPINK, string);
			format(string, sizeof(string), "[DISPATCH]{FFFFFF} Incident: %s", text);
			SendRadioMessage(3, COLOR_HOTPINK, string);
			SendRadioMessage(3, COLOR_WHITE, "----------------------------------------");
	    	DeletePVar(playerid, "Calling911");
	    	CallingTo[playerid] = INVALID_PLAYER_ID;
			PhoneState[playerid] = 0;
			SendClientMessageEx(playerid, COLOR_GREY, "They hung up.");
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);

			SetPlayerChatBubble(playerid, text, COLOR_WHITE, 20.0, 10000);
		    ProxDetector(20.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			return 0;
		}
		else SendClientMessageEx(playerid, COLOR_HOTPINK, "LSFMD HQ: Hello, is anyone there on the phone?");
    }
    
	else if(CallingTo[playerid] != INVALID_PLAYER_ID)
	{
		format(string, sizeof(string), "(cellphone) %s says: %s", GetPlayerNameEx(playerid), text);

		if(CallingTo[CallingTo[playerid]] == playerid && PhoneState[CallingTo[playerid]] == 1) SendClientMessageEx(CallingTo[playerid], COLOR_YELLOW, string);
		else SendClientMessageEx(playerid, COLOR_GREY, "Your partner has disconnected, type /hangup to hangup.");
	}
	else
	{
		if(PlayerInfo[playerid][pAccent] != 0) format(string, sizeof(string), "(%s accent) %s says: %s", GetPlayerAccent(playerid), GetPlayerNameEx(playerid), text);
		else format(string, sizeof(string), "%s says: %s", GetPlayerNameEx(playerid), text);
	}
	SetPlayerChatBubble(playerid, text, COLOR_WHITE, 20.0, 10000);
    ProxDetector(20.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
	return 0;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	if(VehicleInfo[vehicleid][vStarted] == 0)
	{
		VehicleInfo[vehicleid][vStarted] = 1;
		VehicleInfo[vehicleid][vEngine] = 0;
		VehicleInfo[vehicleid][vLights] = 0;
		VehicleInfo[vehicleid][vTotalled] = 0;
		VehicleInfo[vehicleid][vFuel] = 100;
		VehicleInfo[vehicleid][vLocked] = 0;
		SetVehicleParamsEx(vehicleid, VehicleInfo[vehicleid][vEngine], VehicleInfo[vehicleid][vLights], VehicleInfo[vehicleid][vAlarm], VehicleInfo[vehicleid][vDoors], VehicleInfo[vehicleid][vBonnet], VehicleInfo[vehicleid][vBoot], VehicleInfo[vehicleid][vObjective]);
	}
	
	if(VehicleInfo[vehicleid][vLocked] == 1) ClearAnimations(playerid);
	if(IsADmvCar(vehicleid) && LicenseTestAC[playerid] != 4)
	{
		ClearAnimations(playerid);
		SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use that vehicle! (/licensetest inside DMV)");
	}
	
	if(GetPVarInt(playerid, "TaserEquipped") == 1) cmd_taser(playerid, "");
	
	else if(IsACopCar(vehicleid) && ispassenger == 0)
	{
	    if(PlayerInfo[playerid][pFaction] != 1)
	    {
		    ClearAnimations(playerid);
		    SendClientMessageEx(playerid, COLOR_GREY, "You are not in the Los Santos Police Department.");
	    }
	}
	else if(IsAmbulance(vehicleid) && ispassenger == 0)
	{
	    if(PlayerInfo[playerid][pFaction] != 3)
	    {
		    ClearAnimations(playerid);
		    SendClientMessageEx(playerid, COLOR_GREY, "You are not in the Los Santos Fire and Medical Department.");
	    }
	}
	else if(IsAFBICar(vehicleid) && ispassenger == 0)
	{
	    if(PlayerInfo[playerid][pFaction] != 6)
	    {
		    ClearAnimations(playerid);
		    SendClientMessageEx(playerid, COLOR_GREY, "You are not in the Federal Bureau of Investigation.");
	    }
	}
	else if(IsAPaCar(vehicleid) && ispassenger == 0)
	{
	    if(PlayerInfo[playerid][pFaction] != 2)
	    {
		    ClearAnimations(playerid);
		    SendClientMessageEx(playerid, COLOR_GREY, "You are not in Executive Branch.");
	    }
	}
	else if(IsATaxiCar(vehicleid) && ispassenger == 0)
	{
	    if(PlayerInfo[playerid][pJob] != 5)
	    {
		    ClearAnimations(playerid);
		    SendClientMessageEx(playerid, COLOR_GREY, "You are not in the Taxi Company.");
	    }
	}
	else if(IsAPizzaBike(vehicleid))
	{
	    if(PlayerInfo[playerid][pJob] != 3)
		{
		    ClearAnimations(playerid);
		    SendClientMessageEx(playerid, COLOR_GREY, "You are not a Pizza Boy.");
		}
		else
		{
		    if(GetPlayerSkin(playerid) != 155)
			{
				SetPlayerSkin(playerid, 155);
				ClearAnimations(playerid, 1);
			}
		}
	}
	else if(IsAStreetSweeper(vehicleid) && ispassenger == 0)
	{
	    if(PlayerInfo[playerid][pJob] != 4)
	    {
		    ClearAnimations(playerid);
		    SendClientMessageEx(playerid, COLOR_GREY, "You are not a Street Sweeper.");
	    }
	}
	else if(IsATruckerVehicle(vehicleid) && ispassenger == 0)
	{
	    if(PlayerInfo[playerid][pJob] != 1)
	    {
		    ClearAnimations(playerid);
		    SendClientMessageEx(playerid, COLOR_GREY, "You are not a Trucker.");
	    }
	}
	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
	if(IsADmvCar(vehicleid) && GetPVarInt(playerid, "TakingDMVTest") == 1)
	{
	    DeletePVar(playerid, "DMVStage");
	    DeletePVar(playerid, "TakingDMVTest");
	    DisablePlayerCheckpoint(playerid);
	    SetVehicleToRespawn(vehicleid);
	    SendClientMessageEx(playerid, COLOR_WHITE, "The test was cancelled because you left the testing vehicle.");
	}
	else if(IsAStreetSweeper(vehicleid) && GetPVarInt(playerid, "SweepingDuty") == 1)
	{
	    DeletePVar(playerid, "RouteStage");
	    DeletePVar(playerid, "SweepingDuty");
	    DisablePlayerCheckpoint(playerid);
	    SetVehicleToRespawn(vehicleid);
	    SendClientMessageEx(playerid, COLOR_WHITE, "The route was cancelled because you left the vehicle.");
	}
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	if(newstate == PLAYER_STATE_ONFOOT && oldstate == PLAYER_STATE_DRIVER)
	{
		if(gTaxiFareAmount[playerid] > 0)
		{
		    new string[128];
		    GivePlayerCash(playerid, gTaxiFareEarnings[playerid]);
		    gTaxiFareEarnings[playerid] = 0;
		    gTaxiFareAmount[playerid] = 0;
	        format(string, sizeof(string), "You have went off duty and earned $%d for this trip.", gTaxiFareEarnings[playerid]);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
	}

	if(newstate == PLAYER_STATE_DRIVER)
	{
        new vehicleid = GetPlayerVehicleID(playerid);
	    gLastCar[playerid] = vehicleid;
	    SetPlayerArmedWeapon(playerid, 0);
		GetVehicleParamsEx(vehicleid, VehicleInfo[vehicleid][vEngine], VehicleInfo[vehicleid][vLights], VehicleInfo[vehicleid][vAlarm], VehicleInfo[vehicleid][vDoors], VehicleInfo[vehicleid][vBonnet], VehicleInfo[vehicleid][vBoot], VehicleInfo[vehicleid][vObjective]);
	    
	    if(PlayerInfo[playerid][pDriverLicense] == 0) SendClientMessageEx(playerid, COLOR_YELLOW, "You do not have a registered drivers license, watch out for law enforcement.");
		if(SpectatingAdmin[playerid] != INVALID_PLAYER_ID && SpectatingPlayer[SpectatingAdmin[playerid]] == playerid) PlayerSpectateVehicle(SpectatingAdmin[playerid], vehicleid);

		for(new i=0; i < MAX_PLAYEROWNED_VEHICLES; i++)
	    {
	        if(GetPlayerVehicleID(playerid) == PlayerVehicleInfo[playerid][i][pvHandleId])
			{
			    new
			        string[64];
				format(string, sizeof(string), "You are the owner of this %s.", GetVehicleName(vehicleid));
			    SendClientMessageEx(playerid, COLOR_GREY, string);
			    break;
			}
		}
		
	    new dealership = GetNearestDealership(playerid), dealerCar = IsInDealershipCar(dealership, vehicleid);
		if(dealership != INVALID_DEALERSHIP_ID && dealerCar != INVALID_VEHICLE_ID)
		{
		    new string[128];
		    SetPVarInt(playerid, "DealershipId", dealership);
		    SetPVarInt(playerid, "DealershipCar", dealerCar);
		    format(string, sizeof(string), "{FFFFFF}This vehicle costs $%d, are you sure that you want to purchase this vehicle?", DealershipInfo[dealership][dvPrice][dealerCar]);
		    ShowPlayerDialogEx(playerid, DIALOG_DEALERSHIP_BUY, DIALOG_STYLE_MSGBOX, "{FFFFFF}Vehicle Dealership", string, "Purchase", "Close");
	    }
	    else if(IsARentableVehicle(vehicleid))
	    {
			if(WhoRentsVehicle(vehicleid) == playerid)
			{
	     		SendClientMessageEx(playerid, COLOR_ORANGE, "SERVER:{FFFFFF} Welcome back to your rented car.");
			 	VehicleInfo[vehicleid][vEngine] = 1;
	  			VehicleInfo[vehicleid][vLights] = 1;
			}
			else if(WhoRentsVehicle(vehicleid) != INVALID_PLAYER_ID)
			{
			    new string[128];
			    format(string, sizeof(string), "SERVER:{FFFFFF} You manage to find some papers saying that this car is currently being rented by %s.", GetPlayerNameEx(WhoRentsVehicle(vehicleid)));
	     		SendClientMessageEx(playerid, COLOR_ORANGE, string);
			 	VehicleInfo[vehicleid][vEngine] = 1;
		 		VehicleInfo[vehicleid][vLights] = 1;
			}
			else
			{
	     		SendClientMessageEx(playerid, COLOR_ORANGE, "SERVER:{FFFFFF} You can rent this vehicle for $25 by typing the command /rentcar.");
			 	VehicleInfo[vehicleid][vEngine] = 0;
	  			VehicleInfo[vehicleid][vLights] = 0;
			}
			SetVehicleParamsEx(vehicleid, VehicleInfo[vehicleid][vEngine], VehicleInfo[vehicleid][vLights], VehicleInfo[vehicleid][vAlarm], VehicleInfo[vehicleid][vDoors], VehicleInfo[vehicleid][vBonnet], VehicleInfo[vehicleid][vBoot], VehicleInfo[vehicleid][vObjective]);
		}
	    else if(IsAPizzaBike(vehicleid))
	    {
	        if(PlayerInfo[playerid][pJob] == 3)
	        {
		        if(GetPVarInt(playerid, "DeliveryBike") != vehicleid)
		        {
			        SendClientMessageEx(playerid, COLOR_ORANGE, "DELIVERY:{FFFFFF} You are currently not on a delivery mission.");
			        SendClientMessageEx(playerid, COLOR_ORANGE, "DELIVERY:{FFFFFF} Please type /startdelivery to carry on a delivery..");
			        VehicleInfo[vehicleid][vEngine] = 0;
					VehicleInfo[vehicleid][vLights] = 1;
				}
				else
				{
			        SendClientMessageEx(playerid, COLOR_ORANGE, "DELIVERY:{FFFFFF} You are currently on a delivery.");
			        SendClientMessageEx(playerid, COLOR_ORANGE, "DELIVERY:{FFFFFF} To cancel the delivery, please type /cancel delivery.");
			        VehicleInfo[vehicleid][vEngine] = 1;
					VehicleInfo[vehicleid][vLights] = 1;
				}
				SetVehicleParamsEx(vehicleid, VehicleInfo[vehicleid][vEngine], VehicleInfo[vehicleid][vLights], VehicleInfo[vehicleid][vAlarm], VehicleInfo[vehicleid][vDoors], VehicleInfo[vehicleid][vBonnet], VehicleInfo[vehicleid][vBoot], VehicleInfo[vehicleid][vObjective]);
			}
			else
			{
				RemovePlayerFromVehicleEx(playerid);
		    	SendClientMessageEx(playerid, COLOR_GREY, "You are not a Pizza Boy.");
			}
	    }
	    else if(GetPVarInt(playerid, "DeliveryBike") != vehicleid && GetPVarInt(playerid, "DeliveryBike") != 0)
	    {
			SetVehicleToRespawn(GetPVarInt(playerid, "DeliveryBike"));
			DisablePlayerCheckpoint(playerid);
	 		DeletePVar(playerid, "DeliveryBike");
			DeletePVar(playerid, "DeliveryID");
		 	DeletePVar(playerid, "DeliveryPayment");
    		SendClientMessageEx(playerid, COLOR_YELLOW, "Your previous delivery was cancelled due to you entering another vehicle.");
	    }
	    else if(IsATruckerVehicle(vehicleid))
	    {
	        if(PlayerInfo[playerid][pJob] == 1)
	        {
		        if(GetPVarInt(playerid, "RouteTruck") != vehicleid)
		        {
			        SendClientMessageEx(playerid, COLOR_ORANGE, "MISSION:{FFFFFF} You are currently not on a trucking mission.");
			        SendClientMessageEx(playerid, COLOR_ORANGE, "MISSION:{FFFFFF} Please type /startroute to carry on a mission.");
			        VehicleInfo[vehicleid][vEngine] = 0;
					VehicleInfo[vehicleid][vLights] = 0;
				}
				else
				{
			        SendClientMessageEx(playerid, COLOR_ORANGE, "MISSION:{FFFFFF} You are currently on a trucking mission.");
			        SendClientMessageEx(playerid, COLOR_ORANGE, "MISSION:{FFFFFF} To cancel the mission, please type /cancel route.");
			        VehicleInfo[vehicleid][vEngine] = 1;
					VehicleInfo[vehicleid][vLights] = 1;
				}
				SetVehicleParamsEx(vehicleid, VehicleInfo[vehicleid][vEngine], VehicleInfo[vehicleid][vLights], VehicleInfo[vehicleid][vAlarm], VehicleInfo[vehicleid][vDoors], VehicleInfo[vehicleid][vBonnet], VehicleInfo[vehicleid][vBoot], VehicleInfo[vehicleid][vObjective]);
			}
			else
			{
				RemovePlayerFromVehicleEx(playerid);
		    	SendClientMessageEx(playerid, COLOR_GREY, "You are not a Trucker.");
			}
	    }
	    else if(GetPVarInt(playerid, "RouteTruck") != vehicleid && GetPVarInt(playerid, "RouteTruck") != 0)
	    {
			SetVehicleToRespawn(GetPVarInt(playerid, "RouteTruck"));
			DisablePlayerCheckpoint(playerid);
	 		DeletePVar(playerid, "RouteTruck");
			DeletePVar(playerid, "RouteId");
		 	DeletePVar(playerid, "RoutePayment");
    		SendClientMessageEx(playerid, COLOR_YELLOW, "Your previous trucker mission was cancelled due to you entering another vehicle.");
	    }
	    else if(IsAStreetSweeper(vehicleid))
	    {
    		if(PlayerInfo[playerid][pJob] == 4)
	    	{
		        if(GetPVarInt(playerid, "SweepingDuty") == 0)
		        {
			        SendClientMessageEx(playerid, COLOR_ORANGE, "SERVER:{FFFFFF} You are currently not on a sweeping mission.");
			        SendClientMessageEx(playerid, COLOR_ORANGE, "SERVER:{FFFFFF} Please type /startsweeping to carry on a route.");
			        VehicleInfo[vehicleid][vEngine] = 0;
					VehicleInfo[vehicleid][vLights] = 0;
					SetVehicleParamsEx(vehicleid, VehicleInfo[vehicleid][vEngine], VehicleInfo[vehicleid][vLights], VehicleInfo[vehicleid][vAlarm], VehicleInfo[vehicleid][vDoors], VehicleInfo[vehicleid][vBonnet], VehicleInfo[vehicleid][vBoot], VehicleInfo[vehicleid][vObjective]);
				}
			}
			else
			{
				RemovePlayerFromVehicleEx(playerid);
		    	SendClientMessageEx(playerid, COLOR_GREY, "You are not a Street Sweeper.");
			}
	    }

	    else if(IsADmvCar(vehicleid))
	    {
		    if(LicenseTestAC[playerid] == 4)
		    {
		        VehicleInfo[vehicleid][vEngine] = 0;
				VehicleInfo[vehicleid][vLights] = 0;
				SetVehicleParamsEx(vehicleid, VehicleInfo[vehicleid][vEngine], VehicleInfo[vehicleid][vLights], VehicleInfo[vehicleid][vAlarm], VehicleInfo[vehicleid][vDoors], VehicleInfo[vehicleid][vBonnet], VehicleInfo[vehicleid][vBoot], VehicleInfo[vehicleid][vObjective]);
		        if(PlayerInfo[playerid][pDriverLicense] == 0) return SendClientMessageEx(playerid, COLOR_ORANGE, "SERVER:{FFFFFF} If you would like to obtain one by taking the driver test, type /taketest.");
				else
				{
					RemovePlayerFromVehicleEx(playerid);
				    SendClientMessageEx(playerid, COLOR_ORANGE, "SERVER:{FFFFFF} You already have a drivers license, theres no need for you to repeat the test.");
				}
			}
			else
			{
				RemovePlayerFromVehicleEx(playerid);
		        SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use that vehicle! (/licensetest inside DMV)");
			}
	    }
    	else if(IsACopCar(vehicleid) && PlayerInfo[playerid][pFaction] != 1)
		{
			RemovePlayerFromVehicleEx(playerid);
		    SendClientMessageEx(playerid, COLOR_GREY, "You are not in the Los Santos Police Department.");
		}
    	else if(IsAmbulance(vehicleid) && PlayerInfo[playerid][pFaction] != 3)
		{
			RemovePlayerFromVehicleEx(playerid);
		    SendClientMessageEx(playerid, COLOR_GREY, "You are not in the Los Santos Fire and Medical Department.");
		}
    	else if(IsAFBICar(vehicleid) && PlayerInfo[playerid][pFaction] != 6)
		{
			RemovePlayerFromVehicleEx(playerid);
		    SendClientMessageEx(playerid, COLOR_GREY, "You are not in the Federal Bureau of Investigation.");
		}
    	else if(IsAPaCar(vehicleid) && PlayerInfo[playerid][pFaction] != 2)
		{
			RemovePlayerFromVehicleEx(playerid);
		    SendClientMessageEx(playerid, COLOR_GREY, "You are not in the Executive Branch.");
		}
		else if(IsATaxiCar(vehicleid) && PlayerInfo[playerid][pJob] != 5)
		{
			RemovePlayerFromVehicleEx(playerid);
   			SendClientMessageEx(playerid, COLOR_GREY, "You are not in the Taxi Company.");
		}
		else if(!IsRunnableEngine(vehicleid) && VehicleInfo[vehicleid][vEngine] == 0)
		{
			GetVehicleParamsEx(vehicleid, VehicleInfo[vehicleid][vEngine], VehicleInfo[vehicleid][vLights], VehicleInfo[vehicleid][vAlarm], VehicleInfo[vehicleid][vDoors], VehicleInfo[vehicleid][vBonnet], VehicleInfo[vehicleid][vBoot], VehicleInfo[vehicleid][vObjective]);
			VehicleInfo[vehicleid][vEngine] = 1;
			VehicleInfo[vehicleid][vLights] = 1;
		 	SetVehicleParamsEx(vehicleid, VehicleInfo[vehicleid][vEngine], VehicleInfo[vehicleid][vLights], VehicleInfo[vehicleid][vAlarm], VehicleInfo[vehicleid][vDoors], VehicleInfo[vehicleid][vBonnet], VehicleInfo[vehicleid][vBoot], VehicleInfo[vehicleid][vObjective]);
		}
		else if(VehicleInfo[vehicleid][vEngine] == 0)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "This vehicle's engine is not running - if you wish to start it, type /car engine.");
		}
	}
	else if(newstate == PLAYER_STATE_PASSENGER)
	{
 		if(SpectatingAdmin[playerid] != INVALID_PLAYER_ID)
	    {
	        if(SpectatingPlayer[SpectatingAdmin[playerid]] == playerid)
	        {
	        	PlayerSpectateVehicle(SpectatingAdmin[playerid], GetPlayerVehicleID(playerid));
	        }
	    }
	    
	    if(IsATaxiCar(GetPlayerVehicleID(playerid)))
	    {
	        new
				tDriver = GetVehicleDriver(GetPlayerVehicleID(playerid));
	        if(tDriver != INVALID_PLAYER_ID && PlayerInfo[tDriver][pJob] == 5)
	        {
	            if(PlayerInfo[tDriver][pDuty] == 1 && gTaxiFareAmount[tDriver] > 0)
	            {
	                new
	                    string[128];
					format(string, sizeof(string), "You have entered a certified Taxi Company cab, it will cost you $%d per/km ($%d every second)", gTaxiFareAmount[tDriver], gTaxiFareAmount[tDriver]);
	                SendClientMessage(playerid, COLOR_WHITE, string);
					format(string, sizeof(string), "A customer has entered your cab, they will pay you $%d per/km ($%d every second)", gTaxiFareAmount[tDriver], gTaxiFareAmount[tDriver]);
	                SendClientMessage(tDriver, COLOR_WHITE, string);
                	TaxiRouteTimerEx[playerid] = repeat TaxiRoute(playerid, tDriver);
                }
	        }
	    }
	}
	else if(newstate == PLAYER_STATE_ONFOOT)
	{
		if(SpectatingAdmin[playerid] != INVALID_PLAYER_ID)
	    {
            if(SpectatingPlayer[SpectatingAdmin[playerid]] == playerid)
            {
	        	PlayerSpectatePlayer(SpectatingAdmin[playerid], playerid);
	        }
	    }
	}
	return 1;
}

timer TaxiRoute[3000](playerid, driverid)
{
	new string[32];
	if(!IsPlayerConnectedEx(driverid) || GetPlayerVehicleID(driverid) != GetPlayerVehicleID(playerid) || PlayerInfo[driverid][pDuty] == 0)
	{
		format(string, sizeof(string), "~w~Total: ~r~$%d", gTaxiFareAmount[driverid] * TaxiSeconds[playerid]);
		GameTextForPlayer(playerid, string, 6000, 6);
	    TaxiSeconds[playerid] = 0;
		stop TaxiRouteTimerEx[playerid];
		return 0;
	}
	else if(!IsPlayerConnectedEx(playerid) || GetPlayerVehicleID(playerid) != GetPlayerVehicleID(driverid))
	{
		format(string, sizeof(string), "~w~Total: ~r~$%d", gTaxiFareAmount[driverid] * TaxiSeconds[playerid]);
		GameTextForPlayer(playerid, string, 6000, 6);
		GameTextForPlayer(driverid, string, 6000, 6);
		TaxiSeconds[playerid] = 0;
		stop TaxiRouteTimerEx[playerid];
		return 0;
	}
	else if(PlayerInfo[playerid][pMoney] < gTaxiFareAmount[driverid] * 3)
	{
	    SendClientMessage(driverid, COLOR_WHITE, "Your client does not have anymore funds to cover the transport fee, you will not be paid anymore.");
		TaxiSeconds[playerid] = 0;
		stop TaxiRouteTimerEx[playerid];
		return 0;
	}
	TaxiSeconds[playerid] += 3;
	format(string, sizeof(string), "~w~Total: ~r~$%d", gTaxiFareAmount[driverid] * TaxiSeconds[playerid]);
	GameTextForPlayer(playerid, string, 3000, 6);
	GivePlayerCash(playerid, -gTaxiFareAmount[driverid] * 3);
    gTaxiFareEarnings[driverid] += gTaxiFareAmount[driverid] * 3;
    return 1;
}

CMD:dmvmenu(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 4.0, 1491.242, 1307.601, 1093.289)) return SendClientMessageEx(playerid, COLOR_GREY, "You must be at the DMV to use this command.");
	new string[128];
    for(new i=0; i < MAX_PLAYEROWNED_VEHICLES; i++)
    {
        if(PlayerVehicleInfo[playerid][i][pvModelId] != 0)
		{
		    if(PlayerVehicleInfo[playerid][i][pvImpounded] == 1)
		    	format(string, sizeof(string), "%s(ID: %d) %s (Release for $1,000)\n", string, i, VehicleNames[PlayerVehicleInfo[playerid][i][pvModelId] - 400]);
			else if(PlayerVehicleInfo[playerid][i][pvTicketPrice] > 0)
		    	format(string, sizeof(string), "%s(ID: %d) %s (Pay tickets: $%d)\n", string, i, VehicleNames[PlayerVehicleInfo[playerid][i][pvModelId] - 400], PlayerVehicleInfo[playerid][i][pvTicketPrice]);
			else
		    	format(string, sizeof(string), "%s(ID: %d) %s\n", string, i, VehicleNames[PlayerVehicleInfo[playerid][i][pvModelId] - 400]);
		}
		else
		{
		    format(string, sizeof(string), "%s(ID: %d) Empty\n", string, i);
		}
    }
    ShowPlayerDialogEx(playerid, DIALOG_DMV_IMPOUND, DIALOG_STYLE_LIST, "DMV Menu", string, "Select", "Cancel");
	return 1;
}

CMD:taketest(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if(IsADmvCar(vehicleid) && PlayerInfo[playerid][pDriverLicense] == 0)
	{
	    if(HasActiveCheckpoint(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You already have an existing checkpoint, type /killcheckpoint to delete it.");
	    else if(GetPVarInt(playerid, "TakingDMVTest") == 0)
	    {
	 		VehicleInfo[vehicleid][vStarted] = 1;
	 		VehicleInfo[vehicleid][vEngine] = 1;
			VehicleInfo[vehicleid][vLights] = 1;
	   		VehicleInfo[vehicleid][vFuel] = 100;
			SetVehicleParamsEx(vehicleid, VehicleInfo[vehicleid][vEngine], VehicleInfo[vehicleid][vLights], VehicleInfo[vehicleid][vAlarm], VehicleInfo[vehicleid][vDoors], VehicleInfo[vehicleid][vBonnet], VehicleInfo[vehicleid][vBoot], VehicleInfo[vehicleid][vObjective]);
			SendClientMessageEx(playerid, COLOR_WHITE, "Examiner: You have started the driving test, you must complete the route given.");
			SendClientMessageEx(playerid, COLOR_WHITE, "Examiner: If you complete the route given, you will be awarded with a driving license.");
			SendClientMessageEx(playerid, COLOR_LIGHTRED, "HINT: Follow the red marker on your radar.");
			SetPlayerCheckpoint(playerid, DMVCheckpoints[0][0], DMVCheckpoints[0][1], DMVCheckpoints[0][2], 5.0);
			SetPVarInt(playerid, "TakingDMVTest", 1);
			SetPVarInt(playerid, "DMVStage", 0);
			return 1;
		}
		SendClientMessageEx(playerid, COLOR_GREY, "You are already taking the test.");
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_WHITE, "You are not inside a DMV testing vehicle.");
	}
	return 1;
}

CMD:startdelivery(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] == 3)
	{
	    if(IsAPizzaBike(GetPlayerVehicleID(playerid)))
	    {
	    	if(HasActiveCheckpoint(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You already have an existing checkpoint, type /killcheckpoint to delete it.");
	        else if(GetPVarInt(playerid, "DeliveryID") == 0)
	        {
				new rand = random(sizeof(PizzaDeliveryLocations))+1, vehicleid = GetPlayerVehicleID(playerid);
				SetPlayerCheckpoint(playerid, PizzaDeliveryLocations[rand - 1][0], PizzaDeliveryLocations[rand - 1][1], PizzaDeliveryLocations[rand - 1][2], 3.0);
			    
			    VehicleInfo[vehicleid][vStarted] = 1;
			    VehicleInfo[vehicleid][vFuel] = 100;
			    VehicleInfo[vehicleid][vEngine] = 1;
				VehicleInfo[vehicleid][vLights] = 1;
				SetVehicleParamsEx(vehicleid, VehicleInfo[vehicleid][vEngine], VehicleInfo[vehicleid][vLights], VehicleInfo[vehicleid][vAlarm], VehicleInfo[vehicleid][vDoors], VehicleInfo[vehicleid][vBonnet], VehicleInfo[vehicleid][vBoot], VehicleInfo[vehicleid][vObjective]);

				SetPVarInt(playerid, "DeliveryID", rand);
				SetPVarInt(playerid, "DeliveryBike", vehicleid);

	            SendClientMessageEx(playerid, COLOR_ORANGE, "DELIVERY:{FFFFFF} Deliver the pizza to the destination, please check the red marker.");
	            SendClientMessageEx(playerid, COLOR_ORANGE, "SALARY:{FFFFFF} You will receive your pay upon delivery of the pizza.");
            }
            else
            {
                SendClientMessageEx(playerid, COLOR_GREY, "You are already on a delivery, type /cancel delivery to cancel the delivery.");
            }
	    }
	    else
	    {
	        SendClientMessageEx(playerid, COLOR_GREY, "You are not inside a pizza bike, visit idlewood.");
	    }
	}
	else
	{
 		SendClientMessageEx(playerid, COLOR_GREY, "You are not a Pizza Boy.");
	}
	return 1;
}

CMD:startroute(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] == 1)
	{
	    if(IsATruckerVehicle(GetPlayerVehicleID(playerid)))
	    {
	    	if(HasActiveCheckpoint(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You already have an existing checkpoint, type /killcheckpoint to delete it.");
	        else if(GetPVarInt(playerid, "RouteId") == 0)
	        {
				new rand = random(sizeof(TruckRouteLocations))+1, vehicleid = GetPlayerVehicleID(playerid);
				SetPlayerCheckpoint(playerid, TruckRouteLocations[rand - 1][0], TruckRouteLocations[rand - 1][1], TruckRouteLocations[rand - 1][2], 3.0);

				GetVehicleParamsEx(vehicleid, VehicleInfo[vehicleid][vEngine], VehicleInfo[vehicleid][vLights], VehicleInfo[vehicleid][vAlarm], VehicleInfo[vehicleid][vDoors], VehicleInfo[vehicleid][vBonnet], VehicleInfo[vehicleid][vBoot], VehicleInfo[vehicleid][vObjective]);
			    VehicleInfo[vehicleid][vStarted] = 1;
			    VehicleInfo[vehicleid][vFuel] = 100;
			    VehicleInfo[vehicleid][vEngine] = 1;
				VehicleInfo[vehicleid][vLights] = 1;
				SetVehicleParamsEx(vehicleid, VehicleInfo[vehicleid][vEngine], VehicleInfo[vehicleid][vLights], VehicleInfo[vehicleid][vAlarm], VehicleInfo[vehicleid][vDoors], VehicleInfo[vehicleid][vBonnet], VehicleInfo[vehicleid][vBoot], VehicleInfo[vehicleid][vObjective]);

				SetPVarInt(playerid, "RouteId", rand);
				SetPVarInt(playerid, "RouteTruck", vehicleid);

	            SendClientMessageEx(playerid, COLOR_ORANGE, "MISSION:{FFFFFF} Deliver the goods to the checkpoint, your destination has been marked on your GPS.");
	            SendClientMessageEx(playerid, COLOR_ORANGE, "SALARY:{FFFFFF} You will receive your salary when you have delivered the goods and returned the truck.");
            }
            else
            {
                SendClientMessageEx(playerid, COLOR_GREY, "You are already on a mission, type /cancel route to cancel the mission.");
            }
	    }
	    else
	    {
	        SendClientMessageEx(playerid, COLOR_GREY, "You are not inside a truck, visit the trucker factory.");
	    }
	}
	else
	{
 		SendClientMessageEx(playerid, COLOR_GREY, "You are not a Trucker.");
	}
	return 1;
}

CMD:startsweeping(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] == 4)
	{
	    if(IsAStreetSweeper(GetPlayerVehicleID(playerid)))
	    {
	    	if(HasActiveCheckpoint(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You already have an existing checkpoint, type /killcheckpoint to delete it.");
	        else if(GetPVarInt(playerid, "SweepingDuty") == 0)
	        {
				new vehicleid = GetPlayerVehicleID(playerid),
					route = random(sizeof(SweeperRoutes));

			    VehicleInfo[vehicleid][vStarted] = 1;
			    VehicleInfo[vehicleid][vFuel] = 100;
			    VehicleInfo[vehicleid][vEngine] = 1;
				VehicleInfo[vehicleid][vLights] = 1;
				SetVehicleParamsEx(vehicleid, VehicleInfo[vehicleid][vEngine], VehicleInfo[vehicleid][vLights], VehicleInfo[vehicleid][vAlarm], VehicleInfo[vehicleid][vDoors], VehicleInfo[vehicleid][vBonnet], VehicleInfo[vehicleid][vBoot], VehicleInfo[vehicleid][vObjective]);

				SetPVarInt(playerid, "RouteStage", 0);
				SetPVarInt(playerid, "SweepingDuty", 1);
				SetPVarInt(playerid, "SweeperRoute", route);
				SetPlayerCheckpoint(playerid, SweeperRoutes[route][0][0], SweeperRoutes[route][0][1], SweeperRoutes[route][0][2], 3.0);

	            SendClientMessageEx(playerid, COLOR_ORANGE, "DELIVERY:{FFFFFF} Complete the route given on the radar, and return back to the company.");
	            SendClientMessageEx(playerid, COLOR_ORANGE, "SALARY:{FFFFFF} You will receive your pay upon return of the vehicle.");
            }
            else
            {
                SendClientMessageEx(playerid, COLOR_GREY, "You are already on a route, type /cancel route to cancel the current route.");
            }
	    }
	    else
	    {
	        SendClientMessageEx(playerid, COLOR_GREY, "You are not inside a street sweeper vehicle.");
	    }
	}
	else
	{
 		SendClientMessageEx(playerid, COLOR_GREY, "You are not a Street Sweeper.");
	}
	return 1;
}

CMD:accent(playerid, params[])
{
	new string[128];
	if(isnull(params))
	{
 		SendClientMessageEx(playerid, COLOR_GREY, "Usage: /accent [accent id]");
 		SendClientMessageEx(playerid, COLOR_FADE2, "(0) Normal, (1) American, (2) British, (3) Australian, (4) Canadian, (5) Irish");
 		SendClientMessageEx(playerid, COLOR_FADE2, "(6) Spanish, (7) Arabic, (8) Italian, (9) Asian, (10) Scottish, (11) Russian");
 		SendClientMessageEx(playerid, COLOR_FADE2, "(12) Pakistan, (13) Indian");
   	}
   	else if(strval(params) < 0 || strval(params) > MAX_ACCENTS) return SendClientMessageEx(playerid, COLOR_GREY, "Please enter a valid accent id.");
	PlayerInfo[playerid][pAccent] = strval(params);
	format(string, sizeof(string), "You have changed your accent to: %s.", GetPlayerAccent(playerid));
	SendClientMessageEx(playerid, COLOR_FADE1, string);
    return 1;
}

stock GetPlayerAccent(playerid)
{
	new string[16];
	switch(PlayerInfo[playerid][pAccent])
	{
	    case 1: { format(string, sizeof(string), "American"); }
	    case 2: { format(string, sizeof(string), "British"); }
	    case 3: { format(string, sizeof(string), "Australian"); }
	    case 4: { format(string, sizeof(string), "Canadian"); }
	    case 5: { format(string, sizeof(string), "Irish"); }
	    case 6: { format(string, sizeof(string), "Spanish"); }
	    case 7: { format(string, sizeof(string), "Arabic"); }
	    case 8: { format(string, sizeof(string), "Italian"); }
	    case 9: { format(string, sizeof(string), "Asian"); }
	    case 10: { format(string, sizeof(string), "Scottish"); }
	    case 11: { format(string, sizeof(string), "Russian"); }
	    case 12: { format(string, sizeof(string), "Japanese"); }
	    case 13: { format(string, sizeof(string), "Indian"); }
	    default: { format(string, sizeof(string), "Normal"); }
	}
	return string;
}

CMD:nos(playerid, params[])
{
	new string[128];
	if(PlayerInfo[playerid][pJob] != 2 && !IsAdmin(playerid, ADMIN_LEVEL_JUNIORADMIN)) return SendClientMessageEx(playerid, COLOR_GREY, "You are not a Mechanic.");
    else if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_FADE1, "You can't use this command outside of a vehicle.");
    else if(!IsCar(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_GREY, "You can't use this command on this vehicle.");
    else if(GetVehicleComponentInSlot(GetPlayerVehicleID(playerid), GetVehicleComponentType(1010)) == 1010) return SendClientMessage(playerid, COLOR_GREY, "This vehicle already has nitrous.");
	AddVehicleComponent(GetPlayerVehicleID(playerid), 1010);
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
    format(string, sizeof(string), "* %s added nitrous injection to the vehicle.", GetPlayerNameEx(playerid));
    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	return 1;
}

/*CMD:fix(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] != 2 && !IsAdmin(playerid, ADMIN_LEVEL_JUNIORADMIN)) return SendClientMessageEx(playerid, COLOR_GREY, "You are not a Mechanic.");
    else if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_FADE1, "You can't repair while inside the vehicle.");
   	new string[128];
	if(GetPVarInt(playerid, "MechTime"))
	{
		format(string, sizeof(string), "You must wait %d seconds before fixing another vehicle.", GetPVarInt(playerid, "MechTime"));
		SendClientMessage(playerid, COLOR_FADE1,string);
	}
	else
	{
		new closestcar = GetClosestCar(playerid);
  		if(closestcar == INVALID_VEHICLE_ID) return SendClientMessage(playerid, COLOR_FADE1, "You're not close enough to any vehicle.");
		else if(VehicleInfo[closestcar][vBonnet] == 0) return SendClientMessage(playerid, COLOR_FADE1, "The vehicle hood must be opened in order to repair it.");
  		SetPVarInt(playerid, "MechTime", 60);
   		SetVehicleHealth(closestcar, 1000.0);
		VehicleInfo[closestcar][vTotalled] = 0;
    	format(string, sizeof(string), "* %s has repaired the vehicle.", GetPlayerNameEx(playerid));
    	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    }
	return 1;
}*/

CMD:repair(playerid, params[])
{
   	new string[128], targetid, item[8];
	if(PlayerInfo[playerid][pJob] != 2) return SendClientMessageEx(playerid, COLOR_GREY, "You are not a Mechanic.");
	if(sscanf(params, "us[8]", targetid, item)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /repair <playerid> <item: bodykit, engine>");
	else if(!IsPlayerConnectedEx(targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
	else if(playerid == targetid) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot use this command on yourself.");
	else if(!IsPlayerInAnyVehicle(targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "The specified player is not in a vehilce.");
	if(GetPVarInt(playerid, "MechTime"))
	{
		format(string, sizeof(string), "You must wait %d seconds before repairing another vehicle.", GetPVarInt(playerid, "MechTime"));
		SendClientMessageEx(playerid, COLOR_FADE1,string);
		return 1;
	}
	if(!strcmp(item, "bodykit", true))
	{
		format(string, sizeof(string), "You have offered %s a repair of the body kit of their car.", GetPlayerNameEx(targetid));
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "Mechanic %s has offered you a repair of the body kit on your car (/accept mechanic).", GetPlayerNameEx(playerid));
		SendClientMessageEx(targetid, COLOR_LIGHTBLUE, string);
		SetPVarInt(targetid, "MechOffer", playerid);
		SetPVarInt(targetid, "MechOfferType", 1);
		SetPVarInt(playerid, "MechTime", 60);
	}
	else if(!strcmp(item, "engine", true))
	{
		format(string, sizeof(string), "You have offered %s a repair of the engine of their car.", GetPlayerNameEx(targetid));
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "Mechanic %s has offered you a repair of the engine on your car (/accept mechanic).", GetPlayerNameEx(playerid));
		SendClientMessageEx(targetid, COLOR_LIGHTBLUE, string);
		SetPVarInt(targetid, "MechOffer", playerid);
		SetPVarInt(targetid, "MechOfferType", 2);
		SetPVarInt(playerid, "MechTime", 60);
	}
	return 1;
}

CMD:cancel(playerid, params[])
{
	if(sscanf(params, "{s[32]}")) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /cancel [delivery, route, contract, report]");
	
	if(!strcmp(params, "delivery", true))
	{
		if(GetPVarInt(playerid, "DeliveryID") != 0)
  		{
			SetVehicleToRespawn(GetPVarInt(playerid, "DeliveryBike"));
	 		DeletePVar(playerid, "DeliveryBike");
			DeletePVar(playerid, "DeliveryID");
		 	DeletePVar(playerid, "DeliveryPayment");
    		SendClientMessageEx(playerid, COLOR_GREY, "You have successfully cancelled the delivery.");
			DisablePlayerCheckpoint(playerid);
  		}
	}
	else if(!strcmp(params, "route", true))
	{
		if(GetPVarInt(playerid, "RouteId") != 0)
  		{
			SetVehicleToRespawn(GetPVarInt(playerid, "RouteTruck"));
	 		DeletePVar(playerid, "RouteTruck");
			DeletePVar(playerid, "RouteId");
		 	DeletePVar(playerid, "RoutePayment");
    		SendClientMessageEx(playerid, COLOR_GREY, "You have successfully cancelled the trucker mission.");
			DisablePlayerCheckpoint(playerid);
  		}
	}
	else if(!strcmp(params, "report", true))
	{
		DeleteReport(playerid);
    	SendClientMessageEx(playerid, COLOR_WHITE, "You have successfully cancelled your report.");
	}
	else if(!strcmp(params, "contract", true))
	{
	    if(HitmanTarget[playerid] != INVALID_PLAYER_ID)
	    {
			if(!IsPlayerInRangeOfPoint(playerid, 2.5, 1510.8628, -1606.6337, 14.0469)) return SendClientMessageEx(playerid, COLOR_GREY, "You are not at the mailbox.");
			HitmanTarget[playerid] = INVALID_PLAYER_ID;
    		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You have cancelled the contract.");
		}
	}
	return 1;
}

public OnPlayerEnterCheckpoint(playerid)
{
	if(GetPVarInt(playerid, "MedicCall") > 0)
	{
		if(!IsPlayerConnectedEx(GetPVarInt(playerid, "MedicCall") - 1) || GetPVarInt(GetPVarInt(playerid, "MedicCall") - 1, "RequireMedicalAssistance") == 0)
		{
    		DeletePVar(playerid, "MedicCall");
	    	DisablePlayerCheckpoint(playerid);
    		SendClientMessageEx(playerid, COLOR_LIGHTRED, "You arrived too late, the patient died due to lack of medical support.");
			return 1;
		}
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "You arrived at the location of the patient.");
		GameTextForPlayer(GetPVarInt(playerid, "MedicCall"), "~g~Rescued~n~~w~Awaiting Treatment...", 4000, 3);
	    SetPlayerHealthEx(GetPVarInt(playerid, "MedicCall"), 100);
    	DeletePVar(GetPVarInt(playerid, "MedicCall"), "MedicId");
    	DeletePVar(playerid, "MedicCall");
	    DisablePlayerCheckpoint(playerid);
		return 1;
	}
	else if(GetPVarInt(playerid, "DeliveryPayment") == 1)
	{
	    if(GetPlayerVehicleID(playerid) == GetPVarInt(playerid, "DeliveryBike"))
	    {
	 		new deliveryid = GetPVarInt(playerid, "DeliveryID") - 1, string[128];
	 		new salary = GetDistanceBetweenTwoPoints(2110.23, -1775.27, 13.39, PizzaDeliveryLocations[deliveryid][0], PizzaDeliveryLocations[deliveryid][1], PizzaDeliveryLocations[deliveryid][2])/20;
			PlayerInfo[playerid][pPaycheck] += salary;
		    SendClientMessageEx(playerid, COLOR_ORANGE, "DELIVERY:{FFFFFF} You have succesfully completed the delivery.");
		    format(string, sizeof(string), "SALARY:{FFFFFF} An amount of $%i has been added to your paycheck for completing the mission.", salary);
		    SendClientMessageEx(playerid, COLOR_ORANGE, string);
		    SetVehicleToRespawn(GetPVarInt(playerid, "DeliveryBike"));
		}
		else
		{
	  		SendClientMessageEx(playerid, COLOR_ORANGE, "DELIVERY: The delivery was cancelled because you failed to return the bike.");
		}
	 	DeletePVar(playerid, "DeliveryBike");
		DeletePVar(playerid, "DeliveryID");
		DeletePVar(playerid, "DeliveryPayment");
	}
	else if(GetPVarInt(playerid, "DeliveryID") != 0)
	{
	    new
	        Float:tmpFloats[3];
		GetVehiclePos(GetPVarInt(playerid, "DeliveryBike"), tmpFloats[0], tmpFloats[1], tmpFloats[2]);
		if(IsPlayerInRangeOfPoint(playerid, 25.0, tmpFloats[0], tmpFloats[1], tmpFloats[2]))
		{
			SendClientMessageEx(playerid, COLOR_ORANGE, "DELIVERY: You have delivered the pizza, now return the bike back to the pizza store to receive your pay.");
			SetPVarInt(playerid, "DeliveryPayment", 1);
			DisablePlayerCheckpoint(playerid);
			return SetPlayerCheckpoint(playerid, 2110.23, -1775.27, 13.39, 4.0);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_ORANGE, "DELIVERY: The delivery was cancelled because you failed the pizza delivery.");
			DeletePVar(playerid, "DeliveryBike");
			DeletePVar(playerid, "DeliveryID");
			DeletePVar(playerid, "DeliveryPayment");
		}
 	}
	else if(GetPVarInt(playerid, "RoutePayment") == 1)
	{
	    if(GetPlayerVehicleID(playerid) == GetPVarInt(playerid, "RouteTruck"))
	    {
	 		new deliveryid = GetPVarInt(playerid, "RouteId") - 1, string[128];
	 		new salary = GetDistanceBetweenTwoPoints(-79.73, -1128.85, 1.08, TruckRouteLocations[deliveryid][0], TruckRouteLocations[deliveryid][1], TruckRouteLocations[deliveryid][2])/20;
	 		PlayerInfo[playerid][pPaycheck] += salary;
		    SendClientMessageEx(playerid, COLOR_ORANGE, "MISSION:{FFFFFF} You have succesfully completed the mission.");
		    format(string, sizeof(string), "SALARY:{FFFFFF} You have earned $%d for the delivery.", salary);
		    SendClientMessageEx(playerid, COLOR_ORANGE, string);
		    SetVehicleToRespawn(GetPVarInt(playerid, "RouteTruck"));
		}
		else
		{
	  		SendClientMessageEx(playerid, COLOR_ORANGE, "MISSION:{FFFFFF} You have failed the trucker mission because you failed to return the truck.");
		}
		DeletePVar(playerid, "RouteTruck");
		DeletePVar(playerid, "RouteId");
		DeletePVar(playerid, "RoutePayment");
	}
	else if(GetPVarInt(playerid, "RouteId") != 0)
	{
		if(IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleID(playerid) == GetPVarInt(playerid, "RouteTruck"))
		{
			SendClientMessageEx(playerid, COLOR_ORANGE, "MISSION:{FFFFFF} You have delivered the goods, now return the truck back to the factory to receive your pay.");
			SetPVarInt(playerid, "RoutePayment", 1);
			DisablePlayerCheckpoint(playerid);
			return SetPlayerCheckpoint(playerid, -79.73, -1128.85, 1.08, 4.0);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_ORANGE, "MISSION:{FFFFFF} You have failed the trucker mission because you failed to deliver the goods.");
			DeletePVar(playerid, "RouteTruck");
			DeletePVar(playerid, "RouteId");
			DeletePVar(playerid, "RoutePayment");
		}
 	}
	else if(GetPVarInt(playerid, "SellingCar") == 1)
	{
	    new Float:vhealth, string[128];
	    DeletePVar(playerid, "SellingCar");
	    GetVehicleHealth(GetPlayerVehicleID(playerid), vhealth);
	    new salary = random(100) + floatround((vhealth / 5)/2);
	    PlayerInfo[playerid][pPaycheck] += salary;
	    if(!IsPlayerInAnyVehicle(playerid)) return DisablePlayerCheckpoint(playerid);
	   	SetVehicleToRespawn(GetPlayerVehicleID(playerid));
	    PlayerInfo[playerid][pJackedCar] = gettime() + 900;
	    format(string, sizeof(string), "SALARY:{FFFFFF}You have received $%i for the delivery of the vehicle.", salary);
	    SendClientMessageEx(playerid, COLOR_ORANGE, string);
	    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
    }
	else if(GetPVarInt(playerid, "TakingDMVTest") == 1)
	{
	    new DMVStage = GetPVarInt(playerid, "DMVStage");
	    if(DMVStage == 9)
		{
		    new Float:vhealth;
		    GetVehicleHealth(GetPlayerVehicleID(playerid), vhealth);
		    if(vhealth < 950)
		    {
		      	SendClientMessageEx(playerid, COLOR_WHITE, "Examiner: You have failed the driving test because the vehicle has been damaged.");
		      	SendClientMessageEx(playerid, COLOR_WHITE, "Examiner: You have been charged $10 for damages. Good luck next time.");
		       	PlayerInfo[playerid][pDriverLicense] = 0;
		       	SetVehicleToRespawn(GetPlayerVehicleID(playerid));
		       	DisablePlayerCheckpoint(playerid);
			    DeletePVar(playerid, "DMVStage");
			    DeletePVar(playerid, "TakingDMVTest");
			    GivePlayerCash(playerid, -10);
		    }
		    else
		    {
		      	SendClientMessageEx(playerid, COLOR_WHITE, "Examiner: You have finished the driving test, and acquired a driving license.");
		      	SendClientMessageEx(playerid, COLOR_GREEN, "A driving license has been added to your inventory. You can use /showlicenses to display it.");
		       	PlayerInfo[playerid][pDriverLicense] = 1;
		       	SetVehicleToRespawn(GetPlayerVehicleID(playerid));
		       	DisablePlayerCheckpoint(playerid);
			    DeletePVar(playerid, "DMVStage");
			    DeletePVar(playerid, "TakingDMVTest");
			    GivePlayerCash(playerid, -25);
			}
		    return 1;
		}
		SetPVarInt(playerid, "DMVStage", DMVStage + 1);
		DMVStage = GetPVarInt(playerid, "DMVStage");
   		DisablePlayerCheckpoint(playerid);
		SetPlayerCheckpoint(playerid, DMVCheckpoints[DMVStage][0], DMVCheckpoints[DMVStage][1], DMVCheckpoints[DMVStage][2], 5.0);
		return 1;
	}
	else if(GetPVarInt(playerid, "SweepingDuty") == 1)
	{
 		new RouteStage = GetPVarInt(playerid, "RouteStage"),
 		    RouteId = GetPVarInt(playerid, "SweeperRoute");
		if(RouteStage >= 9)
		{
	       	SendClientMessageEx(playerid, COLOR_ORANGE, "ROUTE:{FFFFFF} The given route was completed, and marked off your radar.");
	       	SendClientMessageEx(playerid, COLOR_ORANGE, "SALARY:{FFFFFF} You have received a payment of $50 for completing the route.");
	       	PlayerInfo[playerid][pPaycheck] += 50;
	       	SetVehicleToRespawn(GetPlayerVehicleID(playerid));
	       	DisablePlayerCheckpoint(playerid);
		    DeletePVar(playerid, "SweepingDuty");
		    DeletePVar(playerid, "SweeperRoute");
		    DeletePVar(playerid, "RouteStage");
		}
		else
		{
			SetPVarInt(playerid, "RouteStage", RouteStage + 1);
			RouteStage = GetPVarInt(playerid, "RouteStage");
		    DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, SweeperRoutes[RouteId][RouteStage][0], SweeperRoutes[RouteId][RouteStage][1], SweeperRoutes[RouteId][RouteStage][2], 5.0);
		}
	    return 1;
	}
	else if(GetPVarInt(playerid, "TrackingCar") == 1)
	{
	    DeletePVar(playerid, "TrackingCar");
	    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
	}
	else if(GetPVarInt(playerid, "TaxiFindPlayer") == 1)
	{
	    DeletePVar(playerid, "TaxiFindPlayer");
	    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
	}
	else if(GetPVarInt(playerid, "UsingGps") == 1)
	{
	    DeletePVar(playerid, "UsingGps");
	    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
	}
    DisablePlayerCheckpoint(playerid);
	return 1;
}

CMD:killcheckpoint(playerid, params[])
{
	if(GetPVarInt(playerid, "DeliveryID") != 0 || GetPVarInt(playerid, "DeliveryPayment") == 1)
	{
		SetVehicleToRespawn(GetPVarInt(playerid, "DeliveryBike"));
		DeletePVar(playerid, "DeliveryBike");
		DeletePVar(playerid, "DeliveryID");
	 	DeletePVar(playerid, "DeliveryPayment");
	}
	else if(IsAStreetSweeper(GetPlayerVehicleID(playerid)) && GetPVarInt(playerid, "SweepingDuty") == 1)
	{
	    DeletePVar(playerid, "RouteStage");
	    DeletePVar(playerid, "SweepingDuty");
	    SetVehicleToRespawn(GetPlayerVehicleID(playerid));
	}
	else if(GetPVarInt(playerid, "RouteId") != 0 || GetPVarInt(playerid, "RoutePayment") == 1)
	{
	    SetVehicleToRespawn(GetPVarInt(playerid, "RouteTruck"));
		DeletePVar(playerid, "RouteTruck");
		DeletePVar(playerid, "RouteId");
		DeletePVar(playerid, "RoutePayment");
	}
	DeletePVar(playerid, "SweepingDuty");
	DeletePVar(playerid, "DeliveryID");
	DeletePVar(playerid, "TakingDMVTest");
	DeletePVar(playerid, "SellingCar");
	DeletePVar(playerid, "DeliveryPayment");
	DeletePVar(playerid, "TrackingCar");
	DeletePVar(playerid, "TaxiFindPlayer");
	DeletePVar(playerid, "UsingGps");
	DisablePlayerCheckpoint(playerid);
	SendClientMessageEx(playerid, COLOR_WHITE, "You have successfully killed all existing checkpoints, you may now use them again.");
	return 1;
}

public OnPlayerLeaveCheckpoint(playerid)
{
	return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
	return 1;
}

public OnPlayerLeaveRaceCheckpoint(playerid)
{
	return 1;
}

public OnRconCommand(cmd[])
{
	return 1;
}

public OnPlayerRequestSpawn(playerid)
{
	return 1;
}

public OnObjectMoved(objectid)
{
	return 1;
}

public OnPlayerObjectMoved(playerid, objectid)
{
	return 1;
}

public OnPlayerPickUpPickup(playerid, pickupid)
{
	return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
	SendClientMessageEx(playerid, COLOR_YELLOW, "Transfender:{FFFFFF} The modifications costed you $100.");
	GivePlayerCash(playerid, -100);
	return 1;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	SendClientMessageEx(playerid, COLOR_YELLOW, "Transfender:{FFFFFF} The paintjob costed you $50.");
	GivePlayerCash(playerid, -50);
	return 1;
}

Hook:paynspray_OnPlayerUpdate(playerid)
{
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {
		new Float:vHealth;
		GetVehicleHealth(GetPlayerVehicleID(playerid), vHealth);
		if(vHealth == 1000)
		{
			SetVehicleHealth(GetPlayerVehicleID(playerid), 999);

			new const Float:paynspray[][] = {
			{1025.05, -1024.23, 32.1}, // LS Temple
			{487.68, -1740.87, 11.13}, // LS Santa Maria
			{-1420.73, 2583.37, 55.56}, // El Quebrados
			{-1904.39, 284.97, 40.75}, // Wang Cars
			{-2425.91, 1022.33, 50.10}, // Juniper Hill
			{1975.60, 2162.16, 10.77}, // LV Redsands
			{2065.38, -1831.51, 13.25}, // Idlewood
			{-99.55, 1118.36, 19.44}, // Fort Carson
			{721.07, -455.94, 16.04}, // Dillimore
			{2393.74, 1493.01, 10.52} // LV Unused (Pyramid)
			};
			for(new i=0; i<sizeof(paynspray); i++)
			{
				if(IsPlayerInRangeOfPoint(playerid, 10, paynspray[i][0], paynspray[i][1], paynspray[i][2]))
				{
					CallRemoteFunction("OnVehicleRespray", "iiii", playerid, GetPlayerVehicleID(playerid), -1, -1);
					return 1;
				}
			}
		}
	}
	return 1;
}

stock paynspray_CreateVehicle(vehicletype, Float:x, Float:y, Float:z, Float:rotation, color1, color2, respawn_delay)
{
	new vid = CreateVehicle(vehicletype, x, y, z, rotation, color1, color2, respawn_delay);
	SetVehicleHealth(vid, 999);
	return vid;
}

#if defined _ALS_CreateVehicle
	#undef CreateVehicle
#else
	#define _ALS_CreateVehicle
#endif

#define CreateVehicle paynspray_CreateVehicle

stock paynspray_AddStaticVehicleEx(vehicletype, Float:x, Float:y, Float:z, Float:rotation, color1, color2, respawn_delay)
{
	new vid = AddStaticVehicleEx(vehicletype, x, y, z, rotation, color1, color2, respawn_delay);
	SetVehicleHealth(vid, 999);
	return vid;
}

#if defined _ALS_AddStaticVehicleEx
	#undef AddStaticVehicleEx
#else
	#define _ALS_AddStaticVehicleEx
#endif

#define AddStaticVehicleEx paynspray_AddStaticVehicleEx
stock paynspray_AddStaticVehicle(vehicletype, Float:x, Float:y, Float:z, Float:rotation, color1, color2)
{
        new vid = AddStaticVehicle(vehicletype, x, y, z, rotation, color1, color2);
        SetVehicleHealth(vid, 999);
        return vid;
}

#if defined _ALS_AddStaticVehicle
	#undef AddStaticVehicle
#else
	#define _ALS_AddStaticVehicle
#endif

#define AddStaticVehicle paynspray_AddStaticVehicle
public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	SendClientMessageEx(playerid, COLOR_YELLOW, "Pay 'n' Spray:{FFFFFF} The body kit and engine repairs costed you $100.");
	GivePlayerCash(playerid, -100);
	return 	1;
}

public OnPlayerSelectedMenuRow(playerid, row)
{
	return 1;
}

public OnPlayerExitedMenu(playerid)
{
	return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	if(SpectatingAdmin[playerid] != INVALID_PLAYER_ID)
	{
    	if(SpectatingPlayer[SpectatingAdmin[playerid]] == playerid)
     	{
     	    SetPlayerVirtualWorld(SpectatingAdmin[playerid], GetPlayerVirtualWorld(playerid));
     	    SetPlayerInterior(SpectatingAdmin[playerid], newinteriorid);
	    	PlayerSpectatePlayer(SpectatingAdmin[playerid], playerid);
		}
	}
	return 1;
}

public OnEnterExitModShop(playerid, enterexit, interiorid)
{
    return 1;
}

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
    return 1;
}

public OnPlayerGiveDamage(playerid, damagedid, Float: amount, weaponid)
{
	if(GetPVarInt(playerid, "TaserEquipped") == 1 && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
	    new Float:Position[3];
		GetPlayerPos(damagedid, Position[0], Position[1], Position[2]);
	    if(IsPlayerInRangeOfPoint(playerid, 5.0, Position[0], Position[1], Position[2]))
	    {
		    if(PlayerInfo[playerid][pReloadingTaser] == 0 && GetPlayerWeapon(playerid) == 23)
		    {
		        if(!IsPlayerRestricted(damagedid) && GetPlayerState(damagedid) == PLAYER_STATE_ONFOOT)
		        {
		        	new string[128];
					format(string, sizeof(string), "* %s uses their taser on %s, stunning them.", GetPlayerNameEx(playerid), GetPlayerNameEx(damagedid));
					ProxDetector(20.0, damagedid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
					SetPVarInt(damagedid, "IsRestrained", 1);
					GameTextForPlayer(damagedid, "~r~You were~n~TASED.", 3000, 3);
					GameTextForPlayer(playerid, "~r~Reloading~n~TASER.", 4000, 3);
					TogglePlayerControllable(damagedid, false);
					ApplyPlayerAnimation(damagedid, "CRACK", "crckdeth2", 3.6, 0, 1, 1, 1, 1);
					PlayerInfo[playerid][pReloadingTaser] = 1;
					defer TaserTimer(playerid, damagedid);
				}
		    }
		}
		else SendClientMessageEx(playerid, COLOR_GREY, "You are too far from the suspect.");
	}
	return 1;
}

public OnPlayerTakeDamage(playerid, issuerid, Float: amount, weaponid)
{
	ProcessPlayerDamage(issuerid, playerid, weaponid);
	if(GetPVarInt(playerid, "BloodTextdraw") >= 0)
	{
		TextDrawHideForPlayer(playerid, Blood[GetPVarInt(playerid, "BloodTextdraw")]);
		DeletePVar(playerid, "BloodTextdraw");
	}
	SetPVarInt(playerid, "BloodTextdraw", random(3));
	TextDrawShowForPlayer(playerid, Blood[GetPVarInt(playerid, "BloodTextdraw")]);
	defer RemoveDamageTextdraw(playerid);
	return 1;
}

timer RemoveDamageTextdraw[500](playerid)
{
    TextDrawHideForPlayer(playerid, Blood[GetPVarInt(playerid, "BloodTextdraw")]);
	DeletePVar(playerid, "BloodTextdraw");
}


public OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat)
{
	return 1;
}

#define Holding(%0) ((newkeys & (%0)) == (%0))
public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	if(newkeys & KEY_FIRE)
	{
		if(GetPlayerWeapon(playerid) == 41 && IsPlayerInRangeOfPoint(playerid, 5.0, GetPVarFloat(playerid, "SprayingVehicleX"), GetPVarFloat(playerid, "SprayingVehicleY"), GetPVarFloat(playerid, "SprayingVehicleZ")))
		{
			GameTextForPlayer(playerid, "~r~REPAIRING BODYKIT...", 11000, 4);
		    defer SprayTimer(playerid);
		}
		for (new bombid=0; bombid < MAX_HITMAN_BOMBS; bombid++)
		{
		    if(HitmanBombObject[playerid][bombid] != 0)
		    {
		        new string[128];
        		foreach(new i: Player)
        		{
        		    if(IsPlayerInRangeOfPoint(i, 27.5, HitmanBombs[playerid][bombid][0], HitmanBombs[playerid][bombid][1], HitmanBombs[playerid][bombid][2]))
        		    {
						if(HitmanTarget[playerid] == i)
						{
						   	/*new File:clog = fopen("logs/contract.log", io_append);
						    format(string, sizeof(string), "Hitman %s has fulfilled the contract on %s's head and collected $%d.", GetPlayerNameEx(playerid), GetPlayerNameEx(i), PlayerInfo[i][pContractPrice]);
							fwrite(clog, string);
							fclose(clog);*/
							format(string, sizeof(string), "Hitman %s has fulfilled the contract on %s's head and collected $%d.", GetPlayerNameEx(playerid), GetPlayerNameEx(i), PlayerInfo[i][pContractPrice]);
							Log("logs/contract.log", string);

							format(string, sizeof(string), " You have been critically injured by a hitman and lost $%d.", PlayerInfo[i][pContractPrice]);
							SendClientMessageEx(i, COLOR_YELLOW, string);
						    format(string, sizeof(string), "Hitman %s has fulfilled the contract on %s's head and collected $%d.", GetPlayerNameEx(playerid), GetPlayerNameEx(i), PlayerInfo[i][pContractPrice]);
							SendHitmanMessage(COLOR_YELLOW, string);
							GivePlayerCash(i, -PlayerInfo[i][pContractPrice]);
							GivePlayerCash(playerid, PlayerInfo[i][pContractPrice]);
							PlayerInfo[playerid][pCompletedHits]++;
							PlayerInfo[i][pContractPrice] = 0;
							format(PlayerInfo[i][pContractReason], 32, "");
							format(PlayerInfo[i][pContractBy], MAX_PLAYER_NAME, "");
							HitmanTarget[playerid] = INVALID_PLAYER_ID;
					    	SetPlayerHealthEx(i, 0);
							break;
						}
        		    }
        		}
		        CreateExplosion(HitmanBombs[playerid][bombid][0], HitmanBombs[playerid][bombid][1], HitmanBombs[playerid][bombid][2], 0, 25);
		        HitmanBombs[playerid][bombid][0] = 0;
		        HitmanBombs[playerid][bombid][1] = 0;
		        HitmanBombs[playerid][bombid][2] = 0;
		        DestroyDynamicObject(HitmanBombObject[playerid][bombid]);
		        HitmanBombObject[playerid][bombid] = 0;
			}
		}
	}
	else if(newkeys & KEY_SECONDARY_ATTACK)
	{
     	if(IsPlayerInRangeOfPoint(playerid, 1.0, 245.38, 73.77, 1003.64) && GetPVarInt(playerid, "IsCuffed") == 0)
		{
			if(LSPDDoorInUse == 0)
			{
				LSPDDoorInUse = 1;
				MoveDynamicObject(LSPDGates[0], 243.895, 72.50000000, 1002.59997559, 2);
				MoveDynamicObject(LSPDGates[1], 248.895, 72.54000092, 1002.59997559, 2);
				SetTimer("ResetLSPDDoors", 3000, false);
			}
			SetPlayerPos(playerid, 245.35, 73.37, 1003.64);
			SetPlayerFacingAngle(playerid, 90.0);
			ApplyPlayerAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 0, 0, 0, 0);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, 244.98, 71.85, 1003.64) && GetPVarInt(playerid, "IsCuffed") == 0)
		{
			if(LSPDDoorInUse == 0)
			{
				if(IsACop(playerid) || IsAdmin(playerid, ADMIN_LEVEL_TRIALADMIN))
				{
					LSPDDoorInUse = 1;
					MoveDynamicObject(LSPDGates[0], 243.895, 72.50000000, 1002.59997559, 2);
					MoveDynamicObject(LSPDGates[1], 248.895, 72.54000092, 1002.59997559, 2);
					SetTimer("ResetLSPDDoors", 3000, false);
				}
				else SendClientMessageEx(playerid, COLOR_GREY, "Access Denied.");
			}
			SetPlayerPos(playerid, 244.98, 71.85, 1003.64);
			SetPlayerFacingAngle(playerid, 360.0);
			ApplyPlayerAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 0, 0, 0, 0);
		}
	}
	else if(newkeys & KEY_YES)
	{
	    cmd_enter(playerid, "");
	    cmd_exit(playerid, "");
	}
	
	if((oldkeys & KEY_HANDBRAKE) && !(newkeys & KEY_HANDBRAKE) && GetPVarInt(playerid, "pAiming") == 1)
	{
	    SetPlayerDrunkLevel (playerid, 0);
	    DeletePVar(playerid, "pAiming");
	}

	if(IsKeyJustDown(KEY_SPRINT, newkeys, oldkeys))
	{
		if(gPlayerUsingLoopingAnim[playerid])
		{
	    	StopLoopingAnim(playerid);
        	TextDrawHideForPlayer(playerid, StopAnim);
        }
    }
	return 1;
}

timer SprayTimer[10000](playerid)
{
	new panels, doors, lights, tires;
	tires = encode_tires(0, 0, 0, 0); // fix all tires
	panels = encode_panels(0, 0, 0, 0, 0, 0, 0); // fix all panels
	doors = encode_doors(0, 0, 0, 0, 0, 0); // fix all doors
	lights = encode_lights(0, 0, 0, 0); // fix all lights
	UpdateVehicleDamageStatus(GetPVarInt(playerid, "SprayingVehicleID"), panels, doors, lights, tires);
	ReloadPlayerWeapons(playerid);
	DeletePVar(playerid, "SprayingVehicleID");
	DeletePVar(playerid, "SprayingVehicleX");
	DeletePVar(playerid, "SprayingVehicleY");
	DeletePVar(playerid, "SprayingVehicleZ");
	GameTextForPlayer(playerid, "~g~BODYKIT REPAIRED.", 2000, 5);
	SetPlayerArmedWeapon(playerid, 0);
	return 1;
}

timer TaserTimer[10000](playerid, targetid)
{
	if(!IsPlayerConnectedEx(playerid)) return 0;
	if(GetPVarInt(targetid, "IsCuffed") == 0)
	{
		TogglePlayerControllable(targetid, true);
		DeletePVar(playerid, "IsRestrained");
		ClearAnimations(targetid, 1);
	}
	PlayerInfo[playerid][pReloadingTaser] = 0;
	GameTextForPlayer(playerid, "~b~Taser~n~Reloaded.", 1000, 3);
	return 1;
}

public ResetLSPDDoors()
{
    LSPDDoorInUse = 0;
    MoveDynamicObject(LSPDGates[0], 244.87800598, 72.50000000, 1002.59997559, 2);
    MoveDynamicObject(LSPDGates[1], 247.89500427,72.54000092,1002.59997559, 2);
}

public OnRconLoginAttempt(ip[], password[], success)
{
	return 1;
}

public OnPlayerChangeWeapon(playerid, weapon)
{
	if(GetPVarInt(playerid, "TaserEquipped") == 1) SetPlayerArmedWeapon(playerid, 23);
	if(GetPVarInt(playerid, "SprayingVehicleID") > 0) SetPlayerArmedWeapon(playerid, 41);

	switch(weapon)
	{
	    case 0 .. 1: // Knuckles to Knuckles Busters
	    {
	        return 0;
	    }
	    
		case 2 .. 9: // Melee Weapons
		{
	        if(weapon != PlayerInfo[playerid][pWeapons][1])
	        {
	            ExecuteWeaponBan(playerid, weapon);
			}
		}


		case 22 .. 24:
	    {
	        if(weapon == 23 && GetPVarInt(playerid, "TaserEquipped")) return 1;
	        if(weapon != PlayerInfo[playerid][pWeapons][2])
	        {
	            ExecuteWeaponBan(playerid, weapon);
			}
		}

		case 25 .. 27:
	    {
	        if(weapon != PlayerInfo[playerid][pWeapons][3])
	        {
	            ExecuteWeaponBan(playerid, weapon);
			}
		}

		case 28 .. 29:
	    {
	        if(weapon != PlayerInfo[playerid][pWeapons][4])
	        {
	            ExecuteWeaponBan(playerid, weapon);
			}
		}
		
		case 32:
	    {
	        if(weapon != PlayerInfo[playerid][pWeapons][4])
	        {
	            ExecuteWeaponBan(playerid, weapon);
			}
		}

		case 30 .. 31:
	    {
	        if(weapon != PlayerInfo[playerid][pWeapons][5])
	        {
	            ExecuteWeaponBan(playerid, weapon);
			}
		}

		case 33 .. 34:
	    {
	        if(weapon != PlayerInfo[playerid][pWeapons][6])
	        {
	            ExecuteWeaponBan(playerid, weapon);
			}
		}
		
		case 35 .. 38:
		{
	        if(weapon != PlayerInfo[playerid][pWeapons][7])
	        {
	            ExecuteWeaponBan(playerid, weapon);
			}
		}
		
		case 16 .. 18:
	    {
	        if(weapon != PlayerInfo[playerid][pWeapons][8])
	        {
	            ExecuteWeaponBan(playerid, weapon);
			}
		}
		
		case 39:
	    {
	        if(weapon != PlayerInfo[playerid][pWeapons][8])
	        {
	            ExecuteWeaponBan(playerid, weapon);
			}
		}
		case 41 .. 43:
	    {
   	        if(weapon == 41 && GetPVarInt(playerid, "SprayingVehicleID") > 0) return 1;
	        if(weapon != PlayerInfo[playerid][pWeapons][9])
	        {
	            ExecuteWeaponBan(playerid, weapon);
			}
		}
		
		case 10 .. 15:
	    {
	        if(weapon != PlayerInfo[playerid][pWeapons][10])
	        {
	            ExecuteWeaponBan(playerid, weapon);
			}
		}
		
		case 44 .. 45:
	    {
	        if(weapon != PlayerInfo[playerid][pWeapons][11])
	        {
	            ExecuteWeaponBan(playerid, weapon);
			}
		}

		case 46:
		{
			return 0;
		}
	}
	return 1;
}

stock ExecuteWeaponBan(playerid, weapon)
{
	new reason[128];
	format(reason, sizeof(reason), "AdmCmd: %s was auto-banned, reason: Weapon hacking (%s)", GetPlayerNameEx(playerid), GetWeaponNameEx(weapon));
	AdminAlert(reason, ALERT_GLOBAL);
	format(reason, sizeof(reason), "Weapon hacking (%s)", GetWeaponNameEx(weapon));
	BanPlayerEx(playerid, reason, BAN_PERMANENT, 0);
	return 1;
}

stock BanPlayerEx(playerid, reason[], type, unbanstamp)
{
	new szQuery[256];
	PlayerInfo[playerid][pBanned] = 1;
	format(szQuery, sizeof(szQuery), "UPDATE `accounts` SET `Banned` = '1' WHERE `Id` = '%d'", PlayerInfo[playerid][pId]);
	mysql_query(szQuery, THREAD_LOG_RESULT, playerid, mConnectionHandle);
	format(szQuery, sizeof(szQuery), "INSERT INTO `bans` (`IP_Address`,`Username`,`Expiry_Date`,`Reason`,`Ban_Type`) \
									 VALUES ('%s','%s','%d','%s','%d')", GetPlayerIPAddress(playerid), PlayerInfo[playerid][pUsername], unbanstamp, reason, type);
	mysql_query(szQuery, THREAD_LOG_RESULT, playerid, mConnectionHandle);
	Kick(playerid);
}

stock UnbanPlayerEx(name[])
{
	new szQuery[128];
	format(szQuery, sizeof(szQuery), "DELETE FROM `bans` WHERE `Username` = '%s'", name);
	mysql_query(szQuery, THREAD_NO_RESULT, INVALID_PLAYER_ID, mConnectionHandle);
	if(mysql_affected_rows(mConnectionHandle) > 0)
	{
		format(szQuery, sizeof(szQuery), "UPDATE `accounts` SET `Banned` = '0' WHERE `Username` = '%s'", name);
		mysql_query(szQuery, THREAD_LOG_RESULT, INVALID_PLAYER_ID, mConnectionHandle);
		return 1;
	}
	return 0;
}

stock GetWeaponSlotFromId(weapon)
{
	switch (weapon)
	{
	    case 0 .. 1: return 0;
	    case 2 .. 9: return 1;
	    case 22 .. 24: return 2;
	    case 25 .. 27: return 3;
	    case 28 .. 29: return 4;
	    case 32: return 4;
	    case 30 .. 31: return 5;
	    case 33 .. 34: return 6;
	    case 35 .. 38: return 7;
	    case 16 .. 18: return 8;
	    case 39: return 8;
	    case 41 .. 43: return 9;
	    case 10 .. 15: return 10;
	    case 44 .. 45: return 11;
	}
	return 0;
}

public OnPlayerUpdate(playerid)
{
	if(GetPVarInt(playerid, "gPlayerLogged") == 0) return 0;

	if(GetPVarInt(playerid, "TaserEquipped") == 1 && GetPlayerWeapon(playerid) != 23) SetPlayerArmedWeapon(playerid, 23);
	if(GetPVarInt(playerid, "RequireMedicalAssistance") == 1) SetPlayerArmedWeapon(playerid, 0);

	LastUpdate[playerid] = gettime();

	new newkeys, ud, lr;
	GetPlayerKeys(playerid, newkeys, ud, lr);
	
	if(Holding(KEY_FIRE))
	{
		new Float:fx, Float:fy, Float:fz, string[128];
		GetDynamicObjectPos(FireObject, fx, fy, fz);
        if((GetPlayerWeapon(playerid) == 42 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 407) && IsPlayerInRangeOfPoint(playerid, 25.0, fx,  fy,  fz))
        {
		   	FireHealth -= 2;
			format(string, sizeof(string), "%d%", FireHealth);
			Update3DTextLabelText(FireText, COLOR_GREEN, string);
		    if(FireHealth <= 0)
		    {
				DestroyDynamicObject(FireObject);
				DestroyDynamicObject(SmokeObject);
				Delete3DTextLabel(FireText);
				FireHealth = 0;
				foreach(new i: Player) if(PlayerInfo[i][pFaction] == 3) DisablePlayerCheckpoint(i);
				format(string, sizeof(string), "[DISPATCH]{FFFFFF} All Units ABP: %s has put off the fire. Normal duties can now be resumed.", GetPlayerNameEx(playerid));
				SendRadioMessage(3, COLOR_HOTPINK, string);
			}
		}
	}
	else if(Holding(KEY_HANDBRAKE) && GetPlayerDrunkLevel(playerid) < 2000 && !IsPlayerInAnyVehicle(playerid))
	{
	    if(GetPlayerWeapon(playerid) >= 22 && GetPlayerWeapon(playerid) <= 32)
	    {
   			SetPlayerDrunkLevel (playerid, 5000);
	    }
	    else if(GetPlayerWeapon(playerid) >= 33 && GetPlayerWeapon(playerid) <= 34)
	    {
            SetPlayerDrunkLevel (playerid, 2500);
	    }
		SetPVarInt(playerid, "pAiming", 1);
	}
	if(IsPlayerInAnyVehicle(playerid))
	{
		new vehicleid = GetPlayerVehicleID(playerid), Float:health;
			
		if(GetPlayerVehicleSeat(playerid) >= 1 && GetPlayerVehicleSeat(playerid) <= 3)
		{
		    if(PlayerInfo[playerid][pWeapons][4] == WEAPON_UZI) SetPlayerArmedWeapon(playerid, WEAPON_UZI);
		    else if(PlayerInfo[playerid][pWeapons][4] == WEAPON_MP5) SetPlayerArmedWeapon(playerid, WEAPON_MP5);
		    else if(PlayerInfo[playerid][pWeapons][4] == WEAPON_TEC9) SetPlayerArmedWeapon(playerid, WEAPON_TEC9);
			else SetPlayerArmedWeapon(playerid, 0);
		}
			
		GetVehicleHealth(vehicleid, health);
		if(health < 250)
		{
			if(!VehicleInfo[vehicleid][vTotalled] && GetVehicleModel(GetPlayerVehicleID(playerid)) != 0)
			{
				GameTextForPlayer(playerid, "~r~Totalled.", 3000, 3);
			    VehicleInfo[vehicleid][vTotalled] = 1;
				VehicleInfo[vehicleid][vLights] = 0;
				VehicleInfo[vehicleid][vEngine] = 0;
			}
			SetVehicleHealth(vehicleid, 250);
			SetVehicleParamsEx(vehicleid, VehicleInfo[vehicleid][vEngine], VehicleInfo[vehicleid][vLights], VehicleInfo[vehicleid][vAlarm], VehicleInfo[vehicleid][vDoors], VehicleInfo[vehicleid][vBonnet], VehicleInfo[vehicleid][vBoot], VehicleInfo[vehicleid][vObjective]);
		}
	}
	return 1;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
	return 1;
}

public OnPlayerStreamOut(playerid, forplayerid)
{
	return 1;
}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
	if(VehicleInfo[vehicleid][vLocked] == 1) {
		SetVehicleParamsForPlayer(vehicleid, forplayerid, 0, 1);
	}
	return 1;
}

public OnVehicleStreamOut(vehicleid, forplayerid)
{
	return 1;
}

public OnVehicleDamageStatusUpdate(vehicleid, playerid)
{
    return 1;
}

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	return 1;
}

public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
   	if(GetPVarInt(playerid, "skinc_active") == 0) return 0;

	if(clickedid == Text:INVALID_TEXT_DRAW)
	{
        DestroySelectionMenu(playerid);
        SetPVarInt(playerid, "skinc_active", 0);
        PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
        return 1;
	}

	return 0;
}

public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
	if(GetPVarInt(playerid, "skinc_active") == 0) return 0;

	new curpage = GetPVarInt(playerid, "skinc_page");
	
	if(playertextid == gNextButtonTextDrawId[playerid])
	{
	    if(curpage < (GetNumberOfPages() - 1))
		{
	        SetPVarInt(playerid, "skinc_page", curpage + 1);
	        ShowPlayerModelPreviews(playerid);
         	UpdatePageTextDraw(playerid);
         	PlayerPlaySound(playerid, 1083, 0.0, 0.0, 0.0);
		}
		else PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		return 1;
	}

	if(playertextid == gPrevButtonTextDrawId[playerid]) {
	    if(curpage > 0)
		{
	    	SetPVarInt(playerid, "skinc_page", curpage - 1);
	    	ShowPlayerModelPreviews(playerid);
	    	UpdatePageTextDraw(playerid);
	    	PlayerPlaySound(playerid, 1084, 0.0, 0.0, 0.0);
		}
		else PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		return 1;
	}

	new x=0;
	while(x != 21)
	{
	    if(playertextid == gSelectionItems[playerid][x])
		{
	        HandlePlayerItemSelection(playerid, x);
	        PlayerPlaySound(playerid, 1083, 0.0, 0.0, 0.0);
	        DestroySelectionMenu(playerid);
	        CancelSelectTextDraw(playerid);
        	SetPVarInt(playerid, "skinc_active", 0);
        	return 1;
		}
		x++;
	}

	return 0;
}

stock HashText(text[])
{
	new hashedtext[129];
	WP_Hash(hashedtext, sizeof(hashedtext), text);
	return hashedtext;
}


stock IsAValidSkin(skinid)
{
	if(skinid < 0 || skinid > 299) return false;
	switch (skinid)
	{
	    case 0, 105, 106, 107, 102, 103, 69, 123,
		104, 114, 115, 116, 174, 175, 100, 247, 173,
		248, 117, 118, 147, 163, 21, 24, 143, 71,
		156, 176, 177, 108, 109, 110, 165, 166,
		265, 266, 267, 269, 270, 271, 274, 276,
		277, 278, 279, 280, 281, 282, 283, 284,
		285, 286, 287, 288, 294, 296, 297: return false;
	}
	return true;
}

public MySQL_Waypoint_Load(connectionHandle)
{
    new
        rows,
		fields,
		id,
		szValue[64]
	;
    cache_get_data(rows, fields);
    
    for(new i = 0; i != rows; i++)
    {
        cache_get_field_content(i, "Id", szValue, mConnectionHandle); id = strval(szValue);
        cache_get_field_content(i, "TextDisplay", WaypointInfo[id][wTextDisplay], mConnectionHandle, 64);
        cache_get_field_content(i, "Password", WaypointInfo[id][wPassword], mConnectionHandle, 8);
        cache_get_field_content(i, "Locked", szValue, mConnectionHandle); WaypointInfo[id][wLocked] = strval(szValue);
        cache_get_field_content(i, "wPosX", szValue, mConnectionHandle); WaypointInfo[id][wPosition][0] = floatstr(szValue);
        cache_get_field_content(i, "wPosY", szValue, mConnectionHandle); WaypointInfo[id][wPosition][1] = floatstr(szValue);
        cache_get_field_content(i, "wPosZ", szValue, mConnectionHandle); WaypointInfo[id][wPosition][2] = floatstr(szValue);
        cache_get_field_content(i, "wVirtualWorld", szValue, mConnectionHandle); WaypointInfo[id][wVirtualWorld] = strval(szValue);
        cache_get_field_content(i, "wInterior", szValue, mConnectionHandle); WaypointInfo[id][wInterior] = strval(szValue);
        cache_get_field_content(i, "wFacingAngle", szValue, mConnectionHandle); WaypointInfo[id][wFacingAngle] = strval(szValue);
        cache_get_field_content(i, "wLoadTime", szValue, mConnectionHandle); WaypointInfo[id][wLoadingTime] = strval(szValue);
        cache_get_field_content(i, "dPosX", szValue, mConnectionHandle); WaypointInfo[id][wDestPosition][0] = floatstr(szValue);
        cache_get_field_content(i, "dPosY", szValue, mConnectionHandle); WaypointInfo[id][wDestPosition][1] = floatstr(szValue);
        cache_get_field_content(i, "dPosZ", szValue, mConnectionHandle); WaypointInfo[id][wDestPosition][2] = floatstr(szValue);
        cache_get_field_content(i, "dVirtualWorld", szValue, mConnectionHandle); WaypointInfo[id][wDestVirtualWorld] = strval(szValue);
        cache_get_field_content(i, "dInterior", szValue, mConnectionHandle); WaypointInfo[id][wDestInterior] = strval(szValue);
        cache_get_field_content(i, "dFacingAngle", szValue, mConnectionHandle); WaypointInfo[id][wDestFacingAngle] = strval(szValue);
        cache_get_field_content(i, "dLoadTime", szValue, mConnectionHandle); WaypointInfo[id][wDestLoadingTime] = strval(szValue);
		printf("[Waypoint] #%d (%s): Position: {%f, %f, %f}, Destination: {%f, %f, %f}, Password: %s", id, WaypointInfo[id][wTextDisplay], WaypointInfo[id][wPosition][0], WaypointInfo[id][wPosition][1], WaypointInfo[id][wPosition][2], WaypointInfo[id][wDestPosition][0], WaypointInfo[id][wDestPosition][1], WaypointInfo[id][wDestPosition][2], WaypointInfo[id][wPassword]);

		char_replace(WaypointInfo[id][wTextDisplay], '\92', ' ');
		WaypointInfo[id][wExistant] = 1;
		RecreateWaypointText(id);
	}
    printf("[Waypoints]: A total sum of %d waypoints have been loaded into the script.", rows);
}

MySQL_Load_Waypoints()
{
	mysql_function_query(mConnectionHandle, "SELECT * FROM `waypoints`", true, "MySQL_Waypoint_Load", "i", mConnectionHandle);
}

public MySQL_Business_Load(connectionHandle)
{
    new rows, fields, id, szValue[64];
    cache_get_data(rows, fields);

    for(new i = 0; i != rows; i++)
    {
        cache_get_field_content(i, "Id", szValue, mConnectionHandle); id = strval(szValue);
        cache_get_field_content(i, "Name", BusinessInfo[id][bName], mConnectionHandle, 16);
        cache_get_field_content(i, "Owner", BusinessInfo[id][bOwner], mConnectionHandle, MAX_PLAYER_NAME);
        cache_get_field_content(i, "BuyPrice", szValue, mConnectionHandle); BusinessInfo[id][bBuyPrice] = strval(szValue);
        cache_get_field_content(i, "Earnings", szValue, mConnectionHandle); BusinessInfo[id][bEarnings] = strval(szValue);
        cache_get_field_content(i, "PosX", szValue, mConnectionHandle); BusinessInfo[id][bPosition][0] = floatstr(szValue);
        cache_get_field_content(i, "PosY", szValue, mConnectionHandle); BusinessInfo[id][bPosition][1] = floatstr(szValue);
        cache_get_field_content(i, "PosZ", szValue, mConnectionHandle); BusinessInfo[id][bPosition][2] = floatstr(szValue);
        cache_get_field_content(i, "VirtualWorld", szValue, mConnectionHandle); BusinessInfo[id][bVirtualWorld] = strval(szValue);
        cache_get_field_content(i, "Interior", szValue, mConnectionHandle); BusinessInfo[id][bInterior] = strval(szValue);
        cache_get_field_content(i, "FacingAngle", szValue, mConnectionHandle); BusinessInfo[id][bFacingAngle] = strval(szValue);
        cache_get_field_content(i, "Open", szValue, mConnectionHandle); BusinessInfo[id][bOpen] = strval(szValue);
		printf("[Business] #%d (%s): Position: {%f, %f, %f} Price: %d", id, BusinessInfo[id][bName], BusinessInfo[id][bPosition][0], BusinessInfo[id][bPosition][1], BusinessInfo[id][bPosition][2], BusinessInfo[id][bBuyPrice]);

		char_replace(BusinessInfo[id][bName], '\92', ' ');
		BusinessInfo[id][bExistant] = 1;
        RecreateBusinessText(id);
	}
    printf("[Business]: A total sum of %d businesses have been loaded into the script.", rows);
}

MySQL_Load_Businesses()
{
	mysql_function_query(mConnectionHandle, "SELECT * FROM `businesses`", true, "MySQL_Business_Load", "i", mConnectionHandle);
}

public MySQL_House_Load(connectionHandle)
{
    new
        rows,
		fields,
		id,
		szValue[64]
	;
    cache_get_data(rows, fields);

    for(new i = 0; i != rows; i++)
    {
        cache_get_field_content(i, "Id", szValue, mConnectionHandle); id = strval(szValue);
        cache_get_field_content(i, "Owner", HouseInfo[id][hOwner], mConnectionHandle, MAX_PLAYER_NAME);
        cache_get_field_content(i, "BuyPrice", szValue, mConnectionHandle); HouseInfo[id][hBuyPrice] = strval(szValue);
        cache_get_field_content(i, "PosX", szValue, mConnectionHandle); HouseInfo[id][hPosition][0] = floatstr(szValue);
        cache_get_field_content(i, "PosY", szValue, mConnectionHandle); HouseInfo[id][hPosition][1] = floatstr(szValue);
        cache_get_field_content(i, "PosZ", szValue, mConnectionHandle); HouseInfo[id][hPosition][2] = floatstr(szValue);
        cache_get_field_content(i, "VirtualWorld", szValue, mConnectionHandle); HouseInfo[id][hVirtualWorld] = strval(szValue);
        cache_get_field_content(i, "Interior", szValue, mConnectionHandle); HouseInfo[id][hInterior] = strval(szValue);
        cache_get_field_content(i, "FacingAngle", szValue, mConnectionHandle); HouseInfo[id][hFacingAngle] = strval(szValue);
		printf("[House] #%d: Position: {%f, %f, %f} Owner: %s", id, HouseInfo[id][hPosition][0], HouseInfo[id][hPosition][1], HouseInfo[id][hPosition][2], HouseInfo[id][hOwner]);

		HouseInfo[id][hExistant] = 1;
		RecreateHouseText(id);
	}
    printf("[House]: A total sum of %d houses have been loaded into the script.", rows);
}

MySQL_Load_Houses()
{
	mysql_function_query(mConnectionHandle, "SELECT * FROM `houses`", true, "MySQL_House_Load", "i", mConnectionHandle);
}

public MySQL_Family_Load(connectionHandle)
{
    new
        rows,
		fields,
		id,
		szValue[64]
	;
    cache_get_data(rows, fields);

    for(new i = 0; i != rows; i++)
    {
        cache_get_field_content(i, "Id", szValue, mConnectionHandle); id = strval(szValue);
        cache_get_field_content(i, "Name", FamilyInfo[id][fName], mConnectionHandle, 24);
        cache_get_field_content(i, "Motd", FamilyInfo[id][fMotd], mConnectionHandle, 128);
        cache_get_field_content(i, "Rank1", FamilyInfo[id][fRank1], mConnectionHandle, 12);
        cache_get_field_content(i, "Rank2", FamilyInfo[id][fRank2], mConnectionHandle, 12);
        cache_get_field_content(i, "Rank3", FamilyInfo[id][fRank3], mConnectionHandle, 12);
        cache_get_field_content(i, "Rank4", FamilyInfo[id][fRank4], mConnectionHandle, 12);
        cache_get_field_content(i, "Rank5", FamilyInfo[id][fRank5], mConnectionHandle, 12);
        cache_get_field_content(i, "Rank6", FamilyInfo[id][fRank6], mConnectionHandle, 12);
        cache_get_field_content(i, "SafeX", szValue, mConnectionHandle); FamilyInfo[id][fSafePosition][0] = floatstr(szValue);
        cache_get_field_content(i, "SafeY", szValue, mConnectionHandle); FamilyInfo[id][fSafePosition][1] = floatstr(szValue);
        cache_get_field_content(i, "SafeZ", szValue, mConnectionHandle); FamilyInfo[id][fSafePosition][2] = floatstr(szValue);
        cache_get_field_content(i, "SafeMoney", szValue, mConnectionHandle); FamilyInfo[id][fSafeItems][0] = strval(szValue);
		printf("[Family] #%d (%s): Motd: %s", id, FamilyInfo[id][fName], FamilyInfo[id][fMotd]);
		char_replace(FamilyInfo[id][fName], '\92', ' ');
		char_replace(FamilyInfo[id][fMotd], '\92', ' ');
		RecreateGangSafeText(id);
	}
    printf("[Family]: A total sum of %d families have been loaded into the script.", rows);
}

MySQL_Load_Families()
{
	mysql_function_query(mConnectionHandle, "SELECT * FROM `families`", true, "MySQL_Family_Load", "i", mConnectionHandle);
}

public MySQL_Vault_Load(connectionHandle)
{
    new rows, fields, id, szValue[64] ;
    cache_get_data(rows, fields);
    for(new i = 0; i != rows; i++)
    {
        cache_get_field_content(i, "Id", szValue); id = strval(szValue);
        cache_get_field_content(i, "Money", szValue); VaultInfo[id][vMoney] = strval(szValue);
        cache_get_field_content(i, "PosX", szValue); VaultInfo[id][vPosition][0] = floatstr(szValue);
        cache_get_field_content(i, "PosY", szValue); VaultInfo[id][vPosition][1] = floatstr(szValue);
        cache_get_field_content(i, "PosZ", szValue); VaultInfo[id][vPosition][2] = floatstr(szValue);
		printf("[Vault] #%d: Money: %d", id, VaultInfo[id][vMoney]);
		RecreateVaultText(id);
	}
    printf("[Vaults]: A total sum of %d vaults have been loaded into the script.", rows);
}

MySQL_Load_Vaults()
{
	mysql_function_query(mConnectionHandle, "SELECT * FROM `vaults`", true, "MySQL_Vault_Load", "i", mConnectionHandle);
}

stock MySQL_Update_Gate(id)
{
	new
	    szQuery[512];

    format(szQuery, sizeof(szQuery), "UPDATE `gates` SET `PosX`='%f',\
		`PosY`='%f',\
		`PosZ`='%f',\
		`PosRotationX`='%f',\
		`PosRotationY`='%f',\
		`PosRotationZ`='%f',", GateInfo[id][gPosition][0], GateInfo[id][gPosition][1], GateInfo[id][gPosition][2], GateInfo[id][gRotation][0], GateInfo[id][gRotation][1], GateInfo[id][gRotation][2]);

    format(szQuery, sizeof(szQuery), "%s`DestinationX`='%f',\
		`DestinationY`='%f',\
		`DestinationZ`='%f',\
		`DestRotationX`='%f',\
		`DestRotationY`='%f',\
		`DestRotationZ`='%f'", szQuery, GateInfo[id][gDestPosition][0], GateInfo[id][gDestPosition][1], GateInfo[id][gDestPosition][2], GateInfo[id][gDestRotation][0], GateInfo[id][gDestRotation][1], GateInfo[id][gDestRotation][2]);

	format(szQuery, sizeof(szQuery), "%s WHERE `Id` = '%d'", szQuery, id);
	mysql_query(szQuery, 0, INVALID_PLAYER_ID, mConnectionHandle);
}

public MySQL_Gates_Load(connectionHandle)
{
    new
        rows,
		fields,
		id,
		szValue[64]
	;
    cache_get_data(rows, fields);

    for(new i = 0; i != rows; i++)
    {
        cache_get_field_content(i, "Id", szValue); id = strval(szValue);
        cache_get_field_content(i, "Model", szValue); GateInfo[id][gModel] = strval(szValue);
        cache_get_field_content(i, "Speed", szValue); GateInfo[id][gSpeed] = strval(szValue);
        cache_get_field_content(i, "Password", szValue); format(GateInfo[id][gPassword], 12, "%s", szValue);
        cache_get_field_content(i, "PosX", szValue); GateInfo[id][gPosition][0] = floatstr(szValue);
        cache_get_field_content(i, "PosY", szValue); GateInfo[id][gPosition][1] = floatstr(szValue);
        cache_get_field_content(i, "PosZ", szValue); GateInfo[id][gPosition][2] = floatstr(szValue);
        cache_get_field_content(i, "PosRotationX", szValue); GateInfo[id][gRotation][0] = floatstr(szValue);
        cache_get_field_content(i, "PosRotationY", szValue); GateInfo[id][gRotation][1] = floatstr(szValue);
        cache_get_field_content(i, "PosRotationZ", szValue); GateInfo[id][gRotation][2] = floatstr(szValue);
        cache_get_field_content(i, "DestinationX", szValue); GateInfo[id][gDestPosition][0] = floatstr(szValue);
        cache_get_field_content(i, "DestinationY", szValue); GateInfo[id][gDestPosition][1] = floatstr(szValue);
        cache_get_field_content(i, "DestinationZ", szValue); GateInfo[id][gDestPosition][2] = floatstr(szValue);
        cache_get_field_content(i, "DestRotationX", szValue); GateInfo[id][gDestRotation][0] = floatstr(szValue);
        cache_get_field_content(i, "DestRotationY", szValue); GateInfo[id][gDestRotation][1] = floatstr(szValue);
        cache_get_field_content(i, "DestRotationZ", szValue); GateInfo[id][gDestRotation][2] = floatstr(szValue);
        GateInfo[id][gObjectHandle] = CreateDynamicObject(GateInfo[id][gModel], GateInfo[id][gPosition][0], GateInfo[id][gPosition][1], GateInfo[id][gPosition][2], GateInfo[id][gRotation][0], GateInfo[id][gRotation][1], GateInfo[id][gRotation][2]);
		RecreateGateText(id);
	}
    printf("[Gate]: A total sum of %d gates have been loaded into the script.", rows);
}

MySQL_Load_Gates()
{
	mysql_function_query(mConnectionHandle, "SELECT * FROM `gates`", true, "MySQL_Gates_Load", "i", mConnectionHandle);
}

stock AddVaultMoney(factionid, amount)
{
	new szQuery[128];
    VaultInfo[factionid][vMoney] += amount;
	format(szQuery, sizeof(szQuery), "UPDATE `vaults` SET `Money` = '%d' WHERE `Id` = '%d'", VaultInfo[factionid][vMoney], factionid);
	mysql_query(szQuery, THREAD_LOG_RESULT, INVALID_PLAYER_ID, mConnectionHandle);
}

public LoadPlayerAccount(playerid, connectionHandle)
{
	if(!IsPlayerConnectedEx(playerid))
	    return 0;

	new
	    szValue[64];

	cache_get_field_content(0, "Id", szValue, connectionHandle); PlayerInfo[playerid][pId] = strval(szValue);//
	cache_get_field_content(0, "Banned", szValue, connectionHandle); PlayerInfo[playerid][pBanned] = strval(szValue);//
	cache_get_field_content(0, "AdminLevel", szValue, connectionHandle); PlayerInfo[playerid][pAdminLevel] = strval(szValue);//
	cache_get_field_content(0, "Money", szValue, connectionHandle); PlayerInfo[playerid][pMoney] = strval(szValue);//
	cache_get_field_content(0, "Skin", szValue, connectionHandle); PlayerInfo[playerid][pSkin] = strval(szValue);//
    cache_get_field_content(0, "Faction", szValue, connectionHandle); PlayerInfo[playerid][pFaction] = strval(szValue);//
    cache_get_field_content(0, "Leadership", szValue, connectionHandle); PlayerInfo[playerid][pLeadership] = strval(szValue);//
    cache_get_field_content(0, "Family", szValue, connectionHandle); PlayerInfo[playerid][pFamily] = strval(szValue);//
    cache_get_field_content(0, "Rank", szValue, connectionHandle); PlayerInfo[playerid][pRank] = strval(szValue);//
    cache_get_field_content(0, "Division", szValue, connectionHandle); PlayerInfo[playerid][pDivision] = strval(szValue);//
	cache_get_field_content(0, "Level", szValue, connectionHandle); PlayerInfo[playerid][pLevel] = strval(szValue);//
	cache_get_field_content(0, "Experience", szValue, connectionHandle); PlayerInfo[playerid][pExperience] = strval(szValue);//
	cache_get_field_content(0, "PlayingHours", szValue, connectionHandle); PlayerInfo[playerid][pPlayingHours] = strval(szValue);//
	cache_get_field_content(0, "Money", szValue, connectionHandle); PlayerInfo[playerid][pMoney] = strval(szValue);//
    cache_get_field_content(0, "Health", szValue, connectionHandle); PlayerInfo[playerid][pHealth] = floatstr(szValue);//
    cache_get_field_content(0, "Armour", szValue, connectionHandle); PlayerInfo[playerid][pArmour] = floatstr(szValue);//
    cache_get_field_content(0, "PosX", szValue, connectionHandle); PlayerInfo[playerid][pPositionX] = floatstr(szValue);//
    cache_get_field_content(0, "PosY", szValue, connectionHandle); PlayerInfo[playerid][pPositionY] = floatstr(szValue);//
    cache_get_field_content(0, "PosZ", szValue, connectionHandle); PlayerInfo[playerid][pPositionZ] = floatstr(szValue);//
    cache_get_field_content(0, "PosAngle", szValue, connectionHandle); PlayerInfo[playerid][pFacingAngle] = floatstr(szValue);//
    cache_get_field_content(0, "Interior", szValue, connectionHandle); PlayerInfo[playerid][pInterior] = strval(szValue);//
    cache_get_field_content(0, "VirtualWorld", szValue, connectionHandle); PlayerInfo[playerid][pVirtualWorld] = strval(szValue);//
    cache_get_field_content(0, "Job", szValue, connectionHandle); PlayerInfo[playerid][pJob] = strval(szValue);//
    cache_get_field_content(0, "wSlot1", szValue, connectionHandle); PlayerInfo[playerid][pWeapons][0] = strval(szValue);//
    cache_get_field_content(0, "wSlot2", szValue, connectionHandle); PlayerInfo[playerid][pWeapons][1] = strval(szValue);//
    cache_get_field_content(0, "wSlot3", szValue, connectionHandle); PlayerInfo[playerid][pWeapons][2] = strval(szValue);//
    cache_get_field_content(0, "wSlot4", szValue, connectionHandle); PlayerInfo[playerid][pWeapons][3] = strval(szValue);//
    cache_get_field_content(0, "wSlot5", szValue, connectionHandle); PlayerInfo[playerid][pWeapons][4] = strval(szValue);//
    cache_get_field_content(0, "wSlot6", szValue, connectionHandle); PlayerInfo[playerid][pWeapons][5] = strval(szValue);//
    cache_get_field_content(0, "wSlot7", szValue, connectionHandle); PlayerInfo[playerid][pWeapons][6] = strval(szValue);//
    cache_get_field_content(0, "wSlot8", szValue, connectionHandle); PlayerInfo[playerid][pWeapons][7] = strval(szValue);//
    cache_get_field_content(0, "wSlot9", szValue, connectionHandle); PlayerInfo[playerid][pWeapons][8] = strval(szValue);//
    cache_get_field_content(0, "wSlot10", szValue, connectionHandle); PlayerInfo[playerid][pWeapons][9] = strval(szValue);//
    cache_get_field_content(0, "wSlot11", szValue, connectionHandle); PlayerInfo[playerid][pWeapons][10] = strval(szValue);//
    cache_get_field_content(0, "wSlot12", szValue, connectionHandle); PlayerInfo[playerid][pWeapons][11] = strval(szValue);//
    cache_get_field_content(0, "Hunger", szValue, connectionHandle); PlayerInfo[playerid][pHunger] = strval(szValue);//
    cache_get_field_content(0, "AdMute", szValue, connectionHandle); PlayerInfo[playerid][pAdMute] = strval(szValue);//
    cache_get_field_content(0, "ReportMute", szValue, connectionHandle); PlayerInfo[playerid][pReportMute] = strval(szValue);//
    cache_get_field_content(0, "Hydration", szValue, connectionHandle); PlayerInfo[playerid][pHydration] = strval(szValue);//
    cache_get_field_content(0, "JailTime", szValue, connectionHandle); PlayerInfo[playerid][pJailTime] = strval(szValue);//
    cache_get_field_content(0, "WantedLevel", szValue, connectionHandle); PlayerInfo[playerid][pWantedLevel] = strval(szValue);//
    cache_get_field_content(0, "MedicalBill", szValue, connectionHandle); PlayerInfo[playerid][pMedicalBill] = strval(szValue);//
    cache_get_field_content(0, "Tutorial", szValue, connectionHandle); PlayerInfo[playerid][pTutorial] = strval(szValue);//
    cache_get_field_content(0, "Age", szValue, connectionHandle); PlayerInfo[playerid][pAge] = strval(szValue);//
    cache_get_field_content(0, "Gender", szValue, connectionHandle); PlayerInfo[playerid][pGender] = strval(szValue);//
    cache_get_field_content(0, "bBalance", szValue, connectionHandle); PlayerInfo[playerid][pBankBalance] = strval(szValue);//
    cache_get_field_content(0, "JackedCar", szValue, connectionHandle); PlayerInfo[playerid][pJackedCar] = strval(szValue);//
    cache_get_field_content(0, "WalkieTalkie", szValue, connectionHandle); PlayerInfo[playerid][pWalkieTalkie] = strval(szValue);//
    cache_get_field_content(0, "Channel", szValue, connectionHandle); PlayerInfo[playerid][pChannel] = strval(szValue);//
    cache_get_field_content(0, "PhoneNumber", szValue, connectionHandle); PlayerInfo[playerid][pPhoneNumber] = strval(szValue);//
    cache_get_field_content(0, "Phonebook", szValue, connectionHandle); PlayerInfo[playerid][pPhonebook] = strval(szValue);//
    cache_get_field_content(0, "Spraycan", szValue, connectionHandle); PlayerInfo[playerid][pSprayCan] = strval(szValue);//
	cache_get_field_content(0, "Bombs", szValue, connectionHandle); PlayerInfo[playerid][pBombs] = strval(szValue);//
    cache_get_field_content(0, "Gps", szValue, connectionHandle); PlayerInfo[playerid][pGps] = strval(szValue);//
    cache_get_field_content(0, "DriverLicense", szValue, connectionHandle); PlayerInfo[playerid][pDriverLicense] = strval(szValue);//
    cache_get_field_content(0, "GunLicense", szValue, connectionHandle); PlayerInfo[playerid][pGunLicense] = strval(szValue);//
    cache_get_field_content(0, "Seeds", szValue, connectionHandle); PlayerInfo[playerid][pSeeds] = strval(szValue);//
    cache_get_field_content(0, "Weed", szValue, connectionHandle); PlayerInfo[playerid][pWeed] = strval(szValue);//
    cache_get_field_content(0, "GasCans", szValue, connectionHandle); PlayerInfo[playerid][pGasCans] = strval(szValue);//
    cache_get_field_content(0, "FishedAlready", szValue, connectionHandle); PlayerInfo[playerid][pFishedAlready] = strval(szValue);//
    cache_get_field_content(0, "PlantX", szValue, connectionHandle); PlayerInfo[playerid][pPlantPosition][0] = floatstr(szValue);//
    cache_get_field_content(0, "PlantY", szValue, connectionHandle); PlayerInfo[playerid][pPlantPosition][1] = floatstr(szValue);//
    cache_get_field_content(0, "PlantZ", szValue, connectionHandle); PlayerInfo[playerid][pPlantPosition][2] = floatstr(szValue);//
    cache_get_field_content(0, "PlantInterior", szValue, connectionHandle); PlayerInfo[playerid][pPlantPosition][3] = floatstr(szValue);//
    cache_get_field_content(0, "PlantVw", szValue, connectionHandle); PlayerInfo[playerid][pPlantPosition][4] = floatstr(szValue);//
    cache_get_field_content(0, "PlantGrowth", szValue, connectionHandle); PlayerInfo[playerid][pPlantGrowth] = strval(szValue);//
    cache_get_field_content(0, "PhonebookRemoval", szValue, connectionHandle); PlayerInfo[playerid][pPhonebookRemoval] = strval(szValue);//
    cache_get_field_content(0, "Hitman", szValue, connectionHandle); PlayerInfo[playerid][pHitman] = strval(szValue);//
    cache_get_field_content(0, "ContractPrice", szValue, connectionHandle); PlayerInfo[playerid][pContractPrice] = strval(szValue);//
    cache_get_field_content(0, "ContractReason", szValue, connectionHandle); format(PlayerInfo[playerid][pContractReason], 32, "%s", szValue);//
    cache_get_field_content(0, "ContractBy", szValue, connectionHandle); format(PlayerInfo[playerid][pContractBy], MAX_PLAYER_NAME, "%s", szValue);//
    cache_get_field_content(0, "Paycheck", szValue, connectionHandle); PlayerInfo[playerid][pPaycheck] = strval(szValue);//
    cache_get_field_content(0, "SecondaryTask", szValue, connectionHandle); PlayerInfo[playerid][pSecondaryTask] = strval(szValue);//
    cache_get_field_content(0, "Accent", szValue, connectionHandle); PlayerInfo[playerid][pAccent] = strval(szValue);//
    cache_get_field_content(0, "CompletedHits", szValue, connectionHandle); PlayerInfo[playerid][pCompletedHits] = strval(szValue);//
    cache_get_field_content(0, "Reports", szValue, connectionHandle); PlayerInfo[playerid][pReports] = strval(szValue);//

    for(new i=0; i < MAX_PLAYEROWNED_VEHICLES; i++)
    {
        format(szValue, 64, "pv%d_ModelId", i);
    	cache_get_field_content(0, szValue, szValue, connectionHandle); PlayerVehicleInfo[playerid][i][pvModelId] = strval(szValue);//
        format(szValue, 64, "pv%d_PosX", i);
    	cache_get_field_content(0, szValue, szValue, connectionHandle); PlayerVehicleInfo[playerid][i][pvPosition][0] = floatstr(szValue);//
        format(szValue, 64, "pv%d_PosY", i);
    	cache_get_field_content(0, szValue, szValue, connectionHandle); PlayerVehicleInfo[playerid][i][pvPosition][1] = floatstr(szValue);//
        format(szValue, 64, "pv%d_PosZ", i);
    	cache_get_field_content(0, szValue, szValue, connectionHandle); PlayerVehicleInfo[playerid][i][pvPosition][2] = floatstr(szValue);//
        format(szValue, 64, "pv%d_PosAngle", i);
    	cache_get_field_content(0, szValue, szValue, connectionHandle); PlayerVehicleInfo[playerid][i][pvPosition][3] = floatstr(szValue);//
        format(szValue, 64, "pv%d_Locked", i);
    	cache_get_field_content(0, szValue, szValue, connectionHandle); PlayerVehicleInfo[playerid][i][pvLocked] = strval(szValue);//
        format(szValue, 64, "pv%d_PaintJob", i);
    	cache_get_field_content(0, szValue, szValue, connectionHandle); PlayerVehicleInfo[playerid][i][pvPaintJob] = strval(szValue);//
        format(szValue, 64, "pv%d_Color1", i);
    	cache_get_field_content(0, szValue, szValue, connectionHandle); PlayerVehicleInfo[playerid][i][pvCarColor][0] = strval(szValue);//
        format(szValue, 64, "pv%d_Color2", i);
    	cache_get_field_content(0, szValue, szValue, connectionHandle); PlayerVehicleInfo[playerid][i][pvCarColor][1] = strval(szValue);//
        format(szValue, 64, "pv%d_Impounded", i);
    	cache_get_field_content(0, szValue, szValue, connectionHandle); PlayerVehicleInfo[playerid][i][pvImpounded] = strval(szValue);//
        format(szValue, 64, "pv%d_Ticket", i);
    	cache_get_field_content(0, szValue, szValue, connectionHandle); PlayerVehicleInfo[playerid][i][pvTicketPrice] = strval(szValue);//
    	
    	if(IsValidVehicleModel(PlayerVehicleInfo[playerid][i][pvModelId]) && PlayerVehicleInfo[playerid][i][pvImpounded] == 0)
    	{
    	    PlayerVehicleInfo[playerid][i][pvHandleId] = CreateVehicle(PlayerVehicleInfo[playerid][i][pvModelId], PlayerVehicleInfo[playerid][i][pvPosition][0], PlayerVehicleInfo[playerid][i][pvPosition][1], PlayerVehicleInfo[playerid][i][pvPosition][2], PlayerVehicleInfo[playerid][i][pvPosition][3], PlayerVehicleInfo[playerid][i][pvCarColor][0], PlayerVehicleInfo[playerid][i][pvCarColor][1], VEHICLE_RESPAWN);
			VehicleInfo[PlayerVehicleInfo[playerid][i][pvHandleId]][vLocked] = PlayerVehicleInfo[playerid][i][pvLocked];
		}
	}
	return 1;
}

CMD:park(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You must be inside a vehicle to use this command.");
    for(new i=0; i < MAX_PLAYEROWNED_VEHICLES; i++)
    {
        if(GetPlayerVehicleID(playerid) == PlayerVehicleInfo[playerid][i][pvHandleId])
		{
		    new Float:vhealth;
			GetVehicleHealth(GetPlayerVehicleID(playerid), vhealth);
			if(vhealth < 800) return SendClientMessageEx(playerid, COLOR_GREY, "Your vehicle cannot be parked because it is too damaged to park it.");
		    GetVehiclePos(GetPlayerVehicleID(playerid), PlayerVehicleInfo[playerid][i][pvPosition][0], PlayerVehicleInfo[playerid][i][pvPosition][1], PlayerVehicleInfo[playerid][i][pvPosition][2]);
			GetVehicleZAngle(GetPlayerVehicleID(playerid), PlayerVehicleInfo[playerid][i][pvPosition][3]);
			VehicleInfo[PlayerVehicleInfo[playerid][i][pvHandleId]][vLocked] = 0;
			DestroyVehicle(PlayerVehicleInfo[playerid][i][pvHandleId]);
    	    PlayerVehicleInfo[playerid][i][pvHandleId] = CreateVehicle(PlayerVehicleInfo[playerid][i][pvModelId], PlayerVehicleInfo[playerid][i][pvPosition][0], PlayerVehicleInfo[playerid][i][pvPosition][1], PlayerVehicleInfo[playerid][i][pvPosition][2], PlayerVehicleInfo[playerid][i][pvPosition][3], PlayerVehicleInfo[playerid][i][pvCarColor][0], PlayerVehicleInfo[playerid][i][pvCarColor][1], VEHICLE_RESPAWN);
            VehicleInfo[PlayerVehicleInfo[playerid][i][pvHandleId]][vLocked] = PlayerVehicleInfo[playerid][i][pvLocked];
			MySQL_Save_Player_Vehicle(playerid, i);
            SendClientMessageEx(playerid, COLOR_WHITE, "You have successfully parked your vehicle, it will now spawn here from now on.");
			break;
		}
    }
	return 1;
}

CMD:sellmycar(playerid, params[])
{
	new string[128], targetid, price;
	if(sscanf(params, "ui", targetid, price)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /sellmycar <playerid> <price>");
	else if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You must be inside a vehicle to use this command.");
	else if(!IsPlayerConnectedEx(targetid) || playerid == targetid) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
	else if(!IsPlayerInRangeOfPlayer(playerid, targetid, 4.0)) return SendClientMessageEx(playerid, COLOR_GREY, "You must be near the specified player to use this command.");
	else if(price < 1) return SendClientMessageEx(playerid, COLOR_GREY, "Please enter a valid amount above $1.");
	
 	for(new i=0; i < MAX_PLAYEROWNED_VEHICLES; i++)
    {
	    if(GetPlayerVehicleID(playerid) == PlayerVehicleInfo[playerid][i][pvHandleId])
	    {
	        if(PlayerVehicleInfo[playerid][i][pvImpounded]) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot sell this vehicle as it has already been impounded.");
	        SetPVarInt(targetid, "VehicleOffer", playerid);
	        SetPVarInt(targetid, "VehicleOfferSlot", i);
	        SetPVarInt(targetid, "VehicleOfferPrice", price);
            format(string, sizeof(string), "* You offered %s to buy this %s for $%d.", GetPlayerNameEx(targetid), GetVehicleName(PlayerVehicleInfo[playerid][i][pvHandleId]), price);
            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
            format(string, sizeof(string), "* %s has offered you their %s for $%d, (type /accept car) to buy.", GetPlayerNameEx(playerid), GetVehicleName(PlayerVehicleInfo[playerid][i][pvHandleId]), price);
            SendClientMessageEx(targetid, COLOR_LIGHTBLUE, string);
			return 1;
		}
	}
 	SendClientMessageEx(playerid, COLOR_GREY, "You must be inside your vehicle to use this command.");
	return 1;
}

CMD:lock(playerid, params[])
{
 	if(GetPVarInt(playerid, "RentingCar") != 0)
	{
	    new Float:tmpFloats[3];
	    GetVehiclePos(GetPVarInt(playerid, "RentingCar"), tmpFloats[0], tmpFloats[1], tmpFloats[2]);
	    if(IsPlayerInRangeOfPoint(playerid, 4.0, tmpFloats[0], tmpFloats[1], tmpFloats[2]))
	    {
	        if(VehicleInfo[GetPVarInt(playerid, "RentingCar")][vLocked] == 0)
	        {
	            VehicleInfo[GetPVarInt(playerid, "RentingCar")][vLocked] = 1;
				GameTextForPlayer(playerid, "~r~locked", 1000, 6);
	        }
			else
			{
	            VehicleInfo[GetPVarInt(playerid, "RentingCar")][vLocked] = 0;
				GameTextForPlayer(playerid, "~g~unlocked", 1000, 6);
	        }
   			foreach(new p : Player) SetVehicleParamsForPlayer(GetPVarInt(playerid, "RentingCar"), p, 0, VehicleInfo[GetPVarInt(playerid, "RentingCar")][vLocked]);
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
	        return 1;
	    }
	}

    for(new i=0; i < MAX_PLAYEROWNED_VEHICLES; i++)
    {
	    new Float:tmpFloats[3];
	    GetVehiclePos(PlayerVehicleInfo[playerid][i][pvHandleId], tmpFloats[0], tmpFloats[1], tmpFloats[2]);
	    if(IsPlayerInRangeOfPoint(playerid, 4.0, tmpFloats[0], tmpFloats[1], tmpFloats[2]))
	    {
	        if(PlayerVehicleInfo[playerid][i][pvLocked] == 0)
	        {
	        	VehicleInfo[PlayerVehicleInfo[playerid][i][pvHandleId]][vLocked] = 1;
				PlayerVehicleInfo[playerid][i][pvLocked] = 1;
				GameTextForPlayer(playerid, "~r~locked", 1000, 6);
			}
			else
			{
	        	VehicleInfo[PlayerVehicleInfo[playerid][i][pvHandleId]][vLocked] = 0;
				PlayerVehicleInfo[playerid][i][pvLocked] = 0;
				GameTextForPlayer(playerid, "~g~unlocked", 1000, 6);
			}
   			foreach (new p : Player) SetVehicleParamsForPlayer(PlayerVehicleInfo[playerid][i][pvHandleId], p, 0, PlayerVehicleInfo[playerid][i][pvLocked]);
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
			MySQL_Save_Player_Vehicle(playerid, i);
			return 1;
		}
	}
 	SendClientMessageEx(playerid, COLOR_GREY, "You must be near your vehicle to use this command.");
	return 1;
}

CMD:deletecar(playerid, params[])
{
	new
	    string[128];
    for(new i=0; i < MAX_PLAYEROWNED_VEHICLES; i++)
    {
        if(PlayerVehicleInfo[playerid][i][pvModelId] != 0)
		{
		    format(string, sizeof(string), "%s(ID: %d) %s\n", string, i, VehicleNames[PlayerVehicleInfo[playerid][i][pvModelId] - 400]);
		}
		else
		{
		    format(string, sizeof(string), "%s(ID: %d) Empty\n", string, i);
		}
    }
    SendClientMessageEx(playerid, COLOR_YELLOW, "Please make sure that you are sure about deleting your vehicle, no refunds will be issued.");
    SendClientMessageEx(playerid, COLOR_YELLOW, "There is no confirmation after this, this is your only and final warning.");
    ShowPlayerDialogEx(playerid, DIALOG_DELETE_CAR, DIALOG_STYLE_LIST, "Car Deletion", string, "Delete", "Cancel");
	return 1;
}

CMD:gotocar(playerid, params[])
{
	new string[128], targetid;
	if(!IsAdmin(playerid, ADMIN_LEVEL_TRIALADMIN)) return SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use this command.");
	else if(sscanf(params, "u", targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /gotocar <playerid>");
	else if(!IsPlayerConnectedEx(targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
	SetPVarInt(playerid, "PlayerCarId", targetid);
    for(new i=0; i < MAX_PLAYEROWNED_VEHICLES; i++)
    {
        if(PlayerVehicleInfo[targetid][i][pvModelId] != 0)
		{
		    format(string, sizeof(string), "%s(ID: %d) %s\n", string, i, VehicleNames[PlayerVehicleInfo[targetid][i][pvModelId] - 400]);
        }
		else if(PlayerVehicleInfo[targetid][i][pvImpounded])
		{
		    format(string, sizeof(string), "%s(ID: %d) %s (Impounded)\n", string, i, VehicleNames[PlayerVehicleInfo[targetid][i][pvModelId] - 400]);
		}
		else if(PlayerVehicleInfo[targetid][i][pvTicketPrice] > 0)
		{
		    format(string, sizeof(string), "%s(ID: %d) %s (Tickets: $%d)\n", string, i, VehicleNames[PlayerVehicleInfo[targetid][i][pvModelId] - 400], PlayerVehicleInfo[targetid][i][pvTicketPrice]);
		} else {
		    format(string, sizeof(string), "%s(ID: %d) Empty\n", string, i);
		}
    }
    ShowPlayerDialogEx(playerid, DIALOG_TELEPORT_CAR, DIALOG_STYLE_LIST, "Teleport to Player's Car", string, "Teleport", "Cancel");
	return 1;
}

CMD:getcar(playerid, params[])
{
	new string[128], targetid;
	if(!IsAdmin(playerid, ADMIN_LEVEL_TRIALADMIN)) return SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use this command.");
	else if(sscanf(params, "u", targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /getcar <playerid>");
	else if(!IsPlayerConnectedEx(targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
	SetPVarInt(playerid, "PlayerCarId", targetid);
    for(new i=0; i < MAX_PLAYEROWNED_VEHICLES; i++)
    {
    	if(PlayerVehicleInfo[targetid][i][pvModelId] != 0)
		{
            if(PlayerVehicleInfo[targetid][i][pvImpounded])
			{
		    	format(string, sizeof(string), "%s(ID: %d) %s (Impounded)\n", string, i, VehicleNames[PlayerVehicleInfo[targetid][i][pvModelId] - 400]);
			} else if(PlayerVehicleInfo[playerid][i][pvTicketPrice] > 0)
			{
			    format(string, sizeof(string), "%s(ID: %d) %s (Tickets: $%d)\n", string, i, VehicleNames[PlayerVehicleInfo[targetid][i][pvModelId] - 400], PlayerVehicleInfo[targetid][i][pvTicketPrice]);
			} else
			{
		    	format(string, sizeof(string), "%s(ID: %d) %s\n", string, i, VehicleNames[PlayerVehicleInfo[targetid][i][pvModelId] - 400]);
			}
        }
		else
		{
		    format(string, sizeof(string), "%s(ID: %d) Empty\n", string, i);
        }
    }
    ShowPlayerDialogEx(playerid, DIALOG_BRING_CAR, DIALOG_STYLE_LIST, "Bring Player's Car", string, "Teleport", "Cancel");
	return 1;
}

CMD:trackcar(playerid, params[])
{
	new string[128];
    for(new i=0; i < MAX_PLAYEROWNED_VEHICLES; i++)
    {
        if(PlayerVehicleInfo[playerid][i][pvModelId] != 0)
		{
            if(PlayerVehicleInfo[playerid][i][pvImpounded])
			{
		    	format(string, sizeof(string), "%s(ID: %d) %s (Impounded)\n", string, i, VehicleNames[PlayerVehicleInfo[playerid][i][pvModelId] - 400]);
			}
			else if(PlayerVehicleInfo[playerid][i][pvTicketPrice] > 0)
			{
			    format(string, sizeof(string), "%s(ID: %d) %s (Tickets: $%d)\n", string, i, VehicleNames[PlayerVehicleInfo[playerid][i][pvModelId] - 400], PlayerVehicleInfo[playerid][i][pvTicketPrice]);
			} else
			{
		    	format(string, sizeof(string), "%s(ID: %d) %s\n", string, i, VehicleNames[PlayerVehicleInfo[playerid][i][pvModelId] - 400]);
			}
        }
		else
		{
		    format(string, sizeof(string), "%s(ID: %d) Empty\n", string, i);
        }
    }
    ShowPlayerDialogEx(playerid, DIALOG_TRACK_CAR, DIALOG_STYLE_LIST, "Track your Car", string, "Track", "Cancel");
	return 1;
}

MySQL_Save_Player_Vehicle(playerid, i)
{
	new
		szString[512];
	format(szString, sizeof(szString), "UPDATE `accounts` SET `pv%d_ModelId` = '%d',\
		`pv%d_PosX` = '%f',\
		`pv%d_PosY` = '%f',\
		`pv%d_PosZ` = '%f',\
		`pv%d_PosAngle` = '%f',\
		`pv%d_Ticket` = '%d',", i, PlayerVehicleInfo[playerid][i][pvModelId], i, PlayerVehicleInfo[playerid][i][pvPosition][0], i, PlayerVehicleInfo[playerid][i][pvPosition][1], i, PlayerVehicleInfo[playerid][i][pvPosition][2], i, PlayerVehicleInfo[playerid][i][pvPosition][3], i, PlayerVehicleInfo[playerid][i][pvTicketPrice]);

	format(szString, sizeof(szString), "%s`pv%d_Locked` = '%d',\
		`pv%d_PaintJob` = '%d',\
		`pv%d_Impounded` = '%d',\
		`pv%d_Color1` = '%d',\
		`pv%d_Color2` = '%d' WHERE `Id` = '%d'", szString, i, PlayerVehicleInfo[playerid][i][pvLocked], i, PlayerVehicleInfo[playerid][i][pvPaintJob], i, PlayerVehicleInfo[playerid][i][pvImpounded], i, PlayerVehicleInfo[playerid][i][pvCarColor][0], i, PlayerVehicleInfo[playerid][i][pvCarColor][1], PlayerInfo[playerid][pId]);

	mysql_query(szString, THREAD_NO_RESULT, playerid, mConnectionHandle);
}

public SavePlayerAccount(playerid, connectionHandle)
{
	if(GetPVarInt(playerid, "gPlayerLogged") == 0) return 0;

	new szQuery[3072];

	GetPlayerPos(playerid, PlayerInfo[playerid][pPositionX], PlayerInfo[playerid][pPositionY], PlayerInfo[playerid][pPositionZ]);
	GetPlayerFacingAngle(playerid, PlayerInfo[playerid][pFacingAngle]);
	GetPlayerHealth(playerid, PlayerInfo[playerid][pHealth]);
	GetPlayerArmour(playerid, PlayerInfo[playerid][pArmour]);

	if(GetPVarInt(playerid, "TaserEquipped") == 1) PlayerInfo[playerid][pWeapons][10] = LastGun[playerid];

	format(szQuery, sizeof(szQuery), "UPDATE `accounts` SET \
	    `Banned`='%d',\
		`PosX`='%f',\
		`PosY`='%f',\
	 	`PosZ`='%f',\
		`PosAngle`='%f',\
		`Interior`='%d',\
		`VirtualWorld`='%d',\
		`Money`='%d',", PlayerInfo[playerid][pBanned], PlayerInfo[playerid][pPositionX], PlayerInfo[playerid][pPositionY], PlayerInfo[playerid][pPositionZ],  PlayerInfo[playerid][pFacingAngle], PlayerInfo[playerid][pInterior], PlayerInfo[playerid][pVirtualWorld], PlayerInfo[playerid][pMoney]);

	format(szQuery, sizeof(szQuery), "%s`Hunger`='%d',\
		`Hydration`='%d',\
		`AdMute`='%d',\
		`ReportMute`='%d',\
		`JailTime`='%d',\
		`bBalance`='%d',\
		`JackedCar`='%d',", szQuery, PlayerInfo[playerid][pHunger], PlayerInfo[playerid][pHydration], PlayerInfo[playerid][pAdMute], PlayerInfo[playerid][pReportMute], PlayerInfo[playerid][pJailTime], PlayerInfo[playerid][pBankBalance], PlayerInfo[playerid][pJackedCar]);

	format(szQuery, sizeof(szQuery), "%s`Tutorial`='%d',\
		`Money`='%d',\
		`Skin`='%d',\
		`Health`='%f',\
		`Armour`='%f',\
		`Gender`='%d',\
		`Age`='%d',\
		`Experience`='%d',\
		`MedicalBill`='%d',", szQuery, PlayerInfo[playerid][pTutorial], PlayerInfo[playerid][pMoney], PlayerInfo[playerid][pSkin], PlayerInfo[playerid][pHealth], PlayerInfo[playerid][pArmour], PlayerInfo[playerid][pGender], PlayerInfo[playerid][pAge], PlayerInfo[playerid][pExperience], PlayerInfo[playerid][pMedicalBill]);

	format(szQuery, sizeof(szQuery), "%s`WalkieTalkie`='%d',\
		`Channel`='%d',\
		`PhoneNumber`='%d',\
		`Phonebook`='%d',\
		`Spraycan`='%d',\
		`DriverLicense`='%d',\
		`Gps`='%d',\
		`GunLicense`='%d',", szQuery, PlayerInfo[playerid][pWalkieTalkie], PlayerInfo[playerid][pChannel], PlayerInfo[playerid][pPhoneNumber], PlayerInfo[playerid][pPhonebook], PlayerInfo[playerid][pSprayCan], PlayerInfo[playerid][pDriverLicense], PlayerInfo[playerid][pGps], PlayerInfo[playerid][pGunLicense]);

	format(szQuery, sizeof(szQuery), "%s`wSlot1`='%d',\
		`wSlot2`='%d',\
		`wSlot3`='%d',\
		`wSlot4`='%d',\
		`wSlot5`='%d',\
		`wSlot6`='%d',\
		`wSlot7`='%d',\
		`wSlot8`='%d',\
		`wSlot9`='%d',", szQuery, PlayerInfo[playerid][pWeapons][0], PlayerInfo[playerid][pWeapons][1], PlayerInfo[playerid][pWeapons][2], PlayerInfo[playerid][pWeapons][3], PlayerInfo[playerid][pWeapons][4], PlayerInfo[playerid][pWeapons][5], PlayerInfo[playerid][pWeapons][6], PlayerInfo[playerid][pWeapons][7], PlayerInfo[playerid][pWeapons][8]);

	format(szQuery, sizeof(szQuery), "%s`wSlot10`='%d',\
	    `wSlot11`='%d',\
	    `wSlot12`='%d',\
		`PlayingHours`='%d',\
		`Job`='%d',\
		`Level`='%d',\
		`Faction`='%d',\
		`Rank`='%d',\
		`AdminLevel`='%d',", szQuery, PlayerInfo[playerid][pWeapons][9], PlayerInfo[playerid][pWeapons][10], PlayerInfo[playerid][pWeapons][11], PlayerInfo[playerid][pPlayingHours], PlayerInfo[playerid][pJob], PlayerInfo[playerid][pLevel], PlayerInfo[playerid][pFaction], PlayerInfo[playerid][pRank], PlayerInfo[playerid][pAdminLevel]);

	format(szQuery, sizeof(szQuery), "%s`WantedLevel`='%d',\
		`Family`='%d',\
		`PhonebookRemoval`='%d',\
		`Weed`='%d',\
		`Seeds`='%d',\
		`PlantX`='%f',\
		`PlantY`='%f',\
		`PlantZ`='%f',", szQuery, PlayerInfo[playerid][pWantedLevel], PlayerInfo[playerid][pFamily], PlayerInfo[playerid][pPhonebookRemoval], PlayerInfo[playerid][pWeed], PlayerInfo[playerid][pSeeds], PlayerInfo[playerid][pPlantPosition][0], PlayerInfo[playerid][pPlantPosition][1], PlayerInfo[playerid][pPlantPosition][2]);

    format(szQuery, sizeof(szQuery), "%s`PlantInterior`='%f',\
	    `PlantVw`='%f',\
		`PlantGrowth`='%d',\
		`GasCans`='%d',\
		`FishedAlready`='%d',\
		`Leadership`='%d',\
		`Hitman`='%d',\
		`Bombs`='%d',", szQuery, PlayerInfo[playerid][pPlantPosition][3], PlayerInfo[playerid][pPlantPosition][4], PlayerInfo[playerid][pPlantGrowth], PlayerInfo[playerid][pGasCans], PlayerInfo[playerid][pFishedAlready], PlayerInfo[playerid][pLeadership], PlayerInfo[playerid][pHitman], PlayerInfo[playerid][pBombs]);

    format(szQuery, sizeof(szQuery), "%s`ContractPrice`='%d',\
		`ContractReason`='%s',\
		`ContractBy`='%s',", szQuery, PlayerInfo[playerid][pContractPrice], PlayerInfo[playerid][pContractReason], PlayerInfo[playerid][pContractBy]);

	format(szQuery, sizeof(szQuery),"%s`Paycheck`='%d',\
 		`Division`='%d',\
		`SecondaryTask`='%d',\
		`Accent`='%d',\
		`CompletedHits`='%d',\
		`Reports`='%d'", szQuery, PlayerInfo[playerid][pPaycheck], PlayerInfo[playerid][pDivision], PlayerInfo[playerid][pSecondaryTask], PlayerInfo[playerid][pAccent], PlayerInfo[playerid][pCompletedHits], PlayerInfo[playerid][pReports]);

	format(szQuery, sizeof(szQuery), "%s WHERE `Id` = '%d'", szQuery, PlayerInfo[playerid][pId]);
	mysql_query(szQuery, THREAD_NO_RESULT, playerid, connectionHandle);
	return 1;
}

stock IsPlayerNearObject(playerid, objectid, Float:range)
{
	new Float:pos[3];
	GetObjectPos(objectid, pos[0], pos[1], pos[2]);
	if(IsPlayerInRangeOfPoint(playerid, range, pos[0], pos[1], pos[2])) return true;
	else return false;
}

stock IsACopCar(vehicleid)
{
	for(new i=0; i < sizeof(LSPDVehicles); i++)
	{
	    if(vehicleid == LSPDVehicles[i])
	        return true;
	}
	return false;
}

stock IsAmbulance(vehicleid)
{
	for(new i=0; i < sizeof(LSFMDVehicles); i++)
	{
	    if(vehicleid == LSFMDVehicles[i])
	        return true;
	}
	return false;
}

stock IsAFBICar(vehicleid)
{
	for(new i=0; i < sizeof(FBIVehicles); i++)
	{
	    if(vehicleid == FBIVehicles[i])
	        return true;
	}
	return false;
}

stock IsAPaCar(vehicleid)
{
	for(new i=0; i < sizeof(PAVehicles); i++)
	{
	    if(vehicleid == PAVehicles[i])
	        return true;
	}
	return false;
}

stock HasActiveCheckpoint(playerid)
{
    if(GetPVarInt(playerid, "SweepingDuty") == 1) return true;
    else if(GetPVarInt(playerid, "TakingDMVTest") == 1) return true;
    else if(GetPVarInt(playerid, "DeliveryID") > 0) return true;
    else if(GetPVarInt(playerid, "SellingCar") == 1) return true;
    else if(GetPVarInt(playerid, "DeliveryPayment") == 1) return true;
    else if(GetPVarInt(playerid, "TrackingCar") == 1) return true;
    else if(GetPVarInt(playerid, "TaxiFindPlayer") == 1) return true;
    else if(GetPVarInt(playerid, "UsingGps") == 1) return true;
    else if(GetPVarInt(playerid, "RouteId") > 0) return true;
    else if(GetPVarInt(playerid, "RoutePayment") == 1) return true;
	else if(GetPVarInt(playerid, "MedicCall") > 0) return true;
    else return false;
}

stock RemovePlayerFromVehicleEx(playerid)
{
/*
	new Float:Position[3];
	GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
   	SetPlayerPos(playerid, Position[0], Position[1], Position[2]);
   	ClearAnimations(playerid);
*/
	RemovePlayerFromVehicle(playerid);
}

/*stock CreateSyncedDynamicObject(modelid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz, worldid = -1, interiorid = -1, playerid = -1, Float:streamdistance = 1000.0, Float:drawdistance = 1000.0)
{
    new oid = CreateDynamicObject(modelid, x, y, z, rx, ry, rz, worldid, interiorid, playerid, streamdistance);
    Streamer_SetFloatData(STREAMER_TYPE_OBJECT, oid, E_STREAMER_DRAW_DISTANCE, drawdistance);
    return oid;
}*/

stock LoadObjects()
{
	// DMV Door Fix
	CreateDynamicObject(14542,1494.00000000,1301.59997559,1093.90002441,0.00000000,0.00000000,0.00000000); //object(woozies_xitbox) (1)

	// Crack Lab Fixes
	CreateDynamicObject(7191,2338.39135742,-1182.56323242,1032.95129395,90.00000000,0.00000000,90.00000000, -1, 5); //object(vegasnnewfence2b)(1)
	CreateDynamicObject(13656,2292.93872070,-1132.04724121,1017.29772949,0.00000000,0.00000000,0.00000000, -1, 5); //object(fuckknows)(1)
	CreateDynamicObject(7191,2337.95458984,-1182.54309082,1032.95129395,90.00000000,0.00000000,90.00000000, -1, 5); //object(vegasnnewfence2b)(2)
	CreateDynamicObject(7191,2338.43408203,-1182.39440918,1032.95129395,90.00000000,180.00000000,90.24850464, -1, 5); //object(vegasnnewfence2b)(3)
	CreateDynamicObject(7191,2337.97314453,-1182.39111328,1032.95129395,90.00000000,179.99450684,90.24719238, -1, 5); //object(vegasnnewfence2b)(4)
	CreateDynamicObject(7191,2328.80346680,-1180.43066406,1034.70544434,0.00000000,270.00000000,88.50006104, -1, 5); //object(vegasnnewfence2b)(5)
	CreateDynamicObject(3055,2319.78198242,-1184.82641602,1032.36450195,63.75003052,269.99996948,178.5001220, -1, 5); //object(kmb_shutter)(1)
	CreateDynamicObject(7191,2328.83715820,-1186.81262207,1030.70446777,0.00000000,90.74990845,359.99481201, -1, 5); //object(vegasnnewfence2b)(6)
	CreateDynamicObject(7191,2326.84863281,-1187.03125000,1030.70446777,0.00000000,90.74707031,359.99450684, -1, 5); //object(vegasnnewfence2b)(8)
	CreateDynamicObject(7191,2337.31689453,-1186.55639648,1030.70446777,0.00000000,90.74707031,359.99450684, -1, 5); //object(vegasnnewfence2b)(9)
	CreateDynamicObject(7191,2339.06689453,-1186.13159180,1030.70446777,0.00000000,91.24694824,359.99453735, -1, 5); //object(vegasnnewfence2b)(10)
	CreateDynamicObject(7191,2338.39062500,-1182.56250000,1032.95129395,90.00000000,0.00000000,90.00000000, -1, 5); //object(vegasnnewfence2b)(11)
	CreateDynamicObject(7191,2337.95947266,-1179.38879395,1032.95129395,90.00000000,180.00000000,270.00000000, -1, 5); //object(vegasnnewfence2b)(12)
	CreateDynamicObject(7191,2338.38476562,-1179.43066406,1032.95129395,90.00000000,0.00000000,90.00000000, -1, 5); //object(vegasnnewfence2b)(13)
	CreateDynamicObject(7191,2337.96630859,-1179.23559570,1032.95129395,90.00000000,179.99450684,90.24719238, -1, 5); //object(vegasnnewfence2b)(14)

	// Gas Station Fixes
	CreateDynamicObject(970,1942.49000000,-1766.66000000,12.90000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(970,1942.49000000,-1770.81000000,12.90000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(970,1942.49000000,-1774.95000000,12.90000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(970,1942.49000000,-1779.11000000,12.90000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(970,1940.77000000,-1766.66000000,12.90000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(970,1940.77000000,-1770.81000000,12.90000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(970,1940.77000000,-1774.95000000,12.90000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(970,1940.77000000,-1779.11000000,12.90000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19121,1941.63000000,-1781.03000000,13.16000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19121,1941.64000000,-1764.87000000,13.16000000,0.00000000,0.00000000,0.00000000);

	// ATM Objects
	CreateDynamicObject(2942, 1154.83, -1448.93, 15.43,   0.00, 0.00, -90.00);
	CreateDynamicObject(2942, -79.09, -1171.63, 1.80,   0.00, 0.00, -114.00);
	CreateDynamicObject(2942, 387.20, -1816.04, 7.47,   0.00, 0.00, -90.00);
	CreateDynamicObject(2942, 1367.25, -1290.09, 12.97,   0.00, 0.00, -90.00);
	CreateDynamicObject(2942, 1493.41, -1772.32, 18.36,   0.00, 0.00, 180.00);
	CreateDynamicObject(2942, 1748.78, -1863.59, 13.21,   0.00, 0.00, 180.00);
	CreateDynamicObject(2942, 1833.24, -1840.24, 13.21,   0.00, 0.00, -90.00);
	CreateDynamicObject(2942, 1928.57, -1779.13, 13.19,   0.00, 0.00, 90.00);
	CreateDynamicObject(2942, 2108.12, -1790.70, 13.18,   0.00, 0.00, 180.00);
	CreateDynamicObject(2942, 2228.40, -1715.64, 13.13,   0.00, 0.00, -90.00);
	CreateDynamicObject(2942, 2402.55, -1982.00, 13.19,   0.00, 0.00, 180.00);

	// White House Objects
	CreateDynamicObject(9339,1268.06933594,-996.86816406,6645.43066406,0.00000000,0.00000000,0.00000000); //object(sfnvilla001_cm) (1)
	CreateDynamicObject(10063,1297.71972656,-998.80273438,6628.18505859,0.00000000,0.00000000,0.00000000); //object(aprtmnts02_sfe) (1)
	CreateDynamicObject(9339,1273.57519531,-1008.25677490,6645.43066406,0.00000000,0.00000000,48.00000000); //object(sfnvilla001_cm) (2)
	CreateDynamicObject(9339,1272.39257812,-986.99316406,6645.43066406,0.00000000,0.00000000,137.24670410); //object(sfnvilla001_cm) (3)
	CreateDynamicObject(9339,1293.95117188,-977.71582031,6645.43066406,0.00000000,0.00000000,89.99450684); //object(sfnvilla001_cm) (4)
	CreateDynamicObject(9339,1295.46777344,-1016.38964844,6645.43066406,0.00000000,0.00000000,89.99450684); //object(sfnvilla001_cm) (5)
	CreateDynamicObject(9339,1314.49316406,-984.87792969,6645.43066406,0.00000000,0.00000000,47.99377441); //object(sfnvilla001_cm) (6)
	CreateDynamicObject(9339,1315.23828125,-1007.85449219,6645.43066406,0.00000000,0.00000000,137.24670410); //object(sfnvilla001_cm) (7)
	CreateDynamicObject(9339,1315.03125000,-996.65429688,6645.43066406,0.00000000,0.00000000,0.00000000); //object(sfnvilla001_cm) (8)
	CreateDynamicObject(9339,1277.29516602,-982.99145508,6645.43066406,0.00000000,0.00000000,0.00000000); //object(sfnvilla001_cm) (9)
	CreateDynamicObject(9339,1277.30957031,-1012.10058594,6645.43066406,0.00000000,0.00000000,0.00000000); //object(sfnvilla001_cm) (10)
	CreateDynamicObject(9339,1272.39257812,-986.99316406,6646.82714844,0.00000000,0.00000000,137.24670410); //object(sfnvilla001_cm) (13)
	CreateDynamicObject(9339,1268.06933594,-996.86816406,6646.82910156,0.00000000,0.00000000,0.00000000); //object(sfnvilla001_cm) (14)
	CreateDynamicObject(9339,1273.57519531,-1008.25585938,6646.83105469,0.00000000,0.00000000,47.99926758); //object(sfnvilla001_cm) (15)
	CreateDynamicObject(9339,1268.06933594,-996.86816406,6648.22949219,0.00000000,0.00000000,0.00000000); //object(sfnvilla001_cm) (16)
	CreateDynamicObject(9339,1272.39257812,-986.99316406,6648.22753906,0.00000000,0.00000000,137.24670410); //object(sfnvilla001_cm) (17)
	CreateDynamicObject(9339,1273.57519531,-1008.25585938,6648.23144531,0.00000000,0.00000000,47.99377441); //object(sfnvilla001_cm) (20)
	CreateDynamicObject(10063,1297.10937500,-999.51074219,6665.15917969,0.00000000,179.99450684,0.00000000); //object(aprtmnts02_sfe) (2)
	CreateDynamicObject(9339,1277.30957031,-1012.10058594,6646.83105469,0.00000000,0.00000000,0.00000000); //object(sfnvilla001_cm) (21)
	CreateDynamicObject(9339,1277.30957031,-1012.10058594,6648.23144531,0.00000000,0.00000000,0.00000000); //object(sfnvilla001_cm) (22)
	CreateDynamicObject(9339,1277.29492188,-982.99121094,6646.81933594,0.00000000,0.00000000,0.00000000); //object(sfnvilla001_cm) (23)
	CreateDynamicObject(9339,1277.29492188,-982.99121094,6648.22167969,0.00000000,0.00000000,0.00000000); //object(sfnvilla001_cm) (24)
	CreateDynamicObject(9131,1277.24816895,-999.39550781,6645.83984375,0.00000000,0.00000000,0.00000000); //object(shbbyhswall13_lvs) (1)
	CreateDynamicObject(9131,1277.24804688,-999.39550781,6648.09960938,0.00000000,0.00000000,0.00000000); //object(shbbyhswall13_lvs) (2)
	CreateDynamicObject(9131,1277.23767090,-995.73785400,6648.10156250,0.00000000,0.00000000,0.00000000); //object(shbbyhswall13_lvs) (4)
	CreateDynamicObject(9131,1277.23730469,-995.73730469,6645.85351562,0.00000000,0.00000000,0.00000000); //object(shbbyhswall13_lvs) (7)
	CreateDynamicObject(1649,1277.29736328,-997.46197510,6648.90332031,0.00000000,0.00000000,90.00000000); //object(wglasssmash) (1)
	CreateDynamicObject(1649,1277.29687500,-997.46191406,6648.90332031,0.00000000,0.00000000,269.75000000); //object(wglasssmash) (2)
	CreateDynamicObject(9339,1290.36230469,-991.86621094,6645.43066406,0.00000000,0.00000000,89.99450684); //object(sfnvilla001_cm) (4)
	CreateDynamicObject(9339,1317.98791504,-991.87829590,6645.43066406,0.00000000,0.00000000,89.99450684); //object(sfnvilla001_cm) (4)
	CreateDynamicObject(1502,1303.40625000,-991.97070312,6644.73193359,0.00000000,0.00000000,359.74731445); //object(gen_doorint04) (2)
	CreateDynamicObject(9339,1290.36230469,-991.86621094,6646.83105469,0.00000000,0.00000000,89.99450684); //object(sfnvilla001_cm) (4)
	CreateDynamicObject(9339,1290.36230469,-991.86621094,6648.23339844,0.00000000,0.00000000,89.99450684); //object(sfnvilla001_cm) (4)
	CreateDynamicObject(9339,1293.95117188,-977.71582031,6646.82324219,0.00000000,0.00000000,89.99450684); //object(sfnvilla001_cm) (4)
	CreateDynamicObject(9339,1293.95117188,-977.71582031,6648.22363281,0.00000000,0.00000000,89.99450684); //object(sfnvilla001_cm) (4)
	CreateDynamicObject(9339,1314.49316406,-984.87792969,6646.82519531,0.00000000,0.00000000,47.99377441); //object(sfnvilla001_cm) (6)
	CreateDynamicObject(9339,1314.49316406,-984.87792969,6648.21972656,0.00000000,0.00000000,47.99377441); //object(sfnvilla001_cm) (6)
	CreateDynamicObject(9339,1315.03125000,-996.65429688,6646.81933594,0.00000000,0.00000000,0.00000000); //object(sfnvilla001_cm) (8)
	CreateDynamicObject(9339,1315.03125000,-996.65429688,6648.21777344,0.00000000,0.00000000,0.00000000); //object(sfnvilla001_cm) (8)
	CreateDynamicObject(1649,1304.13378906,-991.97460938,6648.90332031,0.00000000,0.00000000,358.99475098); //object(wglasssmash) (3)
	CreateDynamicObject(1649,1304.13378906,-991.97460938,6648.90332031,0.00000000,0.00000000,179.74182129); //object(wglasssmash) (5)
	CreateDynamicObject(9339,1317.98730469,-991.87792969,6646.82910156,0.00000000,0.00000000,89.99450684); //object(sfnvilla001_cm) (4)
	CreateDynamicObject(9339,1317.98730469,-991.87792969,6648.21191406,0.00000000,0.00000000,89.99450684); //object(sfnvilla001_cm) (4)
	CreateDynamicObject(9131,1308.82617188,-986.96484375,6645.83984375,0.00000000,0.00000000,0.00000000); //object(shbbyhswall13_lvs) (8)
	CreateDynamicObject(1502,1308.55615234,-986.59039307,6644.73193359,0.00000000,0.00000000,90.00000000); //object(gen_doorint04) (5)
	CreateDynamicObject(9131,1308.83813477,-984.71166992,6645.83984375,0.00000000,0.00000000,0.00000000); //object(shbbyhswall13_lvs) (10)
	CreateDynamicObject(9339,1308.60253906,-978.78613281,6647.93457031,0.00000000,178.74755859,359.49462891); //object(sfnvilla001_cm) (8)
	CreateDynamicObject(9131,1308.82617188,-986.96484375,6648.10156250,0.00000000,0.00000000,0.00000000); //object(shbbyhswall13_lvs) (13)
	CreateDynamicObject(9131,1308.83789062,-984.71093750,6648.11132812,0.00000000,0.00000000,0.00000000); //object(shbbyhswall13_lvs) (14)
	CreateDynamicObject(1649,1308.58007812,-989.53222656,6645.59472656,0.00000000,0.00000000,89.23645020); //object(wglasssmash) (8)
	CreateDynamicObject(1649,1308.66857910,-982.05023193,6645.62988281,0.00000000,0.00000000,89.48937988); //object(wglasssmash) (9)
	CreateDynamicObject(1649,1308.58007812,-989.50292969,6645.60644531,0.00000000,0.00000000,270.48339844); //object(wglasssmash) (10)
	CreateDynamicObject(9339,1315.23828125,-1007.85449219,6646.82714844,0.00000000,0.00000000,137.24670410); //object(sfnvilla001_cm) (7)
	CreateDynamicObject(9339,1315.23828125,-1007.85449219,6648.21777344,0.00000000,0.00000000,137.24670410); //object(sfnvilla001_cm) (7)
	CreateDynamicObject(9339,1295.46777344,-1016.38964844,6646.82714844,0.00000000,0.00000000,89.99450684); //object(sfnvilla001_cm) (5)
	CreateDynamicObject(9339,1295.46777344,-1016.38964844,6648.21191406,0.00000000,0.00000000,89.99450684); //object(sfnvilla001_cm) (5)
	CreateDynamicObject(9131,1305.29589844,-991.95410156,6645.83984375,0.00000000,0.00000000,0.00000000); //object(shbbyhswall13_lvs) (15)
	CreateDynamicObject(9131,1305.29589844,-991.95410156,6648.09570312,0.00000000,0.00000000,0.00000000); //object(shbbyhswall13_lvs) (16)
	CreateDynamicObject(9131,1303.04003906,-991.88085938,6645.83984375,0.00000000,0.00000000,0.00000000); //object(shbbyhswall13_lvs) (17)
	CreateDynamicObject(9131,1303.04003906,-991.88085938,6648.09570312,0.00000000,0.00000000,0.00000000); //object(shbbyhswall13_lvs) (18)
	CreateDynamicObject(1649,1308.68359375,-982.13378906,6645.61230469,0.00000000,0.00000000,269.48364258); //object(wglasssmash) (11)
	CreateDynamicObject(9339,1291.25085449,-976.70690918,6645.43066406,0.00000000,0.00000000,0.00000000); //object(sfnvilla001_cm) (9)
	CreateDynamicObject(9339,1291.25000000,-976.70605469,6646.82910156,0.00000000,0.00000000,0.00000000); //object(sfnvilla001_cm) (9)
	CreateDynamicObject(9339,1291.25000000,-976.70605469,6648.23144531,0.00000000,0.00000000,0.00000000); //object(sfnvilla001_cm) (9)
	CreateDynamicObject(9131,1291.20983887,-989.56195068,6645.83984375,0.00000000,0.00000000,0.00000000); //object(shbbyhswall13_lvs) (19)
	CreateDynamicObject(9131,1291.20898438,-989.56152344,6648.10546875,0.00000000,0.00000000,0.00000000); //object(shbbyhswall13_lvs) (20)
	CreateDynamicObject(9339,1282.56176758,-975.71942139,6645.43066406,0.00000000,0.00000000,0.00000000); //object(sfnvilla001_cm) (9)
	CreateDynamicObject(9131,1282.61596680,-991.36804199,6645.83984375,0.00000000,0.00000000,0.00000000); //object(shbbyhswall13_lvs) (21)
	CreateDynamicObject(9131,1282.61523438,-991.36718750,6648.10937500,0.00000000,0.00000000,0.00000000); //object(shbbyhswall13_lvs) (22)
	CreateDynamicObject(1502,1282.82519531,-991.02258301,6644.73193359,0.00000000,0.00000000,90.00000000); //object(gen_doorint04) (6)
	CreateDynamicObject(9131,1282.66601562,-989.13012695,6645.83984375,0.00000000,0.00000000,0.00000000); //object(shbbyhswall13_lvs) (23)
	CreateDynamicObject(9131,1282.66601562,-989.12988281,6648.09960938,0.00000000,0.00000000,0.00000000); //object(shbbyhswall13_lvs) (24)
	CreateDynamicObject(9339,1282.56152344,-975.71875000,6648.51464844,0.00000000,0.00000000,0.00000000); //object(sfnvilla001_cm) (9)
	CreateDynamicObject(1649,1282.50146484,-986.65466309,6646.67089844,0.00000000,0.00000000,270.48339844); //object(wglasssmash) (12)
	CreateDynamicObject(1649,1282.45703125,-982.30175781,6646.67089844,0.00000000,0.00000000,270.47790527); //object(wglasssmash) (13)
	CreateDynamicObject(1649,1282.44763184,-977.93499756,6646.67089844,0.00000000,0.00000000,270.48339844); //object(wglasssmash) (14)
	CreateDynamicObject(1649,1282.50097656,-986.65429688,6646.67089844,0.00000000,0.00000000,89.73083496); //object(wglasssmash) (15)
	CreateDynamicObject(1649,1282.50292969,-982.29833984,6646.67089844,0.00000000,0.00000000,90.23339844); //object(wglasssmash) (17)
	CreateDynamicObject(1649,1282.48474121,-977.92504883,6646.67089844,0.00000000,0.00000000,90.23071289); //object(wglasssmash) (18)
	CreateDynamicObject(1811,1279.89709473,-982.88421631,6645.35839844,0.00000000,0.00000000,89.00000000); //object(med_din_chair_5) (1)
	CreateDynamicObject(14532,1278.06054688,-981.80175781,6645.71484375,0.00000000,0.00000000,219.99572754); //object(tv_stand_driv) (1)
	CreateDynamicObject(2637,1279.91406250,-984.17675781,6645.13671875,0.00000000,0.00000000,0.00000000); //object(cj_pizza_table2) (1)
	CreateDynamicObject(1811,1280.35083008,-985.38354492,6645.35839844,0.00000000,0.00000000,269.99475098); //object(med_din_chair_5) (2)
	CreateDynamicObject(1811,1279.30957031,-985.35351562,6645.35839844,0.00000000,0.00000000,269.98901367); //object(med_din_chair_5) (3)
	CreateDynamicObject(2232,1281.39721680,-977.85906982,6647.70410156,0.00000000,0.00000000,0.00000000); //object(med_speaker_4) (1)
	CreateDynamicObject(983,1282.78308105,-990.92529297,6650.41552734,90.00000000,180.04396057,179.95605469); //object(fenceshit3) (1)
	CreateDynamicObject(983,1282.78845215,-989.66760254,6650.41552734,90.00000000,180.04394531,179.95056152); //object(fenceshit3) (2)
	CreateDynamicObject(2117,1283.25708008,-985.58453369,6644.73193359,0.00000000,0.00000000,90.00000000); //object(swank_dinning_5) (1)
	CreateDynamicObject(2117,1283.28234863,-983.43255615,6644.73193359,0.00000000,0.00000000,90.00000000); //object(swank_dinning_5) (2)
	CreateDynamicObject(2059,1283.18701172,-985.59283447,6645.54687500,0.00000000,0.00000000,90.00000000); //object(cj_gunstuff1) (1)
	CreateDynamicObject(1210,1279.37512207,-984.30902100,6645.54199219,270.25024414,180.00000000,0.00000000); //object(briefcase) (1)
	CreateDynamicObject(2921,1282.23669434,-991.46496582,6647.74072266,0.00000000,0.00000000,330.00000000); //object(kmb_cam) (1)
	CreateDynamicObject(16779,1279.96520996,-984.15631104,6648.49462891,0.00000000,0.00000000,0.00000000); //object(ufo_light02) (1)
	CreateDynamicObject(1958,1282.98425293,-982.19934082,6645.58886719,0.00000000,0.00000000,0.00000000); //object(mxr_mix_body) (1)
	CreateDynamicObject(2007,1285.99316406,-978.38867188,6644.73193359,0.00000000,0.00000000,0.00000000); //object(filing_cab_nu01) (1)
	CreateDynamicObject(2007,1284.99304199,-978.37750244,6644.73193359,0.00000000,0.00000000,0.00000000); //object(filing_cab_nu01) (2)
	CreateDynamicObject(2007,1284.00512695,-978.36938477,6644.73193359,0.00000000,0.00000000,0.00000000); //object(filing_cab_nu01) (3)
	CreateDynamicObject(1998,1290.53588867,-987.57983398,6644.73193359,0.00000000,0.00000000,181.00000000); //object(officedesk1l) (1)
	CreateDynamicObject(2008,1287.60253906,-988.65411377,6644.73193359,0.00000000,0.00000000,180.75000000); //object(officedesk1) (1)
	CreateDynamicObject(2008,1287.53479004,-984.34436035,6644.73193359,0.00000000,0.00000000,180.74707031); //object(officedesk1) (2)
	CreateDynamicObject(1998,1290.48779297,-983.30017090,6644.73193359,0.00000000,0.00000000,180.99975586); //object(officedesk1l) (2)
	CreateDynamicObject(2008,1287.84692383,-978.43115234,6644.73193359,0.00000000,0.00000000,359.24707031); //object(officedesk1) (3)
	CreateDynamicObject(2186,1290.60815430,-979.90502930,6644.73193359,0.00000000,0.00000000,270.00000000); //object(photocopier_1) (1)
	CreateDynamicObject(1671,1286.67382812,-983.43151855,6645.19238281,0.00000000,0.00000000,0.00000000); //object(swivelchair_a) (1)
	CreateDynamicObject(1671,1289.61315918,-983.27612305,6645.19238281,0.00000000,0.00000000,0.00000000); //object(swivelchair_a) (2)
	CreateDynamicObject(1671,1286.68322754,-987.72802734,6645.19238281,0.00000000,0.00000000,0.00000000); //object(swivelchair_a) (3)
	CreateDynamicObject(1671,1289.67382812,-987.66113281,6645.19238281,0.00000000,0.00000000,0.00000000); //object(swivelchair_a) (4)
	CreateDynamicObject(1671,1288.92395020,-979.44848633,6645.19238281,0.00000000,0.00000000,180.74996948); //object(swivelchair_a) (5)
	CreateDynamicObject(1783,1283.04809570,-982.87719727,6645.60986328,0.00000000,0.00000000,90.00000000); //object(swank_video_2) (1)
	CreateDynamicObject(1808,1280.24401855,-991.52886963,6644.73193359,0.00000000,0.00000000,180.00000000); //object(cj_watercooler2) (1)
	CreateDynamicObject(1808,1290.87194824,-985.23187256,6644.73193359,0.00000000,0.00000000,269.99447632); //object(cj_watercooler2) (3)
	CreateDynamicObject(2596,1290.97497559,-977.96569824,6646.99951172,0.00000000,0.00000000,316.00000000); //object(cj_sex_tv) (1)
	CreateDynamicObject(2815,1288.07031250,-985.95373535,6644.73193359,0.00000000,0.00000000,270.00000000); //object(gb_livingrug01) (1)
	CreateDynamicObject(2818,1287.64648438,-982.23706055,6644.73193359,0.00000000,0.00000000,0.00000000); //object(gb_bedrug02) (1)
	CreateDynamicObject(2855,1283.41821289,-984.37750244,6645.53906250,0.00000000,0.00000000,60.00000000); //object(gb_bedmags05) (1)
	CreateDynamicObject(2737,1288.52575684,-991.67932129,6646.39355469,0.00000000,0.00000000,180.00000000); //object(police_nb_car) (1)
	CreateDynamicObject(2737,1285.38513184,-991.68457031,6646.39355469,0.00000000,0.00000000,179.99450684); //object(police_nb_car) (2)
	CreateDynamicObject(1714,1313.01855469,-988.92968750,6644.73193359,0.00000000,0.00000000,231.24572754); //object(kb_swivelchair1) (1)
	CreateDynamicObject(2204,1311.85913086,-982.80267334,6644.73193359,0.00000000,0.00000000,318.00000000); //object(med_office8_cabinet) (3)
	CreateDynamicObject(1828,1311.10803223,-985.84082031,6644.73193359,0.00000000,0.00000000,89.99996948); //object(man_sdr_rug) (1)
	CreateDynamicObject(2186,1314.39050293,-985.81652832,6644.73193359,0.00000000,0.00000000,269.50000000); //object(photocopier_1) (2)
	CreateDynamicObject(2190,1312.43115234,-987.39508057,6645.66845703,0.00000000,0.00000000,0.00000000); //object(pc_1) (1)
	CreateDynamicObject(2828,1313.22167969,-984.33215332,6645.77197266,0.00000000,0.00000000,108.25000000); //object(gb_ornament02) (1)
	CreateDynamicObject(2855,1312.64514160,-983.79077148,6645.48828125,0.00000000,0.00000000,43.00000000); //object(gb_bedmags05) (2)
	CreateDynamicObject(14604,1314.21191406,-990.99414062,6645.71240234,0.00000000,0.00000000,39.99572754); //object(tv_stand_bike) (1)
	CreateDynamicObject(2205,1311.53833008,-988.52569580,6644.73193359,0.00000000,0.00000000,54.00000000); //object(med_office8_desk_1) (2)
	CreateDynamicObject(2205,1311.13574219,-991.21984863,6644.73193359,0.00000000,0.00000000,90.74780273); //object(med_office8_desk_1) (3)
	CreateDynamicObject(2310,1310.85449219,-987.12988281,6645.23095703,0.00000000,0.00000000,145.99734497); //object(mike_din_chair) (1)
	CreateDynamicObject(2828,1311.38671875,-988.50457764,6645.66845703,0.00000000,0.00000000,248.00000000); //object(gb_ornament02) (2)
	CreateDynamicObject(2824,1311.21191406,-990.34777832,6645.66845703,0.00000000,0.00000000,90.00000000); //object(gb_novels02) (1)
	CreateDynamicObject(2700,1309.00402832,-991.48443604,6647.93310547,0.00000000,5.50000000,31.75003052); //object(cj_sex_tv2) (1)
	CreateDynamicObject(2344,1311.32946777,-989.50872803,6645.67871094,0.00000000,0.00000000,300.00000000); //object(cj_remote) (1)
	CreateDynamicObject(2010,1309.02539062,-991.24511719,6644.70312500,0.00000000,0.00000000,0.00000000); //object(nu_plant3_ofc) (1)
	CreateDynamicObject(2010,1309.27673340,-981.14495850,6644.70312500,0.00000000,0.00000000,0.00000000); //object(nu_plant3_ofc) (2)
	CreateDynamicObject(2008,1295.63452148,-987.46575928,6644.73193359,0.00000000,0.00000000,270.74707031); //object(officedesk1) (4)
	CreateDynamicObject(2008,1295.58898926,-982.56781006,6644.73193359,0.00000000,0.00000000,271.24707031); //object(officedesk1) (5)
	CreateDynamicObject(1998,1294.46411133,-978.50500488,6644.73193359,0.00000000,0.00000000,271.24975586); //object(officedesk1l) (5)
	CreateDynamicObject(1998,1298.98205566,-978.51202393,6644.73193359,0.00000000,0.00000000,270.49426270); //object(officedesk1l) (6)
	CreateDynamicObject(1998,1303.76940918,-978.60473633,6644.73193359,0.00000000,0.00000000,269.74426270); //object(officedesk1l) (7)
	CreateDynamicObject(2008,1300.00305176,-982.60980225,6644.73193359,0.00000000,0.00000000,271.24694824); //object(officedesk1) (6)
	CreateDynamicObject(2008,1304.74743652,-982.69580078,6644.73193359,0.00000000,0.00000000,269.74694824); //object(officedesk1) (7)
	CreateDynamicObject(2008,1300.02697754,-987.48321533,6644.73193359,0.00000000,0.00000000,269.74182129); //object(officedesk1) (8)
	CreateDynamicObject(2008,1304.69482422,-987.51489258,6644.73193359,0.00000000,0.00000000,269.74182129); //object(officedesk1) (9)
	CreateDynamicObject(1671,1294.48730469,-988.38653564,6645.19238281,0.00000000,0.00000000,91.00000000); //object(swivelchair_a) (6)
	CreateDynamicObject(1671,1298.97509766,-988.40728760,6645.19238281,0.00000000,0.00000000,90.99975586); //object(swivelchair_a) (7)
	CreateDynamicObject(1671,1303.61401367,-988.37750244,6645.19238281,0.00000000,0.00000000,90.99975586); //object(swivelchair_a) (8)
	CreateDynamicObject(1671,1303.66809082,-983.57525635,6645.19238281,0.00000000,0.00000000,90.99975586); //object(swivelchair_a) (9)
	CreateDynamicObject(1671,1303.76501465,-979.41949463,6645.19238281,0.00000000,0.00000000,90.99975586); //object(swivelchair_a) (10)
	CreateDynamicObject(1671,1298.97412109,-979.37603760,6645.19238281,0.00000000,0.00000000,90.99975586); //object(swivelchair_a) (11)
	CreateDynamicObject(1671,1298.92773438,-983.52539062,6645.19238281,0.00000000,0.00000000,90.99426270); //object(swivelchair_a) (12)
	CreateDynamicObject(1671,1294.44714355,-979.52191162,6645.19238281,0.00000000,0.00000000,90.99975586); //object(swivelchair_a) (13)
	CreateDynamicObject(1671,1294.52294922,-983.46099854,6645.19238281,0.00000000,0.00000000,90.99975586); //object(swivelchair_a) (14)
	CreateDynamicObject(2815,1298.29052734,-985.08306885,6644.73193359,0.00000000,0.00000000,180.00000000); //object(gb_livingrug01) (2)
	CreateDynamicObject(2817,1297.39648438,-981.47924805,6644.73193359,0.00000000,0.00000000,0.00000000); //object(gb_bedrug01) (2)
	CreateDynamicObject(2818,1302.27038574,-981.51824951,6644.73193359,0.00000000,0.00000000,0.00000000); //object(gb_bedrug02) (2)
	CreateDynamicObject(2834,1302.23522949,-986.04357910,6644.73193359,0.00000000,0.00000000,0.00000000); //object(gb_livingrug03) (1)
	CreateDynamicObject(2186,1291.95239258,-981.76910400,6644.73193359,0.00000000,0.00000000,91.00000000); //object(photocopier_1) (3)
	CreateDynamicObject(2007,1291.90332031,-985.94921875,6644.73193359,0.00000000,0.00000000,90.00000000); //object(filing_cab_nu01) (1)
	CreateDynamicObject(2007,1291.90356445,-986.94439697,6644.73193359,0.00000000,0.00000000,90.00000000); //object(filing_cab_nu01) (1)
	CreateDynamicObject(2007,1291.90039062,-984.94335938,6644.73193359,0.00000000,0.00000000,90.00000000); //object(filing_cab_nu01) (1)
	CreateDynamicObject(2010,1291.99450684,-978.39587402,6644.70312500,0.00000000,0.00000000,0.00000000); //object(nu_plant3_ofc) (3)
	CreateDynamicObject(2010,1283.61767578,-988.06048584,6644.70312500,0.00000000,0.00000000,0.00000000); //object(nu_plant3_ofc) (4)
	CreateDynamicObject(2612,1295.48242188,-991.67968750,6646.44335938,0.00000000,0.00000000,179.99450684); //object(police_nb2) (4)
	CreateDynamicObject(2611,1299.11132812,-991.68652344,6646.44042969,0.00000000,0.00000000,179.74731445); //object(police_nb1) (1)
	CreateDynamicObject(2614,1314.85180664,-988.26794434,6647.36230469,0.00000000,0.00000000,270.00000000); //object(cj_us_flag) (1)
	CreateDynamicObject(9339,1290.31640625,-1002.93743896,6648.22167969,0.00000000,0.00000000,89.99450684); //object(sfnvilla001_cm) (5)
	CreateDynamicObject(9339,1290.31640625,-1002.93652344,6646.82519531,0.00000000,0.00000000,89.99450684); //object(sfnvilla001_cm) (5)
	CreateDynamicObject(9339,1290.31640625,-1002.93652344,6645.43457031,0.00000000,0.00000000,89.99450684); //object(sfnvilla001_cm) (5)
	CreateDynamicObject(9339,1303.73022461,-1018.62280273,6645.43066406,0.00000000,0.00000000,0.00000000); //object(sfnvilla001_cm) (8)
	CreateDynamicObject(9131,1303.56738281,-1002.94433594,6645.83984375,0.00000000,0.00000000,0.00000000); //object(shbbyhswall13_lvs) (15)
	CreateDynamicObject(9131,1303.56738281,-1002.94433594,6648.10546875,0.00000000,0.00000000,0.00000000); //object(shbbyhswall13_lvs) (15)
	CreateDynamicObject(1502,1303.81054688,-1003.29687500,6644.73193359,0.00000000,0.00000000,270.00000000); //object(gen_doorint04) (2)
	CreateDynamicObject(9131,1303.58496094,-1005.19140625,6645.83984375,0.00000000,0.00000000,0.00000000); //object(shbbyhswall13_lvs) (15)
	CreateDynamicObject(9131,1303.58496094,-1005.19140625,6648.10351562,0.00000000,0.00000000,0.00000000); //object(shbbyhswall13_lvs) (15)
	CreateDynamicObject(9339,1303.72949219,-1018.62207031,6646.83105469,0.00000000,0.00000000,0.00000000); //object(sfnvilla001_cm) (8)
	CreateDynamicObject(9339,1303.72949219,-1018.62207031,6648.22753906,0.00000000,0.00000000,0.00000000); //object(sfnvilla001_cm) (8)
	CreateDynamicObject(1649,1303.83496094,-1004.94140625,6648.90332031,0.00000000,0.00000000,89.99450684); //object(wglasssmash) (3)
	CreateDynamicObject(9339,1294.62878418,-1018.37738037,6645.43066406,0.00000000,0.00000000,0.00000000); //object(sfnvilla001_cm) (8)
	CreateDynamicObject(9339,1298.89270020,-1019.45019531,6645.43066406,0.00000000,0.00000000,0.00000000); //object(sfnvilla001_cm) (8)
	CreateDynamicObject(1649,1303.84667969,-1004.94152832,6648.90332031,0.00000000,0.00000000,269.99450684); //object(wglasssmash) (3)
	CreateDynamicObject(9339,1298.89257812,-1019.45019531,6646.82910156,0.00000000,0.00000000,0.00000000); //object(sfnvilla001_cm) (8)
	CreateDynamicObject(9339,1298.89465332,-1019.44757080,6648.23144531,0.00000000,0.00000000,0.00000000); //object(sfnvilla001_cm) (8)
	CreateDynamicObject(2007,1299.53906250,-1006.89190674,6644.73193359,0.00000000,0.00000000,90.00000000); //object(filing_cab_nu01) (1)
	CreateDynamicObject(2007,1299.54553223,-1007.88604736,6644.73193359,0.00000000,0.00000000,90.00000000); //object(filing_cab_nu01) (1)
	CreateDynamicObject(2007,1299.55725098,-1008.88031006,6644.73193359,0.00000000,0.00000000,90.00000000); //object(filing_cab_nu01) (1)
	CreateDynamicObject(2007,1299.55712891,-1009.88000488,6644.73193359,0.00000000,0.00000000,90.00000000); //object(filing_cab_nu01) (1)
	CreateDynamicObject(2007,1299.55664062,-1009.87988281,6646.12841797,0.00000000,0.00000000,90.00000000); //object(filing_cab_nu01) (1)
	CreateDynamicObject(2007,1299.55664062,-1008.87988281,6646.12841797,0.00000000,0.00000000,90.00000000); //object(filing_cab_nu01) (1)
	CreateDynamicObject(2007,1299.54492188,-1007.88574219,6646.12255859,0.00000000,0.00000000,90.00000000); //object(filing_cab_nu01) (1)
	CreateDynamicObject(2007,1299.53906250,-1006.89160156,6646.12255859,0.00000000,0.00000000,90.00000000); //object(filing_cab_nu01) (1)
	CreateDynamicObject(2007,1299.47949219,-1015.73559570,6644.73193359,0.00000000,0.00000000,90.00000000); //object(filing_cab_nu01) (1)
	CreateDynamicObject(2007,1299.47961426,-1014.73455811,6644.73193359,0.00000000,0.00000000,90.00000000); //object(filing_cab_nu01) (1)
	CreateDynamicObject(2007,1299.46948242,-1013.74572754,6644.73193359,0.00000000,0.00000000,90.00000000); //object(filing_cab_nu01) (1)
	CreateDynamicObject(2007,1299.46875000,-1013.74511719,6646.13232422,0.00000000,0.00000000,90.00000000); //object(filing_cab_nu01) (1)
	CreateDynamicObject(2007,1299.47949219,-1014.73437500,6646.13037109,0.00000000,0.00000000,90.00000000); //object(filing_cab_nu01) (1)
	CreateDynamicObject(2007,1299.47949219,-1015.73535156,6646.12841797,0.00000000,0.00000000,90.00000000); //object(filing_cab_nu01) (1)
	CreateDynamicObject(2007,1299.97094727,-1015.74700928,6644.73193359,0.00000000,0.00000000,179.50000000); //object(filing_cab_nu01) (1)
	CreateDynamicObject(2007,1299.97070312,-1015.74609375,6646.13232422,0.00000000,0.00000000,179.49462891); //object(filing_cab_nu01) (1)
	CreateDynamicObject(2007,1300.97094727,-1015.74890137,6644.73193359,0.00000000,0.00000000,179.49462891); //object(filing_cab_nu01) (1)
	CreateDynamicObject(2007,1300.97070312,-1015.74804688,6646.13037109,0.00000000,0.00000000,179.49462891); //object(filing_cab_nu01) (1)
	CreateDynamicObject(2007,1299.55163574,-1010.87524414,6644.73193359,0.00000000,0.00000000,90.00000000); //object(filing_cab_nu01) (1)
	CreateDynamicObject(2007,1299.55078125,-1010.87500000,6646.12451172,0.00000000,0.00000000,90.00000000); //object(filing_cab_nu01) (1)
	CreateDynamicObject(2007,1298.24523926,-1006.87750244,6644.73193359,0.00000000,0.00000000,269.75000000); //object(filing_cab_nu01) (1)
	CreateDynamicObject(2007,1298.23937988,-1007.87664795,6644.73193359,0.00000000,0.00000000,269.74731445); //object(filing_cab_nu01) (1)
	CreateDynamicObject(2007,1298.24572754,-1008.87152100,6644.73193359,0.00000000,0.00000000,269.75000000); //object(filing_cab_nu01) (1)
	CreateDynamicObject(2007,1298.25109863,-1009.85955811,6644.73193359,0.00000000,0.00000000,269.74731445); //object(filing_cab_nu01) (1)
	CreateDynamicObject(2007,1298.24926758,-1010.84948730,6644.73193359,0.00000000,0.00000000,269.74731445); //object(filing_cab_nu01) (1)
	CreateDynamicObject(2007,1298.24902344,-1010.84863281,6646.13037109,0.00000000,0.00000000,269.74731445); //object(filing_cab_nu01) (1)
	CreateDynamicObject(2007,1298.25097656,-1009.85937500,6646.13037109,0.00000000,0.00000000,269.74731445); //object(filing_cab_nu01) (1)
	CreateDynamicObject(2007,1298.24511719,-1008.87109375,6646.13037109,0.00000000,0.00000000,269.74731445); //object(filing_cab_nu01) (1)
	CreateDynamicObject(2007,1298.23925781,-1007.87597656,6646.12841797,0.00000000,0.00000000,269.74731445); //object(filing_cab_nu01) (1)
	CreateDynamicObject(2007,1298.24511719,-1006.87695312,6646.13037109,0.00000000,0.00000000,269.74731445); //object(filing_cab_nu01) (1)
	CreateDynamicObject(2007,1295.28662109,-1006.76550293,6644.73193359,0.00000000,0.00000000,90.00000000); //object(filing_cab_nu01) (1)
	CreateDynamicObject(2007,1295.28747559,-1007.75909424,6644.73193359,0.00000000,0.00000000,90.00000000); //object(filing_cab_nu01) (1)
	CreateDynamicObject(2007,1295.29431152,-1008.75891113,6644.73193359,0.00000000,0.00000000,90.00000000); //object(filing_cab_nu01) (1)
	CreateDynamicObject(2007,1295.30029297,-1009.75830078,6644.73193359,0.00000000,0.00000000,90.00000000); //object(filing_cab_nu01) (1)
	CreateDynamicObject(2007,1295.29882812,-1010.75781250,6644.73193359,0.00000000,0.00000000,90.00000000); //object(filing_cab_nu01) (1)
	CreateDynamicObject(2007,1295.29882812,-1010.75781250,6646.12841797,0.00000000,0.00000000,90.00000000); //object(filing_cab_nu01) (1)
	CreateDynamicObject(2007,1295.29980469,-1009.75781250,6646.12255859,0.00000000,0.00000000,90.00000000); //object(filing_cab_nu01) (1)
	CreateDynamicObject(2007,1295.29394531,-1008.75878906,6646.13232422,0.00000000,0.00000000,90.00000000); //object(filing_cab_nu01) (1)
	CreateDynamicObject(2007,1295.28710938,-1007.75878906,6646.12451172,0.00000000,0.00000000,90.00000000); //object(filing_cab_nu01) (1)
	CreateDynamicObject(2007,1295.28613281,-1006.76464844,6646.13232422,0.00000000,0.00000000,90.00000000); //object(filing_cab_nu01) (1)
	CreateDynamicObject(1433,1296.04785156,-1015.67584229,6644.91162109,0.00000000,0.00000000,0.00000000); //object(dyn_table_1) (1)
	CreateDynamicObject(1721,1297.07604980,-1016.07586670,6644.73193359,0.00000000,0.00000000,0.00000000); //object(est_chair1) (1)
	CreateDynamicObject(1721,1295.10400391,-1016.12152100,6644.73193359,0.00000000,0.00000000,0.00000000); //object(est_chair1) (2)
	CreateDynamicObject(2010,1298.20959473,-1015.45220947,6644.70312500,0.00000000,0.00000000,0.00000000); //object(nu_plant3_ofc) (1)
	CreateDynamicObject(2010,1295.42285156,-1003.49316406,6644.70312500,0.00000000,0.00000000,0.00000000); //object(nu_plant3_ofc) (1)
	CreateDynamicObject(2165,1303.09033203,-1007.54095459,6644.73193359,0.00000000,0.00000000,270.25000000); //object(med_office_desk_1) (1)
	CreateDynamicObject(2171,1303.07727051,-1009.46069336,6644.73193359,0.00000000,0.00000000,270.00000000); //object(med_office4_desk_1) (1)
	CreateDynamicObject(2010,1303.03894043,-1015.52508545,6644.70312500,0.00000000,0.00000000,0.00000000); //object(nu_plant3_ofc) (1)
	CreateDynamicObject(9339,1319.58093262,-1008.01367188,6645.43066406,0.00000000,0.00000000,89.99450684); //object(sfnvilla001_cm) (5)
	CreateDynamicObject(9131,1304.24365234,-1008.15423584,6645.83984375,0.00000000,0.00000000,0.00000000); //object(shbbyhswall13_lvs) (15)
	CreateDynamicObject(1502,1304.60595703,-1008.01403809,6644.73193359,0.00000000,0.00000000,359.74731445); //object(gen_doorint04) (2)
	CreateDynamicObject(9131,1306.50231934,-1008.15472412,6645.83984375,0.00000000,0.00000000,0.00000000); //object(shbbyhswall13_lvs) (15)
	CreateDynamicObject(9339,1319.58007812,-1008.01367188,6646.82519531,0.00000000,0.00000000,89.99450684); //object(sfnvilla001_cm) (5)
	CreateDynamicObject(9339,1319.58007812,-1008.01367188,6648.21972656,0.00000000,0.00000000,89.99450684); //object(sfnvilla001_cm) (5)
	CreateDynamicObject(1649,1306.35607910,-1007.94927979,6648.90332031,0.00000000,0.00000000,179.74182129); //object(wglasssmash) (5)
	CreateDynamicObject(1649,1306.35791016,-1008.00720215,6648.90332031,0.00000000,0.00000000,359.49185181); //object(wglasssmash) (5)
	CreateDynamicObject(9131,1304.24316406,-1008.15332031,6648.10742188,0.00000000,0.00000000,0.00000000); //object(shbbyhswall13_lvs) (15)
	CreateDynamicObject(9131,1306.50195312,-1008.15429688,6648.10351562,0.00000000,0.00000000,0.00000000); //object(shbbyhswall13_lvs) (15)
	CreateDynamicObject(2136,1308.30200195,-1008.66253662,6644.73193359,0.00000000,0.00000000,0.00000000); //object(cj_k3_sink) (1)
	CreateDynamicObject(2135,1310.25732422,-1008.66479492,6644.73193359,0.00000000,0.00000000,0.00000000); //object(cj_k3_cooker) (1)
	CreateDynamicObject(2297,1306.32043457,-1015.96075439,6644.69580078,0.00000000,0.00000000,135.00000000); //object(tv_unit_2) (1)
	CreateDynamicObject(2344,1304.91381836,-1015.60528564,6645.45605469,0.00000000,0.00000000,120.00000000); //object(cj_remote) (2)
	CreateDynamicObject(2835,1305.37402344,-1013.02923584,6644.73193359,0.00000000,0.00000000,271.00000000); //object(gb_livingrug04) (1)
	CreateDynamicObject(2109,1309.42028809,-1011.17669678,6645.12304688,0.00000000,0.00000000,0.00000000); //object(low_dinning_3) (1)
	CreateDynamicObject(1702,1304.35522461,-1014.48730469,6644.73193359,0.00000000,0.00000000,90.00000000); //object(kb_couch06) (1)
	CreateDynamicObject(1702,1307.44067383,-1012.48077393,6644.73193359,0.00000000,0.00000000,270.00000000); //object(kb_couch06) (2)
	CreateDynamicObject(1814,1306.38732910,-1013.93206787,6644.73193359,0.00000000,0.00000000,90.00000000); //object(coffee_med_1) (1)
	CreateDynamicObject(2140,1311.23291016,-1008.67980957,6644.73193359,0.00000000,0.00000000,0.00000000); //object(cj_k3_tall_unit1) (1)
	CreateDynamicObject(2138,1308.31469727,-1008.65643311,6644.73193359,0.00000000,0.00000000,0.00000000); //object(cj_k3_low_unit1) (1)
	CreateDynamicObject(1811,1309.14636230,-1012.63812256,6645.34716797,0.00000000,0.00000000,262.00000000); //object(med_din_chair_5) (4)
	CreateDynamicObject(1811,1307.99230957,-1010.70617676,6645.34716797,0.00000000,0.00000000,166.49645996); //object(med_din_chair_5) (5)
	CreateDynamicObject(1811,1310.72961426,-1010.51745605,6645.34716797,0.00000000,0.00000000,27.24224854); //object(med_din_chair_5) (6)
	CreateDynamicObject(9339,1311.92297363,-1005.84942627,6645.43066406,0.00000000,0.00000000,24.00000000); //object(sfnvilla001_cm) (8)
	CreateDynamicObject(1502,1305.66210938,-992.31353760,6644.73193359,0.00000000,0.00000000,296.74731445); //object(gen_doorint04) (2)
	CreateDynamicObject(9131,1306.72790527,-994.04461670,6645.83984375,0.00000000,0.00000000,0.00000000); //object(shbbyhswall13_lvs) (15)
	CreateDynamicObject(9131,1306.72753906,-994.04394531,6648.09960938,0.00000000,0.00000000,0.00000000); //object(shbbyhswall13_lvs) (15)
	CreateDynamicObject(9339,1311.92285156,-1005.84863281,6646.83105469,0.00000000,0.00000000,23.99963379); //object(sfnvilla001_cm) (8)
	CreateDynamicObject(9339,1311.92285156,-1005.84863281,6648.22949219,0.00000000,0.00000000,23.99963379); //object(sfnvilla001_cm) (8)
	CreateDynamicObject(1649,1306.58581543,-994.11212158,6648.90332031,0.00000000,0.00000000,296.99475098); //object(wglasssmash) (3)
	CreateDynamicObject(9339,1317.13244629,-1003.76074219,6645.43066406,0.00000000,0.00000000,23.99963379); //object(sfnvilla001_cm) (8)
	CreateDynamicObject(9339,1317.13183594,-1003.76074219,6646.82519531,0.00000000,0.00000000,23.99963379); //object(sfnvilla001_cm) (8)
	CreateDynamicObject(9339,1317.13183594,-1003.76074219,6648.22167969,0.00000000,0.00000000,23.99963379); //object(sfnvilla001_cm) (8)
	CreateDynamicObject(1649,1306.58496094,-994.11132812,6648.90332031,0.00000000,0.00000000,116.99349976); //object(wglasssmash) (3)
	CreateDynamicObject(2010,1312.61914062,-1009.10058594,6644.70312500,0.00000000,0.00000000,0.00000000); //object(nu_plant3_ofc) (1)
	CreateDynamicObject(2010,1304.36169434,-1015.66174316,6644.70312500,0.00000000,0.00000000,0.00000000); //object(nu_plant3_ofc) (1)
	CreateDynamicObject(2010,1307.07568359,-1015.68951416,6644.70312500,0.00000000,0.00000000,0.00000000); //object(nu_plant3_ofc) (1)
	CreateDynamicObject(2832,1309.37145996,-1011.27813721,6645.54589844,0.00000000,0.00000000,0.00000000); //object(gb_platedirty05) (1)
	CreateDynamicObject(2637,1312.01074219,-999.31805420,6645.13671875,0.00000000,0.00000000,24.25000000); //object(cj_pizza_table2) (1)
	CreateDynamicObject(2637,1311.49511719,-998.17968750,6645.13671875,0.00000000,0.00000000,24.24133301); //object(cj_pizza_table2) (1)
	CreateDynamicObject(2637,1310.98437500,-997.04663086,6645.13671875,0.00000000,0.00000000,24.24682617); //object(cj_pizza_table2) (1)
	CreateDynamicObject(2637,1310.47717285,-995.92071533,6645.13671875,0.00000000,0.00000000,24.24682617); //object(cj_pizza_table2) (1)
	CreateDynamicObject(1671,1309.20996094,-996.50195312,6645.19238281,0.00000000,0.00000000,114.49401855); //object(swivelchair_a) (12)
	CreateDynamicObject(1671,1309.69238281,-997.58691406,6645.19238281,0.00000000,0.00000000,114.49401855); //object(swivelchair_a) (12)
	CreateDynamicObject(1671,1310.19152832,-998.74810791,6645.19238281,0.00000000,0.00000000,114.49401855); //object(swivelchair_a) (12)
	CreateDynamicObject(1671,1310.69531250,-999.82208252,6645.19238281,0.00000000,0.00000000,114.49401855); //object(swivelchair_a) (12)
	CreateDynamicObject(1671,1313.31347656,-998.68249512,6645.19238281,0.00000000,0.00000000,295.49398804); //object(swivelchair_a) (12)
	CreateDynamicObject(1671,1312.84631348,-997.63317871,6645.19238281,0.00000000,0.00000000,294.49377441); //object(swivelchair_a) (12)
	CreateDynamicObject(1671,1312.33898926,-996.50103760,6645.19238281,0.00000000,0.00000000,294.48852539); //object(swivelchair_a) (12)
	CreateDynamicObject(1671,1311.82604980,-995.32067871,6645.19238281,0.00000000,0.00000000,294.48852539); //object(swivelchair_a) (12)
	CreateDynamicObject(1714,1312.56530762,-1000.58227539,6644.73193359,0.00000000,0.00000000,205.49572754); //object(kb_swivelchair1) (1)
	CreateDynamicObject(14604,1311.49853516,-1002.92346191,6645.71240234,0.00000000,0.00000000,355.74572754); //object(tv_stand_bike) (1)
	CreateDynamicObject(2010,1311.46508789,-992.69970703,6644.70312500,0.00000000,0.00000000,0.00000000); //object(nu_plant3_ofc) (1)
	CreateDynamicObject(2010,1314.29296875,-1002.49920654,6644.70312500,0.00000000,0.00000000,0.00000000); //object(nu_plant3_ofc) (1)
	CreateDynamicObject(9339,1323.90930176,-1003.37506104,6645.43066406,0.00000000,0.00000000,89.99450684); //object(sfnvilla001_cm) (5)
	CreateDynamicObject(9339,1323.90917969,-1003.37500000,6646.81933594,0.00000000,0.00000000,89.99450684); //object(sfnvilla001_cm) (5)
	CreateDynamicObject(9339,1323.90917969,-1003.37500000,6648.21191406,0.00000000,0.00000000,89.99450684); //object(sfnvilla001_cm) (5)
	CreateDynamicObject(2611,1313.39208984,-995.80316162,6646.44042969,0.00000000,0.00000000,293.99731445); //object(police_nb1) (1)
	CreateDynamicObject(2612,1308.90808105,-998.61291504,6646.44335938,0.00000000,0.00000000,113.99447632); //object(police_nb2) (4)
	CreateDynamicObject(9131,1294.63549805,-1003.43548584,6645.83984375,0.00000000,0.00000000,0.00000000); //object(shbbyhswall13_lvs) (15)
	CreateDynamicObject(9131,1294.63476562,-1003.43457031,6648.07617188,0.00000000,0.00000000,0.00000000); //object(shbbyhswall13_lvs) (15)
	CreateDynamicObject(1502,1294.68090820,-1003.79724121,6644.73193359,0.00000000,0.00000000,270.00000000); //object(gen_doorint04) (2)
	CreateDynamicObject(9339,1294.62792969,-1018.37695312,6646.81933594,0.00000000,0.00000000,0.00000000); //object(sfnvilla001_cm) (8)
	CreateDynamicObject(9339,1294.62792969,-1018.37695312,6648.21386719,0.00000000,0.00000000,0.00000000); //object(sfnvilla001_cm) (8)
	CreateDynamicObject(9131,1294.70422363,-1005.68835449,6648.04296875,0.00000000,0.00000000,0.00000000); //object(shbbyhswall13_lvs) (15)
	CreateDynamicObject(9339,1287.83007812,-1016.12402344,6645.43066406,0.00000000,0.00000000,0.00000000); //object(sfnvilla001_cm) (10)
	CreateDynamicObject(9339,1287.83007812,-1016.12402344,6646.82714844,0.00000000,0.00000000,0.00000000); //object(sfnvilla001_cm) (10)
	CreateDynamicObject(9339,1287.83007812,-1016.12402344,6648.21777344,0.00000000,0.00000000,0.00000000); //object(sfnvilla001_cm) (10)
	CreateDynamicObject(9131,1294.70410156,-1005.68750000,6645.77343750,0.00000000,0.00000000,0.00000000); //object(shbbyhswall13_lvs) (15)
	CreateDynamicObject(1649,1294.72509766,-1005.27380371,6648.90332031,0.00000000,0.00000000,89.99450684); //object(wglasssmash) (3)
	CreateDynamicObject(1649,1294.72460938,-1005.27343750,6648.90332031,0.00000000,0.00000000,270.49450684); //object(wglasssmash) (3)
	CreateDynamicObject(1495,1277.31152344,-996.05310059,6644.73193359,0.00000000,0.00000000,270.00000000); //object(gen_doorext01) (1)
	CreateDynamicObject(1495,1277.33703613,-999.05816650,6644.73193359,0.00000000,0.00000000,89.99996948); //object(gen_doorext01) (2)
	CreateDynamicObject(3761,1288.76855469,-1013.13830566,6646.67529297,0.00000000,0.00000000,0.00000000); //object(industshelves) (1)
	CreateDynamicObject(3761,1288.76635742,-1006.92077637,6646.67529297,0.00000000,0.00000000,0.00000000); //object(industshelves) (2)
	CreateDynamicObject(3761,1293.71008301,-1013.24139404,6646.67529297,0.00000000,0.00000000,0.00000000); //object(industshelves) (3)
	CreateDynamicObject(3761,1293.70397949,-1010.25305176,6646.67529297,0.00000000,0.00000000,0.00000000); //object(industshelves) (4)
	CreateDynamicObject(2358,1293.51928711,-1008.05352783,6645.60888672,0.00000000,0.00000000,256.25000000); //object(ammo_box_c2) (1)
	CreateDynamicObject(2358,1293.51855469,-1008.05273438,6645.85302734,0.00000000,0.00000000,94.24511719); //object(ammo_box_c2) (1)
	CreateDynamicObject(2035,1293.79113770,-1010.99401855,6646.30029297,0.00000000,0.00000000,86.00000000); //object(cj_m16) (1)
	CreateDynamicObject(2035,1293.52258301,-1010.99835205,6646.30615234,0.00000000,0.00000000,85.99548340); //object(cj_m16) (2)
	CreateDynamicObject(2035,1293.18408203,-1010.97827148,6646.31201172,0.00000000,0.00000000,262.74542236); //object(cj_m16) (5)
	CreateDynamicObject(2036,1293.66674805,-1012.66174316,6644.77294922,0.00000000,0.00000000,36.00000000); //object(cj_psg1) (1)
	CreateDynamicObject(2044,1288.26538086,-1014.32513428,6645.50927734,0.00000000,0.00000000,0.00000000); //object(cj_mp5k) (1)
	CreateDynamicObject(2044,1288.26464844,-1014.17926025,6645.52685547,17.25000000,0.00000000,172.00000000); //object(cj_mp5k) (2)
	CreateDynamicObject(2044,1289.01281738,-1014.26983643,6645.50927734,0.00000000,0.00000000,0.00000000); //object(cj_mp5k) (3)
	CreateDynamicObject(2044,1288.95849609,-1013.52154541,6645.50927734,0.00000000,0.00000000,48.00000000); //object(cj_mp5k) (4)
	CreateDynamicObject(2044,1288.99414062,-1014.02014160,6645.50927734,0.00000000,0.00000000,181.99926758); //object(cj_mp5k) (5)
	CreateDynamicObject(2044,1288.48840332,-1013.94561768,6645.50927734,0.00000000,0.00000000,181.99401855); //object(cj_mp5k) (6)
	CreateDynamicObject(2044,1288.27856445,-1013.55755615,6645.50927734,0.00000000,0.00000000,81.99401855); //object(cj_mp5k) (7)
	CreateDynamicObject(2035,1294.08605957,-1010.96917725,6646.30029297,0.00000000,0.00000000,101.99545288); //object(cj_m16) (6)
	CreateDynamicObject(2035,1294.06799316,-1011.69360352,6646.30029297,0.00000000,0.00000000,101.99157715); //object(cj_m16) (7)
	CreateDynamicObject(2034,1288.45983887,-1007.50891113,6646.31005859,0.00000000,0.00000000,274.00000000); //object(cj_sawnoff) (1)
	CreateDynamicObject(2034,1288.54479980,-1007.70080566,6646.31005859,0.00000000,0.00000000,199.99902344); //object(cj_sawnoff) (3)
	CreateDynamicObject(2034,1288.82250977,-1007.46386719,6646.31005859,0.00000000,0.00000000,117.49511719); //object(cj_sawnoff) (4)
	CreateDynamicObject(1533,1268.23486328,-999.05651855,6644.73193359,0.00000000,0.00000000,90.00000000); //object(gen_doorext12) (1)
	CreateDynamicObject(1533,1268.23693848,-997.58319092,6644.73193359,0.00000000,0.00000000,90.00000000); //object(gen_doorext12) (2)
	CreateDynamicObject(2166,1275.02075195,-994.09997559,6644.73193359,0.00000000,0.00000000,180.00000000); //object(med_office_desk_2) (1)
	CreateDynamicObject(2165,1272.63037109,-995.08477783,6644.73193359,0.00000000,0.00000000,180.00000000); //object(med_office_desk_1) (2)
	CreateDynamicObject(2165,1269.98352051,-994.99578857,6644.73193359,0.00000000,0.00000000,179.99450684); //object(med_office_desk_1) (3)
	CreateDynamicObject(9339,1264.11291504,-990.69036865,6645.43457031,0.00000000,0.00000000,89.99450684); //object(sfnvilla001_cm) (5)
	CreateDynamicObject(9339,1264.11230469,-990.68945312,6646.83886719,0.00000000,0.00000000,89.99450684); //object(sfnvilla001_cm) (5)
	CreateDynamicObject(9339,1264.11230469,-990.68945312,6648.22558594,0.00000000,0.00000000,89.99450684); //object(sfnvilla001_cm) (5)
	CreateDynamicObject(9339,1264.19201660,-1004.48730469,6645.43457031,0.00000000,0.00000000,89.99450684); //object(sfnvilla001_cm) (5)
	CreateDynamicObject(9339,1264.19140625,-1004.48730469,6646.83691406,0.00000000,0.00000000,89.99450684); //object(sfnvilla001_cm) (5)
	CreateDynamicObject(9339,1264.19140625,-1004.48730469,6648.22558594,0.00000000,0.00000000,89.99450684); //object(sfnvilla001_cm) (5)
	CreateDynamicObject(1671,1269.30688477,-994.47033691,6645.19238281,0.00000000,0.00000000,26.49401855); //object(swivelchair_a) (12)
	CreateDynamicObject(1671,1272.03247070,-993.87567139,6645.19238281,0.00000000,0.00000000,358.49353027); //object(swivelchair_a) (12)
	CreateDynamicObject(2310,1274.36035156,-1003.95965576,6645.23095703,0.00000000,0.00000000,269.99450684); //object(mike_din_chair) (1)
	CreateDynamicObject(2894,1312.08032227,-999.49822998,6645.54589844,0.00000000,0.00000000,24.00000000); //object(kmb_rhymesbook) (1)
	CreateDynamicObject(2239,1270.76416016,-995.18237305,6644.73193359,0.00000000,0.00000000,172.00000000); //object(cj_mlight16) (1)
	CreateDynamicObject(2239,1276.63610840,-1003.79425049,6644.73193359,0.00000000,0.00000000,201.99645996); //object(cj_mlight16) (2)
	CreateDynamicObject(1892,1268.79077148,-997.24951172,6644.73193359,0.00000000,0.00000000,90.00000000); //object(security_gatsh) (1)
	CreateDynamicObject(1892,1268.83459473,-998.84967041,6644.73193359,0.00000000,0.00000000,90.00000000); //object(security_gatsh) (2)
	CreateDynamicObject(1737,1270.92932129,-1002.32531738,6644.44287109,0.00000000,0.00000000,89.50000000); //object(med_dinning_5) (1)
	CreateDynamicObject(1702,1269.16577148,-1002.83813477,6644.73193359,0.00000000,0.00000000,90.00000000); //object(kb_couch06) (3)
	CreateDynamicObject(1702,1271.83349609,-1003.75341797,6644.73193359,0.00000000,0.00000000,179.75000000); //object(kb_couch06) (4)
	CreateDynamicObject(2010,1269.23754883,-1003.52038574,6644.70312500,0.00000000,0.00000000,0.00000000); //object(nu_plant3_ofc) (1)
	CreateDynamicObject(2310,1275.20007324,-1003.87268066,6645.23095703,0.00000000,0.00000000,269.99450684); //object(mike_din_chair) (1)
	CreateDynamicObject(2310,1273.54187012,-1003.91571045,6645.23095703,0.00000000,0.00000000,269.99450684); //object(mike_din_chair) (1)
	CreateDynamicObject(2310,1276.73059082,-1002.71246338,6645.23095703,0.00000000,0.00000000,357.99450684); //object(mike_din_chair) (1)
	CreateDynamicObject(2310,1276.75878906,-1002.00097656,6645.23095703,0.00000000,0.00000000,357.98950195); //object(mike_din_chair) (1)
	CreateDynamicObject(2310,1276.77893066,-1001.31262207,6645.23095703,0.00000000,0.00000000,357.98950195); //object(mike_din_chair) (1)
	CreateDynamicObject(2815,1273.88745117,-1002.51348877,6644.73193359,0.00000000,0.00000000,0.00000000); //object(gb_livingrug01) (3)
	CreateDynamicObject(2816,1270.92492676,-1001.24597168,6645.23828125,0.00000000,0.00000000,0.00000000); //object(gb_bedmags01) (1)
	CreateDynamicObject(2817,1270.44763184,-997.02569580,6644.73193359,0.00000000,0.00000000,270.00000000); //object(gb_bedrug01) (1)
	CreateDynamicObject(2826,1270.93835449,-1002.15856934,6645.23828125,0.00000000,0.00000000,0.00000000); //object(gb_novels04) (1)
	CreateDynamicObject(2827,1276.05187988,-1003.92736816,6644.73193359,0.00000000,0.00000000,110.00000000); //object(gb_novels05) (1)
	CreateDynamicObject(2836,1270.15087891,-993.23303223,6644.73193359,0.00000000,0.00000000,0.00000000); //object(gb_livingrug05) (1)
	CreateDynamicObject(2836,1273.65332031,-993.22851562,6644.73193359,0.00000000,0.00000000,0.00000000); //object(gb_livingrug05) (2)
	CreateDynamicObject(1738,1270.15454102,-991.05084229,6645.19482422,0.00000000,0.00000000,0.00000000); //object(cj_radiator_old) (1)
	CreateDynamicObject(1738,1271.05090332,-991.04522705,6645.19482422,0.00000000,0.00000000,178.25000000); //object(cj_radiator_old) (2)
	CreateDynamicObject(1808,1276.93103027,-1000.00354004,6644.73193359,0.00000000,0.00000000,267.50000000); //object(cj_watercooler2) (2)
	CreateDynamicObject(1737,1288.80114746,-1002.30963135,6644.70458984,0.00000000,0.00000000,89.49462891); //object(med_dinning_5) (3)
	CreateDynamicObject(1737,1292.28088379,-1002.25494385,6644.70458984,0.00000000,0.00000000,89.49462891); //object(med_dinning_5) (4)
	CreateDynamicObject(1737,1295.99975586,-1002.22021484,6644.70458984,0.00000000,0.00000000,89.49462891); //object(med_dinning_5) (5)
	CreateDynamicObject(2310,1289.93627930,-1002.37225342,6645.23095703,0.00000000,0.00000000,357.98950195); //object(mike_din_chair) (1)
	CreateDynamicObject(2310,1289.92822266,-1001.40563965,6645.23095703,0.00000000,0.00000000,357.98950195); //object(mike_din_chair) (1)
	CreateDynamicObject(2310,1287.76306152,-1001.32342529,6645.23095703,0.00000000,0.00000000,177.98950195); //object(mike_din_chair) (1)
	CreateDynamicObject(2310,1287.72534180,-1002.20605469,6645.23095703,0.00000000,0.00000000,177.98950195); //object(mike_din_chair) (1)
	CreateDynamicObject(2310,1293.28491211,-1001.27923584,6645.23095703,0.00000000,0.00000000,357.98950195); //object(mike_din_chair) (1)
	CreateDynamicObject(2310,1293.23974609,-1002.24902344,6645.23095703,0.00000000,0.00000000,357.98950195); //object(mike_din_chair) (1)
	CreateDynamicObject(2310,1291.06774902,-1001.32891846,6645.23095703,0.00000000,0.00000000,177.98950195); //object(mike_din_chair) (1)
	CreateDynamicObject(2310,1291.01757812,-1002.35009766,6645.23095703,0.00000000,0.00000000,177.98950195); //object(mike_din_chair) (1)
	CreateDynamicObject(2310,1295.11254883,-1002.17205811,6645.23095703,0.00000000,0.00000000,177.98950195); //object(mike_din_chair) (1)
	CreateDynamicObject(2310,1295.12976074,-1001.35333252,6645.23095703,0.00000000,0.00000000,177.98950195); //object(mike_din_chair) (1)
	CreateDynamicObject(2310,1297.02551270,-1001.29516602,6645.23095703,0.00000000,0.00000000,357.98950195); //object(mike_din_chair) (1)
	CreateDynamicObject(2310,1297.04833984,-1002.21173096,6645.23095703,0.00000000,0.00000000,357.98950195); //object(mike_din_chair) (1)
	CreateDynamicObject(2716,1288.69116211,-1002.81030273,6646.65185547,0.00000000,0.00000000,0.00000000); //object(cj_don_poster3) (1)
	CreateDynamicObject(2717,1292.19470215,-1002.80834961,6646.56982422,0.00000000,0.00000000,0.00000000); //object(cj_don_poster2) (1)
	CreateDynamicObject(2715,1295.97424316,-1002.78649902,6646.58056641,0.00000000,0.00000000,0.00000000); //object(cj_don_poster) (1)
	CreateDynamicObject(2612,1295.47460938,-992.05078125,6646.44335938,0.00000000,0.00000000,359.99450684); //object(police_nb2) (4)
	CreateDynamicObject(2611,1292.13378906,-992.07104492,6646.44042969,0.00000000,0.00000000,359.99731445); //object(police_nb1) (1)
	CreateDynamicObject(2010,1311.53735352,-1007.05035400,6644.70312500,0.00000000,0.00000000,0.00000000); //object(nu_plant3_ofc) (1)
	CreateDynamicObject(2010,1277.94970703,-992.54296875,6644.70312500,0.00000000,0.00000000,0.00000000); //object(nu_plant3_ofc) (1)
	CreateDynamicObject(2010,1278.41613770,-1002.25311279,6644.70312500,0.00000000,0.00000000,0.00000000); //object(nu_plant3_ofc) (1)

	// Hospital Objects
	CreateDynamicObject(1569,1190.59960938,-1337.09960938,1348.30004883,0.00000000,0.00000000,90.00000000); //DynamicObject(adam_v_door) (1)
	CreateDynamicObject(1569,1190.59997559,-1334.09997559,1348.30004883,0.00000000,0.00000000,270.00000000); //DynamicObject(adam_v_door) (2)
	CreateDynamicObject(1569,1190.59997559,-1334.09997559,1348.30004883,0.00000000,0.00000000,90.00000000); //DynamicObject(adam_v_door) (3)
	CreateDynamicObject(1569,1190.59997559,-1331.09997559,1348.30004883,0.00000000,0.00000000,270.00000000); //DynamicObject(adam_v_door) (4)
	CreateDynamicObject(19379,1185.79980469,-1331.59960938,1348.30004883,0.00000000,90.00000000,90.00000000); //DynamicObject(sfw_boxwest12) (5)
	CreateDynamicObject(19379,1185.79980469,-1342.09960938,1348.30004883,0.00000000,90.00000000,89.99450684); //DynamicObject(sfw_boxwest12) (6)
	CreateDynamicObject(19379,1176.19921875,-1342.09960938,1348.30004883,0.00000000,90.00000000,90.00000000); //DynamicObject(sfw_boxwest12) (8)
	CreateDynamicObject(19379,1176.19921875,-1331.59960938,1348.30004883,0.00000000,90.00000000,90.00000000); //DynamicObject(sfw_boxwest12) (16)
	CreateDynamicObject(1502,1186.70996094,-1340.54003906,1348.37695312,0.00000000,0.00000000,0.00000000); //DynamicObject(gen_doorint04) (3)
	CreateDynamicObject(1502,1180.31347656,-1340.51953125,1348.37902832,0.00000000,0.00000000,0.00000000); //DynamicObject(gen_doorint04) (2)
	CreateDynamicObject(19379,1185.79980469,-1352.59960938,1348.30004883,0.00000000,90.00000000,90.00000000); //DynamicObject(sfw_boxwest12) (27)
	CreateDynamicObject(19379,1176.19921875,-1352.59960938,1348.30004883,0.00000000,90.00000000,90.00000000); //DynamicObject(sfw_boxwest12) (32)
	CreateDynamicObject(19379,1185.79980469,-1321.09960938,1348.30004883,0.00000000,90.00000000,90.00000000); //DynamicObject(sfw_boxwest12) (33)
	CreateDynamicObject(19379,1176.19921875,-1321.09960938,1348.30004883,0.00000000,90.00000000,90.00000000); //DynamicObject(sfw_boxwest12) (34)
	CreateDynamicObject(19450,1190.69921875,-1333.79980469,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_detrok10) (1)
	CreateDynamicObject(19450,1190.69921875,-1324.19921875,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_detrok10) (2)
	CreateDynamicObject(19450,1190.69921875,-1343.39941406,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_detrok10) (3)
	CreateDynamicObject(19450,1190.69995117,-1353.00000000,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_detrok10) (4)
	CreateDynamicObject(19388,1177.89941406,-1333.79980469,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw15) (1)
	CreateDynamicObject(19450,1177.89941406,-1353.00000000,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_detrok10) (8)
	CreateDynamicObject(19450,1177.89941406,-1343.39941406,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_detrok10) (9)
	CreateDynamicObject(19450,1185.89941406,-1316.19921875,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(cs_detrok10) (10)
	CreateDynamicObject(19358,1179.50000000,-1316.19921875,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(road_sfw12) (2)
	CreateDynamicObject(19358,1177.89941406,-1337.00000000,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw12) (3)
	CreateDynamicObject(19358,1177.89941406,-1330.59960938,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw12) (4)
	CreateDynamicObject(19358,1177.90002441,-1327.40002441,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw12) (5)
	CreateDynamicObject(19450,1177.89941406,-1321.00000000,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_detrok10) (11)
	CreateDynamicObject(19450,1190.69921875,-1314.59960938,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_detrok10) (12)
	CreateDynamicObject(19358,1179.50000000,-1327.79980469,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(road_sfw12) (7)
	CreateDynamicObject(19388,1184.29980469,-1327.79980469,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(road_sfw15) (2)
	CreateDynamicObject(19358,1189.00000000,-1327.79980469,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(road_sfw12) (8)
	CreateDynamicObject(19431,1181.89941406,-1327.79980469,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(cs_landbit_48_a) (1)
	CreateDynamicObject(19431,1186.59960938,-1327.79980469,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(cs_landbit_48_a) (2)
	CreateDynamicObject(19431,1189.90002441,-1340.50000000,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(cs_landbit_48_a) (3)
	CreateDynamicObject(19388,1187.50000000,-1340.50000000,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(road_sfw15) (3)
	CreateDynamicObject(19388,1181.09960938,-1340.50000000,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(road_sfw15) (4)
	CreateDynamicObject(19431,1178.69995117,-1340.50000000,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(cs_landbit_48_a) (6)
	CreateDynamicObject(19358,1184.29980469,-1340.50000000,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(road_sfw12) (9)
	CreateDynamicObject(19450,1184.59960938,-1345.39941406,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_detrok10) (14)
	CreateDynamicObject(19358,1184.59960938,-1351.79980469,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw12) (10)
	CreateDynamicObject(19358,1184.59960938,-1355.00000000,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw12) (11)
	CreateDynamicObject(1502,1183.51464844,-1327.82910156,1348.37805176,0.00000000,0.00000000,0.00000000); //DynamicObject(gen_doorint04) (3)
	CreateDynamicObject(19431,1191.40002441,-1327.80004883,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(cs_landbit_48_a) (2)
	CreateDynamicObject(19358,1171.50000000,-1356.19921875,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw12) (3)
	CreateDynamicObject(19388,1171.50000000,-1353.00000000,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw15) (1)
	CreateDynamicObject(19358,1171.50000000,-1349.80004883,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw12) (3)
	CreateDynamicObject(19388,1171.50000000,-1346.59997559,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw15) (1)
	CreateDynamicObject(19358,1171.50000000,-1343.40002441,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw12) (3)
	CreateDynamicObject(19379,1166.59960938,-1352.59960938,1348.30004883,0.00000000,90.00000000,90.00000000); //DynamicObject(sfw_boxwest12) (32)
	CreateDynamicObject(19388,1171.50000000,-1340.19995117,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw15) (1)
	CreateDynamicObject(19358,1171.50000000,-1337.00000000,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw12) (3)
	CreateDynamicObject(19379,1166.59997559,-1342.09997559,1348.30004883,0.00000000,90.00000000,90.00000000); //DynamicObject(sfw_boxwest12) (32)
	CreateDynamicObject(19379,1166.59960938,-1331.59960938,1348.30004883,0.00000000,90.00000000,90.00000000); //DynamicObject(sfw_boxwest12) (32)
	CreateDynamicObject(19379,1166.59960938,-1321.09960938,1348.30004883,0.00000000,90.00000000,90.00000000); //DynamicObject(sfw_boxwest12) (32)
	CreateDynamicObject(19388,1171.50000000,-1333.80004883,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw15) (1)
	CreateDynamicObject(19358,1171.50000000,-1330.59997559,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw12) (3)
	CreateDynamicObject(19388,1171.50000000,-1327.39941406,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw15) (1)
	CreateDynamicObject(19358,1171.50000000,-1324.19995117,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw12) (3)
	CreateDynamicObject(19388,1171.50000000,-1321.00000000,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw15) (1)
	CreateDynamicObject(19358,1171.50000000,-1317.79980469,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw12) (3)
	CreateDynamicObject(19450,1166.69995117,-1311.80004883,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(cs_detrok10) (6)
	CreateDynamicObject(19450,1161.89941406,-1321.00000000,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_detrok10) (11)
	CreateDynamicObject(19450,1161.89941406,-1330.59960938,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_detrok10) (11)
	CreateDynamicObject(19450,1161.89941406,-1340.19921875,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_detrok10) (11)
	CreateDynamicObject(19450,1161.90002441,-1349.80004883,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_detrok10) (11)
	CreateDynamicObject(19358,1161.89941406,-1356.19921875,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw12) (3)
	CreateDynamicObject(19388,1174.69921875,-1316.19921875,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(road_sfw15) (1)
	CreateDynamicObject(19431,1172.30004883,-1316.19995117,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(cs_landbit_48_a) (1)
	CreateDynamicObject(19431,1177.09960938,-1316.19921875,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(cs_landbit_48_a) (1)
	CreateDynamicObject(19379,1185.80004883,-1310.59997559,1348.30004883,0.00000000,90.00000000,89.99981689); //DynamicObject(sfw_boxwest12) (33)
	CreateDynamicObject(19379,1176.19921875,-1310.59960938,1348.30004883,0.00000000,90.00000000,90.00000000); //DynamicObject(sfw_boxwest12) (33)
	CreateDynamicObject(19379,1166.59960938,-1310.59960938,1348.30004883,0.00000000,90.00000000,90.00000000); //DynamicObject(sfw_boxwest12) (33)
	CreateDynamicObject(19379,1185.79980469,-1300.09960938,1348.30004883,0.00000000,90.00000000,90.00000000); //DynamicObject(sfw_boxwest12) (33)
	CreateDynamicObject(19379,1176.19921875,-1300.09960938,1348.30004883,0.00000000,90.00000000,90.00000000); //DynamicObject(sfw_boxwest12) (33)
	CreateDynamicObject(19379,1166.59960938,-1300.09960938,1348.30004883,0.00000000,90.00000000,90.00000000); //DynamicObject(sfw_boxwest12) (33)
	CreateDynamicObject(19450,1190.69921875,-1305.00000000,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_detrok10) (12)
	CreateDynamicObject(19450,1177.89941406,-1311.39941406,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_detrok10) (12)
	CreateDynamicObject(19450,1171.50000000,-1311.40002441,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_detrok10) (12)
	CreateDynamicObject(19358,1179.50000000,-1306.59960938,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(road_sfw12) (1)
	CreateDynamicObject(19388,1182.69995117,-1306.59997559,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(road_sfw15) (1)
	CreateDynamicObject(19388,1185.89941406,-1306.59960938,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(road_sfw15) (1)
	CreateDynamicObject(19358,1189.09960938,-1306.59960938,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(road_sfw12) (1)
	CreateDynamicObject(19450,1184.29980469,-1311.39941406,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_detrok10) (12)
	CreateDynamicObject(19377,1185.90002441,-1306.40002441,1351.80004883,0.00000000,90.00000000,90.00000000); //DynamicObject(freight_interiorsfw) (18)
	CreateDynamicObject(19450,1161.90002441,-1311.40002441,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_detrok10) (12)
	CreateDynamicObject(19358,1169.89941406,-1306.59960938,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(road_sfw12) (1)
	CreateDynamicObject(19388,1166.69921875,-1306.59960938,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(road_sfw15) (1)
	CreateDynamicObject(19358,1163.50000000,-1306.59960938,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(road_sfw12) (1)
	CreateDynamicObject(19358,1169.89941406,-1349.69921875,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(road_sfw12) (3)
	CreateDynamicObject(19358,1166.69995117,-1349.69995117,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(road_sfw12) (3)
	CreateDynamicObject(19358,1163.50000000,-1349.69995117,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(road_sfw12) (3)
	CreateDynamicObject(19358,1169.89941406,-1343.39941406,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(road_sfw12) (3)
	CreateDynamicObject(19358,1166.69921875,-1343.39941406,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(road_sfw12) (3)
	CreateDynamicObject(19358,1163.50000000,-1343.39941406,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(road_sfw12) (3)
	CreateDynamicObject(19358,1169.90002441,-1337.00000000,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(road_sfw12) (3)
	CreateDynamicObject(19358,1166.69995117,-1337.00000000,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(road_sfw12) (3)
	CreateDynamicObject(19358,1163.50000000,-1337.00000000,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(road_sfw12) (3)
	CreateDynamicObject(19358,1169.90002441,-1330.40002441,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(road_sfw12) (3)
	CreateDynamicObject(19358,1166.69995117,-1330.40002441,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(road_sfw12) (3)
	CreateDynamicObject(19358,1163.50000000,-1330.39941406,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(road_sfw12) (3)
	CreateDynamicObject(19379,1157.00000000,-1300.09997559,1348.30004883,0.00000000,90.00000000,90.00000000); //DynamicObject(sfw_boxwest12) (33)
	CreateDynamicObject(19379,1157.00000000,-1310.59997559,1348.30004883,0.00000000,90.00000000,90.00000000); //DynamicObject(sfw_boxwest12) (33)
	CreateDynamicObject(19379,1147.40002441,-1300.09997559,1348.30004883,0.00000000,90.00000000,90.00000000); //DynamicObject(sfw_boxwest12) (33)
	CreateDynamicObject(19379,1147.40002441,-1310.59997559,1348.30004883,0.00000000,90.00000000,90.00000000); //DynamicObject(sfw_boxwest12) (33)
	CreateDynamicObject(19450,1147.39941406,-1301.19921875,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(cs_detrok10) (10)
	CreateDynamicObject(19450,1144.29980469,-1357.79980469,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(cs_detrok10) (6)
	CreateDynamicObject(19379,1157.00000000,-1321.09997559,1348.30004883,0.00000000,90.00000000,90.00000000); //DynamicObject(sfw_boxwest12) (33)
	CreateDynamicObject(19379,1147.40002441,-1321.09997559,1348.30004883,0.00000000,90.00000000,90.00000000); //DynamicObject(sfw_boxwest12) (33)
	CreateDynamicObject(19379,1147.40002441,-1331.59997559,1348.30004883,0.00000000,90.00000000,90.00000000); //DynamicObject(sfw_boxwest12) (33)
	CreateDynamicObject(19379,1157.00000000,-1331.59960938,1348.30004883,0.00000000,90.00000000,90.00000000); //DynamicObject(sfw_boxwest12) (33)
	CreateDynamicObject(19379,1157.00000000,-1342.09997559,1348.30004883,0.00000000,90.00000000,90.00000000); //DynamicObject(sfw_boxwest12) (33)
	CreateDynamicObject(19379,1147.40002441,-1342.09997559,1348.30004883,0.00000000,90.00000000,90.00000000); //DynamicObject(sfw_boxwest12) (33)
	CreateDynamicObject(19379,1147.40002441,-1352.59997559,1348.30004883,0.00000000,90.00000000,90.00000000); //DynamicObject(sfw_boxwest12) (33)
	CreateDynamicObject(19379,1157.00000000,-1352.59960938,1348.30004883,0.00000000,90.00000000,90.00000000); //DynamicObject(sfw_boxwest12) (33)
	CreateDynamicObject(19358,1160.30004883,-1306.59997559,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(road_sfw12) (1)
	CreateDynamicObject(19358,1157.09960938,-1306.59960938,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(road_sfw12) (1)
	CreateDynamicObject(19431,1154.69921875,-1306.59960938,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(cs_landbit_48_a) (1)
	CreateDynamicObject(19358,1153.89941406,-1308.19921875,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw12) (3)
	CreateDynamicObject(19358,1150.59960938,-1308.19921875,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw12) (3)
	CreateDynamicObject(19450,1145.79980469,-1306.59960938,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(cs_detrok10) (10)
	CreateDynamicObject(19388,1150.59960938,-1312.59960938,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw15) (1)
	CreateDynamicObject(19431,1175.51904297,-1315.40002441,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_48_a) (1)
	CreateDynamicObject(19450,1145.79980469,-1314.19921875,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(cs_detrok10) (10)
	CreateDynamicObject(19358,1150.59997559,-1315.80004883,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw12) (3)
	CreateDynamicObject(19431,1150.59997559,-1318.19995117,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_48_a) (1)
	CreateDynamicObject(19388,1150.59997559,-1320.59997559,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw15) (1)
	CreateDynamicObject(19450,1145.80004883,-1322.19995117,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(cs_detrok10) (10)
	CreateDynamicObject(19358,1150.59997559,-1323.80004883,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw12) (3)
	CreateDynamicObject(19431,1150.59997559,-1326.19995117,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_48_a) (1)
	CreateDynamicObject(19388,1150.59960938,-1328.59960938,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw15) (1)
	CreateDynamicObject(19450,1145.80004883,-1330.19995117,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(cs_detrok10) (10)
	CreateDynamicObject(19358,1150.59997559,-1331.80004883,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw12) (3)
	CreateDynamicObject(19431,1150.59960938,-1334.19921875,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_48_a) (1)
	CreateDynamicObject(19388,1150.59997559,-1336.59997559,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw15) (1)
	CreateDynamicObject(19450,1145.80004883,-1338.19995117,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(cs_detrok10) (10)
	CreateDynamicObject(19358,1150.59997559,-1339.80004883,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw12) (3)
	CreateDynamicObject(19431,1150.59997559,-1342.19995117,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_48_a) (1)
	CreateDynamicObject(19388,1150.59960938,-1344.59960938,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw15) (1)
	CreateDynamicObject(19450,1145.79980469,-1346.19921875,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(cs_detrok10) (10)
	CreateDynamicObject(19388,1150.59960938,-1349.39941406,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw15) (1)
	CreateDynamicObject(19431,1150.59960938,-1347.00000000,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_48_a) (1)
	CreateDynamicObject(19431,1150.59997559,-1351.80004883,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_48_a) (1)
	CreateDynamicObject(19388,1150.59960938,-1354.59960938,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw15) (1)
	CreateDynamicObject(19431,1150.59997559,-1357.00000000,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_48_a) (1)
	CreateDynamicObject(19431,1150.59997559,-1352.69995117,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_48_a) (1)
	CreateDynamicObject(19450,1145.79980469,-1352.00000000,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(cs_detrok10) (10)
	CreateDynamicObject(19431,1153.90295410,-1310.59997559,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_48_a) (1)
	CreateDynamicObject(19388,1153.89941406,-1312.59960938,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw15) (1)
	CreateDynamicObject(19358,1153.90002441,-1315.80004883,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw12) (3)
	CreateDynamicObject(19358,1157.09960938,-1314.19921875,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(road_sfw12) (1)
	CreateDynamicObject(19431,1154.69921875,-1314.19921875,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(cs_landbit_48_a) (1)
	CreateDynamicObject(19431,1153.90002441,-1318.19995117,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_48_a) (1)
	CreateDynamicObject(19388,1153.90002441,-1320.59997559,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw15) (1)
	CreateDynamicObject(19358,1153.90002441,-1323.80004883,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw12) (3)
	CreateDynamicObject(19431,1153.90002441,-1326.19995117,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_48_a) (1)
	CreateDynamicObject(19388,1153.90002441,-1328.59997559,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw15) (1)
	CreateDynamicObject(19358,1153.90002441,-1331.80004883,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw12) (3)
	CreateDynamicObject(19431,1153.90002441,-1334.19995117,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_48_a) (1)
	CreateDynamicObject(19388,1153.90002441,-1336.59997559,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw15) (1)
	CreateDynamicObject(19358,1153.90002441,-1339.80004883,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw12) (3)
	CreateDynamicObject(19431,1153.89941406,-1342.19921875,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_48_a) (1)
	CreateDynamicObject(19388,1153.90002441,-1344.59997559,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw15) (1)
	CreateDynamicObject(19431,1153.90002441,-1347.00000000,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_48_a) (1)
	CreateDynamicObject(19431,1154.69995117,-1347.80004883,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(cs_landbit_48_a) (1)
	CreateDynamicObject(19358,1157.09960938,-1347.79980469,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(road_sfw12) (1)
	CreateDynamicObject(19358,1160.30004883,-1347.80004883,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(road_sfw12) (1)
	CreateDynamicObject(19431,1154.69995117,-1340.50000000,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(cs_landbit_48_a) (1)
	CreateDynamicObject(19358,1157.09997559,-1340.50000000,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(road_sfw12) (1)
	CreateDynamicObject(19431,1154.69995117,-1332.59997559,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(cs_landbit_48_a) (1)
	CreateDynamicObject(19358,1157.09997559,-1332.59997559,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(road_sfw12) (1)
	CreateDynamicObject(19431,1154.69995117,-1324.50000000,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(cs_landbit_48_a) (1)
	CreateDynamicObject(19358,1157.09997559,-1324.50000000,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(road_sfw12) (1)
	CreateDynamicObject(19358,1184.30004883,-1347.19995117,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(road_sfw12) (9)
	CreateDynamicObject(19388,1181.09997559,-1347.19995117,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(road_sfw15) (4)
	CreateDynamicObject(19431,1178.69921875,-1347.19921875,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(cs_landbit_48_a) (6)
	CreateDynamicObject(1502,1171.46972656,-1352.21484375,1348.32995605,0.00000000,0.00000000,270.00000000); //DynamicObject(gen_doorint04) (2)
	CreateDynamicObject(1502,1171.47497559,-1345.81494141,1348.32995605,0.00000000,0.00000000,270.00000000); //DynamicObject(gen_doorint04) (2)
	CreateDynamicObject(1502,1171.47497559,-1339.41601562,1348.33203125,0.00000000,0.00000000,270.00000000); //DynamicObject(gen_doorint04) (2)
	CreateDynamicObject(1523,1171.46997070,-1326.60998535,1348.32995605,0.00000000,0.00000000,270.00000000); //DynamicObject(gen_doorext10) (1)
	CreateDynamicObject(1523,1181.91003418,-1306.63000488,1348.32995605,0.00000000,0.00000000,0.00000000); //DynamicObject(gen_doorext10) (2)
	CreateDynamicObject(1523,1186.65197754,-1306.56005859,1348.32995605,0.00000000,0.00000000,180.00000000); //DynamicObject(gen_doorext10) (3)
	CreateDynamicObject(19388,1187.50000000,-1347.19995117,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(road_sfw15) (4)
	CreateDynamicObject(19431,1189.89941406,-1347.19921875,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(cs_landbit_48_a) (6)
	CreateDynamicObject(1569,1142.69995117,-1305.40002441,1348.30004883,0.00000000,0.00000000,90.00000000); //DynamicObject(adam_v_door) (1)
	CreateDynamicObject(1569,1142.69995117,-1302.40002441,1348.30004883,0.00000000,0.00000000,270.00000000); //DynamicObject(adam_v_door) (1)
	CreateDynamicObject(1523,1165.90917969,-1306.62988281,1348.32995605,0.00000000,0.00000000,0.00000000); //DynamicObject(gen_doorext10) (4)
	CreateDynamicObject(1502,1153.88000488,-1343.81494141,1348.32995605,0.00000000,0.00000000,270.00000000); //DynamicObject(gen_doorint04) (2)
	CreateDynamicObject(1502,1150.56994629,-1343.81494141,1348.32995605,0.00000000,0.00000000,270.00000000); //DynamicObject(gen_doorint04) (2)
	CreateDynamicObject(1502,1150.56994629,-1335.81494141,1348.32995605,0.00000000,0.00000000,270.00000000); //DynamicObject(gen_doorint04) (2)
	CreateDynamicObject(1502,1150.57995605,-1327.81494141,1348.32995605,0.00000000,0.00000000,270.00000000); //DynamicObject(gen_doorint04) (2)
	CreateDynamicObject(1502,1150.57995605,-1319.81494141,1348.32995605,0.00000000,0.00000000,270.00000000); //DynamicObject(gen_doorint04) (2)
	CreateDynamicObject(1502,1150.57910156,-1311.81445312,1348.32995605,0.00000000,0.00000000,270.00000000); //DynamicObject(gen_doorint04) (2)
	CreateDynamicObject(1502,1153.89001465,-1335.81494141,1348.32995605,0.00000000,0.00000000,270.00000000); //DynamicObject(gen_doorint04) (2)
	CreateDynamicObject(1502,1153.88964844,-1327.81445312,1348.32995605,0.00000000,0.00000000,270.00000000); //DynamicObject(gen_doorint04) (2)
	CreateDynamicObject(1502,1153.89001465,-1319.81494141,1348.32995605,0.00000000,0.00000000,270.00000000); //DynamicObject(gen_doorint04) (2)
	CreateDynamicObject(1502,1153.88964844,-1311.81445312,1348.32995605,0.00000000,0.00000000,270.00000000); //DynamicObject(gen_doorint04) (2)
	CreateDynamicObject(1502,1150.56005859,-1348.61303711,1348.32995605,0.00000000,0.00000000,270.00000000); //DynamicObject(gen_doorint04) (2)
	CreateDynamicObject(1502,1150.56005859,-1353.81494141,1348.32995605,0.00000000,0.00000000,270.00000000); //DynamicObject(gen_doorint04) (2)
	CreateDynamicObject(2165,1179.59960938,-1332.29980469,1348.40002441,0.00000000,0.00000000,179.99450684); //DynamicObject(med_office_desk_1) (1)
	CreateDynamicObject(2166,1181.59960938,-1331.29980469,1348.40002441,0.00000000,0.00000000,179.99450684); //DynamicObject(med_office_desk_2) (1)
	CreateDynamicObject(2165,1181.69921875,-1328.39941406,1348.40002441,0.00000000,0.00000000,270.00000000); //DynamicObject(med_office_desk_1) (2)
	CreateDynamicObject(1703,1185.40002441,-1339.80004883,1348.40002441,0.00000000,0.00000000,180.00000000); //DynamicObject(kb_couch02) (1)
	CreateDynamicObject(1703,1186.19921875,-1336.89941406,1348.40002441,0.00000000,0.00000000,270.00000000); //DynamicObject(kb_couch02) (2)
	CreateDynamicObject(1703,1182.59997559,-1338.90002441,1348.40002441,0.00000000,0.00000000,90.00000000); //DynamicObject(kb_couch02) (3)
	CreateDynamicObject(2835,1183.91003418,-1338.48498535,1348.40002441,0.00000000,0.00000000,0.00000000); //DynamicObject(gb_livingrug04) (1)
	CreateDynamicObject(1814,1183.89941406,-1338.50000000,1348.40002441,0.00000000,0.00000000,0.00000000); //DynamicObject(coffee_med_1) (1)
	CreateDynamicObject(1671,1180.80004883,-1328.90002441,1348.80004883,0.00000000,0.00000000,70.00000000); //DynamicObject(swivelchair_a) (1)
	CreateDynamicObject(1671,1178.90002441,-1331.50000000,1348.80004883,0.00000000,0.00000000,19.99938965); //DynamicObject(swivelchair_a) (2)
	CreateDynamicObject(1811,1189.30004883,-1328.50000000,1349.00000000,0.00000000,0.00000000,90.00000000); //DynamicObject(med_din_chair_5) (1)
	CreateDynamicObject(1811,1188.40002441,-1328.50000000,1349.00000000,0.00000000,0.00000000,90.00000000); //DynamicObject(med_din_chair_5) (2)
	CreateDynamicObject(1811,1187.50000000,-1328.50000000,1349.00000000,0.00000000,0.00000000,90.00000000); //DynamicObject(med_din_chair_5) (3)
	CreateDynamicObject(1811,1186.59997559,-1328.50000000,1349.00000000,0.00000000,0.00000000,90.00000000); //DynamicObject(med_din_chair_5) (4)
	CreateDynamicObject(1811,1185.69995117,-1328.50000000,1349.00000000,0.00000000,0.00000000,90.00000000); //DynamicObject(med_din_chair_5) (5)
	CreateDynamicObject(2186,1178.50000000,-1330.09997559,1348.40002441,0.00000000,0.00000000,90.00000000); //DynamicObject(photocopier_1) (1)
	CreateDynamicObject(2161,1179.59960938,-1327.89941406,1348.40002441,0.00000000,0.00000000,0.00000000); //DynamicObject(med_office_unit_4) (1)
	CreateDynamicObject(2271,1186.40002441,-1328.36999512,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(frame_wood_1) (1)
	CreateDynamicObject(2270,1187.80004883,-1328.38000488,1350.08544922,0.00000000,0.00000000,0.00000000); //DynamicObject(frame_wood_6) (1)
	CreateDynamicObject(2269,1189.00000000,-1328.40002441,1349.94372559,0.00000000,0.00000000,0.00000000); //DynamicObject(frame_wood_4) (1)
	CreateDynamicObject(2264,1178.47998047,-1336.19995117,1350.00000000,0.00000000,0.00000000,90.00000000); //DynamicObject(frame_slim_5) (1)
	CreateDynamicObject(2265,1178.46997070,-1337.90002441,1350.00000000,0.00000000,0.00000000,90.00000000); //DynamicObject(frame_slim_6) (1)
	CreateDynamicObject(2261,1178.48999023,-1330.30004883,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(frame_slim_2) (1)
	CreateDynamicObject(1811,1185.30004883,-1345.00000000,1349.00000000,0.00000000,0.00000000,180.00000000); //DynamicObject(med_din_chair_5) (6)
	CreateDynamicObject(1811,1185.30004883,-1344.09997559,1349.00000000,0.00000000,0.00000000,179.99450684); //DynamicObject(med_din_chair_5) (7)
	CreateDynamicObject(1811,1185.30004883,-1343.30004883,1349.00000000,0.00000000,0.00000000,179.99450684); //DynamicObject(med_din_chair_5) (8)
	CreateDynamicObject(1811,1185.30004883,-1342.50000000,1349.00000000,0.00000000,0.00000000,179.99450684); //DynamicObject(med_din_chair_5) (9)
	CreateDynamicObject(1502,1186.71496582,-1347.22302246,1348.32995605,0.00000000,0.00000000,0.00000000); //DynamicObject(gen_doorint04) (3)
	CreateDynamicObject(1502,1180.31494141,-1347.22302246,1348.32995605,0.00000000,0.00000000,0.00000000); //DynamicObject(gen_doorint04) (2)
	CreateDynamicObject(1811,1183.90002441,-1345.00000000,1349.00000000,0.00000000,0.00000000,0.00000000); //DynamicObject(med_din_chair_5) (10)
	CreateDynamicObject(1811,1183.90002441,-1344.19995117,1349.00000000,0.00000000,0.00000000,0.00000000); //DynamicObject(med_din_chair_5) (11)
	CreateDynamicObject(1811,1183.90002441,-1343.40002441,1349.00000000,0.00000000,0.00000000,0.00000000); //DynamicObject(med_din_chair_5) (12)
	CreateDynamicObject(1811,1183.90002441,-1342.59997559,1349.00000000,0.00000000,0.00000000,0.00000000); //DynamicObject(med_din_chair_5) (13)
	CreateDynamicObject(1814,1190.59997559,-1344.30004883,1348.40002441,0.00000000,0.00000000,90.00000000); //DynamicObject(coffee_med_1) (2)
	CreateDynamicObject(2824,1190.00000000,-1343.40002441,1348.90002441,0.00000000,0.00000000,286.00000000); //DynamicObject(gb_novels02) (1)
	CreateDynamicObject(2826,1190.09997559,-1344.30004883,1348.90002441,0.00000000,0.00000000,30.00000000); //DynamicObject(gb_novels04) (1)
	CreateDynamicObject(2836,1187.00000000,-1343.30004883,1348.40002441,0.00000000,0.00000000,270.00000000); //DynamicObject(gb_livingrug05) (1)
	CreateDynamicObject(2836,1180.59997559,-1343.50000000,1348.40002441,0.00000000,0.00000000,270.00000000); //DynamicObject(gb_livingrug05) (2)
	CreateDynamicObject(1814,1179.00000000,-1344.40002441,1348.40002441,0.00000000,0.00000000,90.00000000); //DynamicObject(coffee_med_1) (3)
	CreateDynamicObject(2827,1178.40002441,-1344.19995117,1348.90002441,0.00000000,0.00000000,298.75000000); //DynamicObject(gb_novels05) (1)
	CreateDynamicObject(2146,1186.19921875,-1356.79980469,1348.90002441,0.00000000,0.00000000,270.00000000); //DynamicObject(cj_trolly1) (1)
	CreateDynamicObject(2166,1185.30004883,-1352.80004883,1348.40002441,0.00000000,0.00000000,0.00000000); //DynamicObject(med_office_desk_2) (1)
	CreateDynamicObject(2165,1187.30004883,-1351.80004883,1348.40002441,0.00000000,0.00000000,0.00000000); //DynamicObject(med_office_desk_1) (1)
	CreateDynamicObject(1671,1188.00000000,-1352.59960938,1348.80004883,0.00000000,0.00000000,187.99804688); //DynamicObject(swivelchair_a) (3)
	CreateDynamicObject(1811,1185.69995117,-1350.69995117,1349.00000000,0.00000000,0.00000000,131.99450684); //DynamicObject(med_din_chair_5) (14)
	CreateDynamicObject(2163,1190.59997559,-1350.59997559,1348.40002441,0.00000000,0.00000000,270.00000000); //DynamicObject(med_office_unit_2) (1)
	CreateDynamicObject(2161,1190.59997559,-1354.19995117,1348.40002441,0.00000000,0.00000000,270.00000000); //DynamicObject(med_office_unit_4) (2)
	CreateDynamicObject(2164,1190.59960938,-1352.39941406,1348.40002441,0.00000000,0.00000000,270.24719238); //DynamicObject(med_office_unit_5) (1)
	CreateDynamicObject(2167,1190.59997559,-1355.50000000,1348.40002441,0.00000000,0.00000000,270.00000000); //DynamicObject(med_office_unit_7) (1)
	CreateDynamicObject(1716,1185.59997559,-1355.59997559,1348.40002441,0.00000000,0.00000000,0.00000000); //DynamicObject(kb_slot_stool) (1)
	CreateDynamicObject(2166,1178.69995117,-1353.00000000,1348.40002441,0.00000000,0.00000000,0.00000000); //DynamicObject(med_office_desk_2) (1)
	CreateDynamicObject(2165,1180.69995117,-1352.00000000,1348.40002441,0.00000000,0.00000000,0.00000000); //DynamicObject(med_office_desk_1) (1)
	CreateDynamicObject(1671,1181.00000000,-1352.90002441,1348.80004883,0.00000000,0.00000000,159.99804688); //DynamicObject(swivelchair_a) (4)
	CreateDynamicObject(1811,1179.40002441,-1350.90002441,1349.00000000,0.00000000,0.00000000,101.98974609); //DynamicObject(med_din_chair_5) (15)
	CreateDynamicObject(2146,1179.59960938,-1356.89941406,1348.90002441,0.00000000,0.00000000,270.00000000); //DynamicObject(cj_trolly1) (2)
	CreateDynamicObject(1716,1179.09997559,-1355.80004883,1348.40002441,0.00000000,0.00000000,0.00000000); //DynamicObject(kb_slot_stool) (2)
	CreateDynamicObject(2167,1184.50000000,-1355.19995117,1348.40002441,0.00000000,0.00000000,270.00000000); //DynamicObject(med_office_unit_7) (2)
	CreateDynamicObject(2161,1184.50000000,-1353.89941406,1348.40002441,0.00000000,0.00000000,270.00000000); //DynamicObject(med_office_unit_4) (4)
	CreateDynamicObject(2164,1184.50000000,-1352.09997559,1348.40002441,0.00000000,0.00000000,270.24719238); //DynamicObject(med_office_unit_5) (2)
	CreateDynamicObject(2163,1184.50000000,-1350.29980469,1348.40002441,0.00000000,0.00000000,270.00000000); //DynamicObject(med_office_unit_2) (2)
	CreateDynamicObject(2166,1180.59997559,-1324.19995117,1348.40002441,0.00000000,0.00000000,270.00000000); //DynamicObject(med_office_desk_2) (1)
	CreateDynamicObject(2165,1181.59997559,-1326.19995117,1348.40002441,0.00000000,0.00000000,270.00000000); //DynamicObject(med_office_desk_1) (2)
	CreateDynamicObject(2166,1189.90002441,-1326.00000000,1348.40002441,0.00000000,0.00000000,180.00000000); //DynamicObject(med_office_desk_2) (1)
	CreateDynamicObject(2165,1179.50000000,-1321.90002441,1348.40002441,0.00000000,0.00000000,180.00000000); //DynamicObject(med_office_desk_1) (2)
	CreateDynamicObject(2166,1181.50000000,-1320.90002441,1348.40002441,0.00000000,0.00000000,180.00000000); //DynamicObject(med_office_desk_2) (1)
	CreateDynamicObject(2166,1181.50000000,-1318.09997559,1348.40002441,0.00000000,0.00000000,179.99450684); //DynamicObject(med_office_desk_2) (1)
	CreateDynamicObject(2165,1179.50000000,-1319.09997559,1348.40002441,0.00000000,0.00000000,179.99450684); //DynamicObject(med_office_desk_1) (2)
	CreateDynamicObject(2165,1187.90002441,-1327.00000000,1348.40002441,0.00000000,0.00000000,179.99450684); //DynamicObject(med_office_desk_1) (2)
	CreateDynamicObject(2166,1189.90002441,-1323.30004883,1348.40002441,0.00000000,0.00000000,179.99450684); //DynamicObject(med_office_desk_2) (1)
	CreateDynamicObject(2165,1187.90002441,-1324.30004883,1348.40002441,0.00000000,0.00000000,179.99450684); //DynamicObject(med_office_desk_1) (2)
	CreateDynamicObject(2166,1187.90002441,-1321.30004883,1348.40002441,0.00000000,0.00000000,90.00000000); //DynamicObject(med_office_desk_2) (1)
	CreateDynamicObject(2165,1186.90002441,-1319.30004883,1348.40002441,0.00000000,0.00000000,90.00000000); //DynamicObject(med_office_desk_1) (2)
	CreateDynamicObject(2357,1184.18005371,-1320.59997559,1348.80004883,0.00000000,0.00000000,90.00000000); //DynamicObject(dunc_dinning) (1)
	CreateDynamicObject(1811,1183.30004883,-1321.69995117,1349.00000000,0.00000000,0.00000000,182.00000000); //DynamicObject(med_din_chair_5) (24)
	CreateDynamicObject(1811,1183.30004883,-1320.50000000,1349.00000000,0.00000000,0.00000000,179.99951172); //DynamicObject(med_din_chair_5) (25)
	CreateDynamicObject(1811,1183.30004883,-1319.40002441,1349.00000000,0.00000000,0.00000000,181.99951172); //DynamicObject(med_din_chair_5) (26)
	CreateDynamicObject(1811,1185.00000000,-1319.30004883,1349.00000000,0.00000000,0.00000000,27.99951172); //DynamicObject(med_din_chair_5) (27)
	CreateDynamicObject(1811,1185.00000000,-1320.50000000,1349.00000000,0.00000000,0.00000000,357.99865723); //DynamicObject(med_din_chair_5) (28)
	CreateDynamicObject(1811,1185.00000000,-1321.69995117,1349.00000000,0.00000000,0.00000000,357.99499512); //DynamicObject(med_din_chair_5) (29)
	CreateDynamicObject(2186,1190.09960938,-1318.09960938,1348.40002441,0.00000000,0.00000000,270.00000000); //DynamicObject(photocopier_1) (2)
	CreateDynamicObject(2832,1184.19995117,-1319.80004883,1349.20996094,0.00000000,0.00000000,292.00000000); //DynamicObject(gb_platedirty05) (1)
	CreateDynamicObject(2831,1184.19995117,-1321.59997559,1349.21997070,0.00000000,0.00000000,0.00000000); //DynamicObject(gb_platedirty03) (1)
	CreateDynamicObject(2852,1181.59997559,-1325.19995117,1349.19995117,0.00000000,0.00000000,304.00000000); //DynamicObject(gb_bedmags02) (1)
	CreateDynamicObject(1671,1180.59997559,-1326.69995117,1348.80004883,0.00000000,0.00000000,83.99938965); //DynamicObject(swivelchair_a) (5)
	CreateDynamicObject(1671,1178.69995117,-1321.09997559,1348.80004883,0.00000000,0.00000000,25.99597168); //DynamicObject(swivelchair_a) (6)
	CreateDynamicObject(1671,1178.69995117,-1318.09997559,1348.80004883,0.00000000,0.00000000,359.99365234); //DynamicObject(swivelchair_a) (7)
	CreateDynamicObject(1671,1188.00000000,-1318.50000000,1348.80004883,0.00000000,0.00000000,293.98901367); //DynamicObject(swivelchair_a) (8)
	CreateDynamicObject(1671,1187.30004883,-1323.30004883,1348.80004883,0.00000000,0.00000000,15.98861694); //DynamicObject(swivelchair_a) (9)
	CreateDynamicObject(1671,1187.40002441,-1326.09997559,1348.80004883,0.00000000,0.00000000,347.98510742); //DynamicObject(swivelchair_a) (10)
	CreateDynamicObject(2283,1161.79504395,-1350.40002441,1350.30004883,0.00000000,0.00000000,270.00000000); //DynamicObject(frame_thick_3) (1)
	CreateDynamicObject(2282,1188.00000000,-1316.75598145,1349.90002441,0.00000000,0.00000000,0.00000000); //DynamicObject(frame_thick_4) (1)
	CreateDynamicObject(2281,1180.30004883,-1316.76696777,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(frame_thick_5) (1)
	CreateDynamicObject(2280,1178.48999023,-1323.80004883,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(frame_thick_1) (1)
	CreateDynamicObject(2279,1178.47998047,-1320.30004883,1350.28881836,0.00000000,0.00000000,90.00000000); //DynamicObject(frame_thick_6) (1)
	CreateDynamicObject(2278,1190.10998535,-1322.19995117,1350.19995117,0.00000000,0.00000000,270.00000000); //DynamicObject(frame_thick_2) (1)
	CreateDynamicObject(2435,1162.40002441,-1325.50000000,1348.40002441,0.00000000,0.00000000,180.00000000); //DynamicObject(cj_ff_conter_2) (1)
	CreateDynamicObject(2435,1163.30004883,-1325.50000000,1348.40002441,0.00000000,0.00000000,179.99450684); //DynamicObject(cj_ff_conter_2) (2)
	CreateDynamicObject(2435,1164.19995117,-1325.50000000,1348.40002441,0.00000000,0.00000000,179.99450684); //DynamicObject(cj_ff_conter_2) (3)
	CreateDynamicObject(2435,1165.09997559,-1325.50000000,1348.40002441,0.00000000,0.00000000,179.99450684); //DynamicObject(cj_ff_conter_2) (4)
	CreateDynamicObject(2435,1166.00000000,-1325.50000000,1348.40002441,0.00000000,0.00000000,179.99450684); //DynamicObject(cj_ff_conter_2) (5)
	CreateDynamicObject(2435,1166.90002441,-1325.50000000,1348.40002441,0.00000000,0.00000000,179.99450684); //DynamicObject(cj_ff_conter_2) (6)
	CreateDynamicObject(2435,1167.80004883,-1325.50000000,1348.40002441,0.00000000,0.00000000,179.99450684); //DynamicObject(cj_ff_conter_2) (7)
	CreateDynamicObject(2435,1168.69995117,-1325.50000000,1348.40002441,0.00000000,0.00000000,179.99450684); //DynamicObject(cj_ff_conter_2) (8)
	CreateDynamicObject(2435,1169.59997559,-1325.50000000,1348.40002441,0.00000000,0.00000000,179.99450684); //DynamicObject(cj_ff_conter_2) (9)
	CreateDynamicObject(2435,1170.50000000,-1325.50000000,1348.40002441,0.00000000,0.00000000,179.99450684); //DynamicObject(cj_ff_conter_2) (10)
	CreateDynamicObject(2435,1171.09997559,-1325.50000000,1348.40002441,0.00000000,0.00000000,179.99450684); //DynamicObject(cj_ff_conter_2) (11)
	CreateDynamicObject(2994,1162.40002441,-1323.40002441,1348.90002441,0.00000000,0.00000000,0.00000000); //DynamicObject(kmb_trolley) (1)
	CreateDynamicObject(2369,1169.09997559,-1325.90002441,1349.50000000,0.00000000,0.00000000,180.00000000); //DynamicObject(cj_till) (1)
	CreateDynamicObject(2149,1170.90002441,-1325.59997559,1349.59997559,0.00000000,0.00000000,330.00000000); //DynamicObject(cj_microwave1) (1)
	CreateDynamicObject(2137,1162.50000000,-1329.80004883,1348.40002441,0.00000000,0.00000000,180.00000000); //DynamicObject(cj_k3_low_unit3) (1)
	CreateDynamicObject(2137,1163.45996094,-1329.80004883,1348.40002441,0.00000000,0.00000000,179.99450684); //DynamicObject(cj_k3_low_unit3) (2)
	CreateDynamicObject(2137,1164.42004395,-1329.80004883,1348.40002441,0.00000000,0.00000000,179.99450684); //DynamicObject(cj_k3_low_unit3) (3)
	CreateDynamicObject(2137,1165.37805176,-1329.80004883,1348.40002441,0.00000000,0.00000000,179.99450684); //DynamicObject(cj_k3_low_unit3) (4)
	CreateDynamicObject(2140,1166.33996582,-1329.80004883,1348.40002441,0.00000000,0.00000000,179.99450684); //DynamicObject(cj_k3_tall_unit1) (1)
	CreateDynamicObject(2136,1168.30004883,-1329.80895996,1348.40002441,0.00000000,0.00000000,180.00000000); //DynamicObject(cj_k3_sink) (1)
	CreateDynamicObject(2135,1169.23999023,-1329.81005859,1348.40002441,0.00000000,0.00000000,180.00000000); //DynamicObject(cj_k3_cooker) (1)
	CreateDynamicObject(2139,1170.20996094,-1329.78894043,1348.40002441,0.00000000,0.00000000,180.00000000); //DynamicObject(cj_k3_low_unit2) (1)
	CreateDynamicObject(2305,1170.90002441,-1329.90002441,1348.40002441,0.00000000,0.00000000,270.00000000); //DynamicObject(cj_k3_c_unit) (1)
	CreateDynamicObject(1811,1162.69995117,-1319.90002441,1349.00000000,0.00000000,0.00000000,90.00000000); //DynamicObject(med_din_chair_5) (39)
	CreateDynamicObject(2637,1163.30004883,-1320.90002441,1348.80004883,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_pizza_table2) (1)
	CreateDynamicObject(2637,1166.80004883,-1320.90002441,1348.80004883,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_pizza_table2) (2)
	CreateDynamicObject(2637,1166.80004883,-1317.00000000,1348.80004883,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_pizza_table2) (5)
	CreateDynamicObject(1811,1163.80004883,-1319.90002441,1349.00000000,0.00000000,0.00000000,90.00000000); //DynamicObject(med_din_chair_5) (55)
	CreateDynamicObject(1811,1166.19995117,-1319.80004883,1349.00000000,0.00000000,0.00000000,90.00000000); //DynamicObject(med_din_chair_5) (56)
	CreateDynamicObject(1811,1167.30004883,-1319.80004883,1349.00000000,0.00000000,0.00000000,90.00000000); //DynamicObject(med_din_chair_5) (57)
	CreateDynamicObject(1811,1167.30004883,-1321.90002441,1349.00000000,0.00000000,0.00000000,270.00000000); //DynamicObject(med_din_chair_5) (58)
	CreateDynamicObject(1811,1166.19995117,-1321.90002441,1349.00000000,0.00000000,0.00000000,270.00000000); //DynamicObject(med_din_chair_5) (59)
	CreateDynamicObject(1811,1162.59997559,-1321.90002441,1349.00000000,0.00000000,0.00000000,270.00000000); //DynamicObject(med_din_chair_5) (60)
	CreateDynamicObject(1811,1163.80004883,-1321.80004883,1349.00000000,0.00000000,0.00000000,270.00000000); //DynamicObject(med_din_chair_5) (61)
	CreateDynamicObject(1811,1167.30004883,-1318.00000000,1349.00000000,0.00000000,0.00000000,270.00000000); //DynamicObject(med_din_chair_5) (62)
	CreateDynamicObject(1811,1166.19995117,-1318.00000000,1349.00000000,0.00000000,0.00000000,270.00000000); //DynamicObject(med_din_chair_5) (63)
	CreateDynamicObject(2637,1163.30004883,-1317.00000000,1348.80004883,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_pizza_table2) (6)
	CreateDynamicObject(1811,1162.69995117,-1318.00000000,1349.00000000,0.00000000,0.00000000,270.00000000); //DynamicObject(med_din_chair_5) (64)
	CreateDynamicObject(1811,1163.80004883,-1318.00000000,1349.00000000,0.00000000,0.00000000,270.00000000); //DynamicObject(med_din_chair_5) (65)
	CreateDynamicObject(2637,1170.19995117,-1317.00000000,1348.80004883,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_pizza_table2) (7)
	CreateDynamicObject(1811,1162.69995117,-1316.00000000,1349.00000000,0.00000000,0.00000000,90.00000000); //DynamicObject(med_din_chair_5) (66)
	CreateDynamicObject(1811,1163.80004883,-1316.00000000,1349.00000000,0.00000000,0.00000000,90.00000000); //DynamicObject(med_din_chair_5) (67)
	CreateDynamicObject(1811,1166.19995117,-1316.00000000,1349.00000000,0.00000000,0.00000000,90.00000000); //DynamicObject(med_din_chair_5) (68)
	CreateDynamicObject(1811,1167.30004883,-1316.00000000,1349.00000000,0.00000000,0.00000000,90.00000000); //DynamicObject(med_din_chair_5) (69)
	CreateDynamicObject(1811,1170.80004883,-1316.00000000,1349.00000000,0.00000000,0.00000000,90.00000000); //DynamicObject(med_din_chair_5) (70)
	CreateDynamicObject(1811,1169.69995117,-1315.90002441,1349.00000000,0.00000000,0.00000000,90.00000000); //DynamicObject(med_din_chair_5) (71)
	CreateDynamicObject(1811,1170.80004883,-1318.19995117,1349.00000000,0.00000000,0.00000000,270.00000000); //DynamicObject(med_din_chair_5) (72)
	CreateDynamicObject(1811,1169.59997559,-1318.19995117,1349.00000000,0.00000000,0.00000000,270.00000000); //DynamicObject(med_din_chair_5) (73)
	CreateDynamicObject(2637,1169.59997559,-1313.19995117,1348.80004883,0.00000000,0.00000000,90.00000000); //DynamicObject(cj_pizza_table2) (8)
	CreateDynamicObject(2637,1164.00000000,-1313.19995117,1348.80004883,0.00000000,0.00000000,90.00000000); //DynamicObject(cj_pizza_table2) (9)
	CreateDynamicObject(1811,1170.59997559,-1312.50000000,1349.00000000,0.00000000,0.00000000,0.00000000); //DynamicObject(med_din_chair_5) (74)
	CreateDynamicObject(1811,1170.59997559,-1313.59997559,1349.00000000,0.00000000,0.00000000,0.00000000); //DynamicObject(med_din_chair_5) (75)
	CreateDynamicObject(1811,1168.50000000,-1312.50000000,1349.00000000,0.00000000,0.00000000,180.00000000); //DynamicObject(med_din_chair_5) (76)
	CreateDynamicObject(1811,1168.50000000,-1313.59997559,1349.00000000,0.00000000,0.00000000,179.99450684); //DynamicObject(med_din_chair_5) (77)
	CreateDynamicObject(1811,1165.00000000,-1313.69995117,1349.00000000,0.00000000,0.00000000,0.00000000); //DynamicObject(med_din_chair_5) (78)
	CreateDynamicObject(1811,1165.00000000,-1312.59997559,1349.00000000,0.00000000,0.00000000,0.00000000); //DynamicObject(med_din_chair_5) (79)
	CreateDynamicObject(1811,1162.90002441,-1313.69995117,1349.00000000,0.00000000,0.00000000,179.99450684); //DynamicObject(med_din_chair_5) (80)
	CreateDynamicObject(1811,1162.90002441,-1312.59997559,1349.00000000,0.00000000,0.00000000,179.99450684); //DynamicObject(med_din_chair_5) (81)
	CreateDynamicObject(2416,1166.19995117,-1327.80004883,1348.40002441,0.00000000,0.00000000,180.00000000); //DynamicObject(cj_ff_disp) (1)
	CreateDynamicObject(2416,1168.09997559,-1327.80004883,1348.40002441,0.00000000,0.00000000,179.99450684); //DynamicObject(cj_ff_disp) (3)
	CreateDynamicObject(2531,1164.19995117,-1327.69995117,1348.30004883,0.00000000,0.00000000,180.00000000); //DynamicObject(cj_off2_lic_1_m) (1)
	CreateDynamicObject(2099,1166.59997559,-1311.90002441,1348.40002441,0.00000000,0.00000000,0.00000000); //DynamicObject(med_hi_fi_1) (1)
	CreateDynamicObject(2637,1176.69995117,-1320.80004883,1348.80004883,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_pizza_table2) (11)
	CreateDynamicObject(2637,1176.69995117,-1324.69995117,1348.80004883,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_pizza_table2) (12)
	CreateDynamicObject(2637,1172.69995117,-1324.69995117,1348.80004883,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_pizza_table2) (13)
	CreateDynamicObject(1811,1177.30004883,-1319.69995117,1349.00000000,0.00000000,0.00000000,90.00000000); //DynamicObject(med_din_chair_5) (82)
	CreateDynamicObject(1811,1176.19921875,-1319.69921875,1349.00000000,0.00000000,0.00000000,90.00000000); //DynamicObject(med_din_chair_5) (83)
	CreateDynamicObject(1811,1177.19995117,-1321.80004883,1349.00000000,0.00000000,0.00000000,270.00000000); //DynamicObject(med_din_chair_5) (84)
	CreateDynamicObject(1811,1176.09997559,-1321.80004883,1349.00000000,0.00000000,0.00000000,270.00000000); //DynamicObject(med_din_chair_5) (85)
	CreateDynamicObject(1811,1177.19995117,-1325.90002441,1349.00000000,0.00000000,0.00000000,270.00000000); //DynamicObject(med_din_chair_5) (86)
	CreateDynamicObject(1811,1176.09997559,-1325.90002441,1349.00000000,0.00000000,0.00000000,270.00000000); //DynamicObject(med_din_chair_5) (87)
	CreateDynamicObject(1811,1177.30004883,-1323.59997559,1349.00000000,0.00000000,0.00000000,90.00000000); //DynamicObject(med_din_chair_5) (88)
	CreateDynamicObject(1811,1176.09997559,-1323.59997559,1349.00000000,0.00000000,0.00000000,90.00000000); //DynamicObject(med_din_chair_5) (89)
	CreateDynamicObject(1811,1172.09997559,-1325.69995117,1349.00000000,0.00000000,0.00000000,270.00000000); //DynamicObject(med_din_chair_5) (90)
	CreateDynamicObject(1811,1173.19995117,-1325.69995117,1349.00000000,0.00000000,0.00000000,270.00000000); //DynamicObject(med_din_chair_5) (91)
	CreateDynamicObject(1811,1172.09997559,-1323.69995117,1349.00000000,0.00000000,0.00000000,90.00000000); //DynamicObject(med_din_chair_5) (93)
	CreateDynamicObject(1811,1173.30004883,-1323.69995117,1349.00000000,0.00000000,0.00000000,90.00000000); //DynamicObject(med_din_chair_5) (94)
	CreateDynamicObject(2637,1172.69995117,-1318.19995117,1348.80004883,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_pizza_table2) (14)
	CreateDynamicObject(1811,1172.19995117,-1317.19995117,1349.00000000,0.00000000,0.00000000,90.00000000); //DynamicObject(med_din_chair_5) (95)
	CreateDynamicObject(1811,1173.40002441,-1317.19995117,1349.00000000,0.00000000,0.00000000,90.00000000); //DynamicObject(med_din_chair_5) (96)
	CreateDynamicObject(1811,1172.19995117,-1319.19995117,1349.00000000,0.00000000,0.00000000,270.00000000); //DynamicObject(med_din_chair_5) (97)
	CreateDynamicObject(1811,1173.30004883,-1319.19995117,1349.00000000,0.00000000,0.00000000,270.00000000); //DynamicObject(med_din_chair_5) (98)
	CreateDynamicObject(2637,1176.69921875,-1328.89941406,1348.80004883,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_pizza_table2) (15)
	CreateDynamicObject(1811,1177.30004883,-1327.90002441,1349.00000000,0.00000000,0.00000000,90.00000000); //DynamicObject(med_din_chair_5) (99)
	CreateDynamicObject(1811,1176.09997559,-1327.90002441,1349.00000000,0.00000000,0.00000000,90.00000000); //DynamicObject(med_din_chair_5) (100)
	CreateDynamicObject(1811,1176.09997559,-1329.90002441,1349.00000000,0.00000000,0.00000000,270.00000000); //DynamicObject(med_din_chair_5) (101)
	CreateDynamicObject(1811,1177.09960938,-1329.89941406,1349.00000000,0.00000000,0.00000000,270.00000000); //DynamicObject(med_din_chair_5) (102)
	CreateDynamicObject(1703,1175.50000000,-1339.09997559,1348.40002441,0.00000000,0.00000000,0.00000000); //DynamicObject(kb_couch02) (4)
	CreateDynamicObject(1703,1177.50000000,-1342.09997559,1348.40002441,0.00000000,0.00000000,180.00000000); //DynamicObject(kb_couch02) (5)
	CreateDynamicObject(1814,1176.09997559,-1341.09997559,1348.40002441,0.00000000,0.00000000,0.00000000); //DynamicObject(coffee_med_1) (1)
	CreateDynamicObject(2833,1176.09997559,-1341.09997559,1348.40002441,0.00000000,0.00000000,0.00000000); //DynamicObject(gb_livingrug02) (1)
	CreateDynamicObject(1703,1175.50000000,-1347.30004883,1348.40002441,0.00000000,0.00000000,0.00000000); //DynamicObject(kb_couch02) (6)
	CreateDynamicObject(2834,1176.09997559,-1349.40002441,1348.40002441,0.00000000,0.00000000,0.00000000); //DynamicObject(gb_livingrug03) (1)
	CreateDynamicObject(1814,1176.09997559,-1349.40002441,1348.40002441,0.00000000,0.00000000,0.00000000); //DynamicObject(coffee_med_1) (1)
	CreateDynamicObject(1703,1177.50000000,-1350.40002441,1348.40002441,0.00000000,0.00000000,179.99450684); //DynamicObject(kb_couch02) (7)
	CreateDynamicObject(18014,1190.09997559,-1303.90002441,1348.80004883,0.00000000,0.00000000,180.00000000); //DynamicObject(int_rest_veg03) (1)
	CreateDynamicObject(2576,1150.09960938,-1307.50000000,1348.40002441,0.00000000,0.00000000,270.00000000); //DynamicObject(hotel_dresser_8) (1)
	CreateDynamicObject(2165,1165.50000000,-1354.19995117,1348.40002441,0.00000000,0.00000000,270.00000000); //DynamicObject(med_office_desk_1) (2)
	CreateDynamicObject(2166,1164.50000000,-1352.19995117,1348.40002441,0.00000000,0.00000000,269.99450684); //DynamicObject(med_office_desk_2) (1)
	CreateDynamicObject(2166,1167.39941406,-1355.19921875,1348.40002441,0.00000000,0.00000000,90.00000000); //DynamicObject(med_office_desk_2) (1)
	CreateDynamicObject(2165,1166.39941406,-1353.19921875,1348.40002441,0.00000000,0.00000000,90.00000000); //DynamicObject(med_office_desk_1) (2)
	CreateDynamicObject(2186,1170.90002441,-1355.00000000,1348.40002441,0.00000000,0.00000000,270.00000000); //DynamicObject(photocopier_1) (2)
	CreateDynamicObject(1671,1164.50000000,-1354.80004883,1348.80004883,0.00000000,0.00000000,97.99804688); //DynamicObject(swivelchair_a) (3)
	CreateDynamicObject(1671,1167.30004883,-1352.90002441,1348.80004883,0.00000000,0.00000000,271.99804688); //DynamicObject(swivelchair_a) (3)
	CreateDynamicObject(2163,1164.50000000,-1349.80004883,1348.40002441,0.00000000,0.00000000,0.00000000); //DynamicObject(med_office_unit_2) (2)
	CreateDynamicObject(2164,1166.30004883,-1349.80004883,1348.40002441,0.00000000,0.00000000,0.00000000); //DynamicObject(med_office_unit_5) (1)
	CreateDynamicObject(2161,1168.09997559,-1349.80004883,1348.40002441,0.00000000,0.00000000,0.00000000); //DynamicObject(med_office_unit_4) (4)
	CreateDynamicObject(2197,1165.19995117,-1356.40002441,1348.40002441,0.00000000,0.00000000,179.99450684); //DynamicObject(filling_cabinet) (8)
	CreateDynamicObject(2197,1165.90002441,-1356.40002441,1348.40002441,0.00000000,0.00000000,179.99450684); //DynamicObject(filling_cabinet) (8)
	CreateDynamicObject(2197,1166.59997559,-1356.40002441,1348.40002441,0.00000000,0.00000000,179.99450684); //DynamicObject(filling_cabinet) (8)
	CreateDynamicObject(2163,1164.50000000,-1343.50000000,1348.40002441,0.00000000,0.00000000,0.00000000); //DynamicObject(med_office_unit_2) (2)
	CreateDynamicObject(2164,1166.30004883,-1343.50000000,1348.40002441,0.00000000,0.00000000,0.00000000); //DynamicObject(med_office_unit_5) (1)
	CreateDynamicObject(2161,1168.09997559,-1343.50000000,1348.40002441,0.00000000,0.00000000,0.00000000); //DynamicObject(med_office_unit_4) (4)
	CreateDynamicObject(2165,1167.09997559,-1347.09997559,1348.40002441,0.00000000,0.00000000,90.00000000); //DynamicObject(med_office_desk_1) (2)
	CreateDynamicObject(2166,1168.09960938,-1349.09960938,1348.40002441,0.00000000,0.00000000,90.00000000); //DynamicObject(med_office_desk_2) (1)
	CreateDynamicObject(2166,1165.19995117,-1346.09997559,1348.40002441,0.00000000,0.00000000,269.98901367); //DynamicObject(med_office_desk_2) (1)
	CreateDynamicObject(2165,1166.19995117,-1348.09997559,1348.40002441,0.00000000,0.00000000,270.00000000); //DynamicObject(med_office_desk_1) (2)
	CreateDynamicObject(1671,1165.30004883,-1348.69995117,1348.80004883,0.00000000,0.00000000,97.99804688); //DynamicObject(swivelchair_a) (3)
	CreateDynamicObject(1671,1167.89941406,-1346.50000000,1348.80004883,0.00000000,0.00000000,271.98852539); //DynamicObject(swivelchair_a) (3)
	CreateDynamicObject(2186,1162.50000000,-1348.80004883,1348.40002441,0.00000000,0.00000000,90.00000000); //DynamicObject(photocopier_1) (2)
	CreateDynamicObject(2197,1163.50000000,-1343.90002441,1348.40002441,0.00000000,0.00000000,90.00000000); //DynamicObject(filling_cabinet) (8)
	CreateDynamicObject(2197,1163.50000000,-1344.59997559,1348.40002441,0.00000000,0.00000000,89.99450684); //DynamicObject(filling_cabinet) (8)
	CreateDynamicObject(2197,1163.50000000,-1345.30004883,1348.40002441,0.00000000,0.00000000,89.99450684); //DynamicObject(filling_cabinet) (8)
	CreateDynamicObject(2197,1163.50000000,-1346.00000000,1348.40002441,0.00000000,0.00000000,89.99450684); //DynamicObject(filling_cabinet) (8)
	CreateDynamicObject(2197,1163.50000000,-1337.80004883,1348.40002441,0.00000000,0.00000000,89.99450684); //DynamicObject(filling_cabinet) (8)
	CreateDynamicObject(2197,1163.50000000,-1338.50000000,1348.40002441,0.00000000,0.00000000,89.99450684); //DynamicObject(filling_cabinet) (8)
	CreateDynamicObject(2197,1163.50000000,-1339.19995117,1348.40002441,0.00000000,0.00000000,89.99450684); //DynamicObject(filling_cabinet) (8)
	CreateDynamicObject(2197,1163.50000000,-1339.90002441,1348.40002441,0.00000000,0.00000000,89.99450684); //DynamicObject(filling_cabinet) (8)
	CreateDynamicObject(2197,1163.50000000,-1340.59997559,1348.40002441,0.00000000,0.00000000,89.99450684); //DynamicObject(filling_cabinet) (8)
	CreateDynamicObject(2197,1163.50000000,-1341.30004883,1348.40002441,0.00000000,0.00000000,89.99450684); //DynamicObject(filling_cabinet) (8)
	CreateDynamicObject(2197,1163.50000000,-1342.00000000,1348.40002441,0.00000000,0.00000000,89.99450684); //DynamicObject(filling_cabinet) (8)
	CreateDynamicObject(2197,1163.50000000,-1342.69995117,1348.40002441,0.00000000,0.00000000,89.99450684); //DynamicObject(filling_cabinet) (8)
	CreateDynamicObject(19358,1167.09997559,-1341.80004883,1350.09997559,0.00000000,0.00000000,180.00000000); //DynamicObject(road_sfw12) (3)
	CreateDynamicObject(19358,1167.09997559,-1339.90002441,1350.09997559,0.00000000,0.00000000,179.99450684); //DynamicObject(road_sfw12) (3)
	CreateDynamicObject(2197,1163.51000977,-1342.69995117,1350.00000000,0.00000000,0.00000000,89.99450684); //DynamicObject(filling_cabinet) (8)
	CreateDynamicObject(2197,1163.51000977,-1342.00000000,1350.00000000,0.00000000,0.00000000,89.99450684); //DynamicObject(filling_cabinet) (8)
	CreateDynamicObject(2197,1163.51000977,-1341.30004883,1350.00000000,0.00000000,0.00000000,89.99450684); //DynamicObject(filling_cabinet) (8)
	CreateDynamicObject(2197,1163.51000977,-1340.59997559,1350.00000000,0.00000000,0.00000000,89.99450684); //DynamicObject(filling_cabinet) (8)
	CreateDynamicObject(2197,1163.51000977,-1339.90002441,1350.00000000,0.00000000,0.00000000,89.99450684); //DynamicObject(filling_cabinet) (8)
	CreateDynamicObject(2197,1163.51000977,-1339.19995117,1350.00000000,0.00000000,0.00000000,89.99450684); //DynamicObject(filling_cabinet) (8)
	CreateDynamicObject(2197,1163.51000977,-1338.50000000,1350.00000000,0.00000000,0.00000000,89.99450684); //DynamicObject(filling_cabinet) (8)
	CreateDynamicObject(2197,1163.51000977,-1337.80004883,1350.00000000,0.00000000,0.00000000,89.99450684); //DynamicObject(filling_cabinet) (8)
	CreateDynamicObject(2197,1165.69995117,-1338.69995117,1348.40002441,0.00000000,0.00000000,270.00000000); //DynamicObject(filling_cabinet) (8)
	CreateDynamicObject(2197,1165.69995117,-1339.40002441,1348.40002441,0.00000000,0.00000000,270.00000000); //DynamicObject(filling_cabinet) (8)
	CreateDynamicObject(2197,1165.69995117,-1340.09997559,1348.40002441,0.00000000,0.00000000,270.00000000); //DynamicObject(filling_cabinet) (8)
	CreateDynamicObject(2197,1165.69995117,-1340.80004883,1348.40002441,0.00000000,0.00000000,270.00000000); //DynamicObject(filling_cabinet) (8)
	CreateDynamicObject(2197,1165.69995117,-1341.50000000,1348.40002441,0.00000000,0.00000000,270.00000000); //DynamicObject(filling_cabinet) (8)
	CreateDynamicObject(2197,1165.69995117,-1342.19995117,1348.40002441,0.00000000,0.00000000,270.00000000); //DynamicObject(filling_cabinet) (8)
	CreateDynamicObject(2197,1165.69995117,-1342.90002441,1348.40002441,0.00000000,0.00000000,270.00000000); //DynamicObject(filling_cabinet) (8)
	CreateDynamicObject(2197,1165.68994141,-1342.90002441,1350.00000000,0.00000000,0.00000000,270.00000000); //DynamicObject(filling_cabinet) (8)
	CreateDynamicObject(2197,1165.68994141,-1342.19995117,1350.00000000,0.00000000,0.00000000,270.00000000); //DynamicObject(filling_cabinet) (8)
	CreateDynamicObject(2197,1165.68994141,-1341.50000000,1350.00000000,0.00000000,0.00000000,270.00000000); //DynamicObject(filling_cabinet) (8)
	CreateDynamicObject(2197,1165.68994141,-1340.80004883,1350.00000000,0.00000000,0.00000000,270.00000000); //DynamicObject(filling_cabinet) (8)
	CreateDynamicObject(2197,1165.68994141,-1340.09997559,1350.00000000,0.00000000,0.00000000,270.00000000); //DynamicObject(filling_cabinet) (8)
	CreateDynamicObject(2197,1165.68994141,-1339.40002441,1350.00000000,0.00000000,0.00000000,270.00000000); //DynamicObject(filling_cabinet) (8)
	CreateDynamicObject(2197,1165.68994141,-1338.70104980,1350.00000000,0.00000000,0.00000000,270.00000000); //DynamicObject(filling_cabinet) (8)
	CreateDynamicObject(2197,1168.69995117,-1342.90002441,1348.40002441,0.00000000,0.00000000,89.99450684); //DynamicObject(filling_cabinet) (8)
	CreateDynamicObject(2197,1168.69995117,-1342.19995117,1348.40002441,0.00000000,0.00000000,89.99450684); //DynamicObject(filling_cabinet) (8)
	CreateDynamicObject(2197,1168.69995117,-1341.50000000,1348.40002441,0.00000000,0.00000000,89.99450684); //DynamicObject(filling_cabinet) (8)
	CreateDynamicObject(2197,1168.69995117,-1340.80004883,1348.40002441,0.00000000,0.00000000,89.99450684); //DynamicObject(filling_cabinet) (8)
	CreateDynamicObject(2197,1168.69995117,-1340.09997559,1348.40002441,0.00000000,0.00000000,89.99450684); //DynamicObject(filling_cabinet) (8)
	CreateDynamicObject(2197,1168.69995117,-1339.40002441,1348.40002441,0.00000000,0.00000000,89.99450684); //DynamicObject(filling_cabinet) (8)
	CreateDynamicObject(2197,1168.69995117,-1338.69995117,1348.40002441,0.00000000,0.00000000,89.99450684); //DynamicObject(filling_cabinet) (8)
	CreateDynamicObject(2197,1168.70996094,-1338.70104980,1350.00000000,0.00000000,0.00000000,89.99450684); //DynamicObject(filling_cabinet) (8)
	CreateDynamicObject(2197,1168.70996094,-1339.40002441,1350.00000000,0.00000000,0.00000000,89.99450684); //DynamicObject(filling_cabinet) (8)
	CreateDynamicObject(2197,1168.70996094,-1340.09997559,1350.00000000,0.00000000,0.00000000,89.99450684); //DynamicObject(filling_cabinet) (8)
	CreateDynamicObject(2197,1168.70996094,-1340.80004883,1350.00000000,0.00000000,0.00000000,89.99450684); //DynamicObject(filling_cabinet) (8)
	CreateDynamicObject(2197,1168.70996094,-1341.50000000,1350.00000000,0.00000000,0.00000000,89.99450684); //DynamicObject(filling_cabinet) (8)
	CreateDynamicObject(2197,1168.70996094,-1342.19995117,1350.00000000,0.00000000,0.00000000,89.99450684); //DynamicObject(filling_cabinet) (8)
	CreateDynamicObject(2197,1168.70996094,-1342.90002441,1350.00000000,0.00000000,0.00000000,89.99450684); //DynamicObject(filling_cabinet) (8)
	CreateDynamicObject(2010,1171.00000000,-1343.00000000,1348.40002441,0.00000000,0.00000000,37.99072266); //DynamicObject(nu_plant3_ofc) (11)
	CreateDynamicObject(2010,1171.09997559,-1337.40002441,1348.40002441,0.00000000,0.00000000,37.99072266); //DynamicObject(nu_plant3_ofc) (11)
	CreateDynamicObject(1703,1168.50000000,-1332.59960938,1348.40002441,0.00000000,0.00000000,270.00000000); //DynamicObject(kb_couch02) (8)
	CreateDynamicObject(1703,1165.59960938,-1331.79980469,1348.40002441,0.00000000,0.00000000,0.99975586); //DynamicObject(kb_couch02) (9)
	CreateDynamicObject(1703,1167.50000000,-1335.50000000,1348.40002441,0.00000000,0.00000000,180.00000000); //DynamicObject(kb_couch02) (10)
	CreateDynamicObject(1814,1167.09960938,-1334.09960938,1348.40002441,0.00000000,0.00000000,91.99951172); //DynamicObject(coffee_med_1) (1)
	CreateDynamicObject(1828,1158.30004883,-1350.69995117,1348.40002441,0.00000000,0.00000000,0.00000000); //DynamicObject(man_sdr_rug) (1)
	CreateDynamicObject(2296,1162.29980469,-1334.69921875,1348.40002441,0.00000000,0.00000000,90.00000000); //DynamicObject(tv_unit_1) (1)
	CreateDynamicObject(2010,1162.59997559,-1336.50000000,1348.40002441,0.00000000,0.00000000,37.99072266); //DynamicObject(nu_plant3_ofc) (11)
	CreateDynamicObject(2010,1162.50000000,-1330.90002441,1348.40002441,0.00000000,0.00000000,37.99072266); //DynamicObject(nu_plant3_ofc) (11)
	CreateDynamicObject(3396,1186.00000000,-1315.50000000,1348.40002441,0.00000000,0.00000000,270.00000000); //DynamicObject(a51_sdsk_4_) (1)
	CreateDynamicObject(2500,1163.30004883,-1325.40002441,1349.43005371,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_ff_coffee) (1)
	CreateDynamicObject(2146,1186.69995117,-1311.19995117,1348.90002441,0.00000000,0.00000000,179.99450684); //DynamicObject(cj_trolly1) (1)
	CreateDynamicObject(3394,1189.89941406,-1312.29980469,1348.40002441,0.00000000,0.00000000,0.00000000); //DynamicObject(a51_sdsk_2_) (1)
	CreateDynamicObject(2994,1187.59997559,-1310.19995117,1348.90002441,0.00000000,0.00000000,179.99450684); //DynamicObject(kmb_trolley) (2)
	CreateDynamicObject(19357,1185.90002441,-1308.19995117,1348.31005859,0.00000000,90.00000000,0.00000000); //DynamicObject(road_sfw11) (1)
	CreateDynamicObject(19357,1185.90002441,-1311.40002441,1348.31005859,0.00000000,90.00000000,0.00000000); //DynamicObject(road_sfw11) (2)
	CreateDynamicObject(19357,1185.90002441,-1314.50000000,1348.31005859,0.00000000,90.00000000,0.00000000); //DynamicObject(road_sfw11) (3)
	CreateDynamicObject(19357,1189.39941406,-1314.59960938,1348.31005859,0.00000000,90.00000000,0.00000000); //DynamicObject(road_sfw11) (4)
	CreateDynamicObject(19357,1189.39941406,-1311.39941406,1348.31005859,0.00000000,90.00000000,0.00000000); //DynamicObject(road_sfw11) (5)
	CreateDynamicObject(19357,1189.40002441,-1308.19995117,1348.31005859,0.00000000,90.00000000,0.00000000); //DynamicObject(road_sfw11) (6)
	CreateDynamicObject(19357,1182.40002441,-1308.19995117,1348.31005859,0.00000000,90.00000000,0.00000000); //DynamicObject(road_sfw11) (7)
	CreateDynamicObject(19357,1179.59997559,-1308.19995117,1348.31103516,0.00000000,90.00000000,0.00000000); //DynamicObject(road_sfw11) (8)
	CreateDynamicObject(19357,1182.40002441,-1311.40002441,1348.31005859,0.00000000,90.00000000,0.00000000); //DynamicObject(road_sfw11) (9)
	CreateDynamicObject(19357,1182.40002441,-1314.59997559,1348.31005859,0.00000000,90.00000000,0.00000000); //DynamicObject(road_sfw11) (10)
	CreateDynamicObject(19357,1179.59960938,-1311.39941406,1348.31103516,0.00000000,90.00000000,0.00000000); //DynamicObject(road_sfw11) (11)
	CreateDynamicObject(19357,1179.59997559,-1314.59997559,1348.31103516,0.00000000,90.00000000,0.00000000); //DynamicObject(road_sfw11) (12)
	CreateDynamicObject(3394,1183.50000000,-1312.50000000,1348.40002441,0.00000000,0.00000000,0.00000000); //DynamicObject(a51_sdsk_2_) (2)
	CreateDynamicObject(3396,1179.79980469,-1315.39941406,1348.40002441,0.00000000,0.00000000,270.00000000); //DynamicObject(a51_sdsk_4_) (2)
	CreateDynamicObject(2994,1181.19921875,-1309.89941406,1348.90002441,0.00000000,0.00000000,179.99450684); //DynamicObject(kmb_trolley) (3)
	CreateDynamicObject(2146,1180.39941406,-1310.89941406,1349.00000000,0.00000000,0.00000000,179.99450684); //DynamicObject(cj_trolly1) (1)
	CreateDynamicObject(2166,1177.00000000,-1315.39941406,1348.40002441,0.00000000,0.00000000,90.00000000); //DynamicObject(med_office_desk_2) (1)
	CreateDynamicObject(2165,1176.00000000,-1313.39941406,1348.40002441,0.00000000,0.00000000,90.00000000); //DynamicObject(med_office_desk_1) (2)
	CreateDynamicObject(19404,1175.51855469,-1313.00000000,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(boigagr_sfw) (1)
	CreateDynamicObject(19431,1150.60205078,-1310.19921875,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_48_a) (1)
	CreateDynamicObject(19431,1175.51855469,-1310.59960938,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_48_a) (1)
	CreateDynamicObject(1671,1176.90002441,-1312.50000000,1348.80004883,0.00000000,0.00000000,271.98852539); //DynamicObject(swivelchair_a) (3)
	CreateDynamicObject(2146,1167.30004883,-1309.40002441,1348.90002441,0.00000000,0.00000000,89.99450684); //DynamicObject(cj_trolly1) (1)
	CreateDynamicObject(3394,1170.69995117,-1309.30004883,1348.40002441,0.00000000,0.00000000,0.00000000); //DynamicObject(a51_sdsk_2_) (2)
	CreateDynamicObject(3396,1163.59997559,-1311.00000000,1348.40002441,0.00000000,0.00000000,270.00000000); //DynamicObject(a51_sdsk_4_) (2)
	CreateDynamicObject(19357,1169.90002441,-1310.19995117,1348.31005859,0.00000000,90.00000000,90.00000000); //DynamicObject(road_sfw11) (11)
	CreateDynamicObject(19357,1166.69995117,-1310.19995117,1348.31005859,0.00000000,90.00000000,90.00000000); //DynamicObject(road_sfw11) (11)
	CreateDynamicObject(19357,1163.50000000,-1310.19995117,1348.31005859,0.00000000,90.00000000,90.00000000); //DynamicObject(road_sfw11) (11)
	CreateDynamicObject(19357,1163.50000000,-1308.30004883,1348.31103516,0.00000000,90.00000000,90.00000000); //DynamicObject(road_sfw11) (11)
	CreateDynamicObject(19357,1166.69921875,-1308.29980469,1348.31103516,0.00000000,90.00000000,90.00000000); //DynamicObject(road_sfw11) (11)
	CreateDynamicObject(19357,1169.89941406,-1308.29980469,1348.31103516,0.00000000,90.00000000,90.00000000); //DynamicObject(road_sfw11) (11)
	CreateDynamicObject(2994,1166.40002441,-1308.50000000,1348.90002441,0.00000000,0.00000000,89.99450684); //DynamicObject(kmb_trolley) (3)
	CreateDynamicObject(19388,1173.90002441,-1309.80004883,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(road_sfw15) (1)
	CreateDynamicObject(19431,1172.29980469,-1309.79980469,1350.09997559,0.00000000,0.00000000,270.00000000); //DynamicObject(cs_landbit_48_a) (1)
	CreateDynamicObject(2575,1146.39941406,-1309.19921875,1348.80004883,0.00000000,0.00000000,0.00000000); //DynamicObject(hotel_s_bedset_8) (1)
	CreateDynamicObject(19358,1145.79980469,-1308.19921875,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw12) (3)
	CreateDynamicObject(19385,1145.69921875,-1311.00000000,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(sfw_boxwest02) (1)
	CreateDynamicObject(19388,1145.79980469,-1311.00000000,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw15) (1)
	CreateDynamicObject(19431,1145.79980469,-1313.39941406,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_48_a) (1)
	CreateDynamicObject(19355,1145.70019531,-1308.19921875,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_12) (1)
	CreateDynamicObject(19428,1145.69921875,-1313.39941406,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_10_a) (1)
	CreateDynamicObject(19355,1144.09960938,-1306.60937500,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(cs_landbit_12) (2)
	CreateDynamicObject(19355,1142.60937500,-1308.19921875,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_12) (3)
	CreateDynamicObject(19355,1142.60937500,-1311.39941406,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_12) (4)
	CreateDynamicObject(19428,1142.60998535,-1313.80004883,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_10_a) (2)
	CreateDynamicObject(19357,1144.09997559,-1308.19995117,1348.31005859,0.00000000,90.00000000,0.00000000); //DynamicObject(road_sfw11) (11)
	CreateDynamicObject(19357,1144.09997559,-1311.40002441,1348.31005859,0.00000000,90.00000000,0.00000000); //DynamicObject(road_sfw11) (11)
	CreateDynamicObject(19357,1144.09960938,-1314.59960938,1348.31005859,0.00000000,90.00000000,0.00000000); //DynamicObject(road_sfw11) (11)
	CreateDynamicObject(1502,1145.75976562,-1310.21386719,1348.32995605,0.00000000,0.00000000,270.00000000); //DynamicObject(gen_doorint04) (2)
	CreateDynamicObject(19355,1144.09960938,-1314.09960938,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(cs_landbit_12) (6)
	CreateDynamicObject(2527,1144.89941406,-1308.19921875,1348.40002441,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_shower4) (1)
	CreateDynamicObject(2523,1145.09960938,-1312.39941406,1348.40002441,0.00000000,0.00000000,270.00000000); //DynamicObject(cj_b_sink3) (1)
	CreateDynamicObject(2525,1143.69921875,-1313.50000000,1348.40002441,0.00000000,0.00000000,179.99450684); //DynamicObject(cj_toilet4) (1)
	CreateDynamicObject(2526,1143.19921875,-1309.69921875,1348.40002441,0.00000000,0.00000000,90.00000000); //DynamicObject(cj_bath4) (1)
	CreateDynamicObject(19358,1145.80004883,-1315.80004883,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw12) (3)
	CreateDynamicObject(19388,1145.80004883,-1319.00000000,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw15) (1)
	CreateDynamicObject(19431,1145.80004883,-1321.40002441,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_48_a) (1)
	CreateDynamicObject(19358,1145.80004883,-1323.80004883,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw12) (3)
	CreateDynamicObject(19388,1145.80004883,-1327.00000000,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw15) (1)
	CreateDynamicObject(19431,1145.80004883,-1329.40002441,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_48_a) (1)
	CreateDynamicObject(19358,1145.80004883,-1331.80004883,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw12) (3)
	CreateDynamicObject(19388,1145.80004883,-1335.00000000,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw15) (1)
	CreateDynamicObject(19431,1145.80004883,-1337.40002441,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_48_a) (1)
	CreateDynamicObject(19358,1145.80004883,-1339.80004883,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw12) (3)
	CreateDynamicObject(19388,1145.80004883,-1343.00000000,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw15) (1)
	CreateDynamicObject(19431,1145.80004883,-1345.40002441,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_48_a) (1)
	CreateDynamicObject(19358,1145.80004883,-1347.80004883,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw12) (3)
	CreateDynamicObject(19388,1145.80004883,-1351.00000000,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw15) (1)
	CreateDynamicObject(19388,1145.80004883,-1354.19995117,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw15) (1)
	CreateDynamicObject(19358,1145.80004883,-1357.40002441,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw12) (3)
	CreateDynamicObject(19355,1145.69995117,-1315.90002441,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_12) (1)
	CreateDynamicObject(19385,1145.69995117,-1319.00000000,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(sfw_boxwest02) (1)
	CreateDynamicObject(19428,1145.69995117,-1321.40002441,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_10_a) (1)
	CreateDynamicObject(19355,1145.69995117,-1323.80004883,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_12) (1)
	CreateDynamicObject(19385,1145.69995117,-1327.00000000,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(sfw_boxwest02) (1)
	CreateDynamicObject(19428,1145.69995117,-1329.40002441,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_10_a) (1)
	CreateDynamicObject(19355,1145.69995117,-1331.80004883,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_12) (1)
	CreateDynamicObject(19385,1145.69995117,-1335.00000000,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(sfw_boxwest02) (1)
	CreateDynamicObject(19428,1145.69995117,-1337.40002441,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_10_a) (1)
	CreateDynamicObject(19355,1145.69995117,-1339.80004883,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_12) (1)
	CreateDynamicObject(19385,1145.69995117,-1343.00000000,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(sfw_boxwest02) (1)
	CreateDynamicObject(19428,1145.69995117,-1345.40002441,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_10_a) (1)
	CreateDynamicObject(19355,1145.69995117,-1347.80004883,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_12) (1)
	CreateDynamicObject(19385,1145.69995117,-1351.00000000,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(sfw_boxwest02) (1)
	CreateDynamicObject(19385,1145.69995117,-1354.19995117,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(sfw_boxwest02) (1)
	CreateDynamicObject(19355,1145.69995117,-1357.40002441,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_12) (1)
	CreateDynamicObject(19357,1144.09997559,-1317.80004883,1348.31005859,0.00000000,90.00000000,0.00000000); //DynamicObject(road_sfw11) (11)
	CreateDynamicObject(19357,1144.09997559,-1321.00000000,1348.31005859,0.00000000,90.00000000,0.00000000); //DynamicObject(road_sfw11) (11)
	CreateDynamicObject(19357,1144.09997559,-1324.19995117,1348.31005859,0.00000000,90.00000000,0.00000000); //DynamicObject(road_sfw11) (11)
	CreateDynamicObject(19357,1144.09997559,-1327.40002441,1348.31005859,0.00000000,90.00000000,0.00000000); //DynamicObject(road_sfw11) (11)
	CreateDynamicObject(19357,1144.09997559,-1330.59997559,1348.31005859,0.00000000,90.00000000,0.00000000); //DynamicObject(road_sfw11) (11)
	CreateDynamicObject(19357,1144.09997559,-1333.80004883,1348.31005859,0.00000000,90.00000000,0.00000000); //DynamicObject(road_sfw11) (11)
	CreateDynamicObject(19357,1144.09997559,-1337.00000000,1348.31005859,0.00000000,90.00000000,0.00000000); //DynamicObject(road_sfw11) (11)
	CreateDynamicObject(19357,1144.09997559,-1340.19995117,1348.31005859,0.00000000,90.00000000,0.00000000); //DynamicObject(road_sfw11) (11)
	CreateDynamicObject(19357,1144.09997559,-1343.40002441,1348.31005859,0.00000000,90.00000000,0.00000000); //DynamicObject(road_sfw11) (11)
	CreateDynamicObject(19357,1144.09997559,-1346.59997559,1348.31005859,0.00000000,90.00000000,0.00000000); //DynamicObject(road_sfw11) (11)
	CreateDynamicObject(19357,1144.09997559,-1349.80004883,1348.31005859,0.00000000,90.00000000,0.00000000); //DynamicObject(road_sfw11) (11)
	CreateDynamicObject(19357,1144.09997559,-1353.00000000,1348.31005859,0.00000000,90.00000000,0.00000000); //DynamicObject(road_sfw11) (11)
	CreateDynamicObject(19357,1144.09997559,-1356.19995117,1348.31005859,0.00000000,90.00000000,0.00000000); //DynamicObject(road_sfw11) (11)
	CreateDynamicObject(19355,1144.09997559,-1314.21997070,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(cs_landbit_12) (2)
	CreateDynamicObject(19355,1144.09997559,-1322.21997070,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(cs_landbit_12) (2)
	CreateDynamicObject(19355,1144.09997559,-1330.21997070,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(cs_landbit_12) (2)
	CreateDynamicObject(19355,1144.09997559,-1338.21997070,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(cs_landbit_12) (2)
	CreateDynamicObject(19355,1144.09997559,-1346.21997070,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(cs_landbit_12) (2)
	CreateDynamicObject(19355,1144.09997559,-1352.09997559,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(cs_landbit_12) (2)
	CreateDynamicObject(19447,1142.69995117,-1319.00000000,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_12) (3)
	CreateDynamicObject(19447,1142.69995117,-1328.59997559,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_12) (3)
	CreateDynamicObject(19447,1142.69921875,-1338.19921875,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_12) (3)
	CreateDynamicObject(19447,1142.69921875,-1347.79980469,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_12) (3)
	CreateDynamicObject(19355,1144.19995117,-1322.09997559,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(cs_landbit_12) (6)
	CreateDynamicObject(19355,1144.19995117,-1330.09997559,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(cs_landbit_12) (6)
	CreateDynamicObject(19355,1144.19995117,-1338.09997559,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(cs_landbit_12) (6)
	CreateDynamicObject(19355,1144.19995117,-1346.09997559,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(cs_landbit_12) (6)
	CreateDynamicObject(19355,1144.19995117,-1351.90002441,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(cs_landbit_12) (6)
	CreateDynamicObject(19355,1144.19995117,-1357.69995117,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(cs_landbit_12) (6)
	CreateDynamicObject(1502,1145.76000977,-1318.21496582,1348.32995605,0.00000000,0.00000000,270.00000000); //DynamicObject(gen_doorint04) (2)
	CreateDynamicObject(1502,1145.76000977,-1326.21496582,1348.32995605,0.00000000,0.00000000,270.00000000); //DynamicObject(gen_doorint04) (2)
	CreateDynamicObject(1502,1145.76000977,-1334.21496582,1348.32995605,0.00000000,0.00000000,270.00000000); //DynamicObject(gen_doorint04) (2)
	CreateDynamicObject(1502,1145.76000977,-1342.21496582,1348.32995605,0.00000000,0.00000000,270.00000000); //DynamicObject(gen_doorint04) (2)
	CreateDynamicObject(1502,1145.76000977,-1350.21496582,1348.32995605,0.00000000,0.00000000,270.00000000); //DynamicObject(gen_doorint04) (2)
	CreateDynamicObject(1502,1145.76000977,-1353.41503906,1348.33300781,0.00000000,0.00000000,270.00000000); //DynamicObject(gen_doorint04) (2)
	CreateDynamicObject(2527,1144.90002441,-1315.80004883,1348.40002441,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_shower4) (1)
	CreateDynamicObject(2526,1143.30004883,-1317.40002441,1348.40002441,0.00000000,0.00000000,90.00000000); //DynamicObject(cj_bath4) (1)
	CreateDynamicObject(2523,1145.09997559,-1320.40002441,1348.40002441,0.00000000,0.00000000,270.00000000); //DynamicObject(cj_b_sink3) (1)
	CreateDynamicObject(2525,1143.80004883,-1321.50000000,1348.40002441,0.00000000,0.00000000,179.99450684); //DynamicObject(cj_toilet4) (1)
	CreateDynamicObject(2525,1143.80004883,-1329.50000000,1348.40002441,0.00000000,0.00000000,179.99450684); //DynamicObject(cj_toilet4) (1)
	CreateDynamicObject(2525,1143.80004883,-1337.59997559,1348.40002441,0.00000000,0.00000000,179.99450684); //DynamicObject(cj_toilet4) (1)
	CreateDynamicObject(2525,1143.80004883,-1345.50000000,1348.40002441,0.00000000,0.00000000,179.99450684); //DynamicObject(cj_toilet4) (1)
	CreateDynamicObject(2525,1143.69995117,-1351.30004883,1348.40002441,0.00000000,0.00000000,179.99450684); //DynamicObject(cj_toilet4) (1)
	CreateDynamicObject(2525,1143.69995117,-1357.09997559,1348.40002441,0.00000000,0.00000000,179.99450684); //DynamicObject(cj_toilet4) (1)
	CreateDynamicObject(2523,1145.09997559,-1328.30004883,1348.40002441,0.00000000,0.00000000,270.00000000); //DynamicObject(cj_b_sink3) (1)
	CreateDynamicObject(2523,1145.09997559,-1336.40002441,1348.40002441,0.00000000,0.00000000,270.00000000); //DynamicObject(cj_b_sink3) (1)
	CreateDynamicObject(2523,1145.09997559,-1344.30004883,1348.40002441,0.00000000,0.00000000,270.00000000); //DynamicObject(cj_b_sink3) (1)
	CreateDynamicObject(2523,1145.09997559,-1348.59997559,1348.40002441,0.00000000,0.00000000,270.00000000); //DynamicObject(cj_b_sink3) (1)
	CreateDynamicObject(2523,1145.09997559,-1356.40002441,1348.40002441,0.00000000,0.00000000,270.00000000); //DynamicObject(cj_b_sink3) (1)
	CreateDynamicObject(2527,1144.90002441,-1323.80004883,1348.40002441,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_shower4) (1)
	CreateDynamicObject(2527,1144.90002441,-1331.80004883,1348.40002441,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_shower4) (1)
	CreateDynamicObject(2527,1144.90002441,-1339.80004883,1348.40002441,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_shower4) (1)
	CreateDynamicObject(2527,1144.90002441,-1347.80004883,1348.40002441,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_shower4) (1)
	CreateDynamicObject(2527,1144.90002441,-1353.69995117,1348.40002441,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_shower4) (1)
	CreateDynamicObject(2526,1143.30004883,-1325.50000000,1348.40002441,0.00000000,0.00000000,90.00000000); //DynamicObject(cj_bath4) (1)
	CreateDynamicObject(2526,1143.30004883,-1333.59997559,1348.40002441,0.00000000,0.00000000,90.00000000); //DynamicObject(cj_bath4) (1)
	CreateDynamicObject(2526,1143.30004883,-1341.30004883,1348.40002441,0.00000000,0.00000000,90.00000000); //DynamicObject(cj_bath4) (1)
	CreateDynamicObject(2526,1143.30004883,-1349.50000000,1348.40002441,0.00000000,0.00000000,90.00000000); //DynamicObject(cj_bath4) (1)
	CreateDynamicObject(2526,1143.30004883,-1355.50000000,1348.40002441,0.00000000,0.00000000,90.00000000); //DynamicObject(cj_bath4) (1)
	CreateDynamicObject(2575,1146.19995117,-1316.80004883,1348.80004883,0.00000000,0.00000000,0.00000000); //DynamicObject(hotel_s_bedset_8) (1)
	CreateDynamicObject(2576,1150.09960938,-1314.79980469,1348.40002441,0.00000000,0.00000000,270.00000000); //DynamicObject(hotel_dresser_8) (1)
	CreateDynamicObject(2315,1146.50000000,-1313.50000000,1348.40002441,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_tv_table4) (1)
	CreateDynamicObject(1518,1146.69921875,-1313.29980469,1349.18005371,0.00000000,0.00000000,155.99487305); //DynamicObject(dyn_tv_2) (1)
	CreateDynamicObject(2315,1146.50000000,-1321.59997559,1348.40002441,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_tv_table4) (2)
	CreateDynamicObject(2315,1146.50000000,-1329.69995117,1348.40002441,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_tv_table4) (3)
	CreateDynamicObject(2315,1146.50000000,-1337.59997559,1348.40002441,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_tv_table4) (4)
	CreateDynamicObject(2315,1146.50000000,-1345.80004883,1348.40002441,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_tv_table4) (5)
	CreateDynamicObject(2575,1147.30004883,-1348.80004883,1348.80004883,0.00000000,0.00000000,0.00000000); //DynamicObject(hotel_s_bedset_8) (1)
	CreateDynamicObject(2315,1146.40002441,-1348.30004883,1348.40002441,0.00000000,0.00000000,90.00000000); //DynamicObject(cj_tv_table4) (6)
	CreateDynamicObject(2315,1146.50000000,-1357.19995117,1348.40002441,0.00000000,0.00000000,90.00000000); //DynamicObject(cj_tv_table4) (7)
	CreateDynamicObject(2575,1150.30004883,-1355.19995117,1348.80004883,0.00000000,0.00000000,180.00000000); //DynamicObject(hotel_s_bedset_8) (1)
	CreateDynamicObject(2576,1150.00000000,-1322.80004883,1348.40002441,0.00000000,0.00000000,270.00000000); //DynamicObject(hotel_dresser_8) (1)
	CreateDynamicObject(2576,1150.00000000,-1330.90002441,1348.40002441,0.00000000,0.00000000,270.00000000); //DynamicObject(hotel_dresser_8) (1)
	CreateDynamicObject(2576,1150.00000000,-1338.90002441,1348.40002441,0.00000000,0.00000000,270.00000000); //DynamicObject(hotel_dresser_8) (1)
	CreateDynamicObject(2576,1150.59997559,-1351.30004883,1348.40002441,0.00000000,0.00000000,180.00000000); //DynamicObject(hotel_dresser_8) (1)
	CreateDynamicObject(2576,1147.30004883,-1352.59997559,1348.40002441,0.00000000,0.00000000,0.00000000); //DynamicObject(hotel_dresser_8) (1)
	CreateDynamicObject(2575,1146.19995117,-1340.80004883,1348.80004883,0.00000000,0.00000000,0.00000000); //DynamicObject(hotel_s_bedset_8) (1)
	CreateDynamicObject(2575,1146.19995117,-1332.80004883,1348.80004883,0.00000000,0.00000000,0.00000000); //DynamicObject(hotel_s_bedset_8) (1)
	CreateDynamicObject(2575,1146.19995117,-1324.80004883,1348.80004883,0.00000000,0.00000000,0.00000000); //DynamicObject(hotel_s_bedset_8) (1)
	CreateDynamicObject(1518,1146.69995117,-1321.40002441,1349.19995117,0.00000000,0.00000000,155.99487305); //DynamicObject(dyn_tv_2) (2)
	CreateDynamicObject(1518,1146.80004883,-1337.40002441,1349.19995117,0.00000000,0.00000000,155.99487305); //DynamicObject(dyn_tv_2) (3)
	CreateDynamicObject(1518,1146.59960938,-1329.50000000,1349.19995117,0.00000000,0.00000000,155.99487305); //DynamicObject(dyn_tv_2) (4)
	CreateDynamicObject(1518,1146.69995117,-1345.59997559,1349.19995117,0.00000000,0.00000000,155.99487305); //DynamicObject(dyn_tv_2) (5)
	CreateDynamicObject(1518,1146.59997559,-1355.80004883,1349.19995117,0.00000000,0.00000000,51.99487305); //DynamicObject(dyn_tv_2) (6)
	CreateDynamicObject(1518,1146.39941406,-1348.29980469,1349.19995117,0.00000000,0.00000000,121.99218750); //DynamicObject(dyn_tv_2) (7)
	CreateDynamicObject(19357,1160.09997559,-1346.19995117,1348.31005859,0.00000000,90.00000000,0.00000000); //DynamicObject(road_sfw11) (11)
	CreateDynamicObject(19357,1160.09960938,-1343.00000000,1348.31005859,0.00000000,90.00000000,0.00000000); //DynamicObject(road_sfw11) (11)
	CreateDynamicObject(19357,1160.09997559,-1339.80004883,1348.31005859,0.00000000,90.00000000,0.00000000); //DynamicObject(road_sfw11) (11)
	CreateDynamicObject(19357,1160.09997559,-1336.59997559,1348.31005859,0.00000000,90.00000000,0.00000000); //DynamicObject(road_sfw11) (11)
	CreateDynamicObject(19357,1160.09997559,-1333.40002441,1348.31005859,0.00000000,90.00000000,0.00000000); //DynamicObject(road_sfw11) (11)
	CreateDynamicObject(19357,1160.09960938,-1330.19921875,1348.31005859,0.00000000,90.00000000,0.00000000); //DynamicObject(road_sfw11) (11)
	CreateDynamicObject(19357,1160.09997559,-1327.00000000,1348.31005859,0.00000000,90.00000000,0.00000000); //DynamicObject(road_sfw11) (11)
	CreateDynamicObject(19357,1160.09960938,-1323.79980469,1348.31005859,0.00000000,90.00000000,0.00000000); //DynamicObject(road_sfw11) (11)
	CreateDynamicObject(19357,1160.09997559,-1320.59997559,1348.31005859,0.00000000,90.00000000,0.00000000); //DynamicObject(road_sfw11) (11)
	CreateDynamicObject(19357,1160.09997559,-1317.40002441,1348.31005859,0.00000000,90.00000000,0.00000000); //DynamicObject(road_sfw11) (11)
	CreateDynamicObject(19357,1160.09960938,-1314.19921875,1348.31005859,0.00000000,90.00000000,0.00000000); //DynamicObject(road_sfw11) (11)
	CreateDynamicObject(19357,1160.09997559,-1311.00000000,1348.31005859,0.00000000,90.00000000,0.00000000); //DynamicObject(road_sfw11) (11)
	CreateDynamicObject(19357,1160.09960938,-1308.19921875,1348.31115723,0.00000000,90.00000000,0.00000000); //DynamicObject(road_sfw11) (11)
	CreateDynamicObject(19358,1158.30004883,-1308.19995117,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw12) (3)
	CreateDynamicObject(19388,1158.29980469,-1311.39941406,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw15) (1)
	CreateDynamicObject(19431,1158.30297852,-1313.39941406,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_48_a) (1)
	CreateDynamicObject(19358,1158.30004883,-1315.80004883,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw12) (3)
	CreateDynamicObject(19388,1158.30004883,-1319.00000000,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw15) (1)
	CreateDynamicObject(19358,1158.29980469,-1322.19921875,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw12) (3)
	CreateDynamicObject(19431,1158.30200195,-1323.69921875,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_48_a) (1)
	CreateDynamicObject(19358,1158.30004883,-1326.09997559,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw12) (3)
	CreateDynamicObject(19388,1158.29980469,-1329.29980469,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw15) (1)
	CreateDynamicObject(19431,1158.30004883,-1331.69995117,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_48_a) (1)
	CreateDynamicObject(19358,1158.30004883,-1334.09997559,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw12) (3)
	CreateDynamicObject(19388,1158.30004883,-1337.30004883,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw15) (1)
	CreateDynamicObject(19358,1158.30004883,-1340.50000000,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw12) (3)
	CreateDynamicObject(19388,1158.29980469,-1343.69921875,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw15) (1)
	CreateDynamicObject(19358,1158.30297852,-1346.19995117,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw12) (3)
	CreateDynamicObject(19355,1158.40002441,-1308.30004883,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_12) (1)
	CreateDynamicObject(19385,1158.40002441,-1311.40002441,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(sfw_boxwest02) (1)
	CreateDynamicObject(19355,1158.40002441,-1314.59997559,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_12) (1)
	CreateDynamicObject(19428,1158.40197754,-1316.59997559,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_10_a) (1)
	CreateDynamicObject(19385,1158.40002441,-1319.00000000,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(sfw_boxwest02) (1)
	CreateDynamicObject(19355,1158.40197754,-1322.19995117,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_12) (1)
	CreateDynamicObject(19355,1158.40002441,-1326.09997559,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_12) (1)
	CreateDynamicObject(19385,1158.40002441,-1329.30004883,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(sfw_boxwest02) (1)
	CreateDynamicObject(19428,1158.40002441,-1331.69995117,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_10_a) (1)
	CreateDynamicObject(19428,1158.40002441,-1323.69995117,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_10_a) (1)
	CreateDynamicObject(19355,1158.40002441,-1334.09997559,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_12) (1)
	CreateDynamicObject(19385,1158.40002441,-1337.30004883,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(sfw_boxwest02) (1)
	CreateDynamicObject(19428,1158.40002441,-1339.69995117,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_10_a) (1)
	CreateDynamicObject(19428,1158.40002441,-1341.30004883,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_10_a) (1)
	CreateDynamicObject(19385,1158.40002441,-1343.69995117,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(sfw_boxwest02) (1)
	CreateDynamicObject(19355,1158.40002441,-1346.19995117,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_12) (1)
	CreateDynamicObject(19355,1160.30004883,-1306.69995117,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(cs_landbit_12) (2)
	CreateDynamicObject(19355,1160.00000000,-1306.70300293,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(cs_landbit_12) (2)
	CreateDynamicObject(19355,1160.00000000,-1314.10302734,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(cs_landbit_12) (2)
	CreateDynamicObject(19355,1160.00000000,-1314.30004883,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(cs_landbit_12) (2)
	CreateDynamicObject(19355,1160.00000000,-1324.39941406,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(cs_landbit_12) (2)
	CreateDynamicObject(19355,1160.00000000,-1324.59997559,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(cs_landbit_12) (2)
	CreateDynamicObject(19355,1160.00000000,-1332.50000000,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(cs_landbit_12) (2)
	CreateDynamicObject(19355,1159.90002441,-1332.69995117,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(cs_landbit_12) (2)
	CreateDynamicObject(19355,1160.00000000,-1340.40197754,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(cs_landbit_12) (2)
	CreateDynamicObject(19355,1160.00000000,-1340.59997559,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(cs_landbit_12) (2)
	CreateDynamicObject(19355,1160.00000000,-1347.69995117,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(cs_landbit_12) (2)
	CreateDynamicObject(19447,1161.59997559,-1342.90002441,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_12) (3)
	CreateDynamicObject(19447,1161.59997559,-1333.30004883,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_12) (3)
	CreateDynamicObject(19447,1161.59960938,-1323.69921875,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_12) (3)
	CreateDynamicObject(19447,1161.59960938,-1314.09960938,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_12) (3)
	CreateDynamicObject(19355,1161.60302734,-1308.19995117,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_12) (1)
	CreateDynamicObject(1502,1158.29003906,-1310.61499023,1348.32995605,0.00000000,0.00000000,270.00000000); //DynamicObject(gen_doorint04) (2)
	CreateDynamicObject(1502,1158.29003906,-1318.21496582,1348.32995605,0.00000000,0.00000000,270.00000000); //DynamicObject(gen_doorint04) (2)
	CreateDynamicObject(1502,1158.29003906,-1328.51501465,1348.32995605,0.00000000,0.00000000,270.00000000); //DynamicObject(gen_doorint04) (2)
	CreateDynamicObject(1502,1158.29003906,-1336.51501465,1348.32995605,0.00000000,0.00000000,270.00000000); //DynamicObject(gen_doorint04) (2)
	CreateDynamicObject(1502,1158.29003906,-1342.91503906,1348.32995605,0.00000000,0.00000000,270.00000000); //DynamicObject(gen_doorint04) (2)
	CreateDynamicObject(2575,1155.00000000,-1309.19995117,1348.80004883,0.00000000,0.00000000,0.00000000); //DynamicObject(hotel_s_bedset_8) (1)
	CreateDynamicObject(2576,1154.30004883,-1310.90002441,1348.40002441,0.00000000,0.00000000,90.00000000); //DynamicObject(hotel_dresser_8) (1)
	CreateDynamicObject(2315,1156.19995117,-1313.59997559,1348.40002441,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_tv_table4) (1)
	CreateDynamicObject(1518,1157.59997559,-1313.50000000,1349.19995117,0.00000000,0.00000000,205.99487305); //DynamicObject(dyn_tv_2) (1)
	CreateDynamicObject(2575,1154.90002441,-1316.80004883,1348.80004883,0.00000000,0.00000000,0.00000000); //DynamicObject(hotel_s_bedset_8) (1)
	CreateDynamicObject(2575,1154.19995117,-1327.09997559,1348.80004883,0.00000000,0.00000000,0.00000000); //DynamicObject(hotel_s_bedset_8) (1)
	CreateDynamicObject(2575,1154.19995117,-1335.19995117,1348.80004883,0.00000000,0.00000000,0.00000000); //DynamicObject(hotel_s_bedset_8) (1)
	CreateDynamicObject(2575,1154.59997559,-1343.09997559,1348.80004883,0.00000000,0.00000000,0.00000000); //DynamicObject(hotel_s_bedset_8) (1)
	CreateDynamicObject(2576,1154.50000000,-1318.40002441,1348.40002441,0.00000000,0.00000000,90.00000000); //DynamicObject(hotel_dresser_8) (1)
	CreateDynamicObject(2576,1157.69995117,-1325.30004883,1348.40002441,0.00000000,0.00000000,270.00000000); //DynamicObject(hotel_dresser_8) (1)
	CreateDynamicObject(2576,1157.69995117,-1333.19995117,1348.40002441,0.00000000,0.00000000,270.00000000); //DynamicObject(hotel_dresser_8) (1)
	CreateDynamicObject(2576,1157.09997559,-1347.19995117,1348.40002441,0.00000000,0.00000000,180.00000000); //DynamicObject(hotel_dresser_8) (1)
	CreateDynamicObject(2315,1156.19995117,-1323.90002441,1348.40002441,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_tv_table4) (1)
	CreateDynamicObject(2315,1154.50000000,-1332.00000000,1348.40002441,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_tv_table4) (1)
	CreateDynamicObject(2315,1154.50000000,-1339.90002441,1348.40002441,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_tv_table4) (1)
	CreateDynamicObject(2315,1157.59997559,-1345.09997559,1348.40002441,0.00000000,0.00000000,269.75000000); //DynamicObject(cj_tv_table4) (1)
	CreateDynamicObject(1518,1157.59997559,-1323.80004883,1349.19995117,0.00000000,0.00000000,205.99365234); //DynamicObject(dyn_tv_2) (1)
	CreateDynamicObject(1518,1154.59997559,-1331.90002441,1349.19995117,0.00000000,0.00000000,163.99365234); //DynamicObject(dyn_tv_2) (1)
	CreateDynamicObject(1518,1154.59997559,-1339.69995117,1349.19995117,0.00000000,0.00000000,163.99291992); //DynamicObject(dyn_tv_2) (1)
	CreateDynamicObject(1518,1157.59997559,-1345.00000000,1349.19995117,0.00000000,0.00000000,203.99291992); //DynamicObject(dyn_tv_2) (1)
	CreateDynamicObject(2525,1159.80004883,-1313.50000000,1348.40002441,0.00000000,0.00000000,179.99450684); //DynamicObject(cj_toilet4) (1)
	CreateDynamicObject(2523,1161.00000000,-1312.19995117,1348.40002441,0.00000000,0.00000000,270.00000000); //DynamicObject(cj_b_sink3) (1)
	CreateDynamicObject(2527,1160.80004883,-1308.30004883,1348.40002441,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_shower4) (1)
	CreateDynamicObject(2526,1159.00000000,-1309.80004883,1348.40002441,0.00000000,0.00000000,90.00000000); //DynamicObject(cj_bath4) (1)
	CreateDynamicObject(2525,1159.69995117,-1323.80004883,1348.40002441,0.00000000,0.00000000,179.99450684); //DynamicObject(cj_toilet4) (1)
	CreateDynamicObject(2525,1159.80004883,-1331.90002441,1348.40002441,0.00000000,0.00000000,179.99450684); //DynamicObject(cj_toilet4) (1)
	CreateDynamicObject(2525,1159.69995117,-1339.80004883,1348.40002441,0.00000000,0.00000000,179.99450684); //DynamicObject(cj_toilet4) (1)
	CreateDynamicObject(2525,1160.80004883,-1347.09997559,1348.40002441,0.00000000,0.00000000,179.99450684); //DynamicObject(cj_toilet4) (1)
	CreateDynamicObject(2526,1159.00000000,-1317.40002441,1348.40002441,0.00000000,0.00000000,90.00000000); //DynamicObject(cj_bath4) (1)
	CreateDynamicObject(2526,1159.00000000,-1327.50000000,1348.40002441,0.00000000,0.00000000,90.00000000); //DynamicObject(cj_bath4) (1)
	CreateDynamicObject(2526,1159.00000000,-1335.50000000,1348.40002441,0.00000000,0.00000000,90.00000000); //DynamicObject(cj_bath4) (1)
	CreateDynamicObject(2526,1159.09997559,-1347.09997559,1348.40002441,0.00000000,0.00000000,90.00000000); //DynamicObject(cj_bath4) (1)
	CreateDynamicObject(2527,1160.80004883,-1315.90002441,1348.40002441,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_shower4) (1)
	CreateDynamicObject(2527,1160.80004883,-1326.19995117,1348.40002441,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_shower4) (1)
	CreateDynamicObject(2527,1160.80004883,-1334.30004883,1348.40002441,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_shower4) (1)
	CreateDynamicObject(2527,1160.80004883,-1342.19995117,1348.40002441,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_shower4) (1)
	CreateDynamicObject(2523,1161.00000000,-1318.69995117,1348.40002441,0.00000000,0.00000000,270.00000000); //DynamicObject(cj_b_sink3) (1)
	CreateDynamicObject(2523,1161.00000000,-1329.19995117,1348.40002441,0.00000000,0.00000000,270.00000000); //DynamicObject(cj_b_sink3) (1)
	CreateDynamicObject(2523,1161.00000000,-1337.09997559,1348.40002441,0.00000000,0.00000000,270.00000000); //DynamicObject(cj_b_sink3) (1)
	CreateDynamicObject(2523,1161.00000000,-1344.19995117,1348.40002441,0.00000000,0.00000000,270.00000000); //DynamicObject(cj_b_sink3) (1)
	CreateDynamicObject(2297,1157.40002441,-1348.19995117,1348.40002441,0.00000000,0.00000000,315.00000000); //DynamicObject(tv_unit_1) (1)
	CreateDynamicObject(1703,1159.09997559,-1353.00000000,1348.40002441,0.00000000,0.00000000,180.00000000); //DynamicObject(kb_couch02) (9)
	CreateDynamicObject(1703,1160.09960938,-1349.59960938,1348.40002441,0.00000000,0.00000000,270.00000000); //DynamicObject(kb_couch02) (8)
	CreateDynamicObject(1814,1158.50000000,-1350.09997559,1348.40002441,0.00000000,0.00000000,180.00000000); //DynamicObject(coffee_med_1) (1)
	CreateDynamicObject(1828,1166.89941406,-1333.69921875,1348.40002441,0.00000000,0.00000000,0.00000000); //DynamicObject(man_sdr_rug) (1)
	CreateDynamicObject(1703,1156.00000000,-1351.69921875,1348.40002441,0.00000000,0.00000000,90.00000000); //DynamicObject(kb_couch02) (8)
	CreateDynamicObject(2964,1153.80004883,-1353.30004883,1348.40002441,0.00000000,0.00000000,90.00000000); //DynamicObject(k_pooltablesm) (1)
	CreateDynamicObject(2996,1153.80004883,-1354.09997559,1349.35998535,0.00000000,0.00000000,0.00000000); //DynamicObject(k_poolballstp02) (1)
	CreateDynamicObject(2997,1153.69995117,-1353.59997559,1349.35998535,0.00000000,0.00000000,23.00000000); //DynamicObject(k_poolballstp03) (1)
	CreateDynamicObject(3002,1154.00000000,-1353.30004883,1349.36022949,0.00000000,0.00000000,20.00000000); //DynamicObject(k_poolballspt01) (1)
	CreateDynamicObject(3004,1153.50000000,-1353.50000000,1349.30004883,0.00000000,0.00000000,302.00000000); //DynamicObject(k_poolq2) (1)
	CreateDynamicObject(2637,1159.40002441,-1356.59997559,1348.80004883,0.00000000,0.00000000,270.00000000); //DynamicObject(cj_pizza_table2) (15)
	CreateDynamicObject(2637,1155.59997559,-1356.59997559,1348.80004883,0.00000000,0.00000000,270.00000000); //DynamicObject(cj_pizza_table2) (15)
	CreateDynamicObject(1811,1154.40002441,-1357.19995117,1349.00000000,0.00000000,0.00000000,180.00000000); //DynamicObject(med_din_chair_5) (102)
	CreateDynamicObject(1811,1154.40002441,-1356.09997559,1349.00000000,0.00000000,0.00000000,179.99450684); //DynamicObject(med_din_chair_5) (102)
	CreateDynamicObject(1811,1158.40002441,-1356.09997559,1349.00000000,0.00000000,0.00000000,179.99450684); //DynamicObject(med_din_chair_5) (102)
	CreateDynamicObject(1811,1158.40002441,-1357.00000000,1349.00000000,0.00000000,0.00000000,179.99450684); //DynamicObject(med_din_chair_5) (102)
	CreateDynamicObject(1811,1160.50000000,-1357.09997559,1349.00000000,0.00000000,0.00000000,0.00000000); //DynamicObject(med_din_chair_5) (102)
	CreateDynamicObject(1811,1160.50000000,-1356.09997559,1349.00000000,0.00000000,0.00000000,0.00000000); //DynamicObject(med_din_chair_5) (102)
	CreateDynamicObject(1811,1156.59997559,-1356.09997559,1349.00000000,0.00000000,0.00000000,0.00000000); //DynamicObject(med_din_chair_5) (102)
	CreateDynamicObject(1811,1156.59997559,-1357.19995117,1349.00000000,0.00000000,0.00000000,0.00000000); //DynamicObject(med_din_chair_5) (102)
	CreateDynamicObject(1742,1161.90002441,-1353.90002441,1348.40002441,0.00000000,0.00000000,270.00000000); //DynamicObject(med_bookshelf) (1)
	CreateDynamicObject(1742,1161.90002441,-1352.50000000,1348.40002441,0.00000000,0.00000000,270.00000000); //DynamicObject(med_bookshelf) (2)
	CreateDynamicObject(2283,1184.19921875,-1316.30957031,1350.40002441,0.00000000,0.00000000,0.00000000); //DynamicObject(frame_thick_3) (1)
	CreateDynamicObject(2267,1184.50000000,-1340.39257812,1350.50000000,0.00000000,0.00000000,179.99450684); //DynamicObject(frame_wood_3) (1)
	CreateDynamicObject(19388,1176.30004883,-1309.80200195,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(road_sfw15) (1)
	CreateDynamicObject(1502,1175.51562500,-1309.81933594,1348.32995605,0.00000000,0.00000000,0.00000000); //DynamicObject(gen_doorint04) (3)
	CreateDynamicObject(2166,1147.00000000,-1305.19995117,1348.40002441,0.00000000,0.00000000,0.00000000); //DynamicObject(med_office_desk_2) (1)
	CreateDynamicObject(2165,1149.00000000,-1304.19995117,1348.40002441,0.00000000,0.00000000,0.00000000); //DynamicObject(med_office_desk_1) (2)
	CreateDynamicObject(19388,1150.60095215,-1305.69921875,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw15) (1)
	CreateDynamicObject(19388,1150.59997559,-1302.50000000,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_sfw15) (1)
	CreateDynamicObject(1523,1150.59997559,-1301.71997070,1348.32995605,0.00000000,0.00000000,270.00000000); //DynamicObject(gen_doorext10) (4)
	CreateDynamicObject(1502,1150.56994629,-1304.91503906,1348.32995605,0.00000000,0.00000000,270.00000000); //DynamicObject(gen_doorint04) (2)
	CreateDynamicObject(18014,1174.59960938,-1357.29980469,1348.80004883,0.00000000,0.00000000,270.00000000); //DynamicObject(int_rest_veg03) (1)
	CreateDynamicObject(2272,1190.11999512,-1302.59997559,1349.72998047,0.00000000,0.00000000,270.00000000); //DynamicObject(frame_fab_5) (1)
	CreateDynamicObject(2276,1190.11999512,-1304.00000000,1349.90002441,0.00000000,0.00000000,270.00000000); //DynamicObject(frame_fab_3) (1)
	CreateDynamicObject(2275,1190.11999512,-1305.19995117,1349.77966309,0.00000000,0.00000000,270.00000000); //DynamicObject(frame_fab_4) (1)
	CreateDynamicObject(1811,1187.69995117,-1301.90002441,1349.00000000,0.00000000,0.00000000,90.00000000); //DynamicObject(med_din_chair_5) (83)
	CreateDynamicObject(1811,1186.90002441,-1301.90002441,1349.00000000,0.00000000,0.00000000,90.00000000); //DynamicObject(med_din_chair_5) (83)
	CreateDynamicObject(1811,1186.09997559,-1301.90002441,1349.00000000,0.00000000,0.00000000,90.00000000); //DynamicObject(med_din_chair_5) (83)
	CreateDynamicObject(1811,1185.30004883,-1301.90002441,1349.00000000,0.00000000,0.00000000,90.00000000); //DynamicObject(med_din_chair_5) (83)
	CreateDynamicObject(1811,1183.00000000,-1301.89941406,1349.00000000,0.00000000,0.00000000,90.00000000); //DynamicObject(med_din_chair_5) (83)
	CreateDynamicObject(1811,1182.19921875,-1301.89941406,1349.00000000,0.00000000,0.00000000,90.00000000); //DynamicObject(med_din_chair_5) (83)
	CreateDynamicObject(1811,1181.40002441,-1301.90002441,1349.00000000,0.00000000,0.00000000,90.00000000); //DynamicObject(med_din_chair_5) (83)
	CreateDynamicObject(1811,1180.59997559,-1301.90002441,1349.00000000,0.00000000,0.00000000,90.00000000); //DynamicObject(med_din_chair_5) (83)
	CreateDynamicObject(1811,1168.69995117,-1301.90002441,1349.00000000,0.00000000,0.00000000,90.00000000); //DynamicObject(med_din_chair_5) (83)
	CreateDynamicObject(1811,1167.90002441,-1301.90002441,1349.00000000,0.00000000,0.00000000,90.00000000); //DynamicObject(med_din_chair_5) (83)
	CreateDynamicObject(1811,1167.09997559,-1301.90002441,1349.00000000,0.00000000,0.00000000,90.00000000); //DynamicObject(med_din_chair_5) (83)
	CreateDynamicObject(1811,1166.30004883,-1301.90002441,1349.00000000,0.00000000,0.00000000,90.00000000); //DynamicObject(med_din_chair_5) (83)
	CreateDynamicObject(1808,1178.90002441,-1301.59997559,1348.40002441,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_watercooler2) (1)
	CreateDynamicObject(2146,1172.80004883,-1301.80004883,1348.90002441,0.00000000,0.00000000,270.00000000); //DynamicObject(cj_trolly1) (3)
	CreateDynamicObject(2146,1176.00000000,-1301.80004883,1348.90002441,0.00000000,0.00000000,270.00000000); //DynamicObject(cj_trolly1) (4)
	CreateDynamicObject(2146,1160.50000000,-1306.00000000,1348.90002441,0.00000000,0.00000000,270.00000000); //DynamicObject(cj_trolly1) (5)
	CreateDynamicObject(2146,1156.59997559,-1306.00000000,1348.90002441,0.00000000,0.00000000,270.00000000); //DynamicObject(cj_trolly1) (6)
	CreateDynamicObject(1776,1159.40002441,-1301.80004883,1349.50000000,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_candyvendor) (1)
	CreateDynamicObject(1775,1158.00000000,-1301.80004883,1349.50000000,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_sprunk1) (1)
	CreateDynamicObject(1502,1173.91503906,-1332.42480469,1348.33203125,0.00000000,0.00000000,0.00000000); //DynamicObject(gen_doorint04) (2)
	CreateDynamicObject(19388,1152.19995117,-1332.59997559,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(road_sfw15) (1)
	CreateDynamicObject(1502,1151.41503906,-1332.62145996,1348.32995605,0.00000000,0.00000000,0.00000000); //DynamicObject(gen_doorint04) (3)
	CreateDynamicObject(19431,1177.09997559,-1332.40002441,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(cs_landbit_48_a) (1)
	CreateDynamicObject(19388,1174.69995117,-1332.40002441,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(road_sfw15) (1)
	CreateDynamicObject(19431,1172.30004883,-1332.40002441,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(cs_landbit_48_a) (1)
	CreateDynamicObject(1502,1173.91503906,-1316.22497559,1348.33300781,0.00000000,0.00000000,0.00000000); //DynamicObject(gen_doorint04) (2)
	CreateDynamicObject(19404,1153.80004883,-1301.19995117,1350.09997559,0.00000000,0.00000000,270.00000000); //DynamicObject(boigagr_sfw) (2)
	CreateDynamicObject(19358,1157.00000000,-1301.19995117,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(road_sfw12) (6)
	CreateDynamicObject(19358,1160.19995117,-1301.19995117,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(road_sfw12) (12)
	CreateDynamicObject(19404,1163.40002441,-1301.19995117,1350.09997559,0.00000000,0.00000000,270.00000000); //DynamicObject(boigagr_sfw) (3)
	CreateDynamicObject(19358,1166.59997559,-1301.19995117,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(road_sfw12) (13)
	CreateDynamicObject(19358,1169.80004883,-1301.19995117,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(road_sfw12) (14)
	CreateDynamicObject(19404,1173.00000000,-1301.19995117,1350.09997559,0.00000000,0.00000000,270.00000000); //DynamicObject(boigagr_sfw) (4)
	CreateDynamicObject(19358,1176.19995117,-1301.19995117,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(road_sfw12) (15)
	CreateDynamicObject(19358,1179.40002441,-1301.19995117,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(road_sfw12) (16)
	CreateDynamicObject(19404,1182.59997559,-1301.19995117,1350.09997559,0.00000000,0.00000000,270.00000000); //DynamicObject(boigagr_sfw) (5)
	CreateDynamicObject(19358,1185.80004883,-1301.19995117,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(road_sfw12) (17)
	CreateDynamicObject(19358,1189.00000000,-1301.19995117,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(road_sfw12) (18)
	CreateDynamicObject(19377,1185.90002441,-1316.90002441,1351.80004883,0.00000000,90.00000000,90.00000000); //DynamicObject(freight_interiorsfw) (18)
	CreateDynamicObject(19377,1185.90002441,-1327.40002441,1351.80004883,0.00000000,90.00000000,90.00000000); //DynamicObject(freight_interiorsfw) (18)
	CreateDynamicObject(19377,1185.90002441,-1337.90002441,1351.80004883,0.00000000,90.00000000,90.00000000); //DynamicObject(freight_interiorsfw) (18)
	CreateDynamicObject(19377,1185.90002441,-1348.40002441,1351.80004883,0.00000000,90.00000000,90.00000000); //DynamicObject(freight_interiorsfw) (18)
	CreateDynamicObject(19377,1185.90002441,-1352.59997559,1351.80200195,0.00000000,90.00000000,90.00000000); //DynamicObject(freight_interiorsfw) (18)
	CreateDynamicObject(19377,1176.30004883,-1306.40002441,1351.80004883,0.00000000,90.00000000,90.00000000); //DynamicObject(freight_interiorsfw) (18)
	CreateDynamicObject(19377,1176.30004883,-1316.90002441,1351.80004883,0.00000000,90.00000000,90.00000000); //DynamicObject(freight_interiorsfw) (18)
	CreateDynamicObject(19377,1176.30004883,-1327.40002441,1351.80004883,0.00000000,90.00000000,90.00000000); //DynamicObject(freight_interiorsfw) (18)
	CreateDynamicObject(19377,1176.30004883,-1337.90002441,1351.80004883,0.00000000,90.00000000,90.00000000); //DynamicObject(freight_interiorsfw) (18)
	CreateDynamicObject(19377,1176.30004883,-1348.40002441,1351.80004883,0.00000000,90.00000000,90.00000000); //DynamicObject(freight_interiorsfw) (18)
	CreateDynamicObject(19377,1176.29980469,-1352.59960938,1351.80200195,0.00000000,90.00000000,90.00000000); //DynamicObject(freight_interiorsfw) (18)
	CreateDynamicObject(19377,1166.69995117,-1306.40002441,1351.80004883,0.00000000,90.00000000,90.00000000); //DynamicObject(freight_interiorsfw) (18)
	CreateDynamicObject(19377,1166.69995117,-1316.90002441,1351.80004883,0.00000000,90.00000000,90.00000000); //DynamicObject(freight_interiorsfw) (18)
	CreateDynamicObject(19377,1166.69995117,-1327.40002441,1351.80004883,0.00000000,90.00000000,90.00000000); //DynamicObject(freight_interiorsfw) (18)
	CreateDynamicObject(19377,1166.69995117,-1337.90002441,1351.80004883,0.00000000,90.00000000,90.00000000); //DynamicObject(freight_interiorsfw) (18)
	CreateDynamicObject(19377,1166.69995117,-1348.40002441,1351.80004883,0.00000000,90.00000000,90.00000000); //DynamicObject(freight_interiorsfw) (18)
	CreateDynamicObject(19377,1166.69995117,-1352.59997559,1351.80200195,0.00000000,90.00000000,90.00000000); //DynamicObject(freight_interiorsfw) (18)
	CreateDynamicObject(19377,1157.09997559,-1306.40002441,1351.80004883,0.00000000,90.00000000,90.00000000); //DynamicObject(freight_interiorsfw) (18)
	CreateDynamicObject(19377,1157.09997559,-1316.90002441,1351.80004883,0.00000000,90.00000000,90.00000000); //DynamicObject(freight_interiorsfw) (18)
	CreateDynamicObject(19377,1157.09997559,-1327.40002441,1351.80004883,0.00000000,90.00000000,90.00000000); //DynamicObject(freight_interiorsfw) (18)
	CreateDynamicObject(19377,1157.09997559,-1337.90002441,1351.80004883,0.00000000,90.00000000,90.00000000); //DynamicObject(freight_interiorsfw) (18)
	CreateDynamicObject(19377,1157.09997559,-1348.40002441,1351.80004883,0.00000000,90.00000000,90.00000000); //DynamicObject(freight_interiorsfw) (18)
	CreateDynamicObject(19377,1157.09960938,-1352.59960938,1351.80200195,0.00000000,90.00000000,90.00000000); //DynamicObject(freight_interiorsfw) (18)
	CreateDynamicObject(19358,1142.59997559,-1305.00000000,1350.09997559,0.00000000,0.00000000,180.00000000); //DynamicObject(road_sfw12) (19)
	CreateDynamicObject(19358,1142.59997559,-1301.80004883,1350.09997559,0.00000000,0.00000000,179.99450684); //DynamicObject(road_sfw12) (20)
	CreateDynamicObject(19377,1147.50000000,-1306.40002441,1351.80004883,0.00000000,90.00000000,90.00000000); //DynamicObject(freight_interiorsfw) (18)
	CreateDynamicObject(19377,1147.50000000,-1316.90002441,1351.80004883,0.00000000,90.00000000,90.00000000); //DynamicObject(freight_interiorsfw) (18)
	CreateDynamicObject(19377,1147.50000000,-1327.40002441,1351.80004883,0.00000000,90.00000000,90.00000000); //DynamicObject(freight_interiorsfw) (18)
	CreateDynamicObject(19377,1147.50000000,-1337.90002441,1351.80004883,0.00000000,90.00000000,90.00000000); //DynamicObject(freight_interiorsfw) (18)
	CreateDynamicObject(19377,1147.50000000,-1348.40002441,1351.80004883,0.00000000,90.00000000,90.00000000); //DynamicObject(freight_interiorsfw) (18)
	CreateDynamicObject(19377,1147.50000000,-1352.59997559,1351.80200195,0.00000000,90.00000000,90.00000000); //DynamicObject(freight_interiorsfw) (18)
    CreateDynamicObject(5749,1156.90002441,-1261.40002441,1351.19995117,0.00000000,0.00000000,0.00000000); //DynamicObject(road_lawn10) (2)
	CreateDynamicObject(6006,1195.90002441,-1251.59997559,1352.30004883,0.00000000,0.00000000,0.00000000); //DynamicObject(newbit01_lawn) (1)
	CreateDynamicObject(3684,1196.00000000,-1267.00000000,1353.40002441,0.00000000,0.00000000,90.75256348); //DynamicObject(lawnapartmnt) (1)
	CreateDynamicObject(3684,1195.69995117,-1242.19995117,1356.80004883,0.00000000,0.00000000,90.75256348); //DynamicObject(lawnapartmnt) (2)
	CreateDynamicObject(5707,1281.89404297,-1266.87500000,1350.60998535,0.00000000,0.00000000,0.00000000); //DynamicObject(road_lawn03) (1)
	CreateDynamicObject(5857,1271.90002441,-1256.80004883,1353.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(lawn_buyable1) (1)
	CreateDynamicObject(5728,1248.80004883,-1218.80004883,1361.00000000,0.00000000,0.00000000,1.00000000); //DynamicObject(dummybuild46_law) (1)
	CreateDynamicObject(5771,1124.50000000,-1252.40002441,1354.50000000,0.00000000,0.00000000,0.00000000); //DynamicObject(melrose10_law) (1)
	CreateDynamicObject(1260,1116.30004883,-1280.30004883,1360.00000000,0.00000000,0.00000000,91.25793457); //DynamicObject(billbd3) (1)
	CreateDynamicObject(5733,1089.80004883,-1237.50000000,1355.00000000,0.00000000,0.00000000,0.00000000); //DynamicObject(melrose07_law) (1)
	CreateDynamicObject(5823,1152.80004883,-1217.90002441,1354.80004883,0.00000000,0.00000000,0.00000000); //DynamicObject(lawnalley) (1)
	CreateDynamicObject(5767,1175.09997559,-1190.80004883,1405.50000000,0.00000000,0.00000000,0.00000000); //DynamicObject(capitrec1_lawn) (1)
	CreateDynamicObject(727,1215.19995117,-1276.90002441,1349.50000000,0.00000000,0.00000000,0.00000000); //DynamicObject(tree_hipoly04) (1)
	CreateDynamicObject(700,1179.40002441,-1276.90002441,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(sm_veg_tree6) (1)
	CreateDynamicObject(620,1178.09997559,-1254.80004883,1351.59997559,0.00000000,0.00000000,323.21777344); //DynamicObject(veg_palm04) (1)
	CreateDynamicObject(1226,1205.80004883,-1286.19995117,1352.50000000,0.00000000,0.00000000,92.00000000); //DynamicObject(lamppost3) (1)
	CreateDynamicObject(1226,1177.80004883,-1286.09997559,1352.50000000,0.00000000,0.00000000,91.99951172); //DynamicObject(lamppost3) (2)
	CreateDynamicObject(1226,1149.19995117,-1286.19995117,1352.50000000,0.00000000,0.00000000,91.99951172); //DynamicObject(lamppost3) (3)
	CreateDynamicObject(1226,1125.00000000,-1286.30004883,1352.50000000,0.00000000,0.00000000,91.99951172); //DynamicObject(lamppost3) (4)
	CreateDynamicObject(1226,1097.09997559,-1286.00000000,1352.50000000,0.00000000,0.00000000,91.99951172); //DynamicObject(lamppost3) (5)
	CreateDynamicObject(1226,1097.50000000,-1295.19995117,1352.50000000,0.00000000,0.00000000,269.99951172); //DynamicObject(lamppost3) (6)
	CreateDynamicObject(1226,1124.30004883,-1295.40002441,1352.50000000,0.00000000,0.00000000,269.99450684); //DynamicObject(lamppost3) (7)
	CreateDynamicObject(1226,1148.40002441,-1295.30004883,1352.50000000,0.00000000,0.00000000,269.99450684); //DynamicObject(lamppost3) (8)
	CreateDynamicObject(1226,1177.29980469,-1295.29980469,1352.50000000,0.00000000,0.00000000,269.98901367); //DynamicObject(lamppost3) (9)
	CreateDynamicObject(1283,1172.40002441,-1292.19995117,1351.80004883,0.00000000,0.00000000,270.00000000); //DynamicObject(mtraffic1) (1)
	CreateDynamicObject(1283,1199.19995117,-1293.50000000,1351.80004883,0.00000000,0.00000000,270.00000000); //DynamicObject(mtraffic1) (2)
	CreateDynamicObject(1283,1231.40002441,-1281.59997559,1351.80004883,0.00000000,0.00000000,0.00000000); //DynamicObject(mtraffic1) (3)
	CreateDynamicObject(1283,1166.30004883,-1280.59997559,1351.59997559,0.00000000,0.00000000,0.00000000); //DynamicObject(mtraffic1) (4)
	CreateDynamicObject(1283,1151.80004883,-1293.19995117,1351.80004883,0.00000000,0.00000000,270.00000000); //DynamicObject(mtraffic1) (5)
	CreateDynamicObject(3858,1176.19921875,-1301.19921875,1349.59997559,0.00000000,0.00000000,225.00000000); //DynamicObject(ottosmash1) (1)
	CreateDynamicObject(3858,1157.30004883,-1301.19995117,1349.59997559,0.00000000,0.00000000,225.00000000); //DynamicObject(ottosmash1) (2)
	CreateDynamicObject(2559,1182.09997559,-1301.69995117,1349.59997559,0.00000000,0.00000000,0.00000000); //DynamicObject(curtain_1_open) (1)
	CreateDynamicObject(2559,1172.50000000,-1301.69921875,1349.59997559,0.00000000,0.00000000,0.00000000); //DynamicObject(curtain_1_open) (2)
	CreateDynamicObject(2559,1162.90002441,-1301.69995117,1349.59997559,0.00000000,0.00000000,0.00000000); //DynamicObject(curtain_1_open) (3)
	CreateDynamicObject(2559,1153.30004883,-1301.69995117,1349.59997559,0.00000000,0.00000000,0.00000000); //DynamicObject(curtain_1_open) (4)
	CreateDynamicObject(19404,1181.09997559,-1357.80004883,1350.09997559,0.00000000,0.00000000,269.99993896); //DynamicObject(boigagr_sfw) (7)
	CreateDynamicObject(19431,1178.69995117,-1357.80004883,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(cs_landbit_48_a) (6)
	CreateDynamicObject(19431,1183.50000000,-1357.80004883,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(cs_landbit_48_a) (6)
	CreateDynamicObject(19431,1185.09997559,-1357.80004883,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(cs_landbit_48_a) (6)
	CreateDynamicObject(19431,1185.50000000,-1357.80004883,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(cs_landbit_48_a) (6)
	CreateDynamicObject(19404,1187.90002441,-1357.80004883,1350.09997559,0.00000000,0.00000000,269.99450684); //DynamicObject(boigagr_sfw) (7)
	CreateDynamicObject(19431,1190.30004883,-1357.80004883,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(cs_landbit_48_a) (6)
	CreateDynamicObject(19431,1184.59997559,-1357.40002441,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_48_a) (6)
	CreateDynamicObject(19431,1177.09997559,-1357.80004883,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(cs_landbit_48_a) (6)
	CreateDynamicObject(19431,1172.30004883,-1357.80004883,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(cs_landbit_48_a) (6)
	CreateDynamicObject(19404,1174.69995117,-1357.80004883,1350.09997559,0.00000000,0.00000000,269.99450684); //DynamicObject(boigagr_sfw) (7)
	CreateDynamicObject(19431,1170.69995117,-1357.80004883,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(cs_landbit_48_a) (6)
	CreateDynamicObject(19404,1168.30004883,-1357.80004883,1350.09997559,0.00000000,0.00000000,269.99450684); //DynamicObject(boigagr_sfw) (7)
	CreateDynamicObject(19431,1165.90002441,-1357.80004883,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(cs_landbit_48_a) (6)
	CreateDynamicObject(19404,1163.50000000,-1357.80004883,1350.09997559,0.00000000,0.00000000,269.99450684); //DynamicObject(boigagr_sfw) (7)
	CreateDynamicObject(19358,1160.30004883,-1357.80004883,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(road_sfw12) (1)
	CreateDynamicObject(19404,1157.09997559,-1357.80004883,1350.09997559,0.00000000,0.00000000,269.99450684); //DynamicObject(boigagr_sfw) (7)
	CreateDynamicObject(19358,1150.69995117,-1357.80004883,1350.09997559,0.00000000,0.00000000,90.00000000); //DynamicObject(road_sfw12) (1)
	CreateDynamicObject(19404,1153.90002441,-1357.80004883,1350.09997559,0.00000000,0.00000000,269.99450684); //DynamicObject(boigagr_sfw) (7)
	CreateDynamicObject(3858,1182.90002441,-1357.80004883,1351.59997559,0.00000000,0.00000000,44.74993896); //DynamicObject(ottosmash1) (1)
	CreateDynamicObject(3858,1168.30004883,-1357.80004883,1351.59997559,0.00000000,0.00000000,44.74731445); //DynamicObject(ottosmash1) (1)
	CreateDynamicObject(3858,1153.69995117,-1357.80004883,1351.59997559,0.00000000,0.00000000,44.74731445); //DynamicObject(ottosmash1) (1)
	CreateDynamicObject(2559,1188.40002441,-1357.30004883,1349.59997559,0.00000000,0.00000000,180.00000000); //DynamicObject(curtain_1_open) (2)
	CreateDynamicObject(2559,1181.59997559,-1357.30004883,1349.59997559,0.00000000,0.00000000,179.99450684); //DynamicObject(curtain_1_open) (2)
	CreateDynamicObject(2559,1175.19995117,-1357.30004883,1349.59997559,0.00000000,0.00000000,179.99450684); //DynamicObject(curtain_1_open) (2)
	CreateDynamicObject(2559,1168.80004883,-1357.30004883,1349.59997559,0.00000000,0.00000000,179.99450684); //DynamicObject(curtain_1_open) (2)
	CreateDynamicObject(2559,1164.00000000,-1357.30004883,1349.59997559,0.00000000,0.00000000,179.99450684); //DynamicObject(curtain_1_open) (2)
	CreateDynamicObject(2559,1157.59997559,-1357.30004883,1349.59997559,0.00000000,0.00000000,179.99450684); //DynamicObject(curtain_1_open) (2)
	CreateDynamicObject(2559,1154.40002441,-1357.30004883,1349.59997559,0.00000000,0.00000000,179.99450684); //DynamicObject(curtain_1_open) (2)
	CreateDynamicObject(5995,1140.19995117,-1373.3000488281,1348.19995117,0.00000000,0.00000000,0.00000000); //DynamicObject(road_lawn04) (2)
	CreateDynamicObject(19447,1142.70202637,-1352.90002441,1350.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_12) (3)
	CreateDynamicObject(5994,1269.30004883,-1372.90002441,1346.46301270,0.00000000,0.00000000,0.00000000); //DynamicObject(road_lawn26) (1)
	CreateDynamicObject(6125,1206.09997559,-1461.50000000,1348.06494141,0.00000000,0.00000000,0.00000000); //DynamicObject(lawroads_law19) (2)
	CreateDynamicObject(6130,1127.69995117,-1462.50000000,1368.40002441,0.00000000,0.00000000,0.00000000); //DynamicObject(mallb_law) (1)
	CreateDynamicObject(6048,1127.69995117,-1462.50000000,1368.39501953,0.00000000,0.00000000,0.00000000); //DynamicObject(mall_law) (2)
	CreateDynamicObject(6101,1278.00000000,-1440.19995117,1347.50000000,0.00000000,0.00000000,0.00000000); //DynamicObject(gaz2_law) (1)
	CreateDynamicObject(6099,1229.69995117,-1421.90002441,1364.80004883,0.00000000,0.00000000,0.00000000); //DynamicObject(gaz3_law) (1)
	CreateDynamicObject(6053,1306.50000000,-1399.80004883,1354.90002441,0.00000000,0.00000000,0.00000000); //DynamicObject(stepshop_law) (1)
	CreateDynamicObject(6223,1268.30004883,-1457.50000000,1357.69995117,0.00000000,0.00000000,0.00000000); //DynamicObject(gaz2bld_law) (1)
	CreateDynamicObject(615,1086.40002441,-1390.09997559,1348.30004883,0.00000000,0.00000000,67.39562988); //DynamicObject(veg_tree3) (1)
	CreateDynamicObject(615,1088.30004883,-1394.59997559,1334.09997559,0.00000000,0.00000000,219.39562988); //DynamicObject(veg_tree3) (2)
	CreateDynamicObject(615,1082.19995117,-1394.50000000,1343.90002441,0.00000000,0.00000000,275.39147949); //DynamicObject(veg_tree3) (3)
	CreateDynamicObject(6055,1060.30004883,-1461.50000000,1348.19995117,0.00000000,0.00000000,0.00000000); //DynamicObject(lawroads_law03) (1)
	CreateDynamicObject(5860,1068.30004883,-1335.80004883,1348.30004883,0.00000000,0.00000000,0.00000000); //DynamicObject(road_lawn27) (1)
	CreateDynamicObject(6151,1017.50000000,-1407.80004883,1354.59997559,0.00000000,0.00000000,0.00000000); //DynamicObject(gaz21_law) (1)
	CreateDynamicObject(5861,990.20001221,-1373.00000000,1348.09997559,0.00000000,0.00000000,0.00000000); //DynamicObject(road_lawn05) (1)
	CreateDynamicObject(6152,1000.40002441,-1422.59997559,1348.40002441,0.00000000,0.00000000,0.00000000); //DynamicObject(gaz20_law) (1)
	CreateDynamicObject(6052,1256.80004883,-1401.50000000,1350.90002441,0.00000000,0.00000000,0.00000000); //DynamicObject(artcurve_law) (1)
	CreateDynamicObject(615,1116.90002441,-1391.09997559,1348.30004883,0.00000000,0.00000000,343.39562988); //DynamicObject(veg_tree3) (4)
	CreateDynamicObject(615,1160.00000000,-1391.30004883,1346.30004883,0.00000000,0.00000000,69.39416504); //DynamicObject(veg_tree3) (5)
	CreateDynamicObject(615,1182.59997559,-1391.50000000,1343.59997559,0.00000000,0.00000000,69.38964844); //DynamicObject(veg_tree3) (6)
	CreateDynamicObject(615,1180.09997559,-1393.80004883,1343.59997559,0.00000000,0.00000000,129.38967896); //DynamicObject(veg_tree3) (7)
	CreateDynamicObject(615,1191.40002441,-1392.90002441,1343.59997559,0.00000000,0.00000000,125.38598633); //DynamicObject(veg_tree3) (8)

	// Prison Objects
    CreateDynamicObject(19377,1840.29980469,-1721.59960938,5201.50000000,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (1)
    CreateDynamicObject(19377,1840.30004883,-1731.19995117,5201.50000000,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (3)
    CreateDynamicObject(19377,1840.29980469,-1712.00000000,5201.50000000,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (4)
    CreateDynamicObject(19396,1827.69995117,-1714.30004883,5203.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(land_37_sfw) (7)
    CreateDynamicObject(19377,1829.80004883,-1712.00000000,5201.50000000,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (5)
    CreateDynamicObject(19377,1829.79980469,-1721.59960938,5201.50000000,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (7)
    CreateDynamicObject(19377,1829.79980469,-1731.19921875,5201.50000000,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (8)
    CreateDynamicObject(19377,1840.30004883,-1731.69995117,5205.10009766,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (11)
    CreateDynamicObject(19377,1842.09997559,-1711.69995117,5205.10009766,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (12)
    CreateDynamicObject(19441,1824.50000000,-1721.50000000,5206.89990234,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_33_a) (1)
    CreateDynamicObject(19377,1840.30004883,-1712.00000000,5212.10009766,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (19)
    CreateDynamicObject(19377,1840.29980469,-1721.59960938,5212.10009766,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (20)
    CreateDynamicObject(19377,1840.30004883,-1731.19995117,5212.10009766,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (21)
    CreateDynamicObject(19377,1829.80004883,-1731.19995117,5212.10009766,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (22)
    CreateDynamicObject(19377,1829.79980469,-1721.59960938,5212.10009766,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (23)
    CreateDynamicObject(19377,1829.80004883,-1712.00000000,5212.10009766,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (24)
    CreateDynamicObject(19377,1819.30004883,-1721.59997559,5201.50000000,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (25)
    stair0 = CreateDynamicObject(14877,1823.00000000,-1719.19995117,5203.10009766,0.00000000,0.00000000,0.00000000); //DynamicObject(michelle-stairs) (1)
    CreateDynamicObject(19362,1826.23999023,-1724.09997559,5205.10009766,0.00000000,90.00000000,180.00000000); //DynamicObject(archbrij_sfw) (1)
    CreateDynamicObject(19362,1826.23999023,-1720.90002441,5205.10009766,0.00000000,90.00000000,179.99450684); //DynamicObject(archbrij_sfw) (2)
    CreateDynamicObject(19362,1826.23999023,-1717.69995117,5205.10107422,0.00000000,90.00000000,180.00000000); //DynamicObject(archbrij_sfw) (3)
    CreateDynamicObject(19362,1819.69995117,-1719.09997559,5203.50000000,0.00000000,90.00000000,179.99450684); //DynamicObject(archbrij_sfw) (4)
    CreateDynamicObject(19362,1819.69995117,-1722.30004883,5203.50000000,0.00000000,90.00000000,179.99450684); //DynamicObject(archbrij_sfw) (5)
    CreateDynamicObject(19362,1819.69921875,-1725.39941406,5203.50000000,0.00000000,90.00000000,179.99450684); //DynamicObject(archbrij_sfw) (6)
    CreateDynamicObject(19441,1821.39941406,-1721.50000000,5203.29980469,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_33_a) (4)
    CreateDynamicObject(19368,1822.90002441,-1725.30004883,5203.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(sboxbld4_sfw84) (5)
    CreateDynamicObject(19368,1819.69995117,-1725.30004883,5203.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(sboxbld4_sfw84) (6)
    CreateDynamicObject(19368,1818.09997559,-1723.69995117,5203.29980469,0.00000000,0.00000000,0.00000000); //DynamicObject(sboxbld4_sfw84) (7)
    CreateDynamicObject(19368,1818.09997559,-1720.50000000,5203.29980469,0.00000000,0.00000000,0.00000000); //DynamicObject(sboxbld4_sfw84) (8)
    CreateDynamicObject(19368,1818.09997559,-1717.30004883,5203.29980469,0.00000000,0.00000000,0.00000000); //DynamicObject(sboxbld4_sfw84) (9)
    CreateDynamicObject(19368,1819.69995117,-1717.69995117,5203.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(sboxbld4_sfw84) (10)
    CreateDynamicObject(19368,1822.90002441,-1717.69995117,5203.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(sboxbld4_sfw84) (11)
    CreateDynamicObject(19368,1824.50000000,-1714.30004883,5203.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(sboxbld4_sfw84) (12)
    CreateDynamicObject(19368,1822.90002441,-1720.69995117,5203.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(sboxbld4_sfw84) (13)
    CreateDynamicObject(19368,1822.90002441,-1720.69995117,5206.79980469,0.00000000,0.00000000,270.00000000); //DynamicObject(sboxbld4_sfw84) (14)
    CreateDynamicObject(19368,1822.89941406,-1722.29980469,5206.79980469,0.00000000,0.00000000,270.00000000); //DynamicObject(sboxbld4_sfw84) (15)
    CreateDynamicObject(19368,1822.90002441,-1725.30004883,5206.79980469,0.00000000,0.00000000,270.00000000); //DynamicObject(sboxbld4_sfw84) (16)
    CreateDynamicObject(19368,1819.69995117,-1725.30004883,5206.79980469,0.00000000,0.00000000,270.00000000); //DynamicObject(sboxbld4_sfw84) (17)
    CreateDynamicObject(19368,1818.09997559,-1723.69995117,5206.79980469,0.00000000,0.00000000,0.00000000); //DynamicObject(sboxbld4_sfw84) (18)
    CreateDynamicObject(19368,1818.09997559,-1720.50000000,5206.79980469,0.00000000,0.00000000,0.00000000); //DynamicObject(sboxbld4_sfw84) (19)
    CreateDynamicObject(19368,1818.09997559,-1717.30004883,5206.79980469,0.00000000,0.00000000,0.00000000); //DynamicObject(sboxbld4_sfw84) (20)
    CreateDynamicObject(19368,1819.69995117,-1717.69995117,5206.79980469,0.00000000,0.00000000,270.00000000); //DynamicObject(sboxbld4_sfw84) (21)
    CreateDynamicObject(19368,1822.90002441,-1717.69995117,5206.79980469,0.00000000,0.00000000,270.00000000); //DynamicObject(sboxbld4_sfw84) (22)
    CreateDynamicObject(19441,1821.40002441,-1721.50000000,5206.79980469,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_33_a) (6)
    CreateDynamicObject(19362,1825.50000000,-1719.30004883,5205.10205078,0.00000000,90.00000000,179.99450684); //DynamicObject(archbrij_sfw) (7)
    CreateDynamicObject(19377,1822.80004883,-1721.30004883,5208.60009766,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (26)
    CreateDynamicObject(19368,1824.50000000,-1716.09997559,5206.89990234,0.00000000,0.00000000,0.00000000); //DynamicObject(sboxbld4_sfw84) (26)
    CreateDynamicObject(19368,1824.50000000,-1712.90002441,5206.89990234,0.00000000,0.00000000,0.00000000); //DynamicObject(sboxbld4_sfw84) (27)
    CreateDynamicObject(19377,1829.79980469,-1731.69921875,5205.10009766,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (27)
    fence0 = CreateDynamicObject(19304,1827.90002441,-1725.19995117,5205.79980469,0.00000000,0.00000000,90.00000000); //DynamicObject(vgstwires22_lvs) (1)
    fence1 = CreateDynamicObject(19304,1827.90002441,-1721.69995117,5205.79980469,0.00000000,0.00000000,90.00000000); //DynamicObject(vgstwires22_lvs) (2)
    fence2 = CreateDynamicObject(19304,1832.69921875,-1716.39941406,5205.79980469,0.00000000,0.00000000,0.00000000); //DynamicObject(vgstwires22_lvs) (3)
    CreateDynamicObject(19362,1826.23999023,-1727.30004883,5205.10107422,0.00000000,90.00000000,179.99450684); //DynamicObject(archbrij_sfw) (8)
    CreateDynamicObject(19377,1831.59997559,-1711.69995117,5205.10009766,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (28)
    CreateDynamicObject(19368,1822.89941406,-1722.29980469,5203.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(sboxbld4_sfw84) (29)
    CreateDynamicObject(19460,1826.09997559,-1709.40002441,5203.29980469,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (1)
    CreateDynamicObject(19460,1824.50000000,-1717.50000000,5203.29980469,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (2)
    CreateDynamicObject(19460,1824.50000000,-1730.09997559,5203.29980469,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (3)
    CreateDynamicObject(19377,1829.79980469,-1711.69921875,5208.60009766,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (29)
    CreateDynamicObject(19377,1822.80004883,-1730.90002441,5208.60009766,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (31)
    CreateDynamicObject(19396,1827.69995117,-1714.30004883,5206.89990234,0.00000000,0.00000000,270.00000000); //DynamicObject(land_37_sfw) (8)
    CreateDynamicObject(19368,1824.50000000,-1714.30004883,5206.89990234,0.00000000,0.00000000,270.00000000); //DynamicObject(sboxbld4_sfw84) (32)
    CreateDynamicObject(19460,1826.09960938,-1709.39941406,5206.79980469,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (4)
    CreateDynamicObject(19396,1830.90002441,-1714.30004883,5203.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(land_37_sfw) (9)
    CreateDynamicObject(19396,1834.09997559,-1714.30004883,5203.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(land_37_sfw) (10)
    CreateDynamicObject(19396,1837.30004883,-1714.30004883,5203.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(land_37_sfw) (11)
    CreateDynamicObject(19396,1840.50000000,-1714.30004883,5203.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(land_37_sfw) (12)
    CreateDynamicObject(19396,1843.69995117,-1714.30004883,5203.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(land_37_sfw) (13)
    CreateDynamicObject(19460,1845.30004883,-1709.50000000,5203.29980469,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (5)
    CreateDynamicObject(19460,1845.30004883,-1709.50000000,5206.79980469,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (6)
    CreateDynamicObject(19377,1840.29980469,-1711.69921875,5208.60009766,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (32)
    CreateDynamicObject(19396,1843.69995117,-1714.30004883,5206.89990234,0.00000000,0.00000000,270.00000000); //DynamicObject(land_37_sfw) (14)
    CreateDynamicObject(19396,1850.09960938,-1714.29980469,5203.29980469,0.00000000,0.00000000,90.00000000); //DynamicObject(land_37_sfw) (15)
    CreateDynamicObject(19396,1837.30004883,-1714.30004883,5206.89990234,0.00000000,0.00000000,270.00000000); //DynamicObject(land_37_sfw) (16)
    CreateDynamicObject(19396,1834.09997559,-1714.30004883,5206.89990234,0.00000000,0.00000000,270.00000000); //DynamicObject(land_37_sfw) (17)
    CreateDynamicObject(19396,1830.90002441,-1714.30004883,5206.89990234,0.00000000,0.00000000,270.00000000); //DynamicObject(land_37_sfw) (19)
    CreateDynamicObject(19396,1843.69995117,-1714.30004883,5210.39990234,0.00000000,0.00000000,270.00000000); //DynamicObject(land_37_sfw) (20)
    CreateDynamicObject(19460,1845.30004883,-1709.50000000,5210.29980469,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (7)
    CreateDynamicObject(19396,1840.50000000,-1714.30004883,5210.39990234,0.00000000,0.00000000,270.00000000); //DynamicObject(land_37_sfw) (21)
    CreateDynamicObject(19396,1837.30004883,-1714.30004883,5210.39990234,0.00000000,0.00000000,270.00000000); //DynamicObject(land_37_sfw) (22)
    CreateDynamicObject(19396,1834.09997559,-1714.30004883,5210.39990234,0.00000000,0.00000000,270.00000000); //DynamicObject(land_37_sfw) (23)
    CreateDynamicObject(19396,1830.90002441,-1714.30004883,5210.39990234,0.00000000,0.00000000,270.00000000); //DynamicObject(land_37_sfw) (24)
    CreateDynamicObject(19396,1827.69995117,-1729.19995117,5206.89990234,0.00000000,0.00000000,270.00000000); //DynamicObject(land_37_sfw) (25)
    CreateDynamicObject(19368,1824.50000000,-1714.30004883,5210.39990234,0.00000000,0.00000000,270.00000000); //DynamicObject(sboxbld4_sfw84) (33)
    CreateDynamicObject(19460,1829.69995117,-1707.59997559,5210.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(cs_mntdetail01) (8)
    CreateDynamicObject(19460,1826.09960938,-1709.39941406,5210.29980469,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (9)
    CreateDynamicObject(19460,1829.29980469,-1709.50000000,5210.29980469,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (10)
    CreateDynamicObject(19460,1832.50000000,-1709.50000000,5210.29980469,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (11)
    CreateDynamicObject(19460,1835.69995117,-1709.50000000,5210.29980469,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (12)
    CreateDynamicObject(19460,1838.90002441,-1709.50000000,5210.29980469,0.00000000,0.00000000,0.25000000); //DynamicObject(cs_mntdetail01) (13)
    CreateDynamicObject(19460,1842.09997559,-1709.50000000,5210.29980469,0.00000000,0.00000000,0.24719238); //DynamicObject(cs_mntdetail01) (14)
    CreateDynamicObject(19460,1852.19995117,-1717.59997559,5206.89990234,0.00000000,0.00000000,270.00000000); //DynamicObject(cs_mntdetail01) (15)
    CreateDynamicObject(19460,1848.90002441,-1707.59997559,5210.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(cs_mntdetail01) (16)
    CreateDynamicObject(19460,1824.50000000,-1719.19995117,5210.39990234,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (17)
    CreateDynamicObject(19460,1824.50000000,-1728.80004883,5210.39990234,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (18)
    CreateDynamicObject(19368,1846.89941406,-1714.29980469,5203.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(sboxbld4_sfw84) (34)
    CreateDynamicObject(19377,1850.79980469,-1712.00000000,5201.50000000,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (35)
    CreateDynamicObject(19377,1850.79980469,-1721.59960938,5201.50000000,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (36)
    CreateDynamicObject(19460,1847.29980469,-1715.39941406,5203.29980469,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (19)
    CreateDynamicObject(19396,1840.50000000,-1714.30004883,5206.89990234,0.00000000,0.00000000,270.00000000); //DynamicObject(land_37_sfw) (26)
    CreateDynamicObject(19362,1845.69921875,-1718.09960938,5205.10107422,0.00000000,90.00000000,179.99450684); //DynamicObject(archbrij_sfw) (9)
    stair1 = CreateDynamicObject(14877,1849.19995117,-1722.19995117,5206.60009766,0.00000000,0.00000000,179.99450684); //DynamicObject(michelle-stairs) (4)
    stair2 = CreateDynamicObject(14877,1822.19921875,-1723.79980469,5201.50000000,0.00000000,0.00000000,179.99450684); //DynamicObject(michelle-stairs) (5)
    CreateDynamicObject(19377,1821.09997559,-1711.69995117,5205.10009766,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (39)
    CreateDynamicObject(19377,1852.59960938,-1711.69921875,5205.10009766,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (41)
    CreateDynamicObject(19377,1852.59960938,-1721.29980469,5205.10009766,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (42)
    CreateDynamicObject(19460,1847.40002441,-1712.80004883,5206.89990234,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (20)
    CreateDynamicObject(19460,1839.30004883,-1707.59997559,5210.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(cs_mntdetail01) (21)
    CreateDynamicObject(19368,1846.90002441,-1714.30004883,5206.89990234,0.00000000,0.00000000,270.00000000); //DynamicObject(sboxbld4_sfw84) (36)
    CreateDynamicObject(19460,1852.40002441,-1717.59997559,5210.39990234,0.00000000,0.00000000,270.00000000); //DynamicObject(cs_mntdetail01) (23)
    CreateDynamicObject(19362,1847.30004883,-1714.90002441,5208.60009766,0.00000000,90.00000000,179.99450684); //DynamicObject(archbrij_sfw) (13)
    CreateDynamicObject(19460,1847.50000000,-1715.90002441,5210.39990234,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (24)
    CreateDynamicObject(19368,1846.90002441,-1714.30004883,5210.39990234,0.00000000,0.00000000,270.00000000); //DynamicObject(sboxbld4_sfw84) (37)
    CreateDynamicObject(19362,1845.69995117,-1724.50000000,5208.60009766,0.00000000,90.00000000,179.99450684); //DynamicObject(archbrij_sfw) (15)
    CreateDynamicObject(19368,1849.09997559,-1720.69995117,5206.89990234,0.00000000,0.00000000,270.00000000); //DynamicObject(sboxbld4_sfw84) (38)
    CreateDynamicObject(19362,1845.69921875,-1721.29980469,5205.10107422,0.00000000,90.00000000,179.99450684); //DynamicObject(archbrij_sfw) (17)
    CreateDynamicObject(19362,1845.69995117,-1724.50000000,5205.10107422,0.00000000,90.00000000,179.99450684); //DynamicObject(archbrij_sfw) (18)
    CreateDynamicObject(19362,1845.69995117,-1727.69995117,5205.10205078,0.00000000,90.00000000,179.99450684); //DynamicObject(archbrij_sfw) (19)
    CreateDynamicObject(19460,1847.50000000,-1725.50000000,5206.89990234,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (25)
    CreateDynamicObject(19460,1852.29980469,-1723.69921875,5206.89990234,0.00000000,0.00000000,270.00000000); //DynamicObject(cs_mntdetail01) (26)
    CreateDynamicObject(19460,1856.69921875,-1720.39941406,5206.89990234,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (27)
    CreateDynamicObject(19460,1856.69995117,-1720.30004883,5210.39990234,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (28)
    CreateDynamicObject(19460,1852.29980469,-1723.69921875,5210.39990234,0.00000000,0.00000000,270.00000000); //DynamicObject(cs_mntdetail01) (29)
    CreateDynamicObject(19362,1845.69921875,-1721.29980469,5208.60009766,0.00000000,90.00000000,179.99450684); //DynamicObject(archbrij_sfw) (21)
    CreateDynamicObject(19362,1845.69995117,-1718.09997559,5208.60009766,0.00000000,90.00000000,179.99450684); //DynamicObject(archbrij_sfw) (22)
    CreateDynamicObject(19368,1849.09997559,-1720.69995117,5210.39990234,0.00000000,0.00000000,270.00000000); //DynamicObject(sboxbld4_sfw84) (40)
    CreateDynamicObject(19377,1850.80004883,-1721.59997559,5212.10009766,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (45)
    CreateDynamicObject(19377,1850.80004883,-1712.00000000,5212.10009766,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (46)
    CreateDynamicObject(19460,1831.00000000,-1736.00000000,5206.79980469,0.00000000,0.00000000,270.00000000); //DynamicObject(cs_mntdetail01) (30)
    CreateDynamicObject(19460,1829.69995117,-1707.59997559,5203.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(cs_mntdetail01) (31)
    CreateDynamicObject(19460,1839.30004883,-1707.59997559,5203.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(cs_mntdetail01) (32)
    CreateDynamicObject(19460,1839.30004883,-1707.59997559,5206.79980469,0.00000000,0.00000000,270.00000000); //DynamicObject(cs_mntdetail01) (33)
    CreateDynamicObject(19460,1848.90002441,-1707.59997559,5206.79980469,0.00000000,0.00000000,270.00000000); //DynamicObject(cs_mntdetail01) (34)
    CreateDynamicObject(19368,1845.69995117,-1707.59997559,5203.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(sboxbld4_sfw84) (41)
    CreateDynamicObject(19377,1850.79980469,-1731.19921875,5201.50000000,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (47)
    CreateDynamicObject(19377,1852.59960938,-1730.89941406,5205.10107422,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (48)
    CreateDynamicObject(19460,1824.50000000,-1727.09997559,5206.89990234,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (35)
    CreateDynamicObject(19460,1845.29980469,-1734.00000000,5206.79980469,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (36)
    CreateDynamicObject(19368,1824.50000000,-1729.19995117,5206.89990234,0.00000000,0.00000000,270.00000000); //DynamicObject(sboxbld4_sfw84) (43)
    CreateDynamicObject(19396,1827.69995117,-1714.30004883,5210.39990234,0.00000000,0.00000000,270.00000000); //DynamicObject(land_37_sfw) (28)
    CreateDynamicObject(19396,1830.90002441,-1729.19995117,5206.89990234,0.00000000,0.00000000,270.00000000); //DynamicObject(land_37_sfw) (29)
    CreateDynamicObject(19396,1834.09997559,-1729.19995117,5206.89990234,0.00000000,0.00000000,270.00000000); //DynamicObject(land_37_sfw) (30)
    CreateDynamicObject(19396,1837.30004883,-1729.19995117,5206.89990234,0.00000000,0.00000000,270.00000000); //DynamicObject(land_37_sfw) (31)
    CreateDynamicObject(19396,1840.50000000,-1729.19995117,5206.89990234,0.00000000,0.00000000,270.00000000); //DynamicObject(land_37_sfw) (32)
    CreateDynamicObject(19396,1843.69995117,-1729.19995117,5206.89990234,0.00000000,0.00000000,270.00000000); //DynamicObject(land_37_sfw) (33)
    CreateDynamicObject(19368,1846.90002441,-1729.19995117,5206.89990234,0.00000000,0.00000000,270.00000000); //DynamicObject(sboxbld4_sfw84) (44)
    CreateDynamicObject(19460,1826.09960938,-1734.09960938,5206.79980469,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (37)
    CreateDynamicObject(19377,1829.80004883,-1731.69995117,5208.60107422,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (49)
    CreateDynamicObject(19377,1840.29980469,-1731.69921875,5208.60009766,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (50)
    CreateDynamicObject(19460,1847.50000000,-1728.50000000,5210.39990234,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (38)
    CreateDynamicObject(19377,1850.79980469,-1731.19921875,5212.10009766,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (52)
    CreateDynamicObject(19460,1829.69921875,-1707.59960938,5206.79980469,0.00000000,0.00000000,270.00000000); //DynamicObject(cs_mntdetail01) (39)
    CreateDynamicObject(19460,1840.59960938,-1736.00000000,5206.79980469,0.00000000,0.00000000,270.00000000); //DynamicObject(cs_mntdetail01) (40)
    fence3 = CreateDynamicObject(19304,1844.00000000,-1718.09997559,5205.79980469,0.00000000,0.00000000,90.00000000); //DynamicObject(vgstwires22_lvs) (7)
    fence4 = CreateDynamicObject(19304,1836.00000000,-1716.39941406,5205.79980469,0.00000000,0.00000000,0.00000000); //DynamicObject(vgstwires22_lvs) (8)
    fence5 = CreateDynamicObject(19304,1839.09960938,-1716.39941406,5205.79980469,0.00000000,0.00000000,0.00000000); //DynamicObject(vgstwires22_lvs) (9)
    fence6 = CreateDynamicObject(19304,1842.19921875,-1716.39941406,5205.79980469,0.00000000,0.00000000,0.00000000); //DynamicObject(vgstwires22_lvs) (11)
    fence7 = CreateDynamicObject(19304,1829.59960938,-1716.39941406,5205.79980469,0.00000000,0.00000000,0.00000000); //DynamicObject(vgstwires22_lvs) (13)
    CreateDynamicObject(19368,1824.50000000,-1729.19995117,5203.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(sboxbld4_sfw84) (49)
    CreateDynamicObject(19396,1827.69995117,-1729.19995117,5203.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(land_37_sfw) (34)
    CreateDynamicObject(19396,1830.90002441,-1729.19995117,5203.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(land_37_sfw) (35)
    CreateDynamicObject(19396,1834.09997559,-1729.19995117,5203.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(land_37_sfw) (36)
    CreateDynamicObject(19396,1837.30004883,-1729.19995117,5203.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(land_37_sfw) (37)
    CreateDynamicObject(19396,1840.50000000,-1729.19995117,5203.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(land_37_sfw) (38)
    CreateDynamicObject(19396,1843.69995117,-1729.19995117,5203.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(land_37_sfw) (39)
    CreateDynamicObject(19368,1846.89941406,-1729.19921875,5203.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(sboxbld4_sfw84) (50)
    CreateDynamicObject(19460,1826.09997559,-1734.09997559,5203.29980469,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (41)
    CreateDynamicObject(19460,1831.00000000,-1736.00000000,5203.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(cs_mntdetail01) (42)
    CreateDynamicObject(19460,1840.59997559,-1736.00000000,5203.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(cs_mntdetail01) (43)
    CreateDynamicObject(19460,1845.29980469,-1734.00000000,5203.29980469,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (44)
    CreateDynamicObject(19368,1824.50000000,-1729.19995117,5210.39990234,0.00000000,0.00000000,270.00000000); //DynamicObject(sboxbld4_sfw84) (51)
    CreateDynamicObject(19460,1826.09997559,-1734.09997559,5210.29980469,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (45)
    CreateDynamicObject(19396,1827.69995117,-1729.19995117,5210.39990234,0.00000000,0.00000000,270.00000000); //DynamicObject(land_37_sfw) (42)
    CreateDynamicObject(19396,1830.90002441,-1729.19995117,5210.39990234,0.00000000,0.00000000,270.00000000); //DynamicObject(land_37_sfw) (43)
    CreateDynamicObject(19396,1834.09997559,-1729.19995117,5210.39990234,0.00000000,0.00000000,270.00000000); //DynamicObject(land_37_sfw) (44)
    CreateDynamicObject(19396,1837.30004883,-1729.19995117,5210.39990234,0.00000000,0.00000000,270.00000000); //DynamicObject(land_37_sfw) (45)
    CreateDynamicObject(19396,1840.50000000,-1729.19995117,5210.39990234,0.00000000,0.00000000,270.00000000); //DynamicObject(land_37_sfw) (46)
    CreateDynamicObject(19396,1843.69995117,-1729.19995117,5210.39990234,0.00000000,0.00000000,270.00000000); //DynamicObject(land_37_sfw) (47)
    CreateDynamicObject(19368,1846.90002441,-1729.19995117,5210.39990234,0.00000000,0.00000000,270.00000000); //DynamicObject(sboxbld4_sfw84) (52)
    CreateDynamicObject(19460,1831.00000000,-1736.00000000,5210.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(cs_mntdetail01) (46)
    CreateDynamicObject(19460,1840.59997559,-1736.00000000,5210.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(cs_mntdetail01) (47)
    CreateDynamicObject(19460,1845.29980469,-1734.00000000,5210.29980469,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (48)
    CreateDynamicObject(19460,1847.29980469,-1728.19921875,5203.29980469,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (49)
    fence8 = CreateDynamicObject(19304,1827.89941406,-1718.19921875,5205.79980469,0.00000000,0.00000000,90.00000000); //DynamicObject(vgstwires22_lvs) (14)
    fence9 = CreateDynamicObject(19304,1844.00000000,-1721.59997559,5205.79980469,0.00000000,0.00000000,90.00000000); //DynamicObject(vgstwires22_lvs) (15)
    fence10 = CreateDynamicObject(19304,1844.00000000,-1725.09997559,5205.79980469,0.00000000,0.00000000,90.00000000); //DynamicObject(vgstwires22_lvs) (16)
    fence11 = CreateDynamicObject(19304,1842.19921875,-1726.89941406,5205.79980469,0.00000000,0.00000000,0.00000000); //DynamicObject(vgstwires22_lvs) (17)
    fence12 = CreateDynamicObject(19304,1839.09960938,-1726.89941406,5205.79980469,0.00000000,0.00000000,0.00000000); //DynamicObject(vgstwires22_lvs) (18)
    fence13 = CreateDynamicObject(19304,1836.19921875,-1726.89941406,5205.79980469,0.00000000,0.00000000,0.00000000); //DynamicObject(vgstwires22_lvs) (19)
    fence14 = CreateDynamicObject(19304,1832.69921875,-1726.89941406,5205.79980469,0.00000000,0.00000000,0.00000000); //DynamicObject(vgstwires22_lvs) (20)
    fence15 = CreateDynamicObject(19304,1829.69921875,-1726.89941406,5205.79980469,0.00000000,0.00000000,0.00000000); //DynamicObject(vgstwires22_lvs) (21)
    fence16 = CreateDynamicObject(19304,1827.90002441,-1718.19995117,5209.29980469,0.00000000,0.00000000,90.00000000); //DynamicObject(vgstwires22_lvs) (27)
    fence17 = CreateDynamicObject(19304,1827.90002441,-1721.69995117,5209.29980469,0.00000000,0.00000000,90.00000000); //DynamicObject(vgstwires22_lvs) (28)
    fence18 = CreateDynamicObject(19304,1827.90002441,-1725.19995117,5209.29980469,0.00000000,0.00000000,90.00000000); //DynamicObject(vgstwires22_lvs) (29)
    fence19 = CreateDynamicObject(19304,1844.00000000,-1725.09997559,5209.29980469,0.00000000,0.00000000,90.00000000); //DynamicObject(vgstwires22_lvs) (36)
    fence20 = CreateDynamicObject(19304,1844.00000000,-1721.59997559,5209.29980469,0.00000000,0.00000000,90.00000000); //DynamicObject(vgstwires22_lvs) (37)
    fence21 = CreateDynamicObject(19304,1844.00000000,-1718.09997559,5209.29980469,0.00000000,0.00000000,90.00000000); //DynamicObject(vgstwires22_lvs) (38)
    CreateDynamicObject(19460,1842.09997559,-1734.00000000,5203.29980469,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (50)
    CreateDynamicObject(19460,1838.90002441,-1734.00000000,5203.29980469,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (51)
    CreateDynamicObject(19460,1835.69995117,-1734.00000000,5203.29980469,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (52)
    CreateDynamicObject(19460,1832.50000000,-1734.00000000,5203.29980469,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (53)
    CreateDynamicObject(19460,1829.30004883,-1734.00000000,5203.29980469,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (54)
    CreateDynamicObject(19460,1829.30004883,-1734.00000000,5206.79980469,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (55)
    CreateDynamicObject(19460,1832.50000000,-1734.00000000,5206.79980469,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (56)
    CreateDynamicObject(19460,1835.69995117,-1734.00000000,5206.79980469,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (57)
    CreateDynamicObject(19460,1838.90002441,-1734.00000000,5206.79980469,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (58)
    CreateDynamicObject(19460,1842.09997559,-1734.00000000,5206.79980469,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (59)
    CreateDynamicObject(19460,1842.09997559,-1734.00000000,5210.29980469,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (60)
    CreateDynamicObject(19460,1838.90002441,-1734.00000000,5210.29980469,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (61)
    CreateDynamicObject(19460,1835.69995117,-1734.00000000,5210.29980469,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (62)
    CreateDynamicObject(19460,1832.50000000,-1734.00000000,5210.29980469,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (63)
    CreateDynamicObject(19460,1829.30004883,-1734.00000000,5210.29980469,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (64)
    CreateDynamicObject(19460,1829.30004883,-1709.50000000,5206.79980469,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (65)
    CreateDynamicObject(19460,1832.50000000,-1709.50000000,5206.79980469,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (66)
    CreateDynamicObject(19460,1835.69995117,-1709.50000000,5206.79980469,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (67)
    CreateDynamicObject(19460,1838.90002441,-1709.50000000,5206.79980469,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (68)
    CreateDynamicObject(19460,1842.09997559,-1709.50000000,5206.79980469,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (69)
    CreateDynamicObject(19460,1842.09997559,-1709.50000000,5203.29980469,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (70)
    CreateDynamicObject(19460,1838.90002441,-1709.50000000,5203.29980469,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (71)
    CreateDynamicObject(19460,1835.80004883,-1709.50000000,5203.29980469,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (72)
    CreateDynamicObject(19460,1832.50000000,-1709.50000000,5203.29980469,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (73)
    CreateDynamicObject(19460,1829.30004883,-1709.50000000,5203.29980469,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (74)
    CreateDynamicObject(19396,1847.29980469,-1721.79980469,5203.29980469,0.00000000,0.00000000,179.99450684); //DynamicObject(land_37_sfw) (15)
    CreateDynamicObject(19368,1853.29980469,-1714.29980469,5203.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(sboxbld4_sfw84) (34)
    CreateDynamicObject(19460,1847.29980469,-1705.79980469,5203.29980469,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (19)
    CreateDynamicObject(19368,1856.50000000,-1714.29980469,5203.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(sboxbld4_sfw84) (34)
    CreateDynamicObject(19368,1852.30004883,-1720.69995117,5206.89990234,0.00000000,0.00000000,270.00000000); //DynamicObject(sboxbld4_sfw84) (38)
    CreateDynamicObject(19368,1852.30004883,-1720.69995117,5210.39990234,0.00000000,0.00000000,270.00000000); //DynamicObject(sboxbld4_sfw84) (38)
    CreateDynamicObject(19377,1861.29980469,-1721.59960938,5212.10009766,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (45)
    CreateDynamicObject(19377,1849.19921875,-1730.89941406,5208.60107422,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (50)
    CreateDynamicObject(19362,1846.69995117,-1722.30004883,5208.60107422,0.00000000,90.00000000,179.99450684); //DynamicObject(archbrij_sfw) (21)
    fence22 = CreateDynamicObject(19304,1829.59997559,-1716.40002441,5209.29980469,0.00000000,0.00000000,0.00000000); //DynamicObject(vgstwires22_lvs) (13)
    fence23 = CreateDynamicObject(19304,1832.69995117,-1716.40002441,5209.29980469,0.00000000,0.00000000,0.00000000); //DynamicObject(vgstwires22_lvs) (3)
    fence24 = CreateDynamicObject(19304,1836.00000000,-1716.40002441,5209.29980469,0.00000000,0.00000000,0.00000000); //DynamicObject(vgstwires22_lvs) (8)
    fence25 = CreateDynamicObject(19304,1839.09997559,-1716.40002441,5209.29980469,0.00000000,0.00000000,0.00000000); //DynamicObject(vgstwires22_lvs) (9)
    fence26 = CreateDynamicObject(19304,1842.19995117,-1716.40002441,5209.29980469,0.00000000,0.00000000,0.00000000); //DynamicObject(vgstwires22_lvs) (11)
    fence27 = CreateDynamicObject(19304,1842.19995117,-1726.90002441,5209.29980469,0.00000000,0.00000000,0.00000000); //DynamicObject(vgstwires22_lvs) (17)
    fence28 = CreateDynamicObject(19304,1839.09997559,-1726.90002441,5209.29980469,0.00000000,0.00000000,0.00000000); //DynamicObject(vgstwires22_lvs) (18)
    fence29 = CreateDynamicObject(19304,1868.00000000,-1733.09997559,5210.70019531,0.00000000,0.00000000,0.00000000); //DynamicObject(vgstwires22_lvs) (19)
    fence30 = CreateDynamicObject(19304,1832.69995117,-1726.90002441,5209.29980469,0.00000000,0.00000000,0.00000000); //DynamicObject(vgstwires22_lvs) (20)
    fence31 = CreateDynamicObject(19304,1829.69995117,-1726.90002441,5209.29980469,0.00000000,0.00000000,0.00000000); //DynamicObject(vgstwires22_lvs) (21)
    CreateDynamicObject(19460,1858.00000000,-1712.29980469,5203.29980469,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (19)
    CreateDynamicObject(19414,1851.40100098,-1707.50097656,5203.30078125,0.00000000,0.00000000,270.00000000); //DynamicObject(lodkmod2_sfw01) (1)
    CreateDynamicObject(19414,1848.90100098,-1707.50000000,5203.30078125,0.00000000,0.00000000,270.00000000); //DynamicObject(lodkmod2_sfw01) (2)
    CreateDynamicObject(19414,1853.90039062,-1707.50000000,5203.30078125,0.00000000,0.00000000,270.00000000); //DynamicObject(lodkmod2_sfw01) (3)
    CreateDynamicObject(19377,1861.29980469,-1712.00000000,5201.50000000,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (35)
    CreateDynamicObject(19414,1856.39941406,-1707.50097656,5203.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(lodkmod2_sfw01) (4)
    CreateDynamicObject(19460,1853.19921875,-1719.09960938,5203.29980469,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (19)
    CreateDynamicObject(19460,1854.79980469,-1719.09960938,5203.29980469,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (19)
    CreateDynamicObject(19441,1848.30004883,-1740.69995117,5206.79980469,0.00000000,0.00000000,180.00000000); //DynamicObject(cs_landbit_33_a) (4)
    CreateDynamicObject(19377,1852.59997559,-1702.40002441,5201.50000000,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (35)
    CreateDynamicObject(19377,1852.59960938,-1702.39941406,5205.10009766,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (35)
    CreateDynamicObject(19377,1863.09960938,-1702.39941406,5201.50000000,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (35)
    CreateDynamicObject(19460,1853.19995117,-1701.00000000,5203.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(cs_mntdetail01) (19)
    CreateDynamicObject(19396,1854.00000000,-1725.50000000,5203.29980469,0.00000000,0.00000000,179.99450684); //DynamicObject(land_37_sfw) (15)
    CreateDynamicObject(19441,1854.00000000,-1727.09960938,5203.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(cs_landbit_33_a) (4)
    CreateDynamicObject(19460,1854.79980469,-1731.89941406,5203.29980469,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (19)
    CreateDynamicObject(19460,1853.19995117,-1731.90002441,5203.29980469,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (19)
    CreateDynamicObject(19396,1850.00000000,-1729.19995117,5203.29980469,0.00000000,0.00000000,90.00000000); //DynamicObject(land_37_sfw) (15)
    CreateDynamicObject(19368,1853.19995117,-1729.19995117,5203.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(sboxbld4_sfw84) (50)
    CreateDynamicObject(14416,1857.40002441,-1738.59997559,5205.39990234,0.00000000,0.00000000,359.99450684); //DynamicObject(carter-stairs07) (1)
    CreateDynamicObject(19377,1850.80004883,-1740.80004883,5201.50000000,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (47)
    CreateDynamicObject(19368,1846.69995117,-1736.19995117,5203.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(sboxbld4_sfw84) (50)
    CreateDynamicObject(19368,1853.79980469,-1741.50000000,5206.79980469,0.00000000,0.00000000,270.00000000); //DynamicObject(sboxbld4_sfw84) (50)
    CreateDynamicObject(19377,1852.59960938,-1731.89941406,5205.10205078,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (48)
    CreateDynamicObject(19460,1848.29980469,-1741.00000000,5203.29980469,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (49)
    CreateDynamicObject(19460,1852.19995117,-1741.00000000,5203.29980469,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (49)
    CreateDynamicObject(19377,1850.50000000,-1746.09960938,5205.00000000,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (48)
    CreateDynamicObject(19368,1847.29980469,-1734.59960938,5203.29980469,0.00000000,0.00000000,179.99450684); //DynamicObject(sboxbld4_sfw84) (50)
    CreateDynamicObject(19368,1848.29980469,-1738.29980469,5206.79980469,0.00000000,0.00000000,179.99450684); //DynamicObject(sboxbld4_sfw84) (50)
    CreateDynamicObject(19441,1854.00000000,-1723.89941406,5203.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(cs_landbit_33_a) (4)
    CreateDynamicObject(19441,1852.19921875,-1740.69921875,5206.79980469,0.00000000,0.00000000,179.99450684); //DynamicObject(cs_landbit_33_a) (4)
    CreateDynamicObject(19460,1843.50000000,-1741.50000000,5206.79980469,0.00000000,0.00000000,270.00000000); //DynamicObject(cs_mntdetail01) (40)
    CreateDynamicObject(19368,1852.19921875,-1738.29980469,5206.79980469,0.00000000,0.00000000,179.99450684); //DynamicObject(sboxbld4_sfw84) (50)
    CreateDynamicObject(19368,1853.79980469,-1736.19921875,5203.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(sboxbld4_sfw84) (50)
    CreateDynamicObject(19377,1861.00000000,-1746.09960938,5205.00000000,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (48)
    CreateDynamicObject(19368,1856.39941406,-1717.09960938,5203.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(sboxbld4_sfw84) (34)
    CreateDynamicObject(19377,1861.29980469,-1721.59960938,5201.50000000,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (35)
    CreateDynamicObject(19377,1861.29980469,-1731.19921875,5201.50000000,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (35)
    CreateDynamicObject(19460,1845.59997559,-1746.30004883,5206.79980469,0.00000000,0.00000000,180.00000000); //DynamicObject(cs_mntdetail01) (40)
    CreateDynamicObject(14416,1850.19921875,-1739.39941406,5201.79980469,0.00000000,0.00000000,179.99450684); //DynamicObject(carter-stairs07) (1)
    CreateDynamicObject(19377,1859.69921875,-1732.19921875,5208.60009766,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (50)
    CreateDynamicObject(19441,1855.40002441,-1740.80004883,5206.79980469,0.00000000,0.00000000,179.99450684); //DynamicObject(cs_landbit_33_a) (4)
    CreateDynamicObject(19368,1866.19995117,-1749.40002441,5206.79980469,0.00000000,0.00000000,179.99450684); //DynamicObject(sboxbld4_sfw84) (50)
    CreateDynamicObject(19441,1859.40002441,-1740.80004883,5206.79980469,0.00000000,0.00000000,179.99450684); //DynamicObject(cs_landbit_33_a) (4)
    CreateDynamicObject(19460,1850.30004883,-1751.00000000,5206.79980469,0.00000000,0.00000000,270.00000000); //DynamicObject(cs_mntdetail01) (40)
    CreateDynamicObject(19377,1850.19995117,-1740.50000000,5208.60107422,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (50)
    CreateDynamicObject(19460,1864.19921875,-1741.59960938,5206.79980469,0.00000000,0.00000000,270.00000000); //DynamicObject(cs_mntdetail01) (40)
    CreateDynamicObject(19460,1859.90002441,-1751.00000000,5206.79980469,0.00000000,0.00000000,270.00000000); //DynamicObject(cs_mntdetail01) (40)
    CreateDynamicObject(19460,1869.50000000,-1751.00000000,5206.79980469,0.00000000,0.00000000,270.00000000); //DynamicObject(cs_mntdetail01) (40)
    CreateDynamicObject(19396,1866.20019531,-1746.29980469,5206.79980469,0.00000000,0.00000000,179.99450684); //DynamicObject(land_37_sfw) (15)
    CreateDynamicObject(19368,1855.39941406,-1738.39941406,5206.79980469,0.00000000,0.00000000,179.99450684); //DynamicObject(sboxbld4_sfw84) (50)
    CreateDynamicObject(19368,1866.19995117,-1743.19995117,5206.79980469,0.00000000,0.00000000,179.99450684); //DynamicObject(sboxbld4_sfw84) (50)
    CreateDynamicObject(19377,1850.19921875,-1750.09960938,5208.60009766,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (50)
    CreateDynamicObject(19377,1860.59960938,-1746.39941406,5208.60009766,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (50)
    CreateDynamicObject(19377,1871.09997559,-1746.40002441,5208.60009766,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (50)
    CreateDynamicObject(19377,1864.59960938,-1736.79980469,5208.60205078,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (50)
    CreateDynamicObject(19368,1859.40002441,-1738.40002441,5206.79980469,0.00000000,0.00000000,179.99450684); //DynamicObject(sboxbld4_sfw84) (50)
    CreateDynamicObject(19377,1864.59960938,-1732.19921875,5208.60107422,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (50)
    CreateDynamicObject(19460,1845.30004883,-1743.59997559,5210.29980469,0.00000000,0.00000000,179.99450684); //DynamicObject(cs_mntdetail01) (40)
    CreateDynamicObject(19460,1850.09997559,-1751.19995117,5210.29980469,0.00000000,0.00000000,90.00000000); //DynamicObject(cs_mntdetail01) (40)
    CreateDynamicObject(19460,1845.29980469,-1753.19921875,5210.29980469,0.00000000,0.00000000,179.99450684); //DynamicObject(cs_mntdetail01) (40)
    CreateDynamicObject(19460,1859.69995117,-1751.19995117,5210.29980469,0.00000000,0.00000000,90.00000000); //DynamicObject(cs_mntdetail01) (40)
    CreateDynamicObject(19460,1869.30004883,-1751.19995117,5210.29980469,0.00000000,0.00000000,90.00000000); //DynamicObject(cs_mntdetail01) (40)
    CreateDynamicObject(19460,1855.40002441,-1740.00000000,5210.29980469,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (40)
    CreateDynamicObject(19460,1869.79980469,-1736.89941406,5210.29980469,0.00000000,0.00000000,179.99450684); //DynamicObject(cs_mntdetail01) (40)
    CreateDynamicObject(14416,1869.09997559,-1725.09997559,5205.39990234,0.00000000,0.00000000,179.98901367); //DynamicObject(carter-stairs07) (1)
    CreateDynamicObject(19377,1863.09960938,-1725.89941406,5205.10009766,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (48)
    CreateDynamicObject(14416,1859.69995117,-1732.50000000,5201.89990234,0.00000000,0.00000000,89.98901367); //DynamicObject(carter-stairs07) (1)
    CreateDynamicObject(19460,1869.80004883,-1724.50000000,5206.89990234,0.00000000,0.00000000,180.00000000); //DynamicObject(cs_mntdetail01) (19)
    CreateDynamicObject(19460,1858.09997559,-1730.59997559,5203.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(cs_mntdetail01) (19)
    CreateDynamicObject(19441,1863.00000000,-1721.80004883,5203.29980469,0.00000000,0.00000000,180.00000000); //DynamicObject(cs_landbit_33_a) (4)
    CreateDynamicObject(19460,1867.79980469,-1721.00000000,5203.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(cs_mntdetail01) (19)
    CreateDynamicObject(19460,1867.09997559,-1726.90002441,5206.89990234,0.00000000,0.00000000,179.99450684); //DynamicObject(cs_mntdetail01) (19)
    CreateDynamicObject(19377,1863.09960938,-1716.29980469,5205.10009766,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (48)
    CreateDynamicObject(19460,1862.30004883,-1727.50000000,5210.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(cs_mntdetail01) (29)
    CreateDynamicObject(19377,1861.89941406,-1722.69921875,5208.60009766,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (50)
    CreateDynamicObject(19377,1873.59960938,-1717.39941406,5205.10009766,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (48)
    CreateDynamicObject(19460,1869.80102539,-1724.09997559,5210.29980469,0.00000000,0.00000000,179.99450684); //DynamicObject(cs_mntdetail01) (19)
    CreateDynamicObject(19368,1869.80004883,-1730.50000000,5210.29980469,0.00000000,0.00000000,179.99450684); //DynamicObject(sboxbld4_sfw84) (50)
    CreateDynamicObject(19368,1868.30004883,-1722.40002441,5210.29980469,0.00000000,0.00000000,90.00000000); //DynamicObject(sboxbld4_sfw84) (50)
    CreateDynamicObject(19460,1852.69921875,-1727.50000000,5210.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(cs_mntdetail01) (29)
    CreateDynamicObject(19460,1869.80004883,-1714.90002441,5206.89990234,0.00000000,0.00000000,179.99450684); //DynamicObject(cs_mntdetail01) (19)
    CreateDynamicObject(19460,1861.79980469,-1717.59960938,5206.89990234,0.00000000,0.00000000,270.00000000); //DynamicObject(cs_mntdetail01) (40)
    CreateDynamicObject(19460,1871.39941406,-1717.59960938,5206.89990234,0.00000000,0.00000000,270.00000000); //DynamicObject(cs_mntdetail01) (40)
    CreateDynamicObject(19377,1872.40002441,-1717.69995117,5208.60009766,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (50)
    CreateDynamicObject(19460,1867.09997559,-1722.69995117,5210.29980469,0.00000000,0.00000000,179.99450684); //DynamicObject(cs_mntdetail01) (19)
    CreateDynamicObject(19368,1848.50000000,-1727.59960938,5210.39990234,0.00000000,0.00000000,179.99450684); //DynamicObject(sboxbld4_sfw84) (50)
    CreateDynamicObject(19460,1862.59997559,-1730.59997559,5206.89990234,0.00000000,0.00000000,270.00000000); //DynamicObject(cs_mntdetail01) (40)
    CreateDynamicObject(19460,1867.79980469,-1722.59960938,5203.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(cs_mntdetail01) (19)
    CreateDynamicObject(19460,1862.09997559,-1733.30004883,5203.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(cs_mntdetail01) (19)
    CreateDynamicObject(19460,1862.09960938,-1733.29980469,5206.89990234,0.00000000,0.00000000,270.00000000); //DynamicObject(cs_mntdetail01) (19)
    CreateDynamicObject(19377,1867.69921875,-1735.39941406,5205.10009766,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (48)
    CreateDynamicObject(19460,1849.59997559,-1731.80004883,5206.89990234,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (36)
    CreateDynamicObject(19368,1849.59997559,-1725.40002441,5206.89990234,0.00000000,0.00000000,179.99450684); //DynamicObject(sboxbld4_sfw84) (50)
    CreateDynamicObject(19460,1854.39941406,-1727.39941406,5206.89990234,0.00000000,0.00000000,270.00000000); //DynamicObject(cs_mntdetail01) (26)
    CreateDynamicObject(19460,1859.19995117,-1722.59997559,5206.89990234,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (27)
    CreateDynamicObject(19377,1861.89941406,-1713.09960938,5208.60009766,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (50)
    CreateDynamicObject(19460,1855.69995117,-1730.40002441,5210.29980469,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (48)
    CreateDynamicObject(19460,1850.59997559,-1737.19995117,5210.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(cs_mntdetail01) (29)
    CreateDynamicObject(19460,1841.00000000,-1737.19995117,5210.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(cs_mntdetail01) (29)
    CreateDynamicObject(19368,1857.30004883,-1734.90002441,5206.89990234,0.00000000,0.00000000,179.99450684); //DynamicObject(sboxbld4_sfw84) (50)
    CreateDynamicObject(19368,1862.59997559,-1732.19995117,5206.89990234,0.00000000,0.00000000,179.99450684); //DynamicObject(sboxbld4_sfw84) (50)
    CreateDynamicObject(19460,1853.09997559,-1736.59997559,5206.89990234,0.00000000,0.00000000,270.00000000); //DynamicObject(cs_mntdetail01) (40)
    CreateDynamicObject(19460,1866.50000000,-1728.50000000,5203.29980469,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (19)
    CreateDynamicObject(19460,1866.50000000,-1718.89941406,5203.29980469,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (19)
    CreateDynamicObject(19460,1866.50000000,-1709.29980469,5203.29980469,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (19)
    CreateDynamicObject(19460,1866.50000000,-1699.69995117,5203.29980469,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (19)
    CreateDynamicObject(19460,1858.00000000,-1696.30004883,5203.29980469,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (19)
    CreateDynamicObject(19460,1843.59997559,-1701.00000000,5203.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(cs_mntdetail01) (19)
    CreateDynamicObject(19460,1862.50000000,-1698.29980469,5203.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(cs_mntdetail01) (19)
    CreateDynamicObject(19377,1863.09960938,-1706.69921875,5205.10009766,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (41)
    CreateDynamicObject(19377,1863.09997559,-1697.09997559,5205.10009766,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (41)
    CreateDynamicObject(19460,1868.00000000,-1742.50000000,5210.29980469,0.00000000,0.00000000,179.99450684); //DynamicObject(cs_mntdetail01) (40)
    CreateDynamicObject(19368,1869.59960938,-1737.69921875,5210.29980469,0.00000000,0.00000000,89.99450684); //DynamicObject(sboxbld4_sfw84) (50)
    CreateDynamicObject(19368,1859.40002441,-1738.40002441,5210.29980469,0.00000000,0.00000000,179.99450684); //DynamicObject(sboxbld4_sfw84) (50)
    CreateDynamicObject(19441,1859.39941406,-1740.79980469,5210.29980469,0.00000000,0.00000000,179.99450684); //DynamicObject(cs_landbit_33_a) (4)
    CreateDynamicObject(19368,1857.00000000,-1741.59997559,5210.29980469,0.00000000,0.00000000,89.99450684); //DynamicObject(sboxbld4_sfw84) (50)
    CreateDynamicObject(19368,1860.19921875,-1741.59960938,5210.29980469,0.00000000,0.00000000,89.99450684); //DynamicObject(sboxbld4_sfw84) (50)
    CreateDynamicObject(19368,1857.00000000,-1744.79980469,5210.29980469,0.00000000,0.00000000,89.99450684); //DynamicObject(sboxbld4_sfw84) (50)
    CreateDynamicObject(19368,1858.59997559,-1743.19995117,5210.29980469,0.00000000,0.00000000,179.99450684); //DynamicObject(sboxbld4_sfw84) (50)
    CreateDynamicObject(19377,1850.50000000,-1740.80004883,5212.10009766,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (52)
    CreateDynamicObject(19377,1850.50000000,-1750.40002441,5212.10009766,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (52)
    CreateDynamicObject(19377,1861.00000000,-1750.39941406,5212.10009766,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (52)
    CreateDynamicObject(19377,1871.50000000,-1750.40002441,5212.10009766,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (52)
    CreateDynamicObject(19377,1861.00000000,-1740.80004883,5212.10009766,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (52)
    CreateDynamicObject(19377,1871.50000000,-1740.80004883,5212.10009766,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (52)
    CreateDynamicObject(19377,1861.29980469,-1731.19921875,5212.10009766,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (52)
    CreateDynamicObject(19377,1871.80004883,-1731.19995117,5212.10009766,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (52)
    CreateDynamicObject(19377,1871.80004883,-1721.59997559,5212.10009766,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (52)
    CreateDynamicObject(19460,1859.19995117,-1713.00000000,5206.89990234,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_mntdetail01) (27)
    CreateDynamicObject(19368,1861.80004883,-1738.40002441,5210.29980469,0.00000000,0.00000000,179.99450684); //DynamicObject(sboxbld4_sfw84) (50)
    CreateDynamicObject(19441,1861.80004883,-1740.80004883,5210.29980469,0.00000000,0.00000000,179.99450684); //DynamicObject(cs_landbit_33_a) (4)
    CreateDynamicObject(19377,1871.50000000,-1746.09997559,5205.00000000,0.00000000,90.00000000,0.00000000); //DynamicObject(freight_interiorsfw) (48)
    CreateDynamicObject(19460,1873.80004883,-1741.59997559,5206.79980469,0.00000000,0.00000000,270.00000000); //DynamicObject(cs_mntdetail01) (40)
    CreateDynamicObject(19460,1879.09997559,-1751.00000000,5206.79980469,0.00000000,0.00000000,270.00000000); //DynamicObject(cs_mntdetail01) (40)
    CreateDynamicObject(19460,1876.40002441,-1746.50000000,5206.79980469,0.00000000,0.00000000,179.99450684); //DynamicObject(cs_mntdetail01) (40)
    CreateDynamicObject(19396,1857.80004883,-1729.00000000,5206.89990234,0.00000000,0.00000000,179.99450684); //DynamicObject(land_37_sfw) (15)
    CreateDynamicObject(19396,1862.80004883,-1710.90002441,5203.29980469,0.00000000,0.00000000,89.99450684); //DynamicObject(land_37_sfw) (15)
    CreateDynamicObject(19362,1860.80004883,-1734.80004883,5205.10009766,0.00000000,90.00000000,179.99450684); //DynamicObject(archbrij_sfw) (17)
    CreateDynamicObject(19362,1859.50000000,-1734.80102539,5205.10009766,0.00000000,90.00000000,179.99450684); //DynamicObject(archbrij_sfw) (17)
    CreateDynamicObject(19441,1858.00000000,-1706.69921875,5203.29980469,0.00000000,0.00000000,179.99450684); //DynamicObject(cs_landbit_33_a) (4)
    CreateDynamicObject(19441,1858.00000000,-1701.90002441,5203.29980469,0.00000000,0.00000000,179.99450684); //DynamicObject(cs_landbit_33_a) (4)
    CreateDynamicObject(19442,1854.74121094,-1710.22949219,5269.51171875,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_44_a) (1)
    CreateDynamicObject(19442,1855.19995117,-1707.50000000,5203.29980469,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_44_a) (2)
    CreateDynamicObject(19442,1852.69995117,-1707.50000000,5203.29980469,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_44_a) (3)
    CreateDynamicObject(19442,1850.09997559,-1707.50000000,5203.29980469,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_44_a) (4)
    CreateDynamicObject(19466,1851.40002441,-1707.50000000,5203.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(lod_liberty06) (1)
    CreateDynamicObject(19466,1853.90002441,-1707.50000000,5203.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(lod_liberty06) (2)
    CreateDynamicObject(19466,1856.40002441,-1707.50000000,5203.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(lod_liberty06) (3)
    CreateDynamicObject(19466,1848.90002441,-1707.50000000,5203.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(lod_liberty06) (4)
    CreateDynamicObject(19396,1858.00000000,-1704.29980469,5203.29980469,0.00000000,0.00000000,179.99450684); //DynamicObject(land_37_sfw) (15)
    CreateDynamicObject(19368,1859.59997559,-1710.90002441,5203.29980469,0.00000000,0.00000000,89.99450684); //DynamicObject(sboxbld4_sfw84) (50)
    CreateDynamicObject(19368,1866.00000000,-1710.90002441,5203.29980469,0.00000000,0.00000000,89.99450684); //DynamicObject(sboxbld4_sfw84) (50)
    CreateDynamicObject(1569,1860.80004883,-1698.40002441,5201.60009766,0.00000000,0.00000000,0.00000000); //DynamicObject(adam_v_door) (1)
    CreateDynamicObject(1569,1863.80004883,-1698.40002441,5201.60009766,0.00000000,0.00000000,179.79998779); //DynamicObject(adam_v_door) (2)
    CreateDynamicObject(19370,1859.69921875,-1706.00000000,5200.79980469,0.00000000,0.00000000,270.00000000); //DynamicObject(freight_sfw15) (2)
    CreateDynamicObject(19370,1864.79980469,-1706.00000000,5200.79980469,0.00000000,0.00000000,270.00000000); //DynamicObject(freight_sfw15) (3)
    CreateDynamicObject(19435,1859.79980469,-1706.69921875,5202.50000000,0.00000000,90.00000000,0.00000000); //DynamicObject(cs_landbit_58_a) (1)
    CreateDynamicObject(19435,1864.69995117,-1706.69995117,5202.50000000,0.00000000,90.00000000,0.00000000); //DynamicObject(cs_landbit_58_a) (2)
    CreateDynamicObject(19443,1861.19921875,-1706.69921875,5200.70019531,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_61_a) (1)
    CreateDynamicObject(19370,1859.69921875,-1707.39941406,5200.79980469,0.00000000,0.00000000,270.00000000); //DynamicObject(freight_sfw15) (5)
    CreateDynamicObject(19443,1863.29980469,-1706.69921875,5200.70019531,0.00000000,0.00000000,0.00000000); //DynamicObject(cs_landbit_61_a) (2)
    CreateDynamicObject(19370,1864.80004883,-1707.40002441,5200.79980469,0.00000000,0.00000000,270.00000000); //DynamicObject(freight_sfw15) (6)
    CreateDynamicObject(2008,1859.09960938,-1707.09960938,5201.77001953,0.00000000,0.00000000,0.00000000); //DynamicObject(officedesk1) (1)
    CreateDynamicObject(2008,1864.09997559,-1707.09997559,5201.77001953,0.00000000,0.00000000,0.00000000); //DynamicObject(officedesk1) (2)
    CreateDynamicObject(19462,1862.80004883,-1706.00000000,5205.50000000,0.00000000,0.00000000,270.00000000); //DynamicObject(cs_mntdetail01) (19)
    CreateDynamicObject(19435,1859.79980469,-1706.69921875,5203.79980469,0.00000000,90.00000000,0.00000000); //DynamicObject(cs_landbit_58_a) (1)
    CreateDynamicObject(19435,1863.29980469,-1706.69921875,5203.79980469,0.00000000,90.00000000,0.00000000); //DynamicObject(cs_landbit_58_a) (1)
    CreateDynamicObject(19435,1866.79980469,-1706.69921875,5203.79980469,0.00000000,90.00000000,0.00000000); //DynamicObject(cs_landbit_58_a) (1)
    CreateDynamicObject(2606,1863.80004883,-1707.19995117,5204.10009766,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_police_counter2) (1)
    CreateDynamicObject(2606,1863.79980469,-1707.19921875,5204.52978516,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_police_counter2) (2)
    CreateDynamicObject(2608,1861.19995117,-1707.40002441,5204.60009766,0.00000000,0.00000000,0.00000000); //DynamicObject(polce_shelf) (1)
    CreateDynamicObject(2608,1859.31604004,-1707.40002441,5204.60009766,0.00000000,0.00000000,0.00000000); //DynamicObject(polce_shelf) (2)
    CreateDynamicObject(16101,1863.30004883,-1707.40002441,5192.79980469,0.00000000,0.00000000,0.00000000); //DynamicObject(des_windsockpole) (1)
    CreateDynamicObject(16101,1861.19995117,-1707.30004883,5192.79980469,0.00000000,0.00000000,0.00000000); //DynamicObject(des_windsockpole) (2)
    CreateDynamicObject(16101,1858.30004883,-1707.40002441,5192.79980469,0.00000000,0.00000000,0.00000000); //DynamicObject(des_windsockpole) (3)
    CreateDynamicObject(16101,1866.09997559,-1707.40002441,5192.79980469,0.00000000,0.00000000,0.00000000); //DynamicObject(des_windsockpole) (4)
    CreateDynamicObject(1806,1860.00000000,-1708.40002441,5201.60009766,0.00000000,0.00000000,0.00000000); //DynamicObject(med_office_chair) (1)
    CreateDynamicObject(1806,1865.00000000,-1708.40002441,5201.60009766,0.00000000,0.00000000,0.00000000); //DynamicObject(med_office_chair) (2)
    CreateDynamicObject(1811,1865.90002441,-1700.90002441,5202.20019531,0.00000000,0.00000000,0.00000000); //DynamicObject(med_din_chair_5) (1)
    CreateDynamicObject(1811,1865.90002441,-1701.69995117,5202.20019531,0.00000000,0.00000000,0.00000000); //DynamicObject(med_din_chair_5) (2)
    CreateDynamicObject(1811,1865.90002441,-1702.50000000,5202.20019531,0.00000000,0.00000000,0.00000000); //DynamicObject(med_din_chair_5) (3)
    CreateDynamicObject(1811,1865.89941406,-1703.29980469,5202.20019531,0.00000000,0.00000000,0.00000000); //DynamicObject(med_din_chair_5) (4)
    CreateDynamicObject(1811,1848.89941406,-1706.50000000,5202.20019531,0.00000000,0.00000000,90.00000000); //DynamicObject(med_din_chair_5) (5)
    CreateDynamicObject(1811,1851.40002441,-1706.50000000,5202.20019531,0.00000000,0.00000000,90.00000000); //DynamicObject(med_din_chair_5) (6)
    CreateDynamicObject(1811,1854.00000000,-1706.50000000,5202.20019531,0.00000000,0.00000000,90.00000000); //DynamicObject(med_din_chair_5) (7)
    CreateDynamicObject(1811,1856.59997559,-1706.50000000,5202.20019531,0.00000000,0.00000000,90.00000000); //DynamicObject(med_din_chair_5) (8)
    CreateDynamicObject(2007,1855.40002441,-1727.19995117,5201.60009766,0.00000000,0.00000000,179.99450684); //DynamicObject(filing_cab_nu01) (2)
    CreateDynamicObject(2007,1856.40002441,-1727.19995117,5201.60009766,0.00000000,0.00000000,179.99450684); //DynamicObject(filing_cab_nu01) (11)
    CreateDynamicObject(2007,1857.40002441,-1727.19995117,5201.60009766,0.00000000,0.00000000,179.99450684); //DynamicObject(filing_cab_nu01) (12)
    CreateDynamicObject(2007,1858.40002441,-1730.00000000,5201.60009766,0.00000000,0.00000000,179.99450684); //DynamicObject(filing_cab_nu01) (13)
    CreateDynamicObject(2007,1858.40002441,-1727.19995117,5201.60009766,0.00000000,0.00000000,179.99450684); //DynamicObject(filing_cab_nu01) (14)
    CreateDynamicObject(19370,1857.30004883,-1727.80004883,5202.70019531,0.00000000,0.00000000,270.00000000); //DynamicObject(freight_sfw15) (5)
    CreateDynamicObject(2007,1857.40002441,-1728.40002441,5201.60009766,0.00000000,0.00000000,359.98901367); //DynamicObject(filing_cab_nu01) (15)
    CreateDynamicObject(2007,1856.40002441,-1728.40002441,5201.60009766,0.00000000,0.00000000,359.98901367); //DynamicObject(filing_cab_nu01) (16)
    CreateDynamicObject(2007,1855.40002441,-1728.40002441,5201.60009766,0.00000000,0.00000000,359.98901367); //DynamicObject(filing_cab_nu01) (17)
    CreateDynamicObject(2007,1858.40002441,-1727.19995117,5203.00000000,0.00000000,0.00000000,179.99450684); //DynamicObject(filing_cab_nu01) (18)
    CreateDynamicObject(2007,1857.40002441,-1727.19995117,5203.00000000,0.00000000,0.00000000,179.99450684); //DynamicObject(filing_cab_nu01) (19)
    CreateDynamicObject(2007,1856.40002441,-1727.19995117,5203.00000000,0.00000000,0.00000000,179.99450684); //DynamicObject(filing_cab_nu01) (20)
    CreateDynamicObject(2007,1855.40002441,-1727.19995117,5203.00000000,0.00000000,0.00000000,179.99450684); //DynamicObject(filing_cab_nu01) (21)
    CreateDynamicObject(2007,1858.40002441,-1728.40002441,5203.00000000,0.00000000,0.00000000,359.98901367); //DynamicObject(filing_cab_nu01) (22)
    CreateDynamicObject(2007,1857.40002441,-1728.40002441,5203.00000000,0.00000000,0.00000000,359.98901367); //DynamicObject(filing_cab_nu01) (23)
    CreateDynamicObject(2007,1856.40002441,-1728.40002441,5203.00000000,0.00000000,0.00000000,359.98901367); //DynamicObject(filing_cab_nu01) (24)
    CreateDynamicObject(2007,1855.40002441,-1728.40002441,5203.00000000,0.00000000,0.00000000,359.98901367); //DynamicObject(filing_cab_nu01) (25)
    CreateDynamicObject(2007,1858.40002441,-1728.40002441,5201.60009766,0.00000000,0.00000000,359.98901367); //DynamicObject(filing_cab_nu01) (26)
    CreateDynamicObject(2007,1857.40002441,-1730.00000000,5201.60009766,0.00000000,0.00000000,179.99450684); //DynamicObject(filing_cab_nu01) (27)
    CreateDynamicObject(2007,1856.40002441,-1730.00000000,5201.60009766,0.00000000,0.00000000,179.99450684); //DynamicObject(filing_cab_nu01) (28)
    CreateDynamicObject(2007,1855.40002441,-1730.00000000,5201.60009766,0.00000000,0.00000000,179.99450684); //DynamicObject(filing_cab_nu01) (29)
    CreateDynamicObject(2007,1855.40002441,-1730.00000000,5203.00000000,0.00000000,0.00000000,179.99450684); //DynamicObject(filing_cab_nu01) (30)
    CreateDynamicObject(2007,1856.40002441,-1730.00000000,5203.00000000,0.00000000,0.00000000,179.99450684); //DynamicObject(filing_cab_nu01) (31)
    CreateDynamicObject(2007,1857.40002441,-1730.00000000,5203.00000000,0.00000000,0.00000000,179.99450684); //DynamicObject(filing_cab_nu01) (32)
    CreateDynamicObject(2007,1858.39941406,-1730.00000000,5203.00000000,0.00000000,0.00000000,179.99450684); //DynamicObject(filing_cab_nu01) (33)
    CreateDynamicObject(19370,1854.80004883,-1727.80102539,5202.70019531,0.00000000,0.00000000,270.00000000); //DynamicObject(freight_sfw15) (5)
    CreateDynamicObject(2303,1865.90002441,-1724.00000000,5201.60009766,0.00000000,0.00000000,270.00000000); //DynamicObject(cj_k3_wash_mac) (1)
    CreateDynamicObject(2303,1865.89941406,-1725.00000000,5201.60009766,0.00000000,0.00000000,270.00000000); //DynamicObject(cj_k3_wash_mac) (2)
    CreateDynamicObject(2303,1865.90002441,-1726.00000000,5201.60009766,0.00000000,0.00000000,270.00000000); //DynamicObject(cj_k3_wash_mac) (3)
    CreateDynamicObject(2303,1865.90002441,-1726.00000000,5202.60009766,0.00000000,0.00000000,270.00000000); //DynamicObject(cj_k3_wash_mac) (4)
    CreateDynamicObject(2303,1865.89941406,-1725.00000000,5202.60009766,0.00000000,0.00000000,270.00000000); //DynamicObject(cj_k3_wash_mac) (5)
    CreateDynamicObject(2303,1865.90002441,-1724.00000000,5202.60009766,0.00000000,0.00000000,270.00000000); //DynamicObject(cj_k3_wash_mac) (6)
    CreateDynamicObject(1892,1862.59997559,-1699.09997559,5201.60009766,0.00000000,0.00000000,0.00000000); //DynamicObject(security_gatsh) (1)
    CreateDynamicObject(1892,1861.00000000,-1699.09997559,5201.60009766,0.00000000,0.00000000,0.00000000); //DynamicObject(security_gatsh) (2)
    CreateDynamicObject(2008,1856.69995117,-1721.69995117,5201.60009766,0.00000000,0.00000000,180.00000000); //DynamicObject(officedesk1) (1)
    CreateDynamicObject(2008,1856.69995117,-1718.90002441,5201.60009766,0.00000000,0.00000000,179.99450684); //DynamicObject(officedesk1) (1)
    CreateDynamicObject(1671,1864.50000000,-1719.00000000,5202.00000000,0.00000000,0.00000000,270.00000000); //DynamicObject(swivelchair_a) (1)
    CreateDynamicObject(1671,1855.80004883,-1717.90002441,5202.00000000,0.00000000,0.00000000,0.00000000); //DynamicObject(swivelchair_a) (2)
    CreateDynamicObject(2846,1864.40002441,-1724.40002441,5201.60009766,0.00000000,0.00000000,0.00000000); //DynamicObject(gb_bedclothes05) (1)
    CreateDynamicObject(2713,1865.90002441,-1723.00000000,5201.70019531,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_bucket) (1)
    CreateDynamicObject(2008,1863.50000000,-1719.90002441,5201.60009766,0.00000000,0.00000000,89.99450684); //DynamicObject(officedesk1) (1)
    CreateDynamicObject(2008,1863.50000000,-1716.59997559,5201.60009766,0.00000000,0.00000000,89.99450684); //DynamicObject(officedesk1) (1)
    CreateDynamicObject(2008,1864.90002441,-1711.59997559,5201.60009766,0.00000000,0.00000000,0.00000000); //DynamicObject(officedesk1) (1)
    CreateDynamicObject(1671,1855.79980469,-1720.69921875,5202.00000000,0.00000000,0.00000000,0.00000000); //DynamicObject(swivelchair_a) (3)
    CreateDynamicObject(1671,1864.50000000,-1715.59997559,5202.00000000,0.00000000,0.00000000,270.00000000); //DynamicObject(swivelchair_a) (4)
    CreateDynamicObject(1671,1858.80004883,-1712.50000000,5202.00000000,0.00000000,0.00000000,90.00000000); //DynamicObject(swivelchair_a) (5)
    CreateDynamicObject(2186,1866.00000000,-1714.40002441,5201.60009766,0.00000000,0.00000000,270.00000000); //DynamicObject(photocopier_1) (1)
    CreateDynamicObject(2008,1860.00000000,-1711.69995117,5201.60009766,0.00000000,0.00000000,269.99450684); //DynamicObject(officedesk1) (1)
    CreateDynamicObject(2008,1860.00000000,-1715.59997559,5201.60009766,0.00000000,0.00000000,269.98901367); //DynamicObject(officedesk1) (1)
    CreateDynamicObject(1671,1865.79980469,-1712.39941406,5202.00000000,0.00000000,0.00000000,179.99450684); //DynamicObject(swivelchair_a) (6)
    CreateDynamicObject(1671,1858.90002441,-1716.59997559,5202.00000000,0.00000000,0.00000000,90.00000000); //DynamicObject(swivelchair_a) (7)
    CreateDynamicObject(14401,1853.90002441,-1705.40002441,5205.50000000,0.00000000,0.00000000,180.00000000); //DynamicObject(bench1) (1)
    CreateDynamicObject(19368,1859.09997559,-1723.09997559,5206.89990234,0.00000000,0.00000000,89.99450684); //DynamicObject(sboxbld4_sfw84) (50)
    CreateDynamicObject(14782,1862.39941406,-1718.09960938,5206.20019531,0.00000000,0.00000000,0.00000000); //DynamicObject(int3int_boxing30) (3)
    CreateDynamicObject(14401,1853.89941406,-1706.50000000,5205.50000000,0.00000000,0.00000000,179.99450684); //DynamicObject(bench1) (4)
    CreateDynamicObject(19368,1862.30004883,-1723.09997559,5206.89990234,0.00000000,0.00000000,89.99450684); //DynamicObject(sboxbld4_sfw84) (50)
    CreateDynamicObject(14782,1860.59960938,-1722.63964844,5206.20019531,0.00000000,0.00000000,179.99450684); //DynamicObject(int3int_boxing30) (4)
    CreateDynamicObject(2007,1859.90002441,-1723.69995117,5205.20019531,0.00000000,0.00000000,359.99450684); //DynamicObject(filing_cab_nu01) (33)
    CreateDynamicObject(2007,1860.90002441,-1723.69995117,5205.20019531,0.00000000,0.00000000,359.98901367); //DynamicObject(filing_cab_nu01) (33)
    CreateDynamicObject(2007,1861.90002441,-1723.69995117,5205.20019531,0.00000000,0.00000000,359.98901367); //DynamicObject(filing_cab_nu01) (33)
    CreateDynamicObject(2007,1862.90002441,-1723.69995117,5205.20019531,0.00000000,0.00000000,359.98901367); //DynamicObject(filing_cab_nu01) (33)
    CreateDynamicObject(14791,1871.59997559,-1745.90002441,5206.20019531,0.00000000,0.00000000,0.00000000); //DynamicObject(a_vgsgymboxa) (1)
    CreateDynamicObject(2290,1853.40002441,-1733.90002441,5205.20019531,0.00000000,0.00000000,270.00000000); //DynamicObject(swk_couch_1) (1)
    CreateDynamicObject(2290,1850.30004883,-1735.90002441,5205.20019531,0.00000000,0.00000000,90.00000000); //DynamicObject(swk_couch_1) (2)
    CreateDynamicObject(2315,1851.90002441,-1734.19995117,5205.20019531,0.00000000,0.00000000,270.00000000); //DynamicObject(cj_tv_table4) (1)
    CreateDynamicObject(1754,1856.40002441,-1735.69995117,5205.20019531,0.00000000,0.00000000,219.99816895); //DynamicObject(swank_single_1) (1)
    CreateDynamicObject(2964,1863.30004883,-1727.50000000,5205.20019531,0.00000000,0.00000000,270.00000000); //DynamicObject(k_pooltablesm) (1)
    CreateDynamicObject(19441,1860.19995117,-1736.80004883,5210.29980469,0.00000000,0.00000000,89.99450684); //DynamicObject(cs_landbit_33_a) (4)
    CreateDynamicObject(19441,1861.00000000,-1736.80102539,5210.29980469,0.00000000,0.00000000,89.99450684); //DynamicObject(cs_landbit_33_a) (4)
    CreateDynamicObject(18059,1847.30004883,-1739.30004883,5209.10009766,0.00000000,0.00000000,0.00000000); //DynamicObject(tables) (1)
    CreateDynamicObject(18059,1847.30004883,-1744.19995117,5209.10009766,0.00000000,0.00000000,0.00000000); //DynamicObject(tables) (2)
    CreateDynamicObject(18059,1853.59997559,-1749.19995117,5209.10009766,0.00000000,0.00000000,0.00000000); //DynamicObject(tables) (3)
    CreateDynamicObject(18059,1869.30004883,-1749.19995117,5209.10009766,0.00000000,0.00000000,0.00000000); //DynamicObject(tables) (4)
    CreateDynamicObject(1746,1850.40002441,-1732.50000000,5205.20019531,0.00000000,0.00000000,0.00000000); //DynamicObject(swank_1_footstool) (1)
    CreateDynamicObject(2140,1855.00000000,-1728.00000000,5205.20019531,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_k3_tall_unit1) (1)
    CreateDynamicObject(2137,1851.15002441,-1728.00000000,5205.20019531,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_k3_low_unit3) (1)
    CreateDynamicObject(2135,1850.19921875,-1728.97949219,5205.20019531,0.00000000,0.00000000,90.00000000); //DynamicObject(cj_k3_cooker) (1)
    CreateDynamicObject(2136,1853.04980469,-1727.99414062,5205.20019531,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_k3_sink) (1)
    CreateDynamicObject(2305,1850.19995117,-1728.00000000,5205.20019531,0.00000000,0.00000000,90.00000000); //DynamicObject(cj_k3_c_unit) (1)
    CreateDynamicObject(2137,1852.10937500,-1728.00000000,5205.20019531,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_k3_low_unit3) (2)
    CreateDynamicObject(2137,1850.20605469,-1729.94995117,5205.20019531,0.00000000,0.00000000,90.00000000); //DynamicObject(cj_k3_low_unit3) (3)
    CreateDynamicObject(2638,1848.80004883,-1739.19995117,5209.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(cj_pizza_chair2) (1)
    CreateDynamicObject(2638,1852.00000000,-1739.19995117,5209.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(cj_pizza_chair2) (2)
    CreateDynamicObject(2638,1852.00000000,-1744.19995117,5209.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(cj_pizza_chair2) (3)
    CreateDynamicObject(2638,1848.80004883,-1744.19995117,5209.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(cj_pizza_chair2) (4)
    CreateDynamicObject(2638,1848.90002441,-1749.19995117,5209.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(cj_pizza_chair2) (5)
    CreateDynamicObject(2638,1852.00000000,-1749.30004883,5209.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(cj_pizza_chair2) (6)
    CreateDynamicObject(2638,1855.09997559,-1749.40002441,5209.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(cj_pizza_chair2) (7)
    CreateDynamicObject(2638,1858.30004883,-1749.40002441,5209.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(cj_pizza_chair2) (8)
    CreateDynamicObject(2638,1861.40002441,-1749.40002441,5209.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(cj_pizza_chair2) (9)
    CreateDynamicObject(2638,1864.59997559,-1749.40002441,5209.29980469,0.00000000,0.00000000,270.00000000); //DynamicObject(cj_pizza_chair2) (10)
    CreateDynamicObject(2639,1867.40002441,-1749.40002441,5209.20019531,0.00000000,0.00000000,90.00000000); //DynamicObject(cj_pizza_chair3) (1)
    CreateDynamicObject(2639,1846.00000000,-1744.19995117,5209.20019531,0.00000000,0.00000000,270.00000000); //DynamicObject(cj_pizza_chair3) (2)
    CreateDynamicObject(2639,1854.90002441,-1739.30004883,5209.20019531,0.00000000,0.00000000,90.00000000); //DynamicObject(cj_pizza_chair3) (3)
    CreateDynamicObject(2639,1845.90002441,-1739.09997559,5209.20019531,0.00000000,0.00000000,270.00000000); //DynamicObject(cj_pizza_chair3) (4)
    CreateDynamicObject(2639,1854.79980469,-1744.19921875,5209.20019531,0.00000000,0.00000000,90.00000000); //DynamicObject(cj_pizza_chair3) (5)
    CreateDynamicObject(2639,1864.90002441,-1745.40002441,5209.20019531,0.00000000,0.00000000,270.00000000); //DynamicObject(cj_pizza_chair3) (6)
    CreateDynamicObject(18059,1872.40002441,-1745.40002441,5209.10009766,0.00000000,0.00000000,0.00000000); //DynamicObject(tables) (7)
    CreateDynamicObject(18059,1872.40002441,-1741.09997559,5209.10009766,0.00000000,0.00000000,0.00000000); //DynamicObject(tables) (6)
    CreateDynamicObject(19460,1868.00000000,-1752.09997559,5210.29980469,0.00000000,0.00000000,179.99450684); //DynamicObject(cs_mntdetail01) (40)
    CreateDynamicObject(2639,1867.40002441,-1745.40002441,5209.20019531,0.00000000,0.00000000,90.00000000); //DynamicObject(cj_pizza_chair3) (7)
    CreateDynamicObject(2639,1867.40002441,-1741.19995117,5209.20019531,0.00000000,0.00000000,90.00000000); //DynamicObject(cj_pizza_chair3) (8)
    CreateDynamicObject(2639,1845.89941406,-1749.09960938,5209.20019531,0.00000000,0.00000000,270.00000000); //DynamicObject(cj_pizza_chair3) (9)
    CreateDynamicObject(2639,1864.90002441,-1741.09997559,5209.20019531,0.00000000,0.00000000,270.00000000); //DynamicObject(cj_pizza_chair3) (10)
    CreateDynamicObject(2357,1853.69995117,-1730.69995117,5205.60009766,0.00000000,0.00000000,0.00000000); //DynamicObject(dunc_dinning) (1)
    CreateDynamicObject(2120,1855.09997559,-1731.80004883,5205.79980469,0.00000000,0.00000000,270.00000000); //DynamicObject(med_din_chair_4) (1)
    CreateDynamicObject(2120,1854.19995117,-1731.80004883,5205.79980469,0.00000000,0.00000000,270.00000000); //DynamicObject(med_din_chair_4) (2)
    CreateDynamicObject(2120,1853.30004883,-1731.80004883,5205.79980469,0.00000000,0.00000000,270.00000000); //DynamicObject(med_din_chair_4) (3)
    CreateDynamicObject(2120,1852.40002441,-1731.80004883,5205.79980469,0.00000000,0.00000000,270.00000000); //DynamicObject(med_din_chair_4) (4)
    CreateDynamicObject(2120,1852.40002441,-1729.59997559,5205.79980469,0.00000000,0.00000000,90.00000000); //DynamicObject(med_din_chair_4) (5)
    CreateDynamicObject(2120,1853.30004883,-1729.59997559,5205.79980469,0.00000000,0.00000000,90.00000000); //DynamicObject(med_din_chair_4) (6)
    CreateDynamicObject(2120,1854.19995117,-1729.59997559,5205.79980469,0.00000000,0.00000000,90.00000000); //DynamicObject(med_din_chair_4) (7)
    CreateDynamicObject(2120,1855.09997559,-1729.59997559,5205.79980469,0.00000000,0.00000000,90.00000000); //DynamicObject(med_din_chair_4) (8)
    CreateDynamicObject(2441,1869.19995117,-1732.90002441,5208.70019531,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_ff_conter_4) (1)
    CreateDynamicObject(2441,1868.19995117,-1732.90002441,5208.70019531,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_ff_conter_4) (2)
    CreateDynamicObject(2441,1867.19995117,-1732.90002441,5208.70019531,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_ff_conter_4) (3)
    CreateDynamicObject(2441,1866.19995117,-1732.90002441,5208.70019531,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_ff_conter_4) (4)
    CreateDynamicObject(2441,1865.19995117,-1732.90002441,5208.70019531,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_ff_conter_4) (5)
    CreateDynamicObject(2441,1864.19995117,-1732.90002441,5208.70019531,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_ff_conter_4) (6)
    CreateDynamicObject(2441,1863.19995117,-1732.90002441,5208.70019531,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_ff_conter_4) (7)
    CreateDynamicObject(2441,1862.19995117,-1732.90002441,5208.70019531,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_ff_conter_4) (8)
    CreateDynamicObject(2441,1861.19995117,-1732.90002441,5208.70019531,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_ff_conter_4) (9)
    CreateDynamicObject(2441,1860.19921875,-1732.89941406,5208.70019531,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_ff_conter_4) (11)
    CreateDynamicObject(2441,1859.19995117,-1732.90002441,5208.70019531,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_ff_conter_4) (12)
    CreateDynamicObject(2441,1858.19995117,-1732.90002441,5208.70019531,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_ff_conter_4) (13)
    CreateDynamicObject(2441,1857.19995117,-1732.90002441,5208.70019531,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_ff_conter_4) (14)
    CreateDynamicObject(2441,1856.30004883,-1732.90002441,5212.29980469,0.00000000,180.00000000,0.00000000); //DynamicObject(cj_ff_conter_4) (15)
    CreateDynamicObject(19368,1854.18395996,-1735.19995117,5210.29980469,0.00000000,0.00000000,89.99450684); //DynamicObject(sboxbld4_sfw84) (50)
    CreateDynamicObject(2441,1856.19921875,-1732.89941406,5208.70019531,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_ff_conter_4) (17)
    CreateDynamicObject(2441,1857.30004883,-1732.90002441,5212.29980469,0.00000000,179.99450684,0.00000000); //DynamicObject(cj_ff_conter_4) (18)
    CreateDynamicObject(2441,1858.30004883,-1732.90002441,5212.29980469,0.00000000,179.99450684,0.00000000); //DynamicObject(cj_ff_conter_4) (19)
    CreateDynamicObject(2441,1859.30004883,-1732.90002441,5212.29980469,0.00000000,179.99450684,0.00000000); //DynamicObject(cj_ff_conter_4) (20)
    CreateDynamicObject(2441,1860.30004883,-1732.90002441,5212.29980469,0.00000000,179.99450684,0.00000000); //DynamicObject(cj_ff_conter_4) (21)
    CreateDynamicObject(2441,1861.30004883,-1732.90002441,5212.29980469,0.00000000,179.99450684,0.00000000); //DynamicObject(cj_ff_conter_4) (22)
    CreateDynamicObject(2441,1862.30004883,-1732.90002441,5212.29980469,0.00000000,179.99450684,0.00000000); //DynamicObject(cj_ff_conter_4) (23)
    CreateDynamicObject(2441,1863.30004883,-1732.90002441,5212.29980469,0.00000000,179.99450684,0.00000000); //DynamicObject(cj_ff_conter_4) (24)
    CreateDynamicObject(2441,1864.30004883,-1732.90002441,5212.29980469,0.00000000,179.99450684,0.00000000); //DynamicObject(cj_ff_conter_4) (25)
    CreateDynamicObject(2441,1865.30004883,-1732.90002441,5212.29980469,0.00000000,179.99450684,0.00000000); //DynamicObject(cj_ff_conter_4) (26)
    CreateDynamicObject(2441,1866.30004883,-1732.90002441,5212.29980469,0.00000000,179.99450684,0.00000000); //DynamicObject(cj_ff_conter_4) (27)
    CreateDynamicObject(2441,1867.30004883,-1732.90002441,5212.29980469,0.00000000,179.99450684,0.00000000); //DynamicObject(cj_ff_conter_4) (28)
    CreateDynamicObject(2441,1868.30004883,-1732.90002441,5212.29980469,0.00000000,179.99450684,0.00000000); //DynamicObject(cj_ff_conter_4) (29)
    CreateDynamicObject(2441,1869.30004883,-1732.90002441,5212.29980469,0.00000000,179.99450684,0.00000000); //DynamicObject(cj_ff_conter_4) (30)
    fence32 = CreateDynamicObject(19304,1836.19921875,-1726.89941406,5209.29980469,0.00000000,0.00000000,0.00000000); //DynamicObject(vgstwires22_lvs) (19)
    fence33 = CreateDynamicObject(19304,1864.50000000,-1733.09997559,5210.70019531,0.00000000,0.00000000,0.00000000); //DynamicObject(vgstwires22_lvs) (19)
    fence34 = CreateDynamicObject(19304,1861.00000000,-1733.09997559,5210.70019531,0.00000000,0.00000000,0.00000000); //DynamicObject(vgstwires22_lvs) (19)
    fence35 = CreateDynamicObject(19304,1857.50000000,-1733.09997559,5210.70019531,0.00000000,0.00000000,0.00000000); //DynamicObject(vgstwires22_lvs) (19)
    CreateDynamicObject(2137,1856.30004883,-1728.09997559,5208.70019531,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_k3_low_unit3) (2)
    CreateDynamicObject(2140,1858.23999023,-1728.09997559,5208.70019531,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_k3_tall_unit1) (1)
    CreateDynamicObject(2137,1857.27001953,-1728.09997559,5208.70019531,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_k3_low_unit3) (2)
    CreateDynamicObject(2140,1859.19995117,-1728.09997559,5208.70019531,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_k3_tall_unit1) (1)
    CreateDynamicObject(2136,1860.19995117,-1728.09997559,5208.70019531,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_k3_sink) (1)
    CreateDynamicObject(2135,1864.09997559,-1728.09997559,5208.70019531,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_k3_cooker) (1)
    CreateDynamicObject(2137,1862.16003418,-1728.10705566,5208.70019531,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_k3_low_unit3) (2)
    CreateDynamicObject(2137,1863.11999512,-1728.10705566,5208.70019531,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_k3_low_unit3) (2)
    CreateDynamicObject(2627,1865.19995117,-1742.90002441,5205.10009766,0.00000000,0.00000000,0.00000000); //DynamicObject(gym_treadmill) (1)
    CreateDynamicObject(2627,1863.90002441,-1742.90002441,5205.10009766,0.00000000,0.00000000,0.00000000); //DynamicObject(gym_treadmill) (2)
    CreateDynamicObject(2627,1862.59997559,-1742.90002441,5205.10009766,0.00000000,0.00000000,0.00000000); //DynamicObject(gym_treadmill) (3)
    CreateDynamicObject(2628,1864.90002441,-1749.50000000,5205.10009766,0.00000000,0.00000000,230.00000000); //DynamicObject(gym_bench2) (1)
    CreateDynamicObject(2628,1863.19995117,-1749.90002441,5205.10009766,0.00000000,0.00000000,229.99877930); //DynamicObject(gym_bench2) (2)
    CreateDynamicObject(2630,1858.80004883,-1749.90002441,5205.10009766,0.00000000,0.00000000,150.00000000); //DynamicObject(gym_bike) (1)
    CreateDynamicObject(2630,1857.40002441,-1749.69995117,5205.10009766,0.00000000,0.00000000,149.99633789); //DynamicObject(gym_bike) (2)
    CreateDynamicObject(2630,1859.09997559,-1747.80004883,5205.10009766,0.00000000,0.00000000,149.99633789); //DynamicObject(gym_bike) (3)
    CreateDynamicObject(2416,1863.09997559,-1730.50000000,5208.70019531,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_ff_disp) (1)
    CreateDynamicObject(2416,1860.80004883,-1730.50000000,5208.70019531,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_ff_disp) (2)
    CreateDynamicObject(2451,1865.40002441,-1728.19995117,5208.70019531,0.00000000,0.00000000,0.00000000); //DynamicObject(cj_ff_worktop_3) (1)
    CreateDynamicObject(1330,1869.09997559,-1737.09997559,5209.20019531,0.00000000,0.00000000,0.00000000); //DynamicObject(binnt14_la) (1)
    CreateDynamicObject(1330,1861.00000000,-1742.19995117,5209.20019531,0.00000000,0.00000000,0.00000000); //DynamicObject(binnt14_la) (2)
    CreateDynamicObject(2994,1859.09997559,-1744.09997559,5209.20019531,0.00000000,0.00000000,0.00000000); //DynamicObject(kmb_trolley) (2)
    CreateDynamicObject(2994,1859.09997559,-1742.59997559,5209.20019531,0.00000000,0.00000000,0.00000000); //DynamicObject(kmb_trolley) (3)
    CreateDynamicObject(14401,1857.80004883,-1760.59997559,5205.39990234,0.00000000,0.00000000,359.99450684); //DynamicObject(bench1) (4)
    CreateDynamicObject(14401,1857.80004883,-1762.50000000,5205.39990234,0.00000000,0.00000000,359.98901367); //DynamicObject(bench1) (4)
    CreateDynamicObject(2700,1849.30004883,-1750.59997559,5207.29980469,0.00000000,0.00000000,90.00000000); //DynamicObject(cj_sex_tv2) (1)
    CreateDynamicObject(1811,1848.80004883,-1708.69995117,5202.20019531,0.00000000,0.00000000,270.00000000); //DynamicObject(med_din_chair_5) (5)
    CreateDynamicObject(1811,1851.40002441,-1708.69995117,5202.20019531,0.00000000,0.00000000,270.00000000); //DynamicObject(med_din_chair_5) (5)
    CreateDynamicObject(1811,1854.00000000,-1708.69995117,5202.20019531,0.00000000,0.00000000,270.00000000); //DynamicObject(med_din_chair_5) (5)
    CreateDynamicObject(1811,1856.59997559,-1708.80004883,5202.20019531,0.00000000,0.00000000,270.00000000); //DynamicObject(med_din_chair_5) (5)
    CreateDynamicObject(19435,1856.00000000,-1707.40002441,5202.60009766,0.00000000,90.00000000,0.00000000); //DynamicObject(cs_landbit_58_a) (1)
    CreateDynamicObject(19435,1852.50000000,-1707.40002441,5202.60009766,0.00000000,90.00000000,0.00000000); //DynamicObject(cs_landbit_58_a) (1)
    CreateDynamicObject(19435,1849.00000000,-1707.40002441,5202.60009766,0.00000000,90.00000000,0.00000000); //DynamicObject(cs_landbit_58_a) (1)
    CreateDynamicObject(1800,1842.69995117,-1711.30004883,5201.60009766,0.00000000,0.00000000,0.00000000); //DynamicObject(low_bed_1) (1)
    CreateDynamicObject(1800,1839.50000000,-1711.30004883,5201.60009766,0.00000000,0.00000000,0.00000000); //DynamicObject(low_bed_1) (2)
    CreateDynamicObject(1800,1836.40002441,-1711.19995117,5201.60009766,0.00000000,0.00000000,0.00000000); //DynamicObject(low_bed_1) (3)
    CreateDynamicObject(1800,1833.09997559,-1711.19995117,5201.60009766,0.00000000,0.00000000,0.00000000); //DynamicObject(low_bed_1) (4)
    CreateDynamicObject(1800,1829.90002441,-1711.19995117,5201.60009766,0.00000000,0.00000000,0.00000000); //DynamicObject(low_bed_1) (5)
    CreateDynamicObject(1800,1826.69995117,-1711.19995117,5201.60009766,0.00000000,0.00000000,0.00000000); //DynamicObject(low_bed_1) (6)
    CreateDynamicObject(1800,1826.69995117,-1711.19995117,5205.20019531,0.00000000,0.00000000,0.00000000); //DynamicObject(low_bed_1) (7)
    CreateDynamicObject(1800,1829.90002441,-1711.19995117,5205.20019531,0.00000000,0.00000000,0.00000000); //DynamicObject(low_bed_1) (8)
    CreateDynamicObject(1800,1833.09997559,-1711.19995117,5205.20019531,0.00000000,0.00000000,0.00000000); //DynamicObject(low_bed_1) (9)
    CreateDynamicObject(1800,1836.30004883,-1711.19995117,5205.20019531,0.00000000,0.00000000,0.00000000); //DynamicObject(low_bed_1) (10)
    CreateDynamicObject(1800,1839.50000000,-1711.19995117,5205.20019531,0.00000000,0.00000000,0.00000000); //DynamicObject(low_bed_1) (11)
    CreateDynamicObject(1800,1842.69995117,-1711.19995117,5205.20019531,0.00000000,0.00000000,0.00000000); //DynamicObject(low_bed_1) (12)
    CreateDynamicObject(1800,1842.69995117,-1711.19995117,5208.70019531,0.00000000,0.00000000,0.00000000); //DynamicObject(low_bed_1) (13)
    CreateDynamicObject(1800,1839.50000000,-1711.30004883,5208.70019531,0.00000000,0.00000000,0.00000000); //DynamicObject(low_bed_1) (14)
    CreateDynamicObject(1800,1836.30004883,-1711.19995117,5208.70019531,0.00000000,0.00000000,0.00000000); //DynamicObject(low_bed_1) (15)
    CreateDynamicObject(1800,1833.09997559,-1711.19995117,5208.70019531,0.00000000,0.00000000,0.00000000); //DynamicObject(low_bed_1) (16)
    CreateDynamicObject(1800,1829.90002441,-1711.19995117,5208.70019531,0.00000000,0.00000000,0.00000000); //DynamicObject(low_bed_1) (17)
    CreateDynamicObject(1800,1826.69995117,-1711.19995117,5208.70019531,0.00000000,0.00000000,0.00000000); //DynamicObject(low_bed_1) (18)
    CreateDynamicObject(1800,1826.69995117,-1737.00000000,5208.70019531,0.00000000,0.00000000,0.00000000); //DynamicObject(low_bed_1) (19)
    CreateDynamicObject(1800,1829.90002441,-1737.00000000,5208.70019531,0.00000000,0.00000000,0.00000000); //DynamicObject(low_bed_1) (20)
    CreateDynamicObject(1800,1833.09997559,-1737.00000000,5208.70019531,0.00000000,0.00000000,0.00000000); //DynamicObject(low_bed_1) (21)
    CreateDynamicObject(1800,1836.30004883,-1737.00000000,5208.70019531,0.00000000,0.00000000,0.00000000); //DynamicObject(low_bed_1) (22)
    CreateDynamicObject(1800,1839.50000000,-1737.00000000,5208.70019531,0.00000000,0.00000000,0.00000000); //DynamicObject(low_bed_1) (23)
    CreateDynamicObject(1800,1842.69995117,-1737.00000000,5208.70019531,0.00000000,0.00000000,0.00000000); //DynamicObject(low_bed_1) (24)
    CreateDynamicObject(1800,1842.69995117,-1737.00000000,5205.20019531,0.00000000,0.00000000,0.00000000); //DynamicObject(low_bed_1) (25)
    CreateDynamicObject(1800,1839.50000000,-1737.00000000,5205.20019531,0.00000000,0.00000000,0.00000000); //DynamicObject(low_bed_1) (26)
    CreateDynamicObject(1800,1836.30004883,-1737.00000000,5205.20019531,0.00000000,0.00000000,0.00000000); //DynamicObject(low_bed_1) (27)
    CreateDynamicObject(1800,1833.09997559,-1737.00000000,5205.20019531,0.00000000,0.00000000,0.00000000); //DynamicObject(low_bed_1) (28)
    CreateDynamicObject(1800,1829.90002441,-1737.00000000,5205.20019531,0.00000000,0.00000000,0.00000000); //DynamicObject(low_bed_1) (29)
    CreateDynamicObject(1800,1826.69995117,-1737.00000000,5205.20019531,0.00000000,0.00000000,0.00000000); //DynamicObject(low_bed_1) (30)
    CreateDynamicObject(1800,1826.69995117,-1737.00000000,5201.60009766,0.00000000,0.00000000,0.00000000); //DynamicObject(low_bed_1) (31)
    CreateDynamicObject(1800,1829.90002441,-1737.00000000,5201.60009766,0.00000000,0.00000000,0.00000000); //DynamicObject(low_bed_1) (32)
    CreateDynamicObject(1800,1833.09997559,-1737.00000000,5201.60009766,0.00000000,0.00000000,0.00000000); //DynamicObject(low_bed_1) (33)
    CreateDynamicObject(1800,1836.30004883,-1737.00000000,5201.60009766,0.00000000,0.00000000,0.00000000); //DynamicObject(low_bed_1) (34)
    CreateDynamicObject(1800,1839.50000000,-1737.00000000,5201.60009766,0.00000000,0.00000000,0.00000000); //DynamicObject(low_bed_1) (35)
    CreateDynamicObject(1800,1842.69995117,-1737.00000000,5201.60009766,0.00000000,0.00000000,0.00000000); //DynamicObject(low_bed_1) (36)
    CreateDynamicObject(2000,1826.69995117,-1711.30004883,5208.70019531,0.00000000,0.00000000,90.00000000); //DynamicObject(filing_cab_nu) (1)
    CreateDynamicObject(2000,1829.90002441,-1711.40002441,5208.70019531,0.00000000,0.00000000,90.00000000); //DynamicObject(filing_cab_nu) (2)
    CreateDynamicObject(2000,1833.09997559,-1711.40002441,5208.70019531,0.00000000,0.00000000,90.00000000); //DynamicObject(filing_cab_nu) (3)
    CreateDynamicObject(2000,1836.30004883,-1711.40002441,5208.70019531,0.00000000,0.00000000,90.00000000); //DynamicObject(filing_cab_nu) (4)
    CreateDynamicObject(2000,1839.50000000,-1711.40002441,5208.70019531,0.00000000,0.00000000,90.00000000); //DynamicObject(filing_cab_nu) (5)
    CreateDynamicObject(2000,1842.69995117,-1711.40002441,5208.70019531,0.00000000,0.00000000,90.00000000); //DynamicObject(filing_cab_nu) (6)
    CreateDynamicObject(2000,1842.69995117,-1711.40002441,5205.20019531,0.00000000,0.00000000,90.00000000); //DynamicObject(filing_cab_nu) (7)
    CreateDynamicObject(2000,1839.50000000,-1711.40002441,5205.20019531,0.00000000,0.00000000,90.00000000); //DynamicObject(filing_cab_nu) (8)
    CreateDynamicObject(2000,1836.30004883,-1711.40002441,5205.20019531,0.00000000,0.00000000,90.00000000); //DynamicObject(filing_cab_nu) (9)
    CreateDynamicObject(2000,1833.09997559,-1711.40002441,5205.20019531,0.00000000,0.00000000,90.00000000); //DynamicObject(filing_cab_nu) (10)
    CreateDynamicObject(2000,1829.90002441,-1711.40002441,5205.20019531,0.00000000,0.00000000,90.00000000); //DynamicObject(filing_cab_nu) (11)
    CreateDynamicObject(2000,1826.69995117,-1711.40002441,5205.20019531,0.00000000,0.00000000,90.00000000); //DynamicObject(filing_cab_nu) (12)
    CreateDynamicObject(2000,1826.69995117,-1711.40002441,5201.60009766,0.00000000,0.00000000,90.00000000); //DynamicObject(filing_cab_nu) (13)
    CreateDynamicObject(2000,1829.90002441,-1711.50000000,5201.60009766,0.00000000,0.00000000,90.00000000); //DynamicObject(filing_cab_nu) (14)
    CreateDynamicObject(2000,1833.09997559,-1711.59997559,5201.60009766,0.00000000,0.00000000,90.00000000); //DynamicObject(filing_cab_nu) (15)
    CreateDynamicObject(2000,1836.40002441,-1711.69995117,5201.60009766,0.00000000,0.00000000,90.00000000); //DynamicObject(filing_cab_nu) (16)
    CreateDynamicObject(2000,1839.50000000,-1711.80004883,5201.60009766,0.00000000,0.00000000,90.00000000); //DynamicObject(filing_cab_nu) (17)
    CreateDynamicObject(2000,1842.69995117,-1732.19995117,5201.60009766,0.00000000,0.00000000,90.00000000); //DynamicObject(filing_cab_nu) (18)
    CreateDynamicObject(2000,1842.69921875,-1711.89941406,5201.60009766,0.00000000,0.00000000,90.00000000); //DynamicObject(filing_cab_nu) (19)
    CreateDynamicObject(2000,1839.50000000,-1732.09997559,5201.60009766,0.00000000,0.00000000,90.00000000); //DynamicObject(filing_cab_nu) (20)
    CreateDynamicObject(2000,1836.30004883,-1732.09997559,5201.60009766,0.00000000,0.00000000,90.00000000); //DynamicObject(filing_cab_nu) (21)
    CreateDynamicObject(2000,1833.09997559,-1732.09997559,5201.60009766,0.00000000,0.00000000,90.00000000); //DynamicObject(filing_cab_nu) (22)
    CreateDynamicObject(2000,1829.90002441,-1732.09997559,5201.60009766,0.00000000,0.00000000,90.00000000); //DynamicObject(filing_cab_nu) (23)
    CreateDynamicObject(2000,1826.69995117,-1732.09997559,5201.60009766,0.00000000,0.00000000,90.00000000); //DynamicObject(filing_cab_nu) (24)
    CreateDynamicObject(2000,1826.69995117,-1732.09997559,5205.20019531,0.00000000,0.00000000,90.00000000); //DynamicObject(filing_cab_nu) (25)
    CreateDynamicObject(2000,1829.90002441,-1732.09997559,5205.20019531,0.00000000,0.00000000,90.00000000); //DynamicObject(filing_cab_nu) (26)
    CreateDynamicObject(2000,1833.09997559,-1732.00000000,5205.20019531,0.00000000,0.00000000,90.00000000); //DynamicObject(filing_cab_nu) (27)
    CreateDynamicObject(2000,1836.30004883,-1732.00000000,5205.20019531,0.00000000,0.00000000,90.00000000); //DynamicObject(filing_cab_nu) (28)
    CreateDynamicObject(2000,1839.50000000,-1732.00000000,5205.20019531,0.00000000,0.00000000,90.00000000); //DynamicObject(filing_cab_nu) (29)
    CreateDynamicObject(2000,1842.69995117,-1732.00000000,5205.20019531,0.00000000,0.00000000,90.00000000); //DynamicObject(filing_cab_nu) (30)
    CreateDynamicObject(2000,1842.69995117,-1732.00000000,5208.70019531,0.00000000,0.00000000,90.00000000); //DynamicObject(filing_cab_nu) (32)
    CreateDynamicObject(2000,1839.50000000,-1732.00000000,5208.70019531,0.00000000,0.00000000,90.00000000); //DynamicObject(filing_cab_nu) (33)
    CreateDynamicObject(2000,1836.30004883,-1732.00000000,5208.70019531,0.00000000,0.00000000,90.00000000); //DynamicObject(filing_cab_nu) (34)
    CreateDynamicObject(2000,1833.09997559,-1732.00000000,5208.70019531,0.00000000,0.00000000,90.00000000); //DynamicObject(filing_cab_nu) (35)
    CreateDynamicObject(2000,1829.90002441,-1732.00000000,5208.70019531,0.00000000,0.00000000,90.00000000); //DynamicObject(filing_cab_nu) (36)
    CreateDynamicObject(2000,1826.69995117,-1732.00000000,5208.70019531,0.00000000,0.00000000,90.00000000); //DynamicObject(filing_cab_nu) (37)
    CreateDynamicObject(1886,1857.40002441,-1713.69995117,5205.10009766,9.75000000,0.00000000,220.50000000); //DynamicObject(shop_sec_cam) (1)
    CreateDynamicObject(1886,1858.39941406,-1698.79980469,5205.00000000,9.74487305,0.00000000,20.49499512); //DynamicObject(shop_sec_cam) (2)
    CreateDynamicObject(1886,1848.00000000,-1701.79980469,5205.10009766,9.74487305,0.00000000,20.49499512); //DynamicObject(shop_sec_cam) (3)
    CreateDynamicObject(1886,1852.59997559,-1715.00000000,5205.00000000,9.74487305,0.00000000,320.49560547); //DynamicObject(shop_sec_cam) (4)
    CreateDynamicObject(1886,1865.69995117,-1723.09997559,5205.10009766,9.74487305,0.00000000,270.49316406); //DynamicObject(shop_sec_cam) (5)
    CreateDynamicObject(1886,1846.59997559,-1728.69995117,5205.00000000,13.99490356,0.00000000,236.48889160); //DynamicObject(shop_sec_cam) (6)
    CreateDynamicObject(1886,1846.59997559,-1728.69995117,5208.50000000,13.99108887,0.00000000,236.48620605); //DynamicObject(shop_sec_cam) (8)
    CreateDynamicObject(1886,1846.59997559,-1728.69995117,5212.10009766,13.99108887,0.00000000,236.48620605); //DynamicObject(shop_sec_cam) (9)
    CreateDynamicObject(1886,1865.40002441,-1742.30004883,5208.60009766,13.99108887,0.00000000,308.73620605); //DynamicObject(shop_sec_cam) (10)
    CreateDynamicObject(1886,1846.19921875,-1750.39941406,5208.60009766,13.99108887,0.00000000,128.73229980); //DynamicObject(shop_sec_cam) (11)
    CreateDynamicObject(1886,1869.09997559,-1733.80004883,5212.20019531,13.99108887,0.00000000,294.73229980); //DynamicObject(shop_sec_cam) (12)
    CreateDynamicObject(1886,1866.79980469,-1742.19921875,5208.60009766,13.99108887,0.00000000,46.73034668); //DynamicObject(shop_sec_cam) (13)
    CreateDynamicObject(1886,1867.50000000,-1750.59997559,5212.10009766,13.99108887,0.00000000,224.73022461); //DynamicObject(shop_sec_cam) (14)
    CreateDynamicObject(1886,1845.80004883,-1750.59997559,5212.20019531,13.99108887,0.00000000,146.72534180); //DynamicObject(shop_sec_cam) (15)

    //Doors
    door1 = CreateDynamicObject(1495,1849.32995605,-1714.31005859,5201.54003906,0.00000000,0.00000000,0.00000000); //DynamicObject(gen_doorext01) (2)
    door2 = CreateDynamicObject(1495,1847.31994629,-1722.56994629,5201.54003906,0.00000000,0.00000000,90.00000000); //DynamicObject(gen_doorext01) (3)
    door3 = CreateDynamicObject(1495,1854.01953125,-1726.27343750,5201.54003906,0.00000000,0.00000000,90.00000000); //DynamicObject(gen_doorext01) (4)
    door4 = CreateDynamicObject(1495,1862.02246094,-1710.91992188,5201.54003906,0.00000000,0.00000000,0.00000000); //DynamicObject(gen_doorext01) (4)

    //Cells
    cell0 = CreateDynamicObject(19303,1827.80004883,-1729.19995117,5202.79980469,0.00000000,0.00000000,0.00000000); //DynamicObject(vgstwires21_lvs) (1)
    cell1 = CreateDynamicObject(19303,1831.00000000,-1729.19995117,5202.79980469,0.00000000,0.00000000,0.00000000); //DynamicObject(vgstwires21_lvs) (2)
    cell2 = CreateDynamicObject(19303,1834.19995117,-1729.19995117,5202.79980469,0.00000000,0.00000000,0.00000000); //DynamicObject(vgstwires21_lvs) (3)
    cell3 = CreateDynamicObject(19303,1837.40002441,-1729.19995117,5202.79980469,0.00000000,0.00000000,0.00000000); //DynamicObject(vgstwires21_lvs) (4)
    cell4 = CreateDynamicObject(19303,1840.59997559,-1729.19995117,5202.79980469,0.00000000,0.00000000,0.00000000); //DynamicObject(vgstwires21_lvs) (5)
    cell5 = CreateDynamicObject(19303,1827.80004883,-1729.19995117,5206.39990234,0.00000000,0.00000000,0.00000000); //DynamicObject(vgstwires21_lvs) (6)
    cell6 = CreateDynamicObject(19303,1831.00000000,-1729.19995117,5206.39990234,0.00000000,0.00000000,0.00000000); //DynamicObject(vgstwires21_lvs) (7)
    cell7 = CreateDynamicObject(19303,1834.19995117,-1729.19995117,5206.39990234,0.00000000,0.00000000,0.00000000); //DynamicObject(vgstwires21_lvs) (8)
    cell8 = CreateDynamicObject(19303,1837.40002441,-1729.19995117,5206.39990234,0.00000000,0.00000000,0.00000000); //DynamicObject(vgstwires21_lvs) (9)
    cell9 = CreateDynamicObject(19303,1840.59997559,-1729.19995117,5206.39990234,0.00000000,0.00000000,0.00000000); //DynamicObject(vgstwires21_lvs) (10)
    cell10 = CreateDynamicObject(19303,1843.80004883,-1729.19995117,5206.39990234,0.00000000,0.00000000,0.00000000); //DynamicObject(vgstwires21_lvs) (11)
    cell11 = CreateDynamicObject(19303,1843.80004883,-1729.19995117,5202.79980469,0.00000000,0.00000000,0.00000000); //DynamicObject(vgstwires21_lvs) (12)
    cell12 = CreateDynamicObject(19303,1843.80004883,-1729.19995117,5209.89990234,0.00000000,0.00000000,0.00000000); //DynamicObject(vgstwires21_lvs) (13)
    cell13 = CreateDynamicObject(19303,1840.59997559,-1729.19995117,5209.89990234,0.00000000,0.00000000,0.00000000); //DynamicObject(vgstwires21_lvs) (14)
    cell14 = CreateDynamicObject(19303,1837.40002441,-1729.19995117,5209.89990234,0.00000000,0.00000000,0.00000000); //DynamicObject(vgstwires21_lvs) (15)
    cell15 = CreateDynamicObject(19303,1834.19995117,-1729.19995117,5209.89990234,0.00000000,0.00000000,0.00000000); //DynamicObject(vgstwires21_lvs) (16)
    cell16 = CreateDynamicObject(19303,1831.00000000,-1729.19995117,5209.89990234,0.00000000,0.00000000,0.00000000); //DynamicObject(vgstwires21_lvs) (17)
    cell17 = CreateDynamicObject(19303,1827.80004883,-1729.19995117,5209.89990234,0.00000000,0.00000000,0.00000000); //DynamicObject(vgstwires21_lvs) (18)
    cell18 = CreateDynamicObject(19303,1827.80004883,-1714.30004883,5202.79980469,0.00000000,0.00000000,0.00000000); //DynamicObject(vgstwires21_lvs) (1)
    cell19 = CreateDynamicObject(19303,1831.00000000,-1714.30004883,5202.79980469,0.00000000,0.00000000,0.00000000); //DynamicObject(vgstwires21_lvs) (1)
    cell20 = CreateDynamicObject(19303,1834.19995117,-1714.30004883,5202.79980469,0.00000000,0.00000000,0.00000000); //DynamicObject(vgstwires21_lvs) (1)
    cell21 = CreateDynamicObject(19303,1837.40002441,-1714.30004883,5202.79980469,0.00000000,0.00000000,0.00000000); //DynamicObject(vgstwires21_lvs) (1)
    cell22 = CreateDynamicObject(19303,1840.59997559,-1714.30004883,5202.79980469,0.00000000,0.00000000,0.00000000); //DynamicObject(vgstwires21_lvs) (1)
    cell23 = CreateDynamicObject(19303,1843.80004883,-1714.30004883,5202.79980469,0.00000000,0.00000000,0.00000000); //DynamicObject(vgstwires21_lvs) (1)
    cell24 = CreateDynamicObject(19303,1843.80004883,-1714.30004883,5206.39990234,0.00000000,0.00000000,0.00000000); //DynamicObject(vgstwires21_lvs) (1)
    cell25 = CreateDynamicObject(19303,1840.59997559,-1714.30004883,5206.39990234,0.00000000,0.00000000,0.00000000); //DynamicObject(vgstwires21_lvs) (1)
    cell26 = CreateDynamicObject(19303,1837.40002441,-1714.30004883,5206.39990234,0.00000000,0.00000000,0.00000000); //DynamicObject(vgstwires21_lvs) (1)
    cell27 = CreateDynamicObject(19303,1834.19995117,-1714.30004883,5206.39990234,0.00000000,0.00000000,0.00000000); //DynamicObject(vgstwires21_lvs) (1)
    cell28 = CreateDynamicObject(19303,1831.00000000,-1714.30004883,5206.39990234,0.00000000,0.00000000,0.00000000); //DynamicObject(vgstwires21_lvs) (1)
    cell29 = CreateDynamicObject(19303,1827.80004883,-1714.30004883,5206.39990234,0.00000000,0.00000000,0.00000000); //DynamicObject(vgstwires21_lvs) (1)
    cell30 = CreateDynamicObject(19303,1827.80004883,-1714.30004883,5209.89990234,0.00000000,0.00000000,0.00000000); //DynamicObject(vgstwires21_lvs) (1)
    cell31 = CreateDynamicObject(19303,1831.00000000,-1714.30004883,5209.89990234,0.00000000,0.00000000,0.00000000); //DynamicObject(vgstwires21_lvs) (1)
    cell32 = CreateDynamicObject(19303,1834.19995117,-1714.30004883,5209.89990234,0.00000000,0.00000000,0.00000000); //DynamicObject(vgstwires21_lvs) (1)
    cell33 = CreateDynamicObject(19303,1837.40002441,-1714.30004883,5209.89990234,0.00000000,0.00000000,0.00000000); //DynamicObject(vgstwires21_lvs) (1)
    cell34 = CreateDynamicObject(19303,1840.59997559,-1714.30004883,5209.89990234,0.00000000,0.00000000,0.00000000); //DynamicObject(vgstwires21_lvs) (1)
    cell35 = CreateDynamicObject(19303,1843.80004883,-1714.30004883,5209.89990234,0.00000000,0.00000000,0.00000000); //DynamicObject(vgstwires21_lvs) (1)

    // Prison Cells
    SetDynamicObjectMaterial(cell0, 0, 19303, "pd_jail_door02", "pd_jail_door02", 0xFF000000);
    SetDynamicObjectMaterial(cell1, 0, 19303, "pd_jail_door02", "pd_jail_door02", 0xFF000000);
    SetDynamicObjectMaterial(cell2, 0, 19303, "pd_jail_door02", "pd_jail_door02", 0xFF000000);
    SetDynamicObjectMaterial(cell3, 0, 19303, "pd_jail_door02", "pd_jail_door02", 0xFF000000);
    SetDynamicObjectMaterial(cell4, 0, 19303, "pd_jail_door02", "pd_jail_door02", 0xFF000000);
    SetDynamicObjectMaterial(cell5, 0, 19303, "pd_jail_door02", "pd_jail_door02", 0xFF000000);
    SetDynamicObjectMaterial(cell6, 0, 19303, "pd_jail_door02", "pd_jail_door02", 0xFF000000);
    SetDynamicObjectMaterial(cell7, 0, 19303, "pd_jail_door02", "pd_jail_door02", 0xFF000000);
    SetDynamicObjectMaterial(cell8, 0, 19303, "pd_jail_door02", "pd_jail_door02", 0xFF000000);
    SetDynamicObjectMaterial(cell9, 0, 19303, "pd_jail_door02", "pd_jail_door02", 0xFF000000);
    SetDynamicObjectMaterial(cell10, 0, 19303, "pd_jail_door02", "pd_jail_door02", 0xFF000000);
    SetDynamicObjectMaterial(cell11, 0, 19303, "pd_jail_door02", "pd_jail_door02", 0xFF000000);
    SetDynamicObjectMaterial(cell12, 0, 19303, "pd_jail_door02", "pd_jail_door02", 0xFF000000);
    SetDynamicObjectMaterial(cell13, 0, 19303, "pd_jail_door02", "pd_jail_door02", 0xFF000000);
    SetDynamicObjectMaterial(cell14, 0, 19303, "pd_jail_door02", "pd_jail_door02", 0xFF000000);
    SetDynamicObjectMaterial(cell15, 0, 19303, "pd_jail_door02", "pd_jail_door02", 0xFF000000);
    SetDynamicObjectMaterial(cell16, 0, 19303, "pd_jail_door02", "pd_jail_door02", 0xFF000000);
    SetDynamicObjectMaterial(cell17, 0, 19303, "pd_jail_door02", "pd_jail_door02", 0xFF000000);
    SetDynamicObjectMaterial(cell18, 0, 19303, "pd_jail_door02", "pd_jail_door02", 0xFF000000);
    SetDynamicObjectMaterial(cell19, 0, 19303, "pd_jail_door02", "pd_jail_door02", 0xFF000000);
    SetDynamicObjectMaterial(cell20, 0, 19303, "pd_jail_door02", "pd_jail_door02", 0xFF000000);
    SetDynamicObjectMaterial(cell21, 0, 19303, "pd_jail_door02", "pd_jail_door02", 0xFF000000);
    SetDynamicObjectMaterial(cell22, 0, 19303, "pd_jail_door02", "pd_jail_door02", 0xFF000000);
    SetDynamicObjectMaterial(cell23, 0, 19303, "pd_jail_door02", "pd_jail_door02", 0xFF000000);
    SetDynamicObjectMaterial(cell24, 0, 19303, "pd_jail_door02", "pd_jail_door02", 0xFF000000);
    SetDynamicObjectMaterial(cell25, 0, 19303, "pd_jail_door02", "pd_jail_door02", 0xFF000000);
    SetDynamicObjectMaterial(cell26, 0, 19303, "pd_jail_door02", "pd_jail_door02", 0xFF000000);
    SetDynamicObjectMaterial(cell27, 0, 19303, "pd_jail_door02", "pd_jail_door02", 0xFF000000);
    SetDynamicObjectMaterial(cell28, 0, 19303, "pd_jail_door02", "pd_jail_door02", 0xFF000000);
    SetDynamicObjectMaterial(cell29, 0, 19303, "pd_jail_door02", "pd_jail_door02", 0xFF000000);
    SetDynamicObjectMaterial(cell30, 0, 19303, "pd_jail_door02", "pd_jail_door02", 0xFF000000);
    SetDynamicObjectMaterial(cell31, 0, 19303, "pd_jail_door02", "pd_jail_door02", 0xFF000000);
    SetDynamicObjectMaterial(cell32, 0, 19303, "pd_jail_door02", "pd_jail_door02", 0xFF000000);
    SetDynamicObjectMaterial(cell33, 0, 19303, "pd_jail_door02", "pd_jail_door02", 0xFF000000);
    SetDynamicObjectMaterial(cell34, 0, 19303, "pd_jail_door02", "pd_jail_door02", 0xFF000000);
    SetDynamicObjectMaterial(cell35, 0, 19303, "pd_jail_door02", "pd_jail_door02", 0xFF000000);

    // Prison Fences
    SetDynamicObjectMaterial(fence0, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
    SetDynamicObjectMaterial(fence1, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
    SetDynamicObjectMaterial(fence2, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
    SetDynamicObjectMaterial(fence3, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
    SetDynamicObjectMaterial(fence4, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
    SetDynamicObjectMaterial(fence5, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
    SetDynamicObjectMaterial(fence6, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
    SetDynamicObjectMaterial(fence7, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
    SetDynamicObjectMaterial(fence8, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
    SetDynamicObjectMaterial(fence9, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
    SetDynamicObjectMaterial(fence10, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
    SetDynamicObjectMaterial(fence11, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
    SetDynamicObjectMaterial(fence12, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
    SetDynamicObjectMaterial(fence13, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
    SetDynamicObjectMaterial(fence14, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
    SetDynamicObjectMaterial(fence15, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
    SetDynamicObjectMaterial(fence16, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
    SetDynamicObjectMaterial(fence17, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
    SetDynamicObjectMaterial(fence18, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
    SetDynamicObjectMaterial(fence19, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
    SetDynamicObjectMaterial(fence20, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
    SetDynamicObjectMaterial(fence21, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
    SetDynamicObjectMaterial(fence22, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
    SetDynamicObjectMaterial(fence23, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
    SetDynamicObjectMaterial(fence24, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
    SetDynamicObjectMaterial(fence25, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
    SetDynamicObjectMaterial(fence26, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
    SetDynamicObjectMaterial(fence27, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
    SetDynamicObjectMaterial(fence28, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
    SetDynamicObjectMaterial(fence29, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
    SetDynamicObjectMaterial(fence30, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
    SetDynamicObjectMaterial(fence31, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
    SetDynamicObjectMaterial(fence32, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
    SetDynamicObjectMaterial(fence33, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
    SetDynamicObjectMaterial(fence34, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
    SetDynamicObjectMaterial(fence35, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);

    //Prison Stairs
    SetDynamicObjectMaterial(stair0, 0, 19377, "all_walls", "la_carp3", 0);
    SetDynamicObjectMaterial(stair0, 1, 19377, "all_walls", "la_carp3", 0);
    SetDynamicObjectMaterial(stair1, 0, 19377, "all_walls", "la_carp3", 0);
    SetDynamicObjectMaterial(stair1, 1, 19377, "all_walls", "la_carp3", 0);
    SetDynamicObjectMaterial(stair2, 0, 19377, "all_walls", "la_carp3", 0);
    SetDynamicObjectMaterial(stair2, 1, 19377, "all_walls", "la_carp3", 0);

}

stock IsATaxiCar(vehicleid)
{
	for(new i=0; i < sizeof(TaxiVehicles); i++)
	{
	    if(vehicleid == TaxiVehicles[i])
	        return true;
	}
	return false;
}

stock IsAPizzaBike(vehicleid)
{
	for(new i=0; i < sizeof(PizzaVehicles); i++)
	{
	    if(vehicleid == PizzaVehicles[i])
			return true;
	}
	return false;
}

stock IsADmvCar(vehicleid)
{
	for(new i=0; i < sizeof(DMVVehicles); i++)
	{
	    if(vehicleid == DMVVehicles[i])
			return true;
	}
	return false;
}

stock IsAStreetSweeper(vehicleid)
{
	for(new i=0; i < sizeof(SweeperVehicles); i++)
	{
	    if(vehicleid == SweeperVehicles[i])
			return true;
	}
	return false;
}

stock IsATruckerVehicle(vehicleid)
{
	for(new i=0; i < sizeof(TruckerVehicles); i++)
	{
	    if(vehicleid == TruckerVehicles[i])
			return true;
	}
	return false;
}

stock IsARentableVehicle(vehicleid)
{
	for(new i=0; i < sizeof(RentableVehicles); i++)
	{
	    if(RentableVehicles[i] == vehicleid)
			return true;
	}
	return false;
}

stock WhoRentsVehicle(vehicleid)
{
	foreach (new i: Player)
	{
	    if(GetPVarInt(i, "RentingCar") == vehicleid)
	        return i;
	}
	return INVALID_PLAYER_ID;
}

stock AdminAlert(text[], level)
{
	switch(level)
	{
		case ALERT_GLOBAL:
		{
			SendClientMessageToAllEx(COLOR_LIGHTRED, text);
		}
		
		case ALERT_ADMINS:
		{
		    SendClientMessageToAdmins(text);
		}
	}
	/*new File:log = fopen("logs/admin.log", io_append), message[256];
	format(message, sizeof(message), "%s\n", text);
	fwrite(log, message);
	fclose(log);*/
	Log("logs/admin.log", text);
	return 1;
}

stock SendRadioMessage(faction, color, text[])
{
	foreach (new i: Player)
	{
		if(PlayerInfo[i][pFaction] == faction)
	    {
       		SendClientMessageEx(i, color, text);
		}
	}
}

stock GetAvailableWaypoint()
{
	for (new i=1; i < MAX_WAYPOINTS; i++)
	{
	    if(WaypointInfo[i][wExistant] == 0)
	    {
	        return i;
	    }
	}
	return INVALID_WAYPOINT_ID;
}

stock GetAvailableBusiness()
{
	for (new i=1; i < MAX_BUSINESSES; i++)
	{
	    if(BusinessInfo[i][bExistant] == 0)
	    {
	        return i;
	    }
	}
	return INVALID_BUSINESS_ID;
}

stock GetAvailableHouse()
{
	for (new i=1; i < MAX_HOUSES; i++)
	{
	    if(HouseInfo[i][hExistant] == 0)
	    {
	        return i;
	    }
	}
	return INVALID_HOUSE_ID;
}

stock GetAvailableGate()
{
	for (new i=1; i < MAX_GATES; i++)
	{
	    if(!IsValidDynamicObject(GateInfo[i][gObjectHandle]))
	    {
	        return i;
	    }
	}
	return INVALID_GATE_ID;
}

stock IsInDealershipCar(dealership, vehicleid)
{
	if(dealership == INVALID_DEALERSHIP_ID) return INVALID_VEHICLE_ID;
 	for (new i=0; i < MAX_DEALERSHIP_VEHICLES; i++)
    {
        if(DealershipInfo[dealership][dvHandle][i] == vehicleid) return i;
    }
	return INVALID_VEHICLE_ID;
}

stock GetNearestDealership(playerid)
{
	for (new i=0; i < MAX_CAR_DEALERSHIPS; i++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 30.0, DealershipInfo[i][dPosition][0], DealershipInfo[i][dPosition][1], DealershipInfo[i][dPosition][2]))
	    {
	        return i;
	    }
	}
	return INVALID_DEALERSHIP_ID;
}

AddCarToDealership(id, slot, price, modelid, Float:x, Float:y, Float:z, Float:angle)
{
    DealershipInfo[id][dvModel][slot] = modelid;
    DealershipInfo[id][dvPrice][slot] = price;
    DealershipInfo[id][dvAngle][slot] = angle;
	DealershipInfo[id][dvPosX][slot] = x;
	DealershipInfo[id][dvPosY][slot] = y;
	DealershipInfo[id][dvPosZ][slot] = z;
}

LoadDealerships()
{
	new
	    string[128];

    DealershipInfo[0][dPosition][0] = 2126.73; DealershipInfo[0][dPosition][1] = -1137.13; DealershipInfo[0][dPosition][2] = 25.42;
    AddCarToDealership(0, 0, 35000, 404, 2136.082, -1128.415, 25.686, 90);
    AddCarToDealership(0, 1, 19000, 466, 2136.082, -1133.283, 25.388, 90);
    AddCarToDealership(0, 2, 32000, 467, 2136.082, -1138.954, 25.321, 90);
    AddCarToDealership(0, 3, 18000, 478, 2136.082, -1143.469, 25.068, 90);
    AddCarToDealership(0, 4, 22000, 566, 2136.082, -1148.46, 24.52, 90);
    AddCarToDealership(0, 5, 34000, 600, 2122.130, -1156.827, 23.796, 0);
    AddCarToDealership(0, 6, 30000, 491, 2117.09, -1157.33, 24.06, 0);
    AddCarToDealership(0, 7, 30000, 492, 2126.81, -1149.56, 23.94, 13);
    AddCarToDealership(0, 8, 27000, 546, 2118.921, -1141.547, 24.559, 317.322);

    DealershipInfo[1][dPosition][0] = 1658.15; DealershipInfo[1][dPosition][1] = -1889.88; DealershipInfo[1][dPosition][2] = 13.55;
    AddCarToDealership(1, 0, 40000, 401, 1670.777, -1884.823, 13.271, 90);
    AddCarToDealership(1, 1, 42000, 410, 1670.777, -1889.883, 13.271, 90);
    AddCarToDealership(1, 3, 45000, 421, 1670.777, -1894.498, 13.271, 90);
    AddCarToDealership(1, 4, 49000, 426, 1670.832, -1899.244, 13.271, 90);
    AddCarToDealership(1, 5, 55000, 439, 1649.178, -1904.079, 13.276, 16);
    AddCarToDealership(1, 6, 60000, 475, 1645.423, -1905.355, 13.382, 14.535);
    AddCarToDealership(1, 7, 64000, 477, 1641.67, 	-1906.89, 13.45, 16.260);
    AddCarToDealership(1, 8, 50000, 496, 1639.837, -1907.326, 13.4276, 15.885);
    AddCarToDealership(1, 8, 55000, 602, 1637.582, -1907.859, 13.365, 15.849);
    AddCarToDealership(1, 9, 48000, 589, 1633.429, -1908.850, 13.275, 17.381);
    
	for (new i=0; i < MAX_CAR_DEALERSHIPS; i++)
	{
		for (new v=0; v < MAX_DEALERSHIP_VEHICLES; v++)
		{
		    if(IsValidVehicleModel(DealershipInfo[i][dvModel][v]))
		    {
				DealershipInfo[i][dvHandle][v] = AddStaticVehicleEx(DealershipInfo[i][dvModel][v], DealershipInfo[i][dvPosX][v], DealershipInfo[i][dvPosY][v], DealershipInfo[i][dvPosZ][v], DealershipInfo[i][dvAngle][v], 0, 0, 10);
				format(string, sizeof(string), "Dealership [%d][%d]\nThis car is on sale for price $%d.", i, v, DealershipInfo[i][dvPrice][v]);
				DealershipInfo[i][dvLabel][v] = CreateDynamic3DTextLabel(string, COLOR_WHITE, DealershipInfo[i][dvPosX][v], DealershipInfo[i][dvPosY][v], DealershipInfo[i][dvPosZ][v], 10.0, INVALID_PLAYER_ID, DealershipInfo[i][dvHandle][v], 1);
			}
		}
	}
}

/*stock UpdateWorldWeather()
{
	new next_weather_prob = random(100);
	if(next_weather_prob < 70) SetWeather(fine_weather_ids[random(sizeof(fine_weather_ids))]);
	else if(next_weather_prob < 95) SetWeather(foggy_weather_ids[random(sizeof(foggy_weather_ids))]);
	else SetWeather(wet_weather_ids[random(sizeof(wet_weather_ids))]);
}*/

stock PlantMarijuanaPlant()
{
	new i = random(sizeof(WeedPlants));
 	if(PlantData[i][wpObjectHandle] == 0)
  	{
  		PlantData[i][wpObjectHandle] = CreateDynamicObject(3409, WeedPlants[i][0], WeedPlants[i][1], WeedPlants[i][2] - 1.25, 0, 0, 0, 0, 0);
  	}
}

stock PlantMarijuanaPlants()
{
	for (new i=0; i < sizeof(WeedPlants); i++)
	{
	    if(PlantData[i][wpObjectHandle] == 0)
	    {
	   		PlantData[i][wpObjectHandle] = CreateDynamicObject(3409, WeedPlants[i][0], WeedPlants[i][1], WeedPlants[i][2] - 1.25, 0, 0, 0, 0, 0);
	    }
	}
}

CMD:spawnplants(playerid, params[])
{
	if(IsAdmin(playerid, ADMIN_LEVEL_SENIORADMIN))
	{
		PlantMarijuanaPlants();
		SendClientMessageEx(playerid, COLOR_WHITE, "You have spawned all weed plants, they have been spawned.");
	}
	return 1;
}

CMD:useweed(playerid, params[])
{
	if(PlayerInfo[playerid][pWeed] >= 1)
	{
		new Float:armour, string[128];
		GetPlayerArmour(playerid, armour);
		if(IsPlayerRestricted(playerid) || armour >= 100) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this at this time.");
		else if(gettime() - GetPVarInt(playerid, "WeedLength") < 0) return SendClientMessageEx(playerid, COLOR_GREY, "You must wait at least 5 seconds before smoking more weed.");
		else if(GetPlayerDrunkLevel(playerid) > 2000) return SendClientMessageEx(playerid, COLOR_GREY, "You are too sloppy to consume anymore weed, too much could make you faint.");

		SetPlayerArmourEx(playerid, armour+10);
		SetPVarInt(playerid, "WeedLength", gettime() + 5);
		SetPVarInt(playerid, "WeedSmoked", GetPVarInt(playerid, "WeedSmoked")+1);
		PlayerInfo[playerid][pWeed] -= 1;
		format(string, sizeof(string), "* %s smokes some weed.", GetPlayerNameEx(playerid));
		ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		if(!IsPlayerInAnyVehicle(playerid)) ApplyAnimation(playerid,"SMOKING","M_smkstnd_loop",2.1,0,0,0,0,0);
		if(GetPVarInt(playerid, "WeedSmoked") >= 3)
		{
		    if(random(2) == 1)
		    {
    			SetPlayerDrunkLevel (playerid, 6000);
		        DeletePVar(playerid, "WeedLength");
		        DeletePVar(playerid, "WeedSmoked");
		        SendClientMessageEx(playerid, COLOR_WHITE, "You have become sloppy due to marijuana overdose, you must now wait until the effect is over.");
		    }
		}
	}
	return 1;
}

CMD:destroyplant(playerid, params[])
{
	foreach(new i: Player)
	{
	    if(PlayerInfo[i][pPlantPosition][0] != 0 && PlayerInfo[i][pPlantPosition][1] != 0 && PlayerInfo[i][pPlantPosition][2] != 0)
	    {
			if(IsPlayerInRangeOfPoint(playerid, 4.0, PlayerInfo[i][pPlantPosition][0], PlayerInfo[i][pPlantPosition][1], PlayerInfo[i][pPlantPosition][2]))
			{
			    if(PlayerInfo[i][pPlantPosition][3] == GetPlayerInterior(playerid) && PlayerInfo[i][pPlantPosition][4] == GetPlayerVirtualWorld(playerid))
			    {
	                PlayerInfo[i][pPlantPosition][0] = 0;
					PlayerInfo[i][pPlantPosition][1] = 0;
					PlayerInfo[i][pPlantPosition][2] = 0;
					PlayerInfo[i][pPlantPosition][3] = 0;
					PlayerInfo[i][pPlantPosition][4] = 0;
					PlayerInfo[i][pPlantGrowth] = 0;
		    		DestroyDynamicObject(WeedPlant[i]);
	                WeedPlant[i] = 0;
		    		SendClientMessageEx(playerid, COLOR_WHITE, "You have successfully destroyed this player-owned plant.");
		    	    return 1;
				}
			}
		}
	}
	
	for (new i=0; i < sizeof(WeedPlants); i++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 15.0, WeedPlants[i][0], WeedPlants[i][1], WeedPlants[i][2]))
	    {
	    	if(IsPlayerInRangeOfPoint(playerid, 4.0, WeedPlants[i][0], WeedPlants[i][1], WeedPlants[i][2]))
	    	{
	    		DestroyDynamicObject(PlantData[i][wpObjectHandle]);
                PlantData[i][wpObjectHandle] = 0;
	    		SendClientMessageEx(playerid, COLOR_WHITE, "You have successfully destroyed this plant however, other plants will still continue to grow in this biome.");
	    	    return 1;
	    	}
	    }
	}
	return 1;
}

CMD:plantseeds(playerid, params[])
{
	if(!PlayerInfo[playerid][pFamily]) return SendClientMessageEx(playerid, COLOR_GREY, "You must be in a family to use this command.");
	if(PlayerInfo[playerid][pSeeds] >= 2)
	{
	    if(PlayerInfo[playerid][pPlantPosition][0] != 0 && PlayerInfo[playerid][pPlantPosition][1] != 0 && PlayerInfo[playerid][pPlantPosition][2] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "You already have an existing plant growing.");
		GetPlayerPos(playerid, PlayerInfo[playerid][pPlantPosition][0], PlayerInfo[playerid][pPlantPosition][1], PlayerInfo[playerid][pPlantPosition][2]);
        PlayerInfo[playerid][pPlantPosition][3] = GetPlayerInterior(playerid);
		PlayerInfo[playerid][pPlantPosition][4] = GetPlayerVirtualWorld(playerid);
		PlayerInfo[playerid][pPlantGrowth] = gettime() + 21600;
		ApplyAnimation(playerid,"BOMBER","BOM_Plant_Crouch_In", 4.0, 0, 0, 0, 0, 0, 1);
	    WeedPlant[playerid] = CreateDynamicObject(19473, PlayerInfo[playerid][pPlantPosition][0], PlayerInfo[playerid][pPlantPosition][1], PlayerInfo[playerid][pPlantPosition][2] - 1.25, 0, 0, 0, floatround(PlayerInfo[playerid][pPlantPosition][4]), floatround(PlayerInfo[playerid][pPlantPosition][3]));
        PlayerInfo[playerid][pSeeds] -= 2;
		SendClientMessageEx(playerid, COLOR_WHITE, "You have planted the seeds, it will take around 6 hours for the plant to grow.");
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You do not have enough seeds to plant.");
	}
	return 1;
}

CMD:gotoplant(playerid, params[])
{
	if(IsAdmin(playerid, ADMIN_LEVEL_TRIALADMIN))
	{
		new i;
		if(sscanf(params, "u", i)) return SendClientMessageEx(playerid, COLOR_GREY, "Usage: /gotoplant <playerid>");
		else if(!IsPlayerConnectedEx(i)) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		else if(PlayerInfo[i][pPlantPosition][0] == 0 && PlayerInfo[i][pPlantPosition][1] == 0 && PlayerInfo[i][pPlantPosition][2] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "The specified player currently does not have an existing plant growing.");
		SetPlayerPos(playerid, PlayerInfo[i][pPlantPosition][0], PlayerInfo[i][pPlantPosition][1], PlayerInfo[i][pPlantPosition][2]);
		SetPlayerInterior(playerid, floatround(PlayerInfo[i][pPlantPosition][3]));
		SetPlayerVirtualWorld(playerid, floatround(PlayerInfo[i][pPlantPosition][4]));
		SendClientMessageEx(playerid, COLOR_WHITE, "You have teleported to the specified player's existing weed plant.");
	}
	return 1;
}

CMD:pickweed(playerid, params[])
{
	if(!PlayerInfo[playerid][pFamily]) return SendClientMessageEx(playerid, COLOR_GREY, "You must be in a family to use this command.");
	foreach(new i: Player)
	{
	    if(PlayerInfo[i][pPlantPosition][0] != 0 && PlayerInfo[i][pPlantPosition][1] != 0 && PlayerInfo[i][pPlantPosition][2] != 0)
	    {
			if(IsPlayerInRangeOfPoint(playerid, 4.0, PlayerInfo[i][pPlantPosition][0], PlayerInfo[i][pPlantPosition][1], PlayerInfo[i][pPlantPosition][2]))
			{
			    if(PlayerInfo[i][pPlantPosition][3] == GetPlayerInterior(playerid) && PlayerInfo[i][pPlantPosition][4] == GetPlayerVirtualWorld(playerid))
			    {
			        if(gettime() - PlayerInfo[i][pPlantGrowth] > 0)
			        {
						SendClientMessageEx(playerid, COLOR_WHITE, "Please select what you would like to extract from the plants, either is a short process.");
						ShowPlayerDialogEx(playerid, DIALOG_COLLECT_PLANT, DIALOG_STYLE_LIST, "{FFFFFF}Plant Extraction", "{FFFFFF}Seeds\nWeed", "Select", "Cancel");
						return 1;
					}
					else
					{
					    SendClientMessageEx(playerid, COLOR_GREY, "You need to wait at least 6 hours for the plant to grow.");
					}
				}
			}
		}
	}

	for (new i=0; i < sizeof(WeedPlants); i++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 15.0, WeedPlants[i][0], WeedPlants[i][1], WeedPlants[i][2]))
	    {
	    	if(IsPlayerInRangeOfPoint(playerid, 4.0, WeedPlants[i][0], WeedPlants[i][1], WeedPlants[i][2]))
	    	{
				SendClientMessageEx(playerid, COLOR_WHITE, "Please select what you would like to extract from the plants, either is a short process.");
				ShowPlayerDialogEx(playerid, DIALOG_COLLECT_PLANT, DIALOG_STYLE_LIST, "{FFFFFF}Plant Extraction", "{FFFFFF}Seeds\nWeed", "Select", "Cancel");
				return 1;
	    	}
	    }
	}
	return 1;
}


CMD:anims(playerid, params[]) return cmd_animhelp(playerid, params);
CMD:animhelp(playerid, params[])
{
	SendClientMessageEx(playerid, COLOR_WHITE, "---------------------------------------------------");
	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, ""SERVER_NAME" - Animations");
	SendClientMessageEx(playerid, COLOR_WHITE, "/handsup /drunk /bomb /rob /laugh /lookout /robman /crossarms /sit /siteat /hide /vomit /eat");
	SendClientMessageEx(playerid, COLOR_WHITE, "/wave /slapass /deal /taichi /crack /smoke /chat /dance /fucku /drinkwater /pedmove /bat");
	SendClientMessageEx(playerid, COLOR_WHITE, "/checktime /sleep /blob /opendoor /wavedown /shakehand /reload /cpr /dive /showoff /box /tag");
	SendClientMessageEx(playerid, COLOR_WHITE, "/goggles /cry /dj /cheer /throw /robbed /hurt /nobreath /bar /getjiggy /fallover /rap /piss");
	SendClientMessageEx(playerid, COLOR_WHITE, "/salute /crabs /washhands /signal /stop /gesture /jerkoff /idles /lowrider /car");
	SendClientMessageEx(playerid, COLOR_WHITE, "/blowjob /spank /sunbathe /kiss /snatch /sneak /copa /sexy /holdup /misc /bodypush /walkstyle");
	SendClientMessageEx(playerid, COLOR_WHITE, "/lowbodypush /headbutt /airkick /doorkick /leftslap /elbow /coprun /sitonchair /lean /wank");
	SendClientMessageEx(playerid, COLOR_GREY, "Use /stopanim to clear your animations.");
	SendClientMessageEx(playerid, COLOR_WHITE, "---------------------------------------------------");
	return 1;
}

CMD:stopanim(playerid, params[])
{
	if(GetPVarInt(playerid, "ActionRestriction") == 1)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You can't do that at this time.");
		return 1;
	}
	if(IsPlayerInAnyVehicle(playerid) == 1)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "This command requires you to be outside a vehicle.");
		return 1;
	}
	ClearAnimations(playerid);
	SetPlayerSkin(playerid, GetPlayerSkin(playerid));
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	return 1;
}

CMD:bodypush(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
	if(GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
    ApplyAnimation(playerid,"GANGS","shake_cara",4.0,0,0,0,0,0);
	return 1;
}

CMD:lowbodypush(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
	if(GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
    ApplyAnimation(playerid,"GANGS","shake_carSH",4.0,0,0,0,0,0);
	return 1;
}

CMD:headbutt(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
	if(GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
    ApplyAnimation(playerid,"WAYFARER","WF_Fwd",4.0,0,0,0,0,0);
	return 1;
}

CMD:airkick(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
	if(GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
    ApplyAnimation(playerid,"FIGHT_C","FightC_M",4.0,0,1,1,0,0);
	return 1;
}

CMD:doorkick(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
	if(GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
    ApplyAnimation(playerid,"POLICE","Door_Kick",4.0,0,0,0,0,0);
	return 1;
}

CMD:leftslap(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
	if(GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
    ApplyAnimation(playerid,"PED","BIKE_elbowL",4.0,0,0,0,0,0);
	return 1;
}

CMD:elbow(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
	if(GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
    ApplyAnimation(playerid,"FIGHT_D","FightD_3",4.0,0,1,1,0,0);
	return 1;
}

CMD:coprun(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
	if(GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
    ApplyAnimation(playerid,"SWORD","sword_block",50.0,0,1,1,1,1);
	return 1;
}

CMD:handsup(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
	if(GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);
	return 1;
}

CMD:piss(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
	if(GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
   	SetPlayerSpecialAction(playerid, 68);
	return 1;
}

CMD:sneak(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
	LoopingAnim(playerid, "PED", "Player_Sneak", 4.1, 1, 1, 1, 1, 1, 1);
	return 1;
}

CMD:drunk(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
   	LoopingAnim(playerid, "PED", "WALK_DRUNK", 4.0, 1, 1, 1, 1, 1, 1);
    return 1;
}

CMD:bomb(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
   	PlayAnim(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0, 1);
    return 1;
}

CMD:rob(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
	LoopingAnim(playerid, "ped", "ARRESTgun", 4.0, 0, 1, 1, 1, 1, 1);
	return 1;
}

CMD:laugh(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
	LoopingAnim(playerid, "RAPPING", "Laugh_01", 4.0, 1, 0, 0, 0, 0, 1);
	return 1;
}

CMD:lookout(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
   	PlayAnim(playerid, "SHOP", "ROB_Shifty", 4.0, 0, 0, 0, 0, 0, 1);
    return 1;
}

CMD:robman(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
    LoopingAnim(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:hide(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
    LoopingAnim(playerid, "ped", "cower", 3.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:vomit(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
    LoopingAnim(playerid, "FOOD", "EAT_Vomit_P", 3.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:eat(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
    LoopingAnim(playerid, "FOOD", "EAT_Burger", 3.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:slapass(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
    PlayAnim(playerid, "SWEET", "sweet_ass_slap", 4.0, 0, 0, 0, 0, 0, 1);
    return 1;
}

CMD:crack(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
    LoopingAnim(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:fucku(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
    PlayAnim(playerid, "PED", "fucku", 4.0, 0, 0, 0, 0, 0, 1);
    return 1;
}

CMD:taichi(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
    LoopingAnim(playerid, "PARK", "Tai_Chi_Loop", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:drinkwater(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
    LoopingAnim(playerid, "BAR", "dnk_stndF_loop", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:checktime(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
    PlayAnim(playerid, "COP_AMBIENT", "Coplook_watch", 4.0, 0, 0, 0, 0, 0, 1);
    return 1;
}

CMD:sleep(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
    LoopingAnim(playerid, "CRACK", "crckdeth4", 4.0, 0, 1, 1, 1, 0, 1);
    return 1;
}

CMD:blob(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
    LoopingAnim(playerid, "CRACK", "crckidle1", 4.0, 0, 1, 1, 1, 0, 1);
    return 1;
}

CMD:opendoor(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
    PlayAnim(playerid, "AIRPORT", "thrw_barl_thrw", 4.0, 0, 0, 0, 0, 0, 1);
    return 1;
}

CMD:wavedown(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
    PlayAnim(playerid, "BD_FIRE", "BD_Panic_01", 4.0, 0, 0, 0, 0, 0, 1);
    return 1;
}

CMD:cpr(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
    PlayAnim(playerid, "MEDIC", "CPR", 4.0, 0, 0, 0, 0, 0, 1);
    return 1;
}

CMD:dive(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
    LoopingAnim(playerid, "DODGE", "Crush_Jump", 4.0, 0, 1, 1, 1, 0, 1);
    return 1;
}

CMD:showoff(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
    LoopingAnim(playerid, "Freeweights", "gym_free_celebrate", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:goggles(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
    PlayAnim(playerid, "goggles", "goggles_put_on", 4.0, 0, 0, 0, 0, 0, 1);
    return 1;
}

CMD:cry(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
    LoopingAnim(playerid, "GRAVEYARD", "mrnF_loop", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:throw(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
    PlayAnim(playerid, "GRENADE", "WEAPON_throw", 4.0, 0, 0, 0, 0, 0, 1);
    return 1;
}

CMD:robbed(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
    LoopingAnim(playerid, "SHOP", "SHP_Rob_GiveCash", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:hurt(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
    LoopingAnim(playerid, "SWAT", "gnstwall_injurd", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:box(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
    LoopingAnim(playerid, "GYMNASIUM", "GYMshadowbox", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:washhands(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
    LoopingAnim(playerid, "BD_FIRE", "wash_up", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:crabs(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
    LoopingAnim(playerid, "MISC", "Scratchballs_01", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:salute(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
    LoopingAnim(playerid, "ON_LOOKERS", "Pointup_loop", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:jerkoff(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
    LoopingAnim(playerid, "PAULNMAC", "wank_out", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:stop(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
    LoopingAnim(playerid, "PED", "endchat_01", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:rap(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
	switch(strval(params))
	{
		case 1: LoopingAnim(playerid, "RAPPING", "RAP_A_Loop", 4.0, 1, 0, 0, 0, 0, 1);
		case 2: LoopingAnim(playerid, "RAPPING", "RAP_B_Loop", 4.0, 1, 0, 0, 0, 0, 1);
		case 3: LoopingAnim(playerid, "RAPPING", "RAP_C_Loop", 4.0, 1, 0, 0, 0, 0, 1);
		default: SendClientMessageEx(playerid, COLOR_WHITE, "Usage: /rap [1-3]");
	}
	return 1;
}

CMD:wank(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
	switch(strval(params))
	{
		case 1: LoopingAnim(playerid, "PAULNMAC", "wank_in", 4.0, 1, 0, 0, 0, 0, 1);
		case 2: LoopingAnim(playerid, "PAULNMAC", "wank_loop", 4.0, 1, 0, 0, 0, 0, 1);
		case 3: LoopingAnim(playerid, "PAULNMAC", "wank_out", 4.0, 1, 0, 0, 0, 0, 1);
		default: SendClientMessageEx(playerid, COLOR_WHITE, "Usage: /wank [1-3]");
	}
	return 1;
}

CMD:chat(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
	switch(strval(params))
	{
		case 1: LoopingAnim(playerid, "PED", "IDLE_CHAT", 4.0, 1, 0, 0, 0, 0, 1);
		case 2: LoopingAnim(playerid, "GANGS", "prtial_gngtlkA", 4.0, 1, 0, 0, 0, 0, 1);
		case 3:	LoopingAnim(playerid, "GANGS", "prtial_gngtlkB", 4.0, 1, 0, 0, 0, 0, 1);
		case 4: LoopingAnim(playerid, "GANGS", "prtial_gngtlkE", 4.0, 1, 0, 0, 0, 0, 1);
		case 5: LoopingAnim(playerid, "GANGS", "prtial_gngtlkF", 4.0, 1, 0, 0, 0, 0, 1);
		case 6: LoopingAnim(playerid, "GANGS", "prtial_gngtlkG", 4.0, 1, 0, 0, 0, 0, 1);
		case 7:	LoopingAnim(playerid, "GANGS", "prtial_gngtlkH", 4.0, 1, 0, 0, 0, 0, 1);
		default: SendClientMessageEx(playerid, COLOR_WHITE, "Usage: /chat [1-7]");
	}
	return 1;
}

CMD:sitdown(playerid, params[]) return cmd_sitonchair(playerid, params);
CMD:sitonchair(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
	switch(strval(params))
	{
		case 1: LoopingAnim(playerid, "Attractors", "Stepsit_in", 4.0, 0, 0, 0, 1, 0, 1);
		case 2: LoopingAnim(playerid, "CRIB", "PED_Console_Loop", 4.0, 1, 0, 0, 0, 0, 1);
		case 3: LoopingAnim(playerid, "INT_HOUSE", "LOU_In", 4.0, 0, 0, 0, 1, 1, 1);
		case 4: LoopingAnim(playerid, "MISC", "SEAT_LR", 4.0, 1, 0, 0, 0, 0, 1);
		case 5: LoopingAnim(playerid, "MISC", "Seat_talk_01", 4.0, 1, 0, 0, 0, 0, 1);
		case 6: LoopingAnim(playerid, "MISC", "Seat_talk_02", 4.0, 1, 0, 0, 0, 0, 1);
		case 7: LoopingAnim(playerid, "ped", "SEAT_down", 4.0, 0, 0, 0, 1, 1, 1);
		default: SendClientMessageEx(playerid, COLOR_WHITE, "Usage: /sitonchair [1-7]");
	}
	return 1;
}

CMD:bat(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
	switch(strval(params))
	{
		case 1: LoopingAnim(playerid,"BASEBALL","Bat_IDLE",4.1, 0, 1, 1, 1, 1, 1);
		case 2: LoopingAnim(playerid, "CRACK", "Bbalbat_Idle_01", 4.0, 1, 0, 0, 0, 0, 1);
		case 3: LoopingAnim(playerid, "CRACK", "Bbalbat_Idle_02", 4.0, 1, 0, 0, 0, 0, 1);
		default: SendClientMessageEx(playerid, COLOR_WHITE, "Usage: /bat [1-3]");
	}
	return 1;
}

CMD:lean(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
	switch(strval(params))
	{
		case 1: LoopingAnim(playerid, "GANGS", "leanIDLE", 4.0, 0, 0, 0, 1, 0, 1);
		case 2: LoopingAnim(playerid, "MISC", "Plyrlean_loop", 4.0, 0, 0, 0, 1, 0, 1);
		default: SendClientMessageEx(playerid, COLOR_WHITE, "Usage: /lean [1-2]");
	}
	return 1;
}

CMD:gesture(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
	switch(strval(params))
	{
		case 1: PlayAnim(playerid, "GHANDS", "gsign1", 4.0, 0, 0, 0, 0, 0, 1);
		case 2: PlayAnim(playerid, "GHANDS", "gsign1LH", 4.0, 0, 0, 0, 0, 0, 1);
		case 3: PlayAnim(playerid, "GHANDS", "gsign2", 4.0, 0, 0, 0, 0, 0, 1);
		case 4: PlayAnim(playerid, "GHANDS", "gsign2LH", 4.0, 0, 0, 0, 0, 0, 1);
		case 5: PlayAnim(playerid, "GHANDS", "gsign3", 4.0, 0, 0, 0, 0, 0, 1);
		case 6: PlayAnim(playerid, "GHANDS", "gsign3LH", 4.0, 0, 0, 0, 0, 0, 1);
		case 7: PlayAnim(playerid, "GHANDS", "gsign4", 4.0, 0, 0, 0, 0, 0, 1);
		case 8: PlayAnim(playerid, "GHANDS", "gsign4LH", 4.0, 0, 0, 0, 0, 0, 1);
		case 9: PlayAnim(playerid, "GHANDS", "gsign5", 4.0, 0, 0, 0, 0, 0, 1);
		case 10: PlayAnim(playerid, "GHANDS", "gsign5", 4.0, 0, 0, 0, 0, 0, 1);
		case 11: PlayAnim(playerid, "GHANDS", "gsign5LH", 4.0, 0, 0, 0, 0, 0, 1);
		case 12: PlayAnim(playerid, "GANGS", "Invite_No", 4.0, 0, 0, 0, 0, 0, 1);
		case 13: PlayAnim(playerid, "GANGS", "Invite_Yes", 4.0, 0, 0, 0, 0, 0, 1);
		case 14: PlayAnim(playerid, "GANGS", "prtial_gngtlkD", 4.0, 0, 0, 0, 0, 0, 1);
		case 15: PlayAnim(playerid, "GANGS", "smkcig_prtl", 4.0, 0, 0, 0, 0, 0, 1);
		default: SendClientMessageEx(playerid, COLOR_WHITE, "Usage: /gesture [1-15]");
	}
	return 1;
}

CMD:lay(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
	switch(strval(params))
	{
		case 1: LoopingAnim(playerid, "BEACH", "bather", 4.0, 1, 0, 0, 0, 0, 1);
		case 2: LoopingAnim(playerid, "BEACH", "Lay_Bac_Loop", 4.0, 1, 0, 0, 0, 0, 1);
		case 3: LoopingAnim(playerid, "BEACH", "SitnWait_loop_W", 4.0, 1, 0, 0, 0, 0, 1);
		default: SendClientMessageEx(playerid, COLOR_WHITE, "Usage: /lay [1-3]");
	}
	return 1;
}

CMD:wave(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
	switch(strval(params))
	{
		case 1: LoopingAnim(playerid, "ON_LOOKERS", "wave_loop", 4.0, 1, 0, 0, 0, 0, 1);
		case 2: LoopingAnim(playerid, "KISSING", "gfwave2", 4.0, 1, 0, 0, 0, 0, 1);
		case 3: LoopingAnim(playerid, "PED", "endchat_03", 4.0, 1, 0, 0, 0, 0, 1);
		default: SendClientMessageEx(playerid, COLOR_WHITE, "Usage: /wave [1-3]");
	}
	return 1;
}

CMD:signal(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
	switch(strval(params))
	{
		case 1: LoopingAnim(playerid, "POLICE", "CopTraf_Come", 4.0, 1, 0, 0, 0, 0, 1);
		case 2: LoopingAnim(playerid, "POLICE", "CopTraf_Stop", 4.0, 1, 0, 0, 0, 0, 1);
		default: SendClientMessageEx(playerid, COLOR_WHITE, "Usage: /signal [1-2]");
	}
	return 1;
}

CMD:nobreath(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
	switch(strval(params))
	{
		case 1: LoopingAnim(playerid, "SWEET", "Sweet_injuredloop", 4.0, 1, 0, 0, 0, 0, 1);
		case 2: LoopingAnim(playerid, "PED", "IDLE_tired", 4.0, 1, 0, 0, 0, 0, 1);
		case 3: LoopingAnim(playerid, "FAT", "IDLE_tired", 4.0, 1, 0, 0, 0, 0, 1);
		default: SendClientMessageEx(playerid, COLOR_WHITE, "Usage: /nobreath [1-3]");
	}
	return 1;
}

CMD:fallover(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
	switch(strval(params))
	{
		case 1: LoopingAnim(playerid, "KNIFE", "KILL_Knife_Ped_Die", 4.0, 0, 1, 1, 1, 0, 1);
		case 2: LoopingAnim(playerid, "PED", "KO_shot_face", 4.0, 0, 1, 1, 1, 0, 1);
		case 3: LoopingAnim(playerid, "PED", "KO_shot_stom", 4.0, 0, 1, 1, 1, 0, 1);
		case 4: LoopingAnim(playerid, "PED", "BIKE_fallR", 4.1, 0, 1, 1, 1, 0, 1);
		case 5: LoopingAnim(playerid, "PED", "BIKE_fall_off", 4.1, 0, 1, 1, 1, 0, 1);
		default: SendClientMessageEx(playerid, COLOR_WHITE, "Usage: /fallover [1-5]");
	}
	return 1;
}

CMD:pedmove(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
	switch(strval(params))
	{
		case 1: LoopingAnim(playerid, "PED", "JOG_femaleA", 4.0, 1, 1, 1, 1, 1, 1);
		case 2: LoopingAnim(playerid, "PED", "JOG_maleA", 4.0, 1, 1, 1, 1, 1, 1);
		case 3: LoopingAnim(playerid, "PED", "WOMAN_walkfatold", 4.0, 1, 1, 1, 1, 1, 1);
		case 4: LoopingAnim(playerid, "PED", "run_fat", 4.0, 1, 1, 1, 1, 1, 1);
		case 5: LoopingAnim(playerid, "PED", "run_fatold", 4.0, 1, 1, 1, 1, 1, 1);
		case 6: LoopingAnim(playerid, "PED", "run_old", 4.0, 1, 1, 1, 1, 1, 1);
		case 7: LoopingAnim(playerid, "PED", "Run_Wuzi", 4.0, 1, 1, 1, 1, 1, 1);
		case 8: LoopingAnim(playerid, "PED", "swat_run", 4.0, 1, 1, 1, 1, 1, 1);
		case 9: LoopingAnim(playerid, "PED", "WALK_fat", 4.0, 1, 1, 1, 1, 1, 1);
		case 10: LoopingAnim(playerid, "PED", "WALK_fatold", 4.0, 1, 1, 1, 1, 1, 1);
		case 11: LoopingAnim(playerid, "PED", "WALK_gang1", 4.0, 1, 1, 1, 1, 1, 1);
		case 12: LoopingAnim(playerid, "PED", "WALK_gang2", 4.0, 1, 1, 1, 1, 1, 1);
		case 13: LoopingAnim(playerid, "PED", "WALK_old", 4.0, 1, 1, 1, 1, 1, 1);
		case 14: LoopingAnim(playerid, "PED", "WALK_shuffle", 4.0, 1, 1, 1, 1, 1, 1);
		case 15: LoopingAnim(playerid, "PED", "woman_run", 4.0, 1, 1, 1, 1, 1, 1);
		case 16: LoopingAnim(playerid, "PED", "WOMAN_runbusy", 4.0, 1, 1, 1, 1, 1, 1);
		case 17: LoopingAnim(playerid, "PED", "WOMAN_runfatold", 4.0, 1, 1, 1, 1, 1, 1);
		case 18: LoopingAnim(playerid, "PED", "woman_runpanic", 4.0, 1, 1, 1, 1, 1, 1);
		case 19: LoopingAnim(playerid, "PED", "WOMAN_runsexy", 4.0, 1, 1, 1, 1, 1, 1);
		case 20: LoopingAnim(playerid, "PED", "WOMAN_walkbusy", 4.0, 1, 1, 1, 1, 1, 1);
		case 21: LoopingAnim(playerid, "PED", "WOMAN_walkfatold", 4.0, 1, 1, 1, 1, 1, 1);
		case 22: LoopingAnim(playerid, "PED", "WOMAN_walknorm", 4.0, 1, 1, 1, 1, 1, 1);
		case 23: LoopingAnim(playerid, "PED", "WOMAN_walkold", 4.0, 1, 1, 1, 1, 1, 1);
		case 24: LoopingAnim(playerid, "PED", "WOMAN_walkpro", 4.0, 1, 1, 1, 1, 1, 1);
		case 25: LoopingAnim(playerid, "PED", "WOMAN_walksexy", 4.0, 1, 1, 1, 1, 1, 1);
		case 26: LoopingAnim(playerid, "PED", "WOMAN_walkshop", 4.0, 1, 1, 1, 1, 1, 1);
		default: SendClientMessageEx(playerid, COLOR_WHITE, "Usage: /pedmove [1-26]");
	}
	return 1;
}

CMD:getjiggy(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
	switch(strval(params))
	{
		case 1: LoopingAnim(playerid, "DANCING", "DAN_Down_A", 4.0, 1, 0, 0, 0, 0, 1);
		case 2: LoopingAnim(playerid, "DANCING", "DAN_Left_A", 4.0, 1, 0, 0, 0, 0, 1);
		case 3: LoopingAnim(playerid, "DANCING", "DAN_Loop_A", 4.0, 1, 0, 0, 0, 0, 1);
		case 4: LoopingAnim(playerid, "DANCING", "DAN_Right_A", 4.0, 1, 0, 0, 0, 0, 1);
		case 5: LoopingAnim(playerid, "DANCING", "DAN_Up_A", 4.0, 1, 0, 0, 0, 0, 1);
		case 6: LoopingAnim(playerid, "DANCING", "dnce_M_a", 4.0, 1, 0, 0, 0, 0, 1);
		case 7: LoopingAnim(playerid, "DANCING", "dnce_M_b", 4.0, 1, 0, 0, 0, 0, 1);
		case 8: LoopingAnim(playerid, "DANCING", "dnce_M_c", 4.0, 1, 0, 0, 0, 0, 1);
		case 9: LoopingAnim(playerid, "DANCING", "dnce_M_c", 4.0, 1, 0, 0, 0, 0, 1);
		case 10: LoopingAnim(playerid, "DANCING", "dnce_M_d", 4.0, 1, 0, 0, 0, 0, 1);
		default: SendClientMessageEx(playerid, COLOR_WHITE, "Usage: /getjiggy [1-10]");
	}
	return 1;
}

CMD:stripclub(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
	switch(strval(params))
	{
		case 1: LoopingAnim(playerid, "STRIP", "PLY_CASH", 4.0, 1, 0, 0, 0, 0, 1);
		case 2: LoopingAnim(playerid, "STRIP", "PUN_CASH", 4.0, 1, 0, 0, 0, 0, 1);
		default: SendClientMessageEx(playerid, COLOR_WHITE, "Usage: /stripclub [1-2]");
	}
	return 1;
}

CMD:smoke(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
	switch(strval(params))
	{
		case 1: PlayAnim(playerid, "SMOKING", "M_smk_in", 4.0, 0, 0, 0, 0, 0, 1);
		case 2: LoopingAnim(playerid, "SMOKING", "M_smklean_loop", 4.0, 1, 0, 0, 0, 0, 1);
		default: SendClientMessageEx(playerid, COLOR_WHITE, "Usage: /smoke [1-2]");
	}
	return 1;
}

CMD:dj(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
	switch(strval(params))
	{
		case 1: LoopingAnim(playerid, "SCRATCHING", "scdldlp", 4.0, 1, 0, 0, 0, 0, 1);
		case 2: LoopingAnim(playerid, "SCRATCHING", "scdlulp", 4.0, 1, 0, 0, 0, 0, 1);
		case 3: LoopingAnim(playerid, "SCRATCHING", "scdrdlp", 4.0, 1, 0, 0, 0, 0, 1);
		case 4: LoopingAnim(playerid, "SCRATCHING", "scdrulp", 4.0, 1, 0, 0, 0, 0, 1);
		default: SendClientMessageEx(playerid, COLOR_WHITE, "Usage: /dj [1-4]");
	}
	return 1;
}

CMD:reload(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
	switch(strval(params))
	{
		case 1: PlayAnim(playerid, "BUDDY", "buddy_reload", 4.0, 0, 0, 0, 0, 0, 1);
		case 2: PlayAnim(playerid, "PYTHON", "python_reload", 4.0, 0, 0, 0, 0, 0, 1);
		default: SendClientMessageEx(playerid, COLOR_WHITE, "Usage: /reload [1-2]");
	}
	return 1;
}

CMD:tag(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
	switch(strval(params))
	{
		case 1: LoopingAnim(playerid, "GRAFFITI", "graffiti_Chkout", 4.0, 1, 0, 0, 0, 0, 1);
		case 2: LoopingAnim(playerid, "GRAFFITI", "spraycan_fire", 4.0, 1, 0, 0, 0, 0, 1);
		default: SendClientMessageEx(playerid, COLOR_WHITE, "Usage: /tag [1-2]");
	}
	return 1;
}

CMD:deal(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
	switch(strval(params))
	{
		case 1: LoopingAnim(playerid, "DEALER", "DEALER_DEAL", 4.0, 1, 0, 0, 0, 0, 1);
		case 2: LoopingAnim(playerid, "DEALER", "shop_pay", 4.0, 1, 0, 0, 0, 0, 1);
		default: SendClientMessageEx(playerid, COLOR_WHITE, "Usage: /deal [1-2]");
	}
	return 1;
}

CMD:crossarms(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
	switch(strval(params))
	{
		case 1: LoopingAnim(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 0, 1, 1, 1, -1, 1);
		case 2: LoopingAnim(playerid, "DEALER", "DEALER_IDLE", 4.0, 1, 0, 0, 0, 0, 1);
		case 3: LoopingAnim(playerid, "GRAVEYARD", "mrnM_loop", 4.0, 1, 0, 0, 0, 0, 1);
		case 4: LoopingAnim(playerid, "GRAVEYARD", "prst_loopa", 4.0, 1, 0, 0, 0, 0, 1);
		case 5: LoopingAnim(playerid, "DEALER", "DEALER_IDLE_01", 4.0, 1, 0, 0, 0, 0, 1);
		default: SendClientMessageEx(playerid, COLOR_WHITE, "Usage: /crossarms [1-5]");
	}
	return 1;
}

CMD:cheer(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
	switch(strval(params))
	{
		case 1: LoopingAnim(playerid, "ON_LOOKERS", "shout_01", 4.0, 1, 0, 0, 0, 0, 1);
		case 2: LoopingAnim(playerid, "ON_LOOKERS", "shout_02", 4.0, 1, 0, 0, 0, 0, 1);
		case 3: LoopingAnim(playerid, "ON_LOOKERS", "shout_in", 4.0, 1, 0, 0, 0, 0, 1);
		case 4: LoopingAnim(playerid, "RIOT", "RIOT_ANGRY_B", 4.0, 1, 0, 0, 0, 0, 1);
		case 5: LoopingAnim(playerid, "RIOT", "RIOT_CHANT", 4.0, 1, 0, 0, 0, 0, 1);
		case 6: LoopingAnim(playerid, "RIOT", "RIOT_shout", 4.0, 1, 0, 0, 0, 0, 1);
		case 7: LoopingAnim(playerid, "STRIP", "PUN_HOLLER", 4.0, 1, 0, 0, 0, 0, 1);
		case 8: LoopingAnim(playerid, "OTB", "wtchrace_win", 4.0, 1, 0, 0, 0, 0, 1);
		default: SendClientMessageEx(playerid, COLOR_WHITE, "Usage: /cheer [1-8]");
	}
	return 1;
}

CMD:sit(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
	switch(strval(params))
	{
		case 1: LoopingAnim(playerid, "BEACH", "bather", 4.0, 1, 0, 0, 0, 0, 1);
		case 2: LoopingAnim(playerid, "BEACH", "Lay_Bac_Loop", 4.0, 1, 0, 0, 0, 0, 1);
		case 3: LoopingAnim(playerid, "BEACH", "ParkSit_W_loop", 4.0, 1, 0, 0, 0, 0, 1);
		case 4: LoopingAnim(playerid, "BEACH", "SitnWait_loop_W", 4.0, 1, 0, 0, 0, 0, 1);
		case 5: LoopingAnim(playerid, "BEACH", "ParkSit_M_loop", 4.0, 1, 0, 0, 0, 0, 1);
		default: SendClientMessageEx(playerid, COLOR_WHITE, "Usage: /sit [1-5]");
	}
	return 1;
}

CMD:siteat(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
	LoopingAnim(playerid, "FOOD", "FF_Sit_Eat3", 4.0, 1, 0, 0, 0, 0, 1);
	return 1;
}

CMD:bar(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
	switch(strval(params))
	{
		case 1: PlayAnim(playerid, "BAR", "Barcustom_get", 4.0, 0, 1, 0, 0, 0, 1);
		case 2: PlayAnim(playerid, "BAR", "Barserve_bottle", 4.0, 0, 0, 0, 0, 0, 1);
		case 3: PlayAnim(playerid, "BAR", "Barserve_give", 4.0, 0, 0, 0, 0, 0, 1);
		case 4: PlayAnim(playerid, "BAR", "dnk_stndM_loop", 4.0, 0, 0, 0, 0, 0, 1);
		case 5: LoopingAnim(playerid, "BAR", "BARman_idle", 4.0, 1, 0, 0, 0, 0, 1);
		default: SendClientMessageEx(playerid, COLOR_WHITE, "Usage: /bar [1-5]");
	}
	return 1;
}

CMD:dance(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
	if(GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
	switch(strval(params))
	{
		case 1: SetPlayerSpecialAction(playerid, 5);
		case 2: SetPlayerSpecialAction(playerid, 6);
		case 3: SetPlayerSpecialAction(playerid, 7);
		case 4: SetPlayerSpecialAction(playerid, 8);
		default: SendClientMessageEx(playerid, COLOR_WHITE, "Usage: /dance [1-4]");
	}
	return 1;
}

CMD:spank(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
	switch(strval(params))
	{
		case 1: LoopingAnim(playerid, "SNM", "SPANKINGW", 4.1, 1, 0, 0, 0, 0, 1);
		case 2: LoopingAnim(playerid, "SNM", "SPANKINGP", 4.1, 1, 0, 0, 0, 0, 1);
		case 3: LoopingAnim(playerid, "SNM", "SPANKEDW", 4.1, 1, 0, 0, 0, 0, 1);
		case 4: LoopingAnim(playerid, "SNM", "SPANKEDP", 4.1, 1, 0, 0, 0, 0, 1);
		default: SendClientMessageEx(playerid, COLOR_WHITE, "Usage: /spank [1-4]");
	}
	return 1;
}

CMD:sexy(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
	switch(strval(params))
	{
		case 1: LoopingAnim(playerid, "STRIP", "strip_E", 4.1, 1, 0, 0, 0, 0, 1);
		case 2: LoopingAnim(playerid, "STRIP", "strip_G", 4.1, 1, 0, 0, 0, 0, 1);
		case 3: PlayAnim(playerid, "STRIP", "STR_A2B", 4.1, 0, 0, 0, 0, 0, 1);
		case 4: LoopingAnim(playerid, "STRIP", "STR_Loop_A", 4.1, 1, 0, 0, 0, 0, 1);
		case 5: LoopingAnim(playerid, "STRIP", "STR_Loop_B", 4.1, 1, 0, 0, 0, 0, 1);
		case 6: LoopingAnim(playerid, "STRIP", "STR_Loop_C", 4.1, 1, 0, 0, 0, 0, 1);
		default: SendClientMessageEx(playerid, COLOR_WHITE, "Usage: /sexy [1-6]");
	}
	return 1;
}

CMD:holdup(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
	switch(strval(params))
	{
		case 1: LoopingAnim(playerid, "POOL", "POOL_ChalkCue", 4.1, 0, 1, 1, 1, 1, 1);
		case 2: LoopingAnim(playerid, "POOL", "POOL_Idle_Stance", 4.1, 0, 1, 1, 1, 1, 1);
		default: SendClientMessageEx(playerid, COLOR_WHITE, "Usage: /holdup [1-2]");
	}
	return 1;
}

CMD:copa(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
	switch(strval(params))
	{
		case 1: PlayAnim(playerid, "POLICE", "CopTraf_Away", 4.1, 0, 0, 0, 0, 0, 1);
		case 2: PlayAnim(playerid, "POLICE", "CopTraf_Come", 4.1, 0, 0, 0, 0, 0, 1);
		case 3: PlayAnim(playerid, "POLICE", "CopTraf_Left", 4.1, 0, 0, 0, 0, 0, 1);
		case 4: PlayAnim(playerid, "POLICE", "CopTraf_Stop", 4.1, 0, 0, 0, 0, 0, 1);
		case 5: LoopingAnim(playerid, "POLICE", "Cop_move_FWD", 4.1, 1, 1, 1, 1, 1, 1);
		case 6: LoopingAnim(playerid, "POLICE", "crm_drgbst_01", 4.1, 0, 0, 0, 1, 5000, 1);
		case 7: PlayAnim(playerid, "POLICE", "Door_Kick", 4.1, 0, 1, 1, 1, 1, 1);
		case 8: PlayAnim(playerid, "POLICE", "plc_drgbst_01", 4.1, 0, 0, 0, 0, 5000, 1);
		case 9: PlayAnim(playerid, "POLICE", "plc_drgbst_02", 4.1, 0, 0, 0, 0, 0, 1);
		default: SendClientMessageEx(playerid, COLOR_WHITE, "Usage: /copa [1-9]");
	}
	return 1;
}

CMD:misc(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
	switch(strval(params))
	{
		case 1: LoopingAnim(playerid, "CAR", "Fixn_Car_Loop", 4.1, 1, 0, 0, 0, 0, 1);
		case 2: PlayAnim(playerid, "CAR", "flag_drop", 4.1, 0, 0, 0, 0, 0, 1);
		case 3: PlayAnim(playerid, "PED", "bomber", 4.1, 0, 0, 0, 0, 0, 1);
		default: SendClientMessageEx(playerid, COLOR_WHITE, "Usage: /misc [1-3]");
	}
	return 1;
}

CMD:snatch(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
	switch(strval(params))
	{
		case 1: PlayAnim(playerid, "PED", "BIKE_elbowL", 4.1, 0, 0, 0, 0, 0, 1);
		case 2: PlayAnim(playerid, "PED", "BIKE_elbowR", 4.1, 0, 0, 0, 0, 0, 1);
		default: SendClientMessageEx(playerid, COLOR_WHITE, "Usage: /snatch [1-2]");
	}
	return 1;
}

CMD:blowjob(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
	switch(strval(params))
	{
		case 1: LoopingAnim(playerid, "BLOWJOBZ", "BJ_COUCH_LOOP_P", 4.1, 1, 0, 0, 0, 0, 1);
		case 2: LoopingAnim(playerid, "BLOWJOBZ", "BJ_STAND_LOOP_P", 4.1, 1, 0, 0, 0, 0, 1);
		default: SendClientMessageEx(playerid, COLOR_WHITE, "Usage: /blowjob [1-2]");
	}
	return 1;
}

CMD:kiss(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
	switch(strval(params))
	{
		case 1: PlayAnim(playerid, "KISSING", "Playa_Kiss_01", 4.1, 0, 0, 0, 0, 0, 1);
		case 2: PlayAnim(playerid, "KISSING", "Playa_Kiss_02", 4.1, 0, 0, 0, 0, 0, 1);
		case 3: PlayAnim(playerid, "KISSING", "Playa_Kiss_03", 4.1, 0, 0, 0, 0, 0, 1);
		case 4: PlayAnim(playerid, "KISSING", "Grlfrd_Kiss_01", 4.1, 0, 0, 0, 0, 0, 1);
		case 5: PlayAnim(playerid, "KISSING", "Grlfrd_Kiss_02", 4.1, 0, 0, 0, 0, 0, 1);
		case 6: PlayAnim(playerid, "KISSING", "Grlfrd_Kiss_03", 4.1, 0, 0, 0, 0, 0, 1);
		default: SendClientMessageEx(playerid, COLOR_WHITE, "Usage: /kiss [1-6]");
	}
	return 1;
}

CMD:idles(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
	switch(strval(params))
	{
		case 1: LoopingAnim(playerid, "PLAYIDLES", "shift", 4.1, 1, 1, 1, 1, 1, 1);
		case 2: LoopingAnim(playerid, "PLAYIDLES", "shldr", 4.1, 1, 1, 1, 1, 1, 1);
		case 3: LoopingAnim(playerid, "PLAYIDLES", "stretch", 4.1, 1, 1, 1, 1, 1, 1);
		case 4: LoopingAnim(playerid, "PLAYIDLES", "strleg", 4.1, 1, 1, 1, 1, 1, 1);
		case 5: LoopingAnim(playerid, "PLAYIDLES", "time", 4.1, 1, 1, 1, 1, 1, 1);
		case 6: LoopingAnim(playerid, "COP_AMBIENT", "Copbrowse_loop", 4.1, 1, 0, 0, 0, 0, 1);
		case 7: LoopingAnim(playerid, "COP_AMBIENT", "Coplook_loop", 4.1, 1, 0, 0, 0, 0, 1);
		case 8: LoopingAnim(playerid, "COP_AMBIENT", "Coplook_shake", 4.1, 1, 0, 0, 0, 0, 1);
		case 9: LoopingAnim(playerid, "COP_AMBIENT", "Coplook_think", 4.1, 1, 0, 0, 0, 0, 1);
		case 10: LoopingAnim(playerid, "COP_AMBIENT", "Coplook_watch", 4.1, 1, 0, 0, 0, 0, 1);
		case 11: LoopingAnim(playerid, "PED", "roadcross", 4.1, 1, 0, 0, 0, 0, 1);
		case 12: LoopingAnim(playerid, "PED", "roadcross_female", 4.1, 1, 0, 0, 0, 0, 1);
		case 13: LoopingAnim(playerid, "PED", "roadcross_gang", 4.1, 1, 0, 0, 0, 0, 1);
		case 14: LoopingAnim(playerid, "PED", "roadcross_old", 4.1, 1, 0, 0, 0, 0, 1);
		case 15: LoopingAnim(playerid, "PED", "woman_idlestance", 4.1, 1, 0, 0, 0, 0, 1);
		default: SendClientMessageEx(playerid, COLOR_WHITE, "Usage: /idles [1-15]");
	}
	return 1;
}
CMD:sunbathe(playerid, params[])
{
	if(!IsAbleToUseAnimation(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
	switch(strval(params))
	{
		case 1: LoopingAnim(playerid, "SUNBATHE", "batherdown", 4.1, 0, 1, 1, 1, 1, 1);
		case 2: LoopingAnim(playerid, "SUNBATHE", "batherup", 4.1, 0, 1, 1, 1, 1, 1);
		case 3: LoopingAnim(playerid, "SUNBATHE", "Lay_Bac_in", 4.1, 0, 1, 1, 1, 1, 1);
		case 4: LoopingAnim(playerid, "SUNBATHE", "Lay_Bac_out", 4.1, 0, 1, 1, 1, 1, 1);
		case 5: LoopingAnim(playerid, "SUNBATHE", "ParkSit_M_IdleA", 4.1, 0, 1, 1, 1, 1, 1);
		case 6: LoopingAnim(playerid, "SUNBATHE", "ParkSit_M_IdleB", 4.1, 0, 1, 1, 1, 1, 1);
		case 7: LoopingAnim(playerid, "SUNBATHE", "ParkSit_M_IdleC", 4.1, 0, 1, 1, 1, 1, 1);
		case 8: LoopingAnim(playerid, "SUNBATHE", "ParkSit_M_in", 4.1, 0, 1, 1, 1, 1, 1);
		case 9: LoopingAnim(playerid, "SUNBATHE", "ParkSit_M_out", 4.1, 0, 1, 1, 1, 1, 1);
		case 10: LoopingAnim(playerid, "SUNBATHE", "ParkSit_W_idleA", 4.1, 0, 1, 1, 1, 1, 1);
		case 11: LoopingAnim(playerid, "SUNBATHE", "ParkSit_W_idleB", 4.1, 0, 1, 1, 1, 1, 1);
		case 12: LoopingAnim(playerid, "SUNBATHE", "ParkSit_W_idleC", 4.1, 0, 1, 1, 1, 1, 1);
		case 13: LoopingAnim(playerid, "SUNBATHE", "ParkSit_W_in", 4.1, 0, 1, 1, 1, 1, 1);
		case 14: LoopingAnim(playerid, "SUNBATHE", "ParkSit_W_out", 4.1, 0, 1, 1, 1, 1, 1);
		case 15: LoopingAnim(playerid, "SUNBATHE", "SBATHE_F_LieB2Sit", 4.1, 0, 1, 1, 1, 1, 1);
		case 16: LoopingAnim(playerid, "SUNBATHE", "SBATHE_F_Out", 4.1, 0, 1, 1, 1, 1, 1);
		case 17: LoopingAnim(playerid, "SUNBATHE", "SitnWait_in_W", 4.1, 0, 1, 1, 1, 1, 1);
		case 18: LoopingAnim(playerid, "SUNBATHE", "SitnWait_out_W", 4.1, 0, 1, 1, 1, 1, 1);
		default: SendClientMessageEx(playerid, COLOR_WHITE, "Usage: /sunbathe [1-18]");
	}
	return 1;
}



stock IsValidVehicleModel(model)
{
    return (model >= 400 && model <= 611);
}

stock IsVirtualWorldAvailable(world)
{
	for (new i=1; i < MAX_BUSINESSES; i++)
	{
	    if(BusinessInfo[i][bVirtualWorld] == world)
	    {
	        return false;
	    }
	}

	for (new i=1; i < MAX_HOUSES; i++)
	{
	    if(HouseInfo[i][hVirtualWorld] == world)
	    {
	        return false;
	    }
	}
	return true;
}

stock GetAvailableVehicleSlot(playerid)
{
	for (new i=0; i < MAX_PLAYEROWNED_VEHICLES; i++)
	{
	    if(PlayerVehicleInfo[playerid][i][pvModelId] == 0)
	    {
	    	return i;
	    }
	}
	return INVALID_SLOT_ID;
}

stock GetAvailableVirtualWorld()
{
	new
	    randVirtualWorld = random(100000);
	do {
	    randVirtualWorld = random(100000);
	}
	while (!IsVirtualWorldAvailable(randVirtualWorld));
	return randVirtualWorld;
}

stock GetPlayerBusiness(playerid) // Checks what business a player is in
{
	for (new i=1; i < MAX_BUSINESSES; i++)
	{
	    if(BusinessInfo[i][bExistant] == 1)
	    {
		    if(BusinessInfo[i][bVirtualWorld] == GetPlayerVirtualWorld(playerid))
		    {
		        return i;
		    }
	    }
	}
	return INVALID_BUSINESS_ID;
}

stock IsInsideBusiness(playerid, STORE_TYPE)
{
	new b = GetPlayerBusiness(playerid);
	if(b != INVALID_BUSINESS_ID)
	{
	    if(STORE_TYPE == GetBusinessType(b))
	    {
	    	return true;
		}
	}
	return false;
}

stock GetBusinessType(b)
{
	if(b == INVALID_BUSINESS_ID) return BUSINESS_TYPE_UNDEFINED;
	switch (BusinessInfo[b][bInterior])
	{
	    case 0: return BUSINESS_TYPE_UNDEFINED; // null
	    case 1: return BUSINESS_TYPE_HORSEBET; // Horse Betting Place
	    case 2: return BUSINESS_TYPE_CLUB; // Small Size Strip Club
	    case 3: return BUSINESS_TYPE_UNDEFINED; // Modern barber shop
	    case 4: return BUSINESS_TYPE_CLOTHING; // ProLaps Store
	    case 5: return BUSINESS_TYPE_SEXSTORE; // Sex Store
	    case 6: return BUSINESS_TYPE_UNDEFINED; // Tiny Barber Shop
	    case 7: return BUSINESS_TYPE_PIZZA; // Pizza Stack Co
	    case 8: return BUSINESS_TYPE_DONUTS; // Rusty Brown Donuts
	    case 9: return BUSINESS_TYPE_CLOTHING; // Victim Clothing
	    case 10: return BUSINESS_TYPE_AMMUNATION; // Ammunation
	    case 11: return BUSINESS_TYPE_GYM; // LV Gym Interior
	    case 12: return BUSINESS_TYPE_AMMUNATION; // Medium Ammunation
	    case 13: return BUSINESS_TYPE_CLOTHING; // Urban Clothing
	    case 14: return BUSINESS_TYPE_CLUB; // Pig Pen
	    case 15: return BUSINESS_TYPE_BURGERSHOT; // Burger Shot
	    case 16: return BUSINESS_TYPE_UNDEFINED; // Reeces Barber Shop
	    case 17: return BUSINESS_TYPE_CLOTHING; // Zip Clothing
	    case 18: return BUSINESS_TYPE_CLOTHING; // Didier Sachs
	    case 19: return BUSINESS_TYPE_CLUB; // Club
	    case 20: return BUSINESS_TYPE_STORE; // 24/7 (Version 4)
	    case 21: return BUSINESS_TYPE_CLOTHING; // Binco Clothing
	    case 22: return BUSINESS_TYPE_CLUB; // Lil Probe Inn
	    case 23: return BUSINESS_TYPE_CLUB; // Jay's Diner
	    case 24: return BUSINESS_TYPE_UNDEFINED; // Modern Barber Store
	    case 25: return BUSINESS_TYPE_GYM; // SF Cobra Gym
	    case 26: return BUSINESS_TYPE_UNDEFINED; // Zero's RC Store
	    case 27: return BUSINESS_TYPE_AMMUNATION; // Ammunation (Version 4)
	    case 28: return BUSINESS_TYPE_AMMUNATION; // Ammunation (Version 5)
	    case 29: return BUSINESS_TYPE_CLUCKINGBELL; // Clucking Bell
		case 30: return BUSINESS_TYPE_CLUB; // Ten Green Bottles
	}
	return BUSINESS_TYPE_UNDEFINED;
}

stock GetBusinessMapIcon(b)
{
	if(b == INVALID_BUSINESS_ID) return 0;
	switch (BusinessInfo[b][bInterior])
	{
	    case 0: return 0; // null
	    case 1: return 0; // Horse Betting Place
	    case 2: return 48; // Small Size Strip Club
	    case 3: return 7; // Modern barber shop
	    case 4: return 45; // ProLaps Store
	    case 5: return 0; // Sex Store
	    case 6: return 7; // Tiny Barber Shop
	    case 7: return 29; // Pizza Stack Co
	    case 8: return 50; // Rusty Brown Donuts
	    case 9: return 45; // Victim Clothing
	    case 10: return 6; // Ammunation
	    case 11: return 54; // LV Gym Interior
	    case 12: return 6; // Medium Ammunation
	    case 13: return 45; // Urban Clothing
	    case 14: return 48; // Pig Pen
	    case 15: return 10; // Burger Shot
	    case 16: return 7; // Reeces Barber Shop
	    case 17: return 45; // Zip Clothing
	    case 18: return 45; // Didier Sachs
	    case 19: return 48; // Club
	    case 20: return 52; // 24/7 (Version 4)
	    case 21: return 45; // Binco Clothing
	    case 22: return 49; // Lil Probe Inn
	    case 23: return 17; // Jay's Diner
	    case 24: return 7; // Modern Barber Store
	    case 25: return 54; // SF Cobra Gym
	    case 26: return 47; // Zero's RC Store
	    case 27: return 6; // Ammunation (Version 4)
	    case 28: return 6; // Ammunation (Version 5)
	    case 29: return 14; // Clucking Bell
		case 30: return 49; // Ten Green Bottles
	}
	return 0;
}

IsCar(vehicleid)
{
	switch(GetVehicleModel(vehicleid))
	{
		case
		    // Cars
			416, 445, 602, 485, 568,
			429, 499, 424, 536, 496,
			504, 422, 609, 498, 401,
			575, 518, 402, 541, 482,
			431, 438, 457, 527, 483,
			524, 415, 542, 589, 480,
			596, 599, 597, 598, 578,
			486, 507, 562, 585, 427,
			419, 587, 490, 528, 533,
			544, 407, 565, 455, 530,
			526, 466, 604, 492, 474,
			434, 502, 503, 494, 579,
			545, 411, 546, 559, 508,
			571, 400, 403, 517, 410,
			551, 500, 418, 572, 423,
			582, 467, 404, 514, 603,
			516, 600, 413, 426, 436,
			547, 489, 441, 594, 564,
			479, 534, 505, 442, 440,
			475, 543, 605, 495, 567,
			515, 428, 405, 535, 458,
			580, 439, 561, 409, 560,
			550, 506, 601, 574, 566,
			549, 420, 459, 576, 583,
			451, 558, 552, 540, 491,
			412, 478, 421, 529, 555,
			456, 554, 477
		: return 1;
	}
	return 0;
}

IsRunnableEngine(vehicleid)
{
	switch(GetVehicleModel(vehicleid))
	{
		case 509, 481, 510: return false;
	}
	return true;
}

stock IsVehicleOccupied(vehicleid)
{
    foreach(new i: Player)
	{
        if(GetPlayerVehicleID(i) == vehicleid) return true;
    }
    return false;
}

stock GetVehicleDriver(vehicleid)
{
	foreach(new i: Player)
	{
	    if(GetPlayerVehicleID(i) == vehicleid && GetPlayerVehicleSeat(i) == 0)
	    {
	        return i;
	    }
	}
	return INVALID_PLAYER_ID;
}

stock InitiatePaycheck()
{
	new string[256];
	foreach(new i: Player)
	{
		if(GetPVarInt(i, "gPlayerLogged") == 1 && gettime() - LastUpdate[i] < 20*60 && PlayerInfo[i][pTutorial] == 1)
	    {
			if(PlayerInfo[i][pFaction] && PlayerInfo[i][pFaction] != 4) PlayerInfo[i][pPaycheck] += (PlayerInfo[i][pRank]+1)*50;
			SendClientMessageEx(i, COLOR_ORANGE, "------------------------------------------");
	        SendClientMessageEx(i, COLOR_ORANGE, "Paycheck Information");
	   		format(string, sizeof(string), "Account Name: %s | Paycheck: $%d", GetPlayerNameEx(i), PlayerInfo[i][pPaycheck]);
	        SendClientMessageEx(i, COLOR_WHITE, string);
	        
	   		format(string, sizeof(string), "Old Balance: $%d | New Balance: $%d", PlayerInfo[i][pBankBalance], (PlayerInfo[i][pBankBalance] + PlayerInfo[i][pPaycheck]));
	        SendClientMessageEx(i, COLOR_WHITE, string);
	        PlayerInfo[i][pBankBalance] += PlayerInfo[i][pPaycheck];

			new safeTax;
    		if(PlayerInfo[i][pPaycheck] > 100) safeTax = floatround((PlayerInfo[i][pPaycheck] / 100) * TAX_PERCENTAGE);
			else safeTax = TAX_PERCENTAGE;
	   		format(string, sizeof(string), "Tax: $%d (%d percentage) has been deducted from your bank account.", safeTax, TAX_PERCENTAGE);
	        SendClientMessageEx(i, COLOR_GREY, string);
	        PlayerInfo[i][pBankBalance] -= safeTax;
	        AddVaultMoney(2, safeTax);
	        
	   		format(string, sizeof(string), "Final Balance: $%d", PlayerInfo[i][pBankBalance]);
	        SendClientMessageEx(i, COLOR_ORANGE, string);
	        SendClientMessageEx(i, COLOR_ORANGE, "------------------------------------------");
	        if(PlayerInfo[i][pPaycheck] == 0) SendClientMessageEx(i, COLOR_YELLOW, "You were not given a paycheck because you didn't have a sort of proper employment.");
			else printf("[Paycheck]: %s has received $%d with a tax of $%d and $%d in his bank account.", PlayerInfo[i][pUsername], PlayerInfo[i][pPaycheck], safeTax, PlayerInfo[i][pBankBalance]);
            PlayerInfo[i][pPlayingHours]++;
            PlayerInfo[i][pExperience]++;
            PlayerInfo[i][pPaycheck] = 0;
            if(PlayerInfo[i][pExperience] >= (PlayerInfo[i][pLevel] + 1) * 5 && PlayerInfo[i][pLevel] < 50)
            {
			 	format(string, sizeof(string), "You are now level %d, you have lost %d experience points.", PlayerInfo[i][pLevel] + 1, (PlayerInfo[i][pLevel] + 1) * 5);
				SendClientMessageEx(i, COLOR_WHITE, string);
			 	PlayerInfo[i][pLevel] += floatround(PlayerInfo[i][pExperience] / ((PlayerInfo[i][pLevel] + 1) * 5), floatround_floor);
			 	PlayerInfo[i][pExperience] = 0;
				SetPlayerScore(i, PlayerInfo[i][pLevel]);
   				PlayerPlaySound(i, 1052, 0.0, 0.0, 0.0);

            }
	    }
    }
}

stock IsBusinessOwner(businessid, playerid)
{
	return (!strcmp(BusinessInfo[businessid][bOwner], PlayerInfo[playerid][pUsername], true));
}

stock IsHouseOwner(houseid, playerid)
{
	return (!strcmp(HouseInfo[houseid][hOwner], PlayerInfo[playerid][pUsername], true));
}

stock GetNearBusiness(playerid)
{
	for (new b=1; b < MAX_BUSINESSES; b++)
	{
	    if(BusinessInfo[b][bExistant] == 1 && BusinessInfo[b][bInterior] >= 1 && BusinessInfo[b][bInterior] <= 30)
	    {
		    new
				i = BusinessInfo[b][bInterior] - 1;
		    if(IsPlayerInRangeOfPoint(playerid, 2.0, BusinessInfo[b][bPosition][0], BusinessInfo[b][bPosition][1], BusinessInfo[b][bPosition][2]))
		        return b;
		    else if(IsPlayerInRangeOfPoint(playerid, 2.0, BusinessInterior[i][0], BusinessInterior[i][1], BusinessInterior[i][2]) && BusinessInfo[b][bVirtualWorld] == GetPlayerVirtualWorld(playerid) && floatround(BusinessInterior[i][4]) == GetPlayerInterior(playerid))
     			return b;
	    }
	}
	return INVALID_BUSINESS_ID;
}

stock GetNearHouse(playerid)
{
	for (new h=1; h < MAX_HOUSES; h++)
	{
	    if(HouseInfo[h][hExistant] == 1 && HouseInfo[h][hInterior] >= 1 && HouseInfo[h][hInterior] <= 21)
	    {
		    new
				i = HouseInfo[h][hInterior] - 1;
		    if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[h][hPosition][0], HouseInfo[h][hPosition][1], HouseInfo[h][hPosition][2]))
		        return h;
		    else if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInterior[i][0], HouseInterior[i][1], HouseInterior[i][2]) && HouseInfo[h][hVirtualWorld] == GetPlayerVirtualWorld(playerid) && floatround(HouseInterior[i][4]) == GetPlayerInterior(playerid))
		      	return h;
	    }
	}
	return INVALID_HOUSE_ID;
}

stock GetNearWaypoint(playerid)
{
	for (new w=1; w < MAX_WAYPOINTS; w++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 2.0, WaypointInfo[w][wPosition][0], WaypointInfo[w][wPosition][1], WaypointInfo[w][wPosition][2]))
	    {
	        if(GetPlayerInterior(playerid) == WaypointInfo[w][wInterior] && GetPlayerVirtualWorld(playerid) == WaypointInfo[w][wVirtualWorld])
	        {
	        	return w;
	        }
	    }
	    else if(IsPlayerInRangeOfPoint(playerid, 2.0, WaypointInfo[w][wDestPosition][0], WaypointInfo[w][wDestPosition][1], WaypointInfo[w][wDestPosition][2]))
	    {
	        if(GetPlayerInterior(playerid) == WaypointInfo[w][wDestInterior] && GetPlayerVirtualWorld(playerid) == WaypointInfo[w][wDestVirtualWorld])
	        {
	        	return w;
	        }
	    }
	}
	return INVALID_WAYPOINT_ID;
}

stock IsPlayerRestricted(playerid)
{
	return GetPVarInt(playerid, "IsCuffed") == 1 || GetPVarInt(playerid, "ActionRestriction") == 1 || GetPVarInt(playerid, "RequireMedicalAssistance") == 1 || PlayerInfo[playerid][pMedicalBill] == 1;
}

stock IsAbleToUseAnimation(playerid)
{
	if(GetPVarInt(playerid, "IsCuffed") == 1 || GetPVarInt(playerid, "ActionRestriction") == 1 || GetPVarInt(playerid, "RequireMedicalAssistance") == 1 || PlayerInfo[playerid][pMedicalBill] == 1) return false;
	if(IsPlayerInAnyVehicle(playerid) == 1)
    {
		SendClientMessageEx(playerid, COLOR_GREY, "You need to be on foot to use this animation.");
		return false;
	}
	return true;
}

stock IsVehicleLowrider(carid)
{
	new Cars[] = { 536, 575, 567};
	for(new i = 0; i < sizeof(Cars); i++)
	{
		if(GetVehicleModel(carid) == Cars[i]) return true;
	}
	return false;
}

stock IsKeyJustDown(key, newkeys, oldkeys)
{
	if((newkeys & key) && !(oldkeys & key)) return true;
	else return false;
}

stock PlayAnim(playerid, animlib[], animname[], Float:fDelta, loop, lockx, locky, freeze, time, forcesync)
{
	if(GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
	ApplyAnimation(playerid, animlib, animname, fDelta, loop, lockx, locky, freeze, time, forcesync);
}

stock LoopingAnim(playerid, animlib[], animname[], Float:fDelta, loop, lockx, locky, freeze, time, forcesync)
{
	if(GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
    gPlayerUsingLoopingAnim[playerid] = 1;
	ApplyAnimation(playerid, animlib, animname, fDelta, loop, lockx, locky, freeze, time, forcesync);
    TextDrawShowForPlayer(playerid,StopAnim);
}

stock StopLoopingAnim(playerid)
{
	gPlayerUsingLoopingAnim[playerid] = 0;
    ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
}

stock PreloadAnimLib(playerid)
{
	ApplyAnimation(playerid, "AIRPORT", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "Attractors", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BAR", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BASEBALL", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BD_FIRE", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "benchpress", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BF_injection", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BIKED", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BIKEH", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BIKELEAP", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BIKES", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BIKEV", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BIKE_DBZ", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BMX", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BOX", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BSKTBALL", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BUDDY", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BUS", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CAMERA", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CAR", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CAR_CHAT", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CASINO", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CHAINSAW", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CHOPPA", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CLOTHES", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "COACH", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "COLT45", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "COP_DVBYZ", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CRIB", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DAM_JUMP", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DANCING", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DILDO", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DODGE", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DOZER", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DRIVEBYS", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FAT", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FIGHT_B", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FIGHT_C", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FIGHT_D", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FIGHT_E", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FINALE", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FINALE2", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "Flowers", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FOOD", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "Freeweights", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GANGS", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GHANDS", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GHETTO_DB", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "goggles", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GRAFFITI", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GRAVEYARD", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GRENADE", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GYMNASIUM", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "HAIRCUTS", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "HEIST9", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "INT_HOUSE", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "INT_OFFICE", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "INT_SHOP", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "JST_BUISNESS", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "KART", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "KISSING", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "KNIFE", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "LAPDAN1", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "LAPDAN2", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "LAPDAN3", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "LOWRIDER", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MD_CHASE", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MEDIC", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MD_END", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MISC", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MTB", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MUSCULAR", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "NEVADA", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "ON_LOOKERS", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "OTB", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PARACHUTE", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PARK", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PAULNMAC", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PED", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PLAYER_DVBYS", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PLAYIDLES", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "POLICE", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "POOL", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "POOR", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PYTHON", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "QUAD", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "QUAD_DBZ", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "RIFLE", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "RIOT", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "ROB_BANK", "null", 0, 0, 0, 0, 0, 0, 0);
   	ApplyAnimation(playerid, "ROCKET", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "RUSTLER", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "RYDER", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SCRATCHING", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SHAMAL", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SHOTGUN", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SILENCED", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SKATE", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SPRAYCAN", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "STRIP", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SUNBATHE", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SWAT", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SWEET", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SWIM", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SWORD", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "TANK", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "TATTOOS", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "TEC", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "TRAIN", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "TRUCK", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "UZI", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "VAN", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "VENDING", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "VORTEX", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "WAYFARER", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "WEAPONS", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "WUZI", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SNM", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BLOWJOBZ", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SEX", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BOMBER", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "RAPPING", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SHOP", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BEACH", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SMOKING", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FOOD", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "ON_LOOKERS", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DEALER", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CRACK", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CARRY", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "COP_AMBIENT", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PARK", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "INT_HOUSE", "null", 0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FOOD", "null", 0, 0, 0, 0, 0, 0, 0);
}


stock PoliceAlert(message[])
{
	SendRadioMessage(1, COLOR_LIGHTBLUE, message);
	SendRadioMessage(2, COLOR_LIGHTBLUE, message);
	SendRadioMessage(6, COLOR_LIGHTBLUE, message);
 	/*new File:crimelog = fopen("logs/crime.log", io_append);
 	new fmessage[256];
 	format(fmessage, sizeof(fmessage), "%s\n", message);
  	fwrite(crimelog, fmessage);
   	fclose(crimelog);*/
   	Log("logs/police.log", message);
}

stock GetPlayerGender(playerid)
{
	new gender[7];
	switch(PlayerInfo[playerid][pGender])
	{
	    case 1: gender = "Male";
	    case 2: gender = "Female";
		default: gender = "Gay";
	}
	return gender;
}

stock GetPlayerJob(playerid)
{
	new job[24];
	switch(PlayerInfo[playerid][pJob])
	{
	    case 1: { job = "Trucker"; }
	    case 2: { job = "Mechanic"; }
	    case 3: { job = "Pizza Boy"; }
	    case 4: { job = "Street Sweeper"; }
	    case 5: { job = "Taxi Driver"; }
		default: { job = "None"; }
	}
	return job;

}

stock AreAnyTaxiDriversOnline()
{
	foreach (new i: Player)
	{
	    if(PlayerInfo[i][pJob] == 5 && PlayerInfo[i][pDuty] == 1)
	    {
	        return true;
		}
	}
	return false;
}

stock AreAnyAdministratorsOnline()
{
	foreach (new i: Player)
	{
	    if(IsAdmin(i, ADMIN_LEVEL_TRIALADMIN))
	    {
	        return true;
		}
	}
	return false;
}

stock GetFactionName(id)
{
	new FactionName[24];
	switch(id)
	{
	    case 1: { FactionName = "LSPD"; }
	    case 2: { FactionName = "Executive Branch"; }
	    case 3: { FactionName = "LSFMD"; }
	    case 4: { FactionName = "Gun Runners"; }
	    case 5: { FactionName = "SANews"; }
	    case 6: { FactionName = "FBI"; }
	    case 7: { FactionName = "DoC"; }
	   	default: { FactionName = "None"; }
	}
	return FactionName;
}

stock GetFamilyName(id)
{
	new name[24];
	switch (id)
	{
		case 1 .. MAX_FAMILIES: strcpy(name, FamilyInfo[id][fName], 24);
		default: name = "None";
	}
	return name;
}

stock GetFamilyRankName(id, rank)
{
	new
	    familyRank[13];
	if(id < 1 || id > MAX_FAMILIES) {
	    familyRank = "None";
	} else {
		switch (rank)
		{
			case 1: { strcpy(familyRank, FamilyInfo[id][fRank1], 12); }
			case 2: { strcpy(familyRank, FamilyInfo[id][fRank2], 12);  }
			case 3: { strcpy(familyRank, FamilyInfo[id][fRank3], 12);  }
			case 4: { strcpy(familyRank, FamilyInfo[id][fRank4], 12);  }
			case 5: { strcpy(familyRank, FamilyInfo[id][fRank5], 12);  }
			case 6: { strcpy(familyRank, FamilyInfo[id][fRank6], 12);  }
			default: { strcpy(familyRank, FamilyInfo[id][fRank1], 12);  }
		}
	}
	return familyRank;
}

stock GetDivisionName(faction, id)
{
	new divisionname[13];
	switch(faction)
	{
		case 0:
		{
		    divisionname = "None";
		}

	    case 1:
	    {
		    switch(id)
		    {
		        case 1: { divisionname = "I.A"; }
		        case 2: { divisionname = "SWAT"; }
		        case 3: { divisionname = "DET"; }
				default: { divisionname = "G.D."; }
			}
		}

		case 2:
	    {
		    switch(id)
		    {
		        case 1: { divisionname = "SS"; }
		        case 2: { divisionname = "Judical"; }
		        case 3: { divisionname = "CIA"; }
		        case 4: { divisionname = "ADM"; }
				default: { divisionname = "G.D."; }
			}
		}
		
		case 3:
		{
		    switch(id)
		    {
			    case 1: divisionname = "FD";
			    case 2: divisionname = "T&R";
				default: { divisionname = "G.D."; }
			}
		}

		case 5:
		{
		    switch(id)
		    {
			    case 1: divisionname = "Security";
			    case 2: divisionname = "I.A";
			    case 3: divisionname = "T&R";
				default: { divisionname = "G.D."; }
			}
		}

		case 6:
		{
		    switch(id)
		    {
			    case 1: divisionname = "FAN";
			    case 2: divisionname = "CID";
			    case 3: divisionname = "IA";
			    case 4: divisionname = "X-Files";
				default: { divisionname = "G.D."; }
			}
		}
		
		default:
		{
			divisionname = "G.D.";
		}
	}
	return divisionname;
}

stock GetRankName(playerid)
{
	new rankname[32];
	if(PlayerInfo[playerid][pFamily] > 0) {
		rankname = GetFamilyRankName(PlayerInfo[playerid][pFamily], PlayerInfo[playerid][pRank]);
	} else {
		switch(PlayerInfo[playerid][pFaction])
		{
			case 0:
			{
			    rankname = "None";
			}

		    case 1:
		    {
			    switch(PlayerInfo[playerid][pRank])
			    {
			        case 1: { rankname = "Officer"; }
			        case 2: { rankname = "Corporal"; }
			        case 3: { rankname = "Sergeant"; }
			        case 4: { rankname = "Lieutenant"; }
			        case 5: { rankname = "Captain"; }
			        case 6: { rankname = "Chief"; }
					default: { rankname = "Cadet"; }
				}
			}

			case 2:
		    {
			    switch(PlayerInfo[playerid][pRank])
			    {
			        case 1: { rankname = "Agent"; }
			        case 2: { rankname = "Judical Clerk"; }
			        case 3: { rankname = "Director"; }
			        case 4: { rankname = "Chief of Staff"; }
			        case 5: { rankname = "Vice President"; }
			        case 6: { rankname = "President"; }
					default: { rankname = "Intern"; }
				}
			}

			case 3:
		    {
			    switch(PlayerInfo[playerid][pRank])
			    {
					case 1: rankname = "EMT Intermediate";
					case 2: rankname = "EMT Paramedic";
					case 3: rankname = "Lieutenant";
					case 4: rankname = "Captain";
					case 5: rankname = "Deputy Chief";
					case 6: rankname = "Chief";
					default: rankname = "EMT Basic";
				}
			}

			case 4:
			{
			    switch(PlayerInfo[playerid][pRank])
			    {
			        case 1: { rankname = "Worker"; }
			        case 2: { rankname = "Gunsmith"; }
			        case 3: { rankname = "Representative"; }
			        case 4: { rankname = "Area Coordinator"; }
			        case 5: { rankname = "Vice Director"; }
			        case 6: { rankname = "Director"; }
					default: { rankname = "Rookie"; }
				}
			}

			case 5:
		    {
			    switch(PlayerInfo[playerid][pRank])
			    {
			        case 1: { rankname = "News Reporter"; }
			        case 2: { rankname = "Media Producer"; }
			        case 3: { rankname = "Network Editor"; }
			        case 4: { rankname = "Network Manager"; }
			        case 5: { rankname = "Co-Network Producer"; }
			        case 6: { rankname = "Network Producer"; }
					default: { rankname = "Journalist"; }
				}
			}

			case 6:
		    {
			    switch(PlayerInfo[playerid][pRank])
			    {
				    case 1: rankname = "Staff";
				    case 2: rankname = "Agent";
				    case 3: rankname = "Special Agent";
				    case 4: rankname = "Section Chief";
				    case 5: rankname = "Assistant Director";
				    case 6: rankname = "Director";
				    default: rankname = "Intern";
				}
			}
			
			case 7:
		    {
			    switch(PlayerInfo[playerid][pRank])
			    {
				    case 1: rankname = "Senior Officer";
				    case 2: rankname = "Seargent";
				    case 3: rankname = "Lieutenant";
				    case 4: rankname = "Captain";
				    case 5: rankname = "Warden";
				    case 6: rankname = "Commissioner";
				    default: rankname = "Correction Officer";
				}
			}
			default:
			{
				rankname = "Undefined";
			}
		}
	}
	return rankname;
}

//------------------------------------------------

stock GetNumberOfPages()
{
	if((gTotalItems >= 21) && (gTotalItems % 21) == 0)
	{
		return (gTotalItems / 21);
	}
	else return (gTotalItems / 21) + 1;
}


PlayerText:CreateCurrentPageTextDraw(playerid, Float:Xpos, Float:Ypos)
{
	new PlayerText:txtInit;
   	txtInit = CreatePlayerTextDraw(playerid, Xpos, Ypos, "0/0");
   	PlayerTextDrawUseBox(playerid, txtInit, 0);
	PlayerTextDrawLetterSize(playerid, txtInit, 0.4, 1.1);
	PlayerTextDrawFont(playerid, txtInit, 1);
	PlayerTextDrawSetShadow(playerid, txtInit, 0);
    PlayerTextDrawSetOutline(playerid, txtInit, 1);
    PlayerTextDrawColor(playerid, txtInit, 0xACCBF1FF);
    PlayerTextDrawShow(playerid, txtInit);
    return txtInit;
}

PlayerText:CreatePlayerDialogButton(playerid, Float:Xpos, Float:Ypos, Float:Width, Float:Height, button_text[])
{
 	new PlayerText:txtInit;
   	txtInit = CreatePlayerTextDraw(playerid, Xpos, Ypos, button_text);
   	PlayerTextDrawUseBox(playerid, txtInit, 1);
   	PlayerTextDrawBoxColor(playerid, txtInit, 0x000000FF);
   	PlayerTextDrawBackgroundColor(playerid, txtInit, 0x000000FF);
	PlayerTextDrawLetterSize(playerid, txtInit, 0.4, 1.1);
	PlayerTextDrawFont(playerid, txtInit, 1);
	PlayerTextDrawSetShadow(playerid, txtInit, 0); // no shadow
    PlayerTextDrawSetOutline(playerid, txtInit, 0);
    PlayerTextDrawColor(playerid, txtInit, 0x4A5A6BFF);
    PlayerTextDrawSetSelectable(playerid, txtInit, 1);
    PlayerTextDrawAlignment(playerid, txtInit, 2);
    PlayerTextDrawTextSize(playerid, txtInit, Height, Width); // The width and height are reversed for centering.. something the game does <g>
    PlayerTextDrawShow(playerid, txtInit);
    return txtInit;
}


PlayerText:CreatePlayerHeaderTextDraw(playerid, Float:Xpos, Float:Ypos, header_text[])
{
	new PlayerText:txtInit;
   	txtInit = CreatePlayerTextDraw(playerid, Xpos, Ypos, header_text);
   	PlayerTextDrawUseBox(playerid, txtInit, 0);
	PlayerTextDrawLetterSize(playerid, txtInit, 1.25, 3.0);
	PlayerTextDrawFont(playerid, txtInit, 0);
	PlayerTextDrawSetShadow(playerid, txtInit, 0);
    PlayerTextDrawSetOutline(playerid, txtInit, 1);
    PlayerTextDrawColor(playerid, txtInit, 0xACCBF1FF);
    PlayerTextDrawShow(playerid, txtInit);
    return txtInit;
}

PlayerText:CreatePlayerBackgroundTextDraw(playerid, Float:Xpos, Float:Ypos, Float:Width, Float:Height)
{
	new PlayerText:txtBackground = CreatePlayerTextDraw(playerid, Xpos, Ypos,
	"                                            ~n~"); // enough space for everyone
    PlayerTextDrawUseBox(playerid, txtBackground, 1);
    PlayerTextDrawBoxColor(playerid, txtBackground, 0x4A5A6BBB);
	PlayerTextDrawLetterSize(playerid, txtBackground, 5.0, 5.0);
	PlayerTextDrawFont(playerid, txtBackground, 0);
	PlayerTextDrawSetShadow(playerid, txtBackground, 0);
    PlayerTextDrawSetOutline(playerid, txtBackground, 0);
    PlayerTextDrawColor(playerid, txtBackground,0x000000FF);
    PlayerTextDrawTextSize(playerid, txtBackground, Width, Height);
   	PlayerTextDrawBackgroundColor(playerid, txtBackground, 0x4A5A6BBB);
    PlayerTextDrawShow(playerid, txtBackground);
    return txtBackground;
}

PlayerText:CreateModelPreviewTextDraw(playerid, modelindex, Float:Xpos, Float:Ypos, Float:width, Float:height)
{
    new PlayerText:txtPlayerSprite = CreatePlayerTextDraw(playerid, Xpos, Ypos, ""); // it has to be set with SetText later
    PlayerTextDrawFont(playerid, txtPlayerSprite, TEXT_DRAW_FONT_MODEL_PREVIEW);
    PlayerTextDrawColor(playerid, txtPlayerSprite, 0xFFFFFFFF);
    PlayerTextDrawBackgroundColor(playerid, txtPlayerSprite, 0x88888899);
    PlayerTextDrawTextSize(playerid, txtPlayerSprite, width, height); // Text size is the Width:Height
    PlayerTextDrawSetPreviewModel(playerid, txtPlayerSprite, modelindex);
    PlayerTextDrawSetSelectable(playerid, txtPlayerSprite, 1);
    PlayerTextDrawShow(playerid,txtPlayerSprite);
    return txtPlayerSprite;
}

stock DestroyPlayerModelPreviews(playerid)
{
	new x=0;
	while(x != 21)
	{
	    if(gSelectionItems[playerid][x] != PlayerText:INVALID_TEXT_DRAW)
		{
			PlayerTextDrawDestroy(playerid, gSelectionItems[playerid][x]);
			gSelectionItems[playerid][x] = PlayerText:INVALID_TEXT_DRAW;
		}
		x++;
	}
}

stock ShowPlayerModelPreviews(playerid)
{
    new x=0;
	new Float:BaseX = SKIN_DIALOG_BASE_X;
	new Float:BaseY = SKIN_DIALOG_BASE_Y - (SKIN_SPRITE_DIM_Y * 0.33); // down a bit
	new linetracker = 0;

	new itemat = GetPVarInt(playerid, "skinc_page") * 21;

	// Destroy any previous ones created
	DestroyPlayerModelPreviews(playerid);

	while(x != 21 && itemat < gTotalItems)
	{
	    if(linetracker == 0)
		{
	        BaseX = SKIN_DIALOG_BASE_X + 25.0; // in a bit from the box
	        BaseY += SKIN_SPRITE_DIM_Y + 1.0; // move on the Y for the next line
		}
  		gSelectionItems[playerid][x] = CreateModelPreviewTextDraw(playerid, gItemList[itemat], BaseX, BaseY, SKIN_SPRITE_DIM_X, SKIN_SPRITE_DIM_Y);
  		gSelectionItemsTag[playerid][x] = gItemList[itemat];
		BaseX += SKIN_SPRITE_DIM_X + 1.0; // move on the X for the next sprite
		linetracker++;
		if(linetracker == 7) linetracker = 0;
		itemat++;
		x++;
	}
}


stock UpdatePageTextDraw(playerid)
{
	new PageText[64+1];
	format(PageText, 64, "%d/%d", GetPVarInt(playerid,"skinc_page") + 1, GetNumberOfPages());
	PlayerTextDrawSetString(playerid, gCurrentPageTextDrawId[playerid], PageText);
}

stock CreateSelectionMenu(playerid)
{
    gBackgroundTextDrawId[playerid] = CreatePlayerBackgroundTextDraw(playerid, SKIN_DIALOG_BASE_X, SKIN_DIALOG_BASE_Y + 20.0, SKIN_DIALOG_WIDTH, SKIN_DIALOG_HEIGHT);
    gHeaderTextDrawId[playerid] = CreatePlayerHeaderTextDraw(playerid, SKIN_DIALOG_BASE_X, SKIN_DIALOG_BASE_Y, "Skins");
    gCurrentPageTextDrawId[playerid] = CreateCurrentPageTextDraw(playerid, SKIN_DIALOG_WIDTH - 30.0, SKIN_DIALOG_BASE_Y + 15.0);
    gNextButtonTextDrawId[playerid] = CreatePlayerDialogButton(playerid, SKIN_DIALOG_WIDTH - 30.0, SKIN_DIALOG_BASE_Y+SKIN_DIALOG_HEIGHT+100.0, 50.0, 16.0, "Next");
    gPrevButtonTextDrawId[playerid] = CreatePlayerDialogButton(playerid, SKIN_DIALOG_WIDTH - 90.0, SKIN_DIALOG_BASE_Y+SKIN_DIALOG_HEIGHT+100.0, 50.0, 16.0, "Prev");

    ShowPlayerModelPreviews(playerid);
    UpdatePageTextDraw(playerid);
}

stock DestroySelectionMenu(playerid)
{
	DestroyPlayerModelPreviews(playerid);

	PlayerTextDrawDestroy(playerid, gHeaderTextDrawId[playerid]);
	PlayerTextDrawDestroy(playerid, gBackgroundTextDrawId[playerid]);
	PlayerTextDrawDestroy(playerid, gCurrentPageTextDrawId[playerid]);
	PlayerTextDrawDestroy(playerid, gNextButtonTextDrawId[playerid]);
	PlayerTextDrawDestroy(playerid, gPrevButtonTextDrawId[playerid]);

	gHeaderTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;
    gBackgroundTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;
    gCurrentPageTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;
    gNextButtonTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;
    gPrevButtonTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;
}

stock HandlePlayerItemSelection(playerid, selecteditem)
{
	// In this case we change the player's skin
  	if(gSelectionItemsTag[playerid][selecteditem] >= 0 && gSelectionItemsTag[playerid][selecteditem] < 300)
 	{
		if(!IsAValidSkin(gSelectionItemsTag[playerid][selecteditem])) SendClientMessageEx(playerid, COLOR_GREY, "You cannot purchase restricted skins.");
		else
		{
			SetPlayerSkinEx(playerid, gSelectionItemsTag[playerid][selecteditem]);
			AddBusinessSale(GetPlayerBusiness(playerid), 100, playerid);
			SendClientMessageEx(playerid, COLOR_WHITE, "You have successfully purchased a skin for $100.");
		}
		return;
	}
}

//------------------------------------------------


stock GetPlayerIDFromNumber(number)
{
	foreach(new i: Player)
	{
	    if(PlayerInfo[i][pPhoneNumber] == number) return i;
	}
	return INVALID_PLAYER_ID;
}

stock GetAvailableFishSlot(playerid)
{
	for (new i=0; i < 5; i++)
	{
	    if(PlayerInfo[playerid][pFish][i] == 0)
	    {
	    	return i;
	    }
	}
	return -1;
}

stock GetVehicleName(vehicleid)
{
	new
	    string[20];
    format(string, sizeof(string), "%s", VehicleNames[GetVehicleModel(vehicleid) - 400]);
    return string;
}

stock GetFishNameId(id)
{
	new
	    fish[12];
	if(id == 1) format(fish, sizeof(fish), "Trout");
	else if(id == 3) format(fish, sizeof(fish), "Shark");
	else if(id == 4) format(fish, sizeof(fish), "Squid");
	else if(id == 5) format(fish, sizeof(fish), "Salmon");
	else if(id == 6) format(fish, sizeof(fish), "Manta Ray");
	else format(fish, sizeof(fish), "None");
	return fish;
}

stock IsPlayerAtFuelStation(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 3.0, 1937.65, -1768.93, 13.39) || IsPlayerInRangeOfPoint(playerid, 3.0, 1938.23, -1776.09, 13.39) || IsPlayerInRangeOfPoint(playerid, 3.0, 1944.46, -1776.88, 13.39) || IsPlayerInRangeOfPoint(playerid, 3.0, 1944.38, -1769.09, 13.39) || IsPlayerInRangeOfPoint(playerid, 3.0, 1945.066, -1772.607, 13.227))//Idlewood Gas Station
	{
	    return true;
	}
	return false;
}

stock IsAtFishPlace(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid,1.0,403.8266,-2088.7598,7.8359) || IsPlayerInRangeOfPoint(playerid,1.0,398.7553,-2088.7490,7.8359)) return true;
	else if(IsPlayerInRangeOfPoint(playerid,1.0,396.2197,-2088.6692,7.8359) || IsPlayerInRangeOfPoint(playerid,1.0,391.1094,-2088.7976,7.8359)) return true;
	else if(IsPlayerInRangeOfPoint(playerid,1.0,383.4157,-2088.7849,7.8359) || IsPlayerInRangeOfPoint(playerid,1.0,374.9598,-2088.7979,7.8359)) return true;
	else if(IsPlayerInRangeOfPoint(playerid,1.0,369.8107,-2088.7927,7.8359) || IsPlayerInRangeOfPoint(playerid,1.0,367.3637,-2088.7925,7.8359)) return true;
	else if(IsPlayerInRangeOfPoint(playerid,1.0,362.2244,-2088.7981,7.8359) || IsPlayerInRangeOfPoint(playerid,1.0,354.5382,-2088.7979,7.8359)) return true;
	else return false;
}

stock SendClientMessageToAdmins(text[])
{
	foreach(new i: Player)
	{
	    if(IsAdmin(i, ADMIN_LEVEL_TRIALADMIN))
	    {
	        SendClientMessageEx(i, COLOR_LIGHTRED, text);
	    }
	}
	return 1;
}

stock GetAdministratorRank(i)
{
	new tmpString[21];
	switch(PlayerInfo[i][pAdminLevel])
	{
	    case 0: format(tmpString, sizeof(tmpString), "Level %i Player", PlayerInfo[i][pLevel]);
	    case 1: format(tmpString, sizeof(tmpString), "Server Moderator");
	    case 2: format(tmpString, sizeof(tmpString), "Trial Admin");
	    case 3: format(tmpString, sizeof(tmpString), "Junior Admin");
	    case 4: format(tmpString, sizeof(tmpString), "Senior Admin");
	    case 5: format(tmpString, sizeof(tmpString), "Lead Admin");
		default: format(tmpString, sizeof(tmpString), "Undefined Admin");
	}
	return tmpString;
}


ProxDetector(Float:radi, playerid, string[], col1, col2, col3, col4, col5)
{
    new Float:pPosition[3], Float:oPosition[3];
    GetPlayerPos(playerid, pPosition[0], pPosition[1], pPosition[2]);
    foreach(new i: Player)
    {
        if(GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i) && GetPlayerInterior(playerid) == GetPlayerInterior(i))
        {
	        GetPlayerPos(i, oPosition[0], oPosition[1], oPosition[2]);
	        if(IsPlayerInRangeOfPoint(i, radi / 16, pPosition[0], pPosition[1], pPosition[2])) { SendClientMessageEx(i, col1, string); }
	        else if(IsPlayerInRangeOfPoint(i, radi / 8, pPosition[0], pPosition[1], pPosition[2])) { SendClientMessageEx(i, col2, string); }
	        else if(IsPlayerInRangeOfPoint(i, radi / 4, pPosition[0], pPosition[1], pPosition[2])) { SendClientMessageEx(i, col3, string); }
	        else if(IsPlayerInRangeOfPoint(i, radi / 2, pPosition[0], pPosition[1], pPosition[2])) { SendClientMessageEx(i, col4, string); }
	        else if(IsPlayerInRangeOfPoint(i, radi, pPosition[0], pPosition[1], pPosition[2])) { SendClientMessageEx(i, col5, string); }
        }
    }
    return 1;
}

stock GetWeaponNameEx(weaponid)
{
	new string[32];
	GetWeaponName(weaponid, string, sizeof(string));
	if(weaponid == 0) format(string, sizeof(string), "Fist");
	return string;
}


stock GivePlayerCash(playerid, amount)
{
	PlayerInfo[playerid][pMoney] += amount;
}

stock ReloadPlayerWeapons(playerid)
{
	if(GetPVarInt(playerid, "gPlayerLogged") == 1)
	{
		ResetPlayerWeapons(playerid);
		for(new i=0; i < 12; i++) GivePlayerWeapon(playerid, PlayerInfo[playerid][pWeapons][i], 90000);
	}
}

stock SetPlayerArmourEx(playerid, Float:amount)
{
	PlayerInfo[playerid][pArmour] = amount;
	SetPlayerArmour(playerid, PlayerInfo[playerid][pArmour]);
}

stock GivePlayerWeaponEx(playerid, weaponid)
{
	switch(weaponid)
	{
	    case 0 .. 1:
	    {
	        return 0;
	    }
	    
		case 2 .. 9:
	    {
			PlayerInfo[playerid][pWeapons][1] = weaponid;
			GivePlayerWeapon(playerid, weaponid, 1);
		}

		case 22 .. 24:
	    {
			PlayerInfo[playerid][pWeapons][2] = weaponid;
			GivePlayerWeapon(playerid, weaponid, 20000);
		}

		case 25 .. 27:
	    {
			PlayerInfo[playerid][pWeapons][3] = weaponid;
			GivePlayerWeapon(playerid, weaponid, 20000);
		}

		case 28 .. 29:
	    {
			PlayerInfo[playerid][pWeapons][4] = weaponid;
			GivePlayerWeapon(playerid, weaponid, 20000);
		}

		case 32:
	    {
			PlayerInfo[playerid][pWeapons][4] = weaponid;
			GivePlayerWeapon(playerid, weaponid, 20000);
		}

		case 30 .. 31:
	    {
			PlayerInfo[playerid][pWeapons][5] = weaponid;
			GivePlayerWeapon(playerid, weaponid, 20000);
		}

		case 33 .. 34:
	    {
			PlayerInfo[playerid][pWeapons][6] = weaponid;
			GivePlayerWeapon(playerid, weaponid, 20000);
		}

		case 35 .. 38:
	    {
			PlayerInfo[playerid][pWeapons][7] = weaponid;
			GivePlayerWeapon(playerid, weaponid, 20000);
		}
		
		case 16 .. 18:
	    {
			PlayerInfo[playerid][pWeapons][8] = weaponid;
			GivePlayerWeapon(playerid, weaponid, 20000);
		}
		
		case 39:
	    {
			PlayerInfo[playerid][pWeapons][8] = weaponid;
			GivePlayerWeapon(playerid, weaponid, 20000);
		}
		
		case 41 .. 43:
	    {
			PlayerInfo[playerid][pWeapons][9] = weaponid;
			GivePlayerWeapon(playerid, weaponid, 20000);
		}
		
		case 10 .. 15:
	    {
			PlayerInfo[playerid][pWeapons][10] = weaponid;
			GivePlayerWeapon(playerid, weaponid, 1);
		}
		
		case 44 .. 45:
	    {
			PlayerInfo[playerid][pWeapons][11] = weaponid;
			GivePlayerWeapon(playerid, weaponid, 1);
		}
		
		case 46:
		{
			GivePlayerWeapon(playerid, weaponid, 1);
		}
	}
	SetPlayerArmedWeapon(playerid, weaponid);
	return 1;
}

stock IsPlayerInRangeOfPlayer(playerid, targetid, Float:range=2.0)
{
	new Float:Position[3];
	GetPlayerPos(targetid, Position[0], Position[1], Position[2]);
	return (IsPlayerInRangeOfPoint(playerid, range, Position[0], Position[1], Position[2]));
}

stock RemovePlayerWeaponEx(playerid, slotid)
{
	SetPlayerArmedWeapon(playerid, 0);
	ResetPlayerWeapons(playerid);
	PlayerInfo[playerid][pWeapons][slotid] = 0;
	ReloadPlayerWeapons(playerid);
}

stock SetPlayerInteriorEx(playerid, interior)
{
    PlayerInfo[playerid][pInterior] = interior;
	SetPlayerInterior(playerid, PlayerInfo[playerid][pInterior]);
}

stock SetPlayerVirtualWorldEx(playerid, world)
{
    PlayerInfo[playerid][pVirtualWorld] = world;
	SetPlayerVirtualWorld(playerid, PlayerInfo[playerid][pVirtualWorld]);
}

stock SetPlayerSkinEx(playerid, skinid)
{
	PlayerInfo[playerid][pSkin] = skinid;
	SetPlayerSkin(playerid, skinid);
	ClearAnimations(playerid);
	return 1;
}

SendClientMessageToAllEx(color, message[])
{
	foreach(new i: Player) if(GetPVarInt(i, "gPlayerLogged") == 1) SendClientMessageEx(i, color, message);
	return 1;
}

stock SendClientMessageEx(playerid, color, message[])
{
	if(GetPVarInt(playerid, "gPlayerLogged") == 1)
	{
	    SendClientMessage(playerid, color, message);
		return 1;
	}
	else return 0;
}

stock GetDistanceBetweenTwoPoints( Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2 )
{
    return floatround( floatsqroot( ( ( x1 - x2 ) * ( x1 - x2 ) ) + ( ( y1 - y2 ) * ( y1 - y2 ) ) + ( ( z1 - z2 ) * ( z1 - z2 ) ) ) );
}

stock GetCurrentHour()
{
	new currentHour[3];
	gettime(currentHour[0], currentHour[1], currentHour[2]);
	return currentHour[0];
}

stock IsRPNameText(text[], max_underscores = 3)
{
    new underscores = 0, name[MAX_PLAYER_NAME];
    format(name, sizeof(name), "%s", text);
    if(name[0] < 'A' || name[0] > 'Z') return false;
    for(new i = 1; i < strlen(name); i++)
    {
        if(name[i] != '_' && (name[i] < 'A' || name[i] > 'Z') && (name[i] < 'a' || name[i] > 'z')) return false;
        if((name[i] >= 'A' && name[i] <= 'Z') && (name[i - 1] != '_') ) return false;
        if(name[i] == '_')
        {
            underscores++;
            if(underscores > max_underscores || i == strlen(name)) return false;
            if(name[i + 1] < 'A' || name[i + 1] > 'Z') return false;
        }
    }
    if(underscores == 0) return false;
    return true;
}


stock RecreateWaypointText(w)
{
	new string[128];
	if(IsValidDynamic3DTextLabel(WaypointInfo[w][wTextLabel])) DestroyDynamic3DTextLabel(WaypointInfo[w][wTextLabel]);
	format(string, sizeof(string), "(ID: %i)\n%s", w, WaypointInfo[w][wTextDisplay]);
	WaypointInfo[w][wTextLabel] = CreateDynamic3DTextLabel(string, COLOR_GOLD, WaypointInfo[w][wPosition][0], WaypointInfo[w][wPosition][1], WaypointInfo[w][wPosition][2], 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, WaypointInfo[w][wVirtualWorld], WaypointInfo[w][wInterior]);
}

stock RecreateGangSafeText(familyid)
{
	if(IsValidDynamic3DTextLabel(FamilyInfo[familyid][fSafeDisplay])) DestroyDynamic3DTextLabel(FamilyInfo[familyid][fSafeDisplay]);
	FamilyInfo[familyid][fSafeDisplay] = CreateDynamic3DTextLabel("Family Safe\nType /fsafe to access this gang safe.", COLOR_YELLOW, FamilyInfo[familyid][fSafePosition][0], FamilyInfo[familyid][fSafePosition][1], FamilyInfo[familyid][fSafePosition][2], 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
}

stock RecreateVaultText(factionid)
{
	if(IsValidDynamic3DTextLabel(VaultInfo[factionid][vTextDisplay])) DestroyDynamic3DTextLabel(VaultInfo[factionid][vTextDisplay]);
	VaultInfo[factionid][vTextDisplay] = CreateDynamic3DTextLabel("Faction Vault\nType /vault to access the safe.", COLOR_YELLOW, VaultInfo[factionid][vPosition][0], VaultInfo[factionid][vPosition][1], VaultInfo[factionid][vPosition][2], 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
}
stock RecreateHouseText(h)
{
	if(HouseInfo[h][hExistant])
	{
		new
		    string[256];
		    
		if(HouseInfo[h][hBuyPrice] <= 0) {
		    format(string, sizeof(string), "This house is currently unavailable, you cannot buy it.");
		} else if(!strcmp(HouseInfo[h][hOwner], "none", true)) {
		    format(string, sizeof(string), "This house is on sale for $%s, type /buyhouse to buy it.", convertNumber(HouseInfo[h][hBuyPrice], .iDelim = ","));
  		} else {
		    format(string, sizeof(string), "Owner: %s", HouseInfo[h][hOwner]);
		}
		if(IsValidDynamic3DTextLabel(HouseInfo[h][hTextLabel]))
			DestroyDynamic3DTextLabel(HouseInfo[h][hTextLabel]);
		if(IsValidDynamicPickup(HouseInfo[h][hPickupIcon]))
			DestroyDynamicPickup(HouseInfo[h][hPickupIcon]);
		format(string, sizeof(string), "(ID: %d)\nHouse\n%s", h, string);
		HouseInfo[h][hTextLabel] = CreateDynamic3DTextLabel(string, COLOR_GREEN, HouseInfo[h][hPosition][0], HouseInfo[h][hPosition][1], HouseInfo[h][hPosition][2], 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
		HouseInfo[h][hPickupIcon] = CreateDynamicPickup(1273, 1, HouseInfo[h][hPosition][0], HouseInfo[h][hPosition][1], HouseInfo[h][hPosition][2], 0, 0);
	}
}

stock RecreateGateText(g)
{
	if(IsValidDynamic3DTextLabel(GateInfo[g][gTextDisplay]))
	    DestroyDynamic3DTextLabel(GateInfo[g][gTextDisplay]);
	new string[128];
	format(string, sizeof(string), "(ID: %d)", g);
	GateInfo[g][gTextDisplay] = CreateDynamic3DTextLabel(string, COLOR_LIGHTBLUE, GateInfo[g][gPosition][0], GateInfo[g][gPosition][1], GateInfo[g][gPosition][2], 10.0);
}

stock RecreateBusinessText(b)
{
	if(BusinessInfo[b][bExistant])
	{
		new string[256];
			
		if(BusinessInfo[b][bBuyPrice] <= 0)
		{
		    format(string, sizeof(string), "[{FF0000}Unavailable{FFFFFF}]: Not For Sale");
		}
		else if(!strcmp(BusinessInfo[b][bOwner], "none", true))
		{
		    format(string, sizeof(string), "[{00FF22}For Sale{FFFFFF}]: $%s (/buybiz)", convertNumber(BusinessInfo[b][bBuyPrice], .iDelim = ","));
  		}
  		else
		{
		    format(string, sizeof(string), "Owner: %s", BusinessInfo[b][bOwner]);
		}

		if(BusinessInfo[b][bOpen])
		{
			format(string, sizeof(string), "{FFFFFF}(ID: %d)\n[{00FF22}Open{FFFFFF}]\n%s\nName: %s{FFFFFF}", b, string, BusinessInfo[b][bName]);
		} else
		{
			format(string, sizeof(string), "{FFFFFF}(ID: %d)\n[{FF0000}Closed{FFFFFF}]\n%s\nName: %s{FFFFFF}", b, string, BusinessInfo[b][bName]);
		}
		if(IsValidDynamic3DTextLabel(BusinessInfo[b][bTextLabel])) DestroyDynamic3DTextLabel(BusinessInfo[b][bTextLabel]);
		if(IsValidDynamicMapIcon(BusinessInfo[b][bMapIcon])) DestroyDynamicMapIcon(BusinessInfo[b][bMapIcon]);
		if(GetBusinessMapIcon(b) != 0) BusinessInfo[b][bMapIcon] = CreateDynamicMapIcon(BusinessInfo[b][bPosition][0], BusinessInfo[b][bPosition][1], BusinessInfo[b][bPosition][2], GetBusinessMapIcon(b), 0, 0, 0);
		BusinessInfo[b][bTextLabel] = CreateDynamic3DTextLabel(string, COLOR_WHITE, BusinessInfo[b][bPosition][0], BusinessInfo[b][bPosition][1], BusinessInfo[b][bPosition][2], 20.0);
	}
}

stock AddBusinessSale(b, amount, playerid)
{
	if(!strcmp(BusinessInfo[b][bOwner], PlayerInfo[playerid][pUsername], true)) SendClientMessageEx(playerid, COLOR_WHITE, "The items were {00B30F}FREE{FFFFFF} because you are the owner of the business.");
	else
	{
		GivePlayerCash(playerid, -amount);
		AddBusinessEarnings(b, amount);
	}
}

stock AddBusinessEarnings(b, amount)
{
	if(BusinessInfo[b][bExistant] == 0) return 0;
	new string[128];
	BusinessInfo[b][bEarnings] += amount;
	format(string, sizeof(string), "UPDATE `businesses` SET `Earnings` = '%d' WHERE `Id` = '%d'", BusinessInfo[b][bEarnings], b);
	mysql_query(string, THREAD_NO_RESULT, INVALID_PLAYER_ID, mConnectionHandle);
	format(string, sizeof(string), "A sale was made at your business, you have earned $%d and your business earnings are now $%d.", amount, BusinessInfo[b][bEarnings]);
	foreach (new i: Player)
	{
		if(!strcmp(BusinessInfo[b][bOwner], PlayerInfo[i][pUsername], true))
		{
			SendClientMessage(i, COLOR_WHITE, string);
			SendClientMessage(i, COLOR_WHITE, "You can collect your business earnings by using the command /business when near your business.");
			break;
		}
	}
	return 1;
}

timer HideLoadingTextdraws[3000](playerid)
{
	if(GetPVarInt(playerid, "SobeitCheck") == 0)
	{
		new Float:x, Float:y, Float:z;
		GetPlayerCameraFrontVector(playerid, x, y, z);
	 	#pragma unused x
	  	#pragma unused y
	   	if(z < -0.8)
	   	{
	   	    new string[128];
	   	    if(!AreAnyAdministratorsOnline() && !IsAdmin(playerid, ADMIN_LEVEL_MODERATOR))
	   	    {
	   	        DeletePVar(playerid, "SobeitCheck");
				SendClientMessageEx(playerid, COLOR_GREY, "You have been kicked from the server for using s0beit modifications. Please uninstall it and relog.");
				defer KickTimer(playerid);
		   	    return 0;
	   	    }
	   	    else if(!IsAdmin(playerid, ADMIN_LEVEL_TRIALADMIN))
	   	    {
				format(string, sizeof(string), "{FF6347}AdmWarning:{FFFF00} %s has joined the server with the s0beit modification.", PlayerInfo[playerid][pUsername]);
				AdminAlert(string, ALERT_ADMINS);
  				SetPVarInt(playerid, "SobeitCheck", 1);
	   	    }
		}
	}
	TogglePlayerControllable(playerid, true);
	DeletePVar(playerid, "ActionRestriction");
	TextDrawHideForPlayer(playerid, LoadingObjectTextDraw);
	TextDrawHideForPlayer(playerid, LoadingObjectBox);
	return 1;
}

stock ApplyPlayerAnimation(playerid, animlib[], animname[], Float:fDelta, loop, lockx, locky, freeze, time)
{
    ApplyAnimation(playerid, animlib, "null", fDelta, loop, lockx, locky, freeze, time, 1);
    return ApplyAnimation(playerid, animlib, animname, fDelta, loop, lockx, locky, freeze, time, 1);
}

stock AntiDeAMX()
{
    new a[][] =
    {
        "Unarmed (Fist)",
        "Brass K"
    };
    #pragma unused a
}

ProcessPlayerDamage(playerid, damagedid, weaponid)
{
	if(GetPlayerState(damagedid) == PLAYER_STATE_WASTED) return 0;

	switch (weaponid)
	{
	    case WEAPON_DEAGLE:
	    {
     		if(IsPlayerInRangeOfPlayer(playerid, damagedid, 12.5))
			 {
				DeductPlayerDamage(damagedid, 75.0);
			}
			else
			{
				DeductPlayerDamage(damagedid, 30.0);
			}
	    }

	    case WEAPON_SILENCED:
	    {
	     	if(IsPlayerInRangeOfPlayer(playerid, damagedid, 12.5))
			 {
				DeductPlayerDamage(damagedid, 50.0);
			}
			else
			{
				DeductPlayerDamage(damagedid, 25.0);
			}
  	    }

	    case WEAPON_COLT45:
	    {
     		if(IsPlayerInRangeOfPlayer(playerid, damagedid, 12.5)) {
				DeductPlayerDamage(damagedid, 20.0);
			} else {
				DeductPlayerDamage(damagedid, 12.5);
			}
	    }

	    case WEAPON_KATANA:
	    {
     		if(IsPlayerInRangeOfPlayer(playerid, damagedid, 3.0)) {
				DeductPlayerDamage(damagedid, 25.0);
			}
	    }

	    case WEAPON_KNIFE:
	    {
     		if(IsPlayerInRangeOfPlayer(playerid, damagedid, 3.0)) {
				DeductPlayerDamage(damagedid, 35.0);
			}
	    }

	    case WEAPON_CHAINSAW:
	    {
     		if(IsPlayerInRangeOfPlayer(playerid, damagedid, 3.0)) {
				DeductPlayerDamage(damagedid, 200.0);
			}
	    }
	    
	    case WEAPON_AK47:
	    {
     		if(IsPlayerInRangeOfPlayer(playerid, damagedid, 6.5)) {
				DeductPlayerDamage(damagedid, 34.0);
			} else {
				DeductPlayerDamage(damagedid, 10.0);
			}
		}
	    
	    case WEAPON_M4:
	    {
     		if(IsPlayerInRangeOfPlayer(playerid, damagedid, 9.5)) {
				DeductPlayerDamage(damagedid, 25.0);
			} else {
				DeductPlayerDamage(damagedid, 15.0);
			}
	    }
	    
	    case WEAPON_MP5:
	    {
     		if(IsPlayerInRangeOfPlayer(playerid, damagedid, 7.0)) {
				DeductPlayerDamage(damagedid, 25.0);
			} else {
				DeductPlayerDamage(damagedid, 5.0);
			}
	    }
	    
	    case WEAPON_TEC9:
	    {
     		if(IsPlayerInRangeOfPlayer(playerid, damagedid, 5.0)) {
				DeductPlayerDamage(damagedid, 15.0);
			} else {
				DeductPlayerDamage(damagedid, 2.5);
			}
	    }
	    
	    case WEAPON_UZI:
	    {
     		if(IsPlayerInRangeOfPlayer(playerid, damagedid, 5.0)) {
				DeductPlayerDamage(damagedid, 15.0);
			} else {
				DeductPlayerDamage(damagedid, 2.5);
			}
	    }

	    case WEAPON_SHOTGUN:
	    {
     		if(IsPlayerInRangeOfPlayer(playerid, damagedid, 7.0)) {
				DeductPlayerDamage(damagedid, 100.0);
			} else {
				DeductPlayerDamage(damagedid, 20.0);
			}
	    }

	    case WEAPON_SHOTGSPA:
	    {
     		if(IsPlayerInRangeOfPlayer(playerid, damagedid, 6.0))
			 {
				DeductPlayerDamage(damagedid, 60.0);
			} else
			{
				DeductPlayerDamage(damagedid, 30.0);
			}
	    }

	    case WEAPON_RIFLE:
		{
			DeductPlayerDamage(damagedid, 100.0);
		}
		
	    case WEAPON_SNIPER:
		{
			DeductPlayerDamage(damagedid, 200.0);
		}
	}
	return 1;
}

stock DeductPlayerDamage(playerid, Float:damage, Float:multiplier=1.0)
{
	WeaponDamage[playerid] = damage * multiplier;
	new Float:health, Float:armour;
	GetPlayerHealth(playerid, health);
	GetPlayerArmour(playerid, armour);
	if(armour > 0)
	{
	    if(armour - (damage * multiplier) <= 0) {
	    	SetPlayerArmourEx(playerid, 0);
	    	if(health - floatabs(armour - (damage * multiplier)) <= 0)
	    	{
			    if(GetPlayerState(playerid) != PLAYER_STATE_WASTED)
			    {
			    	SetPlayerHealthEx(playerid, 0);
		    	}
	    	}
	    	else
	    	{
	    		SetPlayerHealthEx(playerid, health - floatabs(armour - (damage * multiplier)));
	    	}
		} else {
	    	SetPlayerArmourEx(playerid, armour - (damage * multiplier));
		}
	}
	else
	{
		if(health - (damage * multiplier) <= 0) {
		    if(GetPlayerState(playerid) != PLAYER_STATE_WASTED)
		    {
			    SetPlayerHealthEx(playerid, 0);
			}
		} else {
		    SetPlayerHealthEx(playerid, health - (damage * multiplier));
		}
	}
	return false;//the result doesnt make the target die
}

stock SetPlayerHealthEx(playerid, Float:amount)
{
	PlayerInfo[playerid][pHealth] = amount;
    SetPlayerHealth(playerid, amount);
	return 1;
}

stock IsNumeric(const string[])
{
	for (new i = 0, j = strlen(string); i < j; i++) {
		if(string[i] > '9' || string[i] < '0') return false;
	}
	return true;
}

stock GetPlayerSpeed(playerid, bool:kmh) // by misco
{
    new Float:Vx,Float:Vy,Float:Vz,Float:rtn;
    if(IsPlayerInAnyVehicle(playerid)) GetVehicleVelocity(GetPlayerVehicleID(playerid),Vx,Vy,Vz); else GetPlayerVelocity(playerid,Vx,Vy,Vz);
    rtn = floatsqroot(floatabs(floatpower(Vx + Vy + Vz,2)));
    return kmh?floatround(rtn * 100 * 1.61):floatround(rtn * 100);
}

stock GetPlayerNameEx(playerid)
{
	new pName[MAX_PLAYER_NAME];
	strmid(pName, PlayerInfo[playerid][pUsername], 0, MAX_PLAYER_NAME);
	char_replace(pName, '_', ' ');
	return pName;
}

stock GetClosestCar(playerid) {
	new
		Float: fVehiclePos[3];
	for(new i = 0; i < MAX_VEHICLES; i++)
	{
		if(GetVehicleModel(i) == 0) continue;
		GetVehiclePos(i, fVehiclePos[0], fVehiclePos[1], fVehiclePos[2]);
		if(IsPlayerInRangeOfPoint(playerid, 5.0, fVehiclePos[0], fVehiclePos[1], fVehiclePos[2])) {
		    return i;
		}
	}
	return INVALID_VEHICLE_ID;
}

stock SendHitmanMessage(color, string[])
{
	foreach(Player, i)
	{
		if(PlayerInfo[i][pHitman] > 0)
		{
		    SendClientMessage(i, color, string);
		}
	}
	return 1;
}

stock IsAdmin(playerid, level)
{
	return PlayerInfo[playerid][pAdminLevel] >= level || IsPlayerAdmin(playerid);
}


SetPlayerToTeamColor(playerid)
{
	if(PlayerInfo[playerid][pJob] == 5 && PlayerInfo[playerid][pDuty] == 1) SetPlayerColor(playerid, COLOR_LIGHTYELLOW);
	else if(PlayerInfo[playerid][pJailTime] > 0) SetPlayerColor(playerid, COLOR_ORANGE);
	else if(PlayerInfo[playerid][pFaction] == 1 && PlayerInfo[playerid][pDuty] == 1) SetPlayerColor(playerid, TEAM_COLOR_LSPD);
	else if(PlayerInfo[playerid][pFaction] == 2 && PlayerInfo[playerid][pDuty] == 1) SetPlayerColor(playerid, TEAM_COLOR_GOV);
	else if(PlayerInfo[playerid][pFaction] == 3 && PlayerInfo[playerid][pDuty] == 1) SetPlayerColor(playerid, TEAM_COLOR_LSFMD);
	else if(PlayerInfo[playerid][pFaction] == 5 && PlayerInfo[playerid][pDuty] == 1) SetPlayerColor(playerid, TEAM_COLOR_NEWS);
	else if(PlayerInfo[playerid][pFaction] == 6 && PlayerInfo[playerid][pDuty] == 1) SetPlayerColor(playerid, TEAM_COLOR_FBI);
	else if(PlayerInfo[playerid][pFaction] == 7 && PlayerInfo[playerid][pDuty] == 1) SetPlayerColor(playerid, TEAM_COLOR_DOC);
	else SetPlayerColor(playerid, COLOR_WHITE);
}

stock AddPhoneNumber(number)
{
    if(fexist("numbers_used.txt") && IsNumberAvailable(number))
    {
		new File:f = fopen("numbers_used.txt", io_append), buffer[10];
		format(buffer, sizeof(buffer), "%d\r\n", number);
		fwrite(f, buffer);
		fclose(f);
		printf("[Phone]: %d was added to the database.", number);
    }
}

stock IsNumberAvailable(number)
{
	if(fexist("numbers_used.txt"))
    {
		new File:f = fopen("numbers_used.txt", io_read), buffer[8];
        while(fread(f, buffer)) if(strval(buffer) == number) return false;
		fclose(f);
	}
    return true;
}

stock DeletePhoneNumber(number)
{
	if(!IsNumberAvailable(number))
	{
	    new num[8], buffer[10];
		format(num, sizeof(num), "%d", number);
  		new File:f = fopen("numbers_used.txt", io_read), idx = 1;
	    while(fread(f, buffer))
	    {
	        printf("%s", buffer);
	        if(!strcmp(buffer, num, true, strlen(num)))
	        {
				printf("%d was removed from the phone database.", number);
	            fdeleteline("numbers_used.txt", idx);
	            break;
	        }
	        idx++;
	    }
	    fclose(f);
	}
}

stock IsACop(playerid)
{
	return (PlayerInfo[playerid][pFaction] == 1 || PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pFaction] == 6 || PlayerInfo[playerid][pFaction] == 7);
}

fdeleteline(filename[], line)
{
	new count, string[256], File:file, File:temp;

	file= fopen(filename, io_read);
	temp = fopen("tmpfile.tmp", io_write);

	while (fread(file, string))
		if(++count != line)
      		fwrite(temp, string);

	fclose(file);
	fclose(temp);

	file= fopen(filename, io_write);
	temp = fopen("tmpfile.tmp", io_read);

	while (fread(temp, string))
		fwrite(file, string);

	fclose(file);
	fclose(temp);
	fremove("tmpfile.tmp");
}

stock Log(sz_fileName[], sz_input[])
{

	new sz_logEntry[156], i_dateTime[2][3], File: fileHandle = fopen(sz_fileName, io_append);

	gettime(i_dateTime[0][0], i_dateTime[0][1], i_dateTime[0][2]);
	getdate(i_dateTime[1][0], i_dateTime[1][1], i_dateTime[1][2]);

	format(sz_logEntry, sizeof(sz_logEntry), "[%i/%i/%i - %i:%i:%i] %s\r\n", i_dateTime[1][0], i_dateTime[1][1], i_dateTime[1][2], i_dateTime[0][0], i_dateTime[0][1], i_dateTime[0][2], sz_input);
	fwrite(fileHandle, sz_logEntry);
	return fclose(fileHandle);
}

stock char_replace(string[], oldchar, newchar)
{
	for(new i = 0; i < strlen(string); i++)
	{
		if(string[i] == oldchar)
		{
		    string[i] = newchar;
		}
	}
}

ShowPlayerDialogEx(playerid, dialogid, style, caption[], info[], button1[], button2[])
{
    CurrentDialog[playerid] = dialogid;
	return ShowPlayerDialog(playerid, dialogid, style, caption, info, button1, button2);
}

stock convertNumber(iValue, iDelim[2] = ".", szNum[15] = "", iSize = sizeof(szNum)) {
    format(szNum, iSize, "%d", iValue < 0 ? -iValue : iValue);

    for(new i = strlen(szNum) - 3; i > 0; i -= 3) {
        strins(szNum, iDelim, i, iSize);
    }
    if(iValue < 0) {
        strins(szNum, "-", 0, iSize);
    }
    return szNum;
}

stock GetPlayerIPAddress(playerid)
{
	new
	    Ip[16];
	GetPlayerIp(playerid, Ip, sizeof(Ip));
	return Ip;
}

stock GetPlayerZone(playerid)
{
	new
	    zoneName[28];
    GetPlayer3DZone(playerid, zoneName, 28);
    return zoneName;
}

stock GetBanType(type)
{
	new
		banType[11];
	switch (type)
	{
	    case BAN_TEMPORARY: { banType = "Temporary"; }
	    case BAN_PERMANENT: { banType = "Permanent"; }
	    default: { banType = "Undefined"; }
	}
	return banType;
}

IsPlayerConnectedEx(playerid)
{
	return playerid >= 0 && playerid < GetMaxPlayers() && IsPlayerConnected(playerid) && !IsPlayerNPC(playerid);
}

stock split(const strsrc[], strdest[][], delimiter = '|')
{
	new i, li, aNum, len, srclen = strlen(strsrc);
	while(i <= srclen)
	{
		if(strsrc[i] == delimiter || i == srclen)
		{
			len = strmid(strdest[aNum], strsrc, li, i, 128);
			strdest[aNum][len] = 0;
			li = i + 1;
			aNum++;
		}
		i++;
	}
}

stock gettimestamp (timestamp, _form=0)
{
    /*
		~ author: http://forum.sa-mp.com/showpost.php?p=334797&postcount=471
        ~ convert a Timestamp to a Date.
        ~ 10.07.2009

        date( 1247182451 )  will print >> 09.07.2009-23:34:11
        date( 1247182451, 1) will print >> 09/07/2009, 23:34:11
        date( 1247182451, 2) will print >> July 09, 2009, 23:34:11
        date( 1247182451, 3) will print >> 9 Jul 2009, 23:34
    */

    new
        year=1970, day=0, month=0, hour=0, mins=0, sec=0,
		days_of_month[12] = { 31,28,31,30,31,30,31,31,30,31,30,31 },
    	names_of_month[12][10] = {"January","February","March","April","May","June","July","August","September","October","November","December"},
    	returnstring[32];

    while(timestamp>31622400)
	{
        timestamp -= 31536000;
        if( ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0) ) timestamp -= 86400;
        year++;
    }

    if(((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0)) days_of_month[1] = 29;
    else days_of_month[1] = 28;


    while(timestamp>86400)
	{
        timestamp -= 86400, day++;
        if(day==days_of_month[month]) day=0, month++;
    }

    while(timestamp>60)
	{
        timestamp -= 60, mins++;
        if( mins == 60) mins=0, hour++;
    }

    sec=timestamp;

    switch( _form )
	{
        case 1: format(returnstring, 31, "%02d/%02d/%d %02d:%02d:%02d", day+1, month+1, year, hour, mins, sec);
        case 2: format(returnstring, 31, "%s %02d, %d, %02d:%02d:%02d", names_of_month[month],day+1,year, hour, mins, sec);
        case 3: format(returnstring, 31, "%d %c%c%c %d, %02d:%02d", day+1,names_of_month[month][0],names_of_month[month][1],names_of_month[month][2], year,hour,mins);

        default: format(returnstring, 31, "%02d.%02d.%d-%02d:%02d:%02d", day+1, month+1, year, hour, mins, sec);
    }

    return returnstring;
}
